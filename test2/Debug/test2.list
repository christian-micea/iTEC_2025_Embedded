
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008b58  08008b58  00009b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b74  08008b74  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008b74  08008b74  00009b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b7c  08008b7c  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b7c  08008b7c  00009b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b80  08008b80  00009b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008b84  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014992  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003878  00000000  00000000  0001ea3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  000222b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1f  00000000  00000000  000233f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002346f  00000000  00000000  00024117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c01  00000000  00000000  00047586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbdbd  00000000  00000000  00061187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012cf44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ac4  00000000  00000000  0012cf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00131a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b40 	.word	0x08008b40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008b40 	.word	0x08008b40

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc00 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f818 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f914 	bl	800072c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f87e 	bl	8000604 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8aa 	bl	8000660 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8d8 	bl	80006c0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f007 fec0 	bl	8008294 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000514:	f007 fee4 	bl	80082e0 <MX_USB_HOST_Process>

    HAL_GPIO_TogglePin(GPIOD, BLUE_LED);
 8000518:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800051c:	4803      	ldr	r0, [pc, #12]	@ (800052c <main+0x38>)
 800051e:	f000 ff4a 	bl	80013b6 <HAL_GPIO_TogglePin>

    HAL_Delay(100);
 8000522:	2064      	movs	r0, #100	@ 0x64
 8000524:	f000 fc5c 	bl	8000de0 <HAL_Delay>
    MX_USB_HOST_Process();
 8000528:	bf00      	nop
 800052a:	e7f3      	b.n	8000514 <main+0x20>
 800052c:	40020c00 	.word	0x40020c00

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	@ 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f008 fa70 	bl	8008a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	@ (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	@ (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	@ (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fe30 	bl	800421c <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f9b1 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 f891 	bl	800470c <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f99a 	bl	8000928 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	@ 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	@ (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	@ (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f003 f807 	bl	8003654 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f96c 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000098 	.word	0x20000098
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <MX_I2S3_Init+0x54>)
 8000666:	4a14      	ldr	r2, [pc, #80]	@ (80006b8 <MX_I2S3_Init+0x58>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000670:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_I2S3_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <MX_I2S3_Init+0x54>)
 8000680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000684:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <MX_I2S3_Init+0x54>)
 8000688:	4a0c      	ldr	r2, [pc, #48]	@ (80006bc <MX_I2S3_Init+0x5c>)
 800068a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <MX_I2S3_Init+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_I2S3_Init+0x54>)
 80006a0:	f003 f91c 	bl	80038dc <HAL_I2S_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006aa:	f000 f93d 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000ec 	.word	0x200000ec
 80006b8:	40003c00 	.word	0x40003c00
 80006bc:	00017700 	.word	0x00017700

080006c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c4:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	@ (8000728 <MX_SPI1_Init+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_SPI1_Init+0x64>)
 800070c:	220a      	movs	r2, #10
 800070e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_SPI1_Init+0x64>)
 8000712:	f004 fb49 	bl	8004da8 <HAL_SPI_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800071c:	f000 f904 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000134 	.word	0x20000134
 8000728:	40013000 	.word	0x40013000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	@ 0x30
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4b72      	ldr	r3, [pc, #456]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a71      	ldr	r2, [pc, #452]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b6f      	ldr	r3, [pc, #444]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b6b      	ldr	r3, [pc, #428]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a6a      	ldr	r2, [pc, #424]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b68      	ldr	r3, [pc, #416]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b64      	ldr	r3, [pc, #400]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a63      	ldr	r2, [pc, #396]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b61      	ldr	r3, [pc, #388]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b5d      	ldr	r3, [pc, #372]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a5c      	ldr	r2, [pc, #368]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b56      	ldr	r3, [pc, #344]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a55      	ldr	r2, [pc, #340]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b53      	ldr	r3, [pc, #332]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a4e      	ldr	r2, [pc, #312]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b4c      	ldr	r3, [pc, #304]	@ (8000910 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	4849      	ldr	r0, [pc, #292]	@ (8000914 <MX_GPIO_Init+0x1e8>)
 80007f0:	f000 fdc8 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	4847      	ldr	r0, [pc, #284]	@ (8000918 <MX_GPIO_Init+0x1ec>)
 80007fa:	f000 fdc3 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fe:	2200      	movs	r2, #0
 8000800:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000804:	4845      	ldr	r0, [pc, #276]	@ (800091c <MX_GPIO_Init+0x1f0>)
 8000806:	f000 fdbd 	bl	8001384 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	483c      	ldr	r0, [pc, #240]	@ (8000914 <MX_GPIO_Init+0x1e8>)
 8000822:	f000 fc13 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	@ (8000918 <MX_GPIO_Init+0x1ec>)
 800083e:	f000 fc05 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	482e      	ldr	r0, [pc, #184]	@ (8000918 <MX_GPIO_Init+0x1ec>)
 800085e:	f000 fbf5 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000866:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482a      	ldr	r0, [pc, #168]	@ (8000920 <MX_GPIO_Init+0x1f4>)
 8000878:	f000 fbe8 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800087c:	2304      	movs	r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4825      	ldr	r0, [pc, #148]	@ (8000924 <MX_GPIO_Init+0x1f8>)
 8000890:	f000 fbdc 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481c      	ldr	r0, [pc, #112]	@ (8000924 <MX_GPIO_Init+0x1f8>)
 80008b2:	f000 fbcb 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4813      	ldr	r0, [pc, #76]	@ (800091c <MX_GPIO_Init+0x1f0>)
 80008d0:	f000 fbbc 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	@ (800091c <MX_GPIO_Init+0x1f0>)
 80008e8:	f000 fbb0 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_GPIO_Init+0x1e8>)
 8000902:	f000 fba3 	bl	800104c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	@ 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40020000 	.word	0x40020000
 8000924:	40020400 	.word	0x40020400

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	@ (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000948:	6453      	str	r3, [r2, #68]	@ 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	@ (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000972:	2007      	movs	r0, #7
 8000974:	f000 fb28 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	@ (8000a08 <HAL_I2C_MspInit+0x84>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d12c      	bne.n	8000a00 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <HAL_I2C_MspInit+0x88>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_I2C_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009c2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c8:	2312      	movs	r3, #18
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d4:	2304      	movs	r3, #4
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <HAL_I2C_MspInit+0x8c>)
 80009e0:	f000 fb34 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <HAL_I2C_MspInit+0x88>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	@ 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400

08000a14 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	@ 0x38
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a31      	ldr	r2, [pc, #196]	@ (8000b04 <HAL_I2S_MspInit+0xf0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d15a      	bne.n	8000afa <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a44:	2301      	movs	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a48:	23c0      	movs	r3, #192	@ 0xc0
 8000a4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 f865 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a60:	f7ff ff62 	bl	8000928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6c:	4a26      	ldr	r2, [pc, #152]	@ (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a74:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a88:	4a1f      	ldr	r2, [pc, #124]	@ (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a90:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	4a18      	ldr	r2, [pc, #96]	@ (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac8:	2306      	movs	r3, #6
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480e      	ldr	r0, [pc, #56]	@ (8000b0c <HAL_I2S_MspInit+0xf8>)
 8000ad4:	f000 faba 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ad8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aea:	2306      	movs	r3, #6
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4806      	ldr	r0, [pc, #24]	@ (8000b10 <HAL_I2S_MspInit+0xfc>)
 8000af6:	f000 faa9 	bl	800104c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000afa:	bf00      	nop
 8000afc:	3738      	adds	r7, #56	@ 0x38
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40003c00 	.word	0x40003c00
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	40020800 	.word	0x40020800

08000b14 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	@ 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	@ (8000b98 <HAL_SPI_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	4a17      	ldr	r2, [pc, #92]	@ (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b6e:	23e0      	movs	r3, #224	@ 0xe0
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <HAL_SPI_MspInit+0x8c>)
 8000b8a:	f000 fa5f 	bl	800104c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	@ 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40013000 	.word	0x40013000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfa:	f000 f8d1 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <OTG_FS_IRQHandler+0x10>)
 8000c0a:	f000 fecf 	bl	80019ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000570 	.word	0x20000570

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f007 ff04 	bl	8008a54 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	2000018c 	.word	0x2000018c
 8000c80:	20000a98 	.word	0x20000a98

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f007 fec3 	bl	8008a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc0b 	bl	80004f4 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000cec:	08008b84 	.word	0x08008b84
  ldr r2, =_sbss
 8000cf0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000cf4:	20000a98 	.word	0x20000a98

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f94f 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8000d30:	f7ff fe00 	bl	8000934 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f967 	bl	8001032 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
		return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f92f 	bl	8000fde <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
		return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000190 	.word	0x20000190

08000dc8 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000190 	.word	0x20000190

08000de0 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
	}
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	@ (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	@ (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	@ 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e16b      	b.n	8001340 <HAL_GPIO_Init+0x2f4>
		/* Get the IO position */
		ioposition = 0x01U << position;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 815a 	bne.w	800133a <HAL_GPIO_Init+0x2ee>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d130      	bne.n	8001100 <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	f003 0201 	and.w	r2, r3, #1
						<< position);
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80b4 	beq.w	800133a <HAL_GPIO_Init+0x2ee>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b60      	ldr	r3, [pc, #384]	@ (8001358 <HAL_GPIO_Init+0x30c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	4a5f      	ldr	r2, [pc, #380]	@ (8001358 <HAL_GPIO_Init+0x30c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001358 <HAL_GPIO_Init+0x30c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 80011ee:	4a5b      	ldr	r2, [pc, #364]	@ (800135c <HAL_GPIO_Init+0x310>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a52      	ldr	r2, [pc, #328]	@ (8001360 <HAL_GPIO_Init+0x314>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d02b      	beq.n	8001272 <HAL_GPIO_Init+0x226>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a51      	ldr	r2, [pc, #324]	@ (8001364 <HAL_GPIO_Init+0x318>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x222>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a50      	ldr	r2, [pc, #320]	@ (8001368 <HAL_GPIO_Init+0x31c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x21e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	@ (800136c <HAL_GPIO_Init+0x320>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x21a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4e      	ldr	r2, [pc, #312]	@ (8001370 <HAL_GPIO_Init+0x324>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x216>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4d      	ldr	r2, [pc, #308]	@ (8001374 <HAL_GPIO_Init+0x328>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x212>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4c      	ldr	r2, [pc, #304]	@ (8001378 <HAL_GPIO_Init+0x32c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x20e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4b      	ldr	r2, [pc, #300]	@ (800137c <HAL_GPIO_Init+0x330>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x20a>
 8001252:	2307      	movs	r3, #7
 8001254:	e00e      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001256:	2308      	movs	r3, #8
 8001258:	e00c      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800125a:	2306      	movs	r3, #6
 800125c:	e00a      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800125e:	2305      	movs	r3, #5
 8001260:	e008      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001262:	2304      	movs	r3, #4
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001266:	2303      	movs	r3, #3
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800126a:	2302      	movs	r3, #2
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001272:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	f002 0203 	and.w	r2, r2, #3
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 8001284:	4935      	ldr	r1, [pc, #212]	@ (800135c <HAL_GPIO_Init+0x310>)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8001292:	4b3b      	ldr	r3, [pc, #236]	@ (8001380 <HAL_GPIO_Init+0x334>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x26a>
					temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 80012b6:	4a32      	ldr	r2, [pc, #200]	@ (8001380 <HAL_GPIO_Init+0x334>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 80012bc:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <HAL_GPIO_Init+0x334>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x294>
					temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 80012e0:	4a27      	ldr	r2, [pc, #156]	@ (8001380 <HAL_GPIO_Init+0x334>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 80012e6:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <HAL_GPIO_Init+0x334>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x2be>
					temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 800130a:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <HAL_GPIO_Init+0x334>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <HAL_GPIO_Init+0x334>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x2e8>
					temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 8001334:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <HAL_GPIO_Init+0x334>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b0f      	cmp	r3, #15
 8001344:	f67f ae90 	bls.w	8001068 <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40013800 	.word	0x40013800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020400 	.word	0x40020400
 8001368:	40020800 	.word	0x40020800
 800136c:	40020c00 	.word	0x40020c00
 8001370:	40021000 	.word	0x40021000
 8001374:	40021400 	.word	0x40021400
 8001378:	40021800 	.word	0x40021800
 800137c:	40021c00 	.word	0x40021c00
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_GPIO_TogglePin>:
 * @param  GPIOx Where x can be (A..K) to select the GPIO peripheral for STM32F429X device or
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin Specifies the pins to be toggled.
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	/* get current Output Data Register value */
	odr = GPIOx->ODR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	60fb      	str	r3, [r7, #12]

	/* Set selected pins that were at low level, and reset ones that were high */
	GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	041a      	lsls	r2, r3, #16
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	400b      	ands	r3, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HAL_HCD_Init>:
/**
 * @brief  Initialize the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af02      	add	r7, sp, #8
 80013f0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
	const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

	/* Check the HCD handle allocation */
	if (hhcd == NULL) {
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_HCD_Init+0x12>
		return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e059      	b.n	80014b0 <HAL_HCD_Init+0xc6>

	/* Check the parameters */
	assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
	USBx = hhcd->Instance;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

	if (hhcd->State == HAL_HCD_STATE_RESET) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_HCD_Init+0x32>
		/* Allocate lock resource and initialize it */
		hhcd->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_HCD_MspInit(hhcd);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f006 ff9a 	bl	8008350 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
	}

	hhcd->State = HAL_HCD_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
	/* Disable DMA mode for FS instance */
	if (USBx == USB_OTG_FS) {
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800142a:	d102      	bne.n	8001432 <HAL_HCD_Init+0x48>
		hhcd->Init.dma_enable = 0U;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	719a      	strb	r2, [r3, #6]
	}
#endif /* defined (USB_OTG_FS) */

	/* Disable the Interrupts */
	__HAL_HCD_DISABLE(hhcd);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fdb4 	bl	8004fa4 <USB_DisableGlobalInt>

	/* Init the Core (common init.) */
	if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7c1a      	ldrb	r2, [r3, #16]
 8001444:	f88d 2000 	strb.w	r2, [sp]
 8001448:	3304      	adds	r3, #4
 800144a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800144c:	f003 fd35 	bl	8004eba <USB_CoreInit>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_HCD_Init+0x78>
		hhcd->State = HAL_HCD_STATE_ERROR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2202      	movs	r2, #2
 800145a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e026      	b.n	80014b0 <HAL_HCD_Init+0xc6>
	}

	/* Force Host Mode */
	if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK) {
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2101      	movs	r1, #1
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fdac 	bl	8004fc6 <USB_SetCurrentMode>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_HCD_Init+0x96>
		hhcd->State = HAL_HCD_STATE_ERROR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e017      	b.n	80014b0 <HAL_HCD_Init+0xc6>
	}

	/* Init Host */
	if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK) {
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7c1a      	ldrb	r2, [r3, #16]
 8001488:	f88d 2000 	strb.w	r2, [sp]
 800148c:	3304      	adds	r3, #4
 800148e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001490:	f003 ff4e 	bl	8005330 <USB_HostInit>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <HAL_HCD_Init+0xbc>
		hhcd->State = HAL_HCD_STATE_ERROR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2202      	movs	r2, #2
 800149e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e004      	b.n	80014b0 <HAL_HCD_Init+0xc6>
	}

	hhcd->State = HAL_HCD_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

	return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_HCD_HC_Init>:
 *          This parameter can be a value from 0 to32K
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
		uint8_t epnum, uint8_t dev_address, uint8_t speed, uint8_t ep_type,
		uint16_t mps) {
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b08b      	sub	sp, #44	@ 0x2c
 80014bc:	af04      	add	r7, sp, #16
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	4608      	mov	r0, r1
 80014c2:	4611      	mov	r1, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	70fb      	strb	r3, [r7, #3]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70bb      	strb	r3, [r7, #2]
 80014ce:	4613      	mov	r3, r2
 80014d0:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status;
	uint32_t HostCoreSpeed;
	uint32_t HCcharMps = mps;
 80014d2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80014d4:	617b      	str	r3, [r7, #20]

	__HAL_LOCK(hhcd);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_HCD_HC_Init+0x2c>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e09d      	b.n	8001620 <HAL_HCD_HC_Init+0x168>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	hhcd->hc[ch_num].do_ping = 0U;
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	3319      	adds	r3, #25
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].dev_addr = dev_address;
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	3314      	adds	r3, #20
 8001510:	787a      	ldrb	r2, [r7, #1]
 8001512:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ch_num = ch_num;
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	3315      	adds	r3, #21
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_type = ep_type;
 8001528:	78fa      	ldrb	r2, [r7, #3]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3326      	adds	r3, #38	@ 0x26
 8001538:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800153c:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	78bb      	ldrb	r3, [r7, #2]
 8001542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001546:	b2d8      	uxtb	r0, r3
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3316      	adds	r3, #22
 8001556:	4602      	mov	r2, r0
 8001558:	701a      	strb	r2, [r3, #0]

	(void) HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fbc8 	bl	8001cf4 <HAL_HCD_HC_ClearHubInfo>

	if ((epnum & 0x80U) == 0x80U) {
 8001564:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da0a      	bge.n	8001582 <HAL_HCD_HC_Init+0xca>
		hhcd->hc[ch_num].ep_is_in = 1U;
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	3317      	adds	r3, #23
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	e009      	b.n	8001596 <HAL_HCD_HC_Init+0xde>
	} else {
		hhcd->hc[ch_num].ep_is_in = 0U;
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3317      	adds	r3, #23
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
	}

	HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f004 f82c 	bl	80055f8 <USB_GetHostSpeed>
 80015a0:	6138      	str	r0, [r7, #16]

	if (ep_type == EP_TYPE_ISOC) {
 80015a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10b      	bne.n	80015c2 <HAL_HCD_HC_Init+0x10a>
		/* FS device plugged to HS HUB */
		if ((speed == HCD_DEVICE_SPEED_FULL)
 80015aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d107      	bne.n	80015c2 <HAL_HCD_HC_Init+0x10a>
				&& (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED)) {
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d104      	bne.n	80015c2 <HAL_HCD_HC_Init+0x10a>
			if (HCcharMps > ISO_SPLT_MPS) {
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2bbc      	cmp	r3, #188	@ 0xbc
 80015bc:	d901      	bls.n	80015c2 <HAL_HCD_HC_Init+0x10a>
				/* ISO Max Packet Size for Split mode */
				HCcharMps = ISO_SPLT_MPS;
 80015be:	23bc      	movs	r3, #188	@ 0xbc
 80015c0:	617b      	str	r3, [r7, #20]
			}
		}
	}

	hhcd->hc[ch_num].speed = speed;
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	3318      	adds	r3, #24
 80015d2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80015d6:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].max_packet = (uint16_t) HCcharMps;
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	b298      	uxth	r0, r3
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	3328      	adds	r3, #40	@ 0x28
 80015ec:	4602      	mov	r2, r0
 80015ee:	801a      	strh	r2, [r3, #0]

	status = USB_HC_Init(hhcd->Instance, ch_num, epnum, dev_address, speed,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	787c      	ldrb	r4, [r7, #1]
 80015fa:	78ba      	ldrb	r2, [r7, #2]
 80015fc:	78f9      	ldrb	r1, [r7, #3]
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	4623      	mov	r3, r4
 800160e:	f004 f81b 	bl	8005648 <USB_HC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
			ep_type, (uint16_t) HCcharMps);

	__HAL_UNLOCK(hhcd);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return status;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}

08001628 <HAL_HCD_HC_Halt>:
 * @param  hhcd HCD handle
 * @param  ch_num Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]

	__HAL_LOCK(hhcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_HCD_HC_Halt+0x1e>
 8001642:	2302      	movs	r3, #2
 8001644:	e00f      	b.n	8001666 <HAL_HCD_HC_Halt+0x3e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	(void) USB_HC_Halt(hhcd->Instance, ch_num);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	78fa      	ldrb	r2, [r7, #3]
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f004 fbad 	bl	8005db6 <USB_HC_Halt>
	__HAL_UNLOCK(hhcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return status;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_HCD_HC_SubmitRequest>:
 *           0 : do ping inactive / 1 : do ping active
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_SubmitRequest(HCD_HandleTypeDef *hhcd,
		uint8_t ch_num, uint8_t direction, uint8_t ep_type, uint8_t token,
		uint8_t *pbuff, uint16_t length, uint8_t do_ping) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	4608      	mov	r0, r1
 800167a:	4611      	mov	r1, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4603      	mov	r3, r0
 8001680:	70fb      	strb	r3, [r7, #3]
 8001682:	460b      	mov	r3, r1
 8001684:	70bb      	strb	r3, [r7, #2]
 8001686:	4613      	mov	r3, r2
 8001688:	707b      	strb	r3, [r7, #1]
	hhcd->hc[ch_num].ep_is_in = direction;
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	1a9b      	subs	r3, r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	3317      	adds	r3, #23
 800169a:	78ba      	ldrb	r2, [r7, #2]
 800169c:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_type = ep_type;
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	3326      	adds	r3, #38	@ 0x26
 80016ae:	787a      	ldrb	r2, [r7, #1]
 80016b0:	701a      	strb	r2, [r3, #0]

	if (token == 0U) {
 80016b2:	7c3b      	ldrb	r3, [r7, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d114      	bne.n	80016e2 <HAL_HCD_HC_SubmitRequest+0x72>
		hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	332a      	adds	r3, #42	@ 0x2a
 80016c8:	2203      	movs	r2, #3
 80016ca:	701a      	strb	r2, [r3, #0]
		hhcd->hc[ch_num].do_ping = do_ping;
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	3319      	adds	r3, #25
 80016dc:	7f3a      	ldrb	r2, [r7, #28]
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e009      	b.n	80016f6 <HAL_HCD_HC_SubmitRequest+0x86>
	} else {
		hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	332a      	adds	r3, #42	@ 0x2a
 80016f2:	2202      	movs	r2, #2
 80016f4:	701a      	strb	r2, [r3, #0]
	}

	/* Manage Data Toggle */
	switch (ep_type) {
 80016f6:	787b      	ldrb	r3, [r7, #1]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	f200 8102 	bhi.w	8001902 <HAL_HCD_HC_SubmitRequest+0x292>
 80016fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001704 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	08001715 	.word	0x08001715
 8001708:	080018ed 	.word	0x080018ed
 800170c:	080017d9 	.word	0x080017d9
 8001710:	08001863 	.word	0x08001863
	case EP_TYPE_CTRL:
		if (token == 1U) /* send data */
 8001714:	7c3b      	ldrb	r3, [r7, #16]
 8001716:	2b01      	cmp	r3, #1
 8001718:	f040 80f5 	bne.w	8001906 <HAL_HCD_HC_SubmitRequest+0x296>
		{
			if (direction == 0U) {
 800171c:	78bb      	ldrb	r3, [r7, #2]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d12d      	bne.n	800177e <HAL_HCD_HC_SubmitRequest+0x10e>
				if (length == 0U) {
 8001722:	8b3b      	ldrh	r3, [r7, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d109      	bne.n	800173c <HAL_HCD_HC_SubmitRequest+0xcc>
					/* For Status OUT stage, Length == 0U, Status Out PID = 1 */
					hhcd->hc[ch_num].toggle_out = 1U;
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	1a9b      	subs	r3, r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	333d      	adds	r3, #61	@ 0x3d
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
				}

				/* Set the Data Toggle bit as per the Flag */
				if (hhcd->hc[ch_num].toggle_out == 0U) {
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	333d      	adds	r3, #61	@ 0x3d
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10a      	bne.n	8001768 <HAL_HCD_HC_SubmitRequest+0xf8>
					/* Put the PID 0 */
					hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	1a9b      	subs	r3, r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	332a      	adds	r3, #42	@ 0x2a
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
						hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
					}
				}
			}
		}
		break;
 8001766:	e0ce      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x296>
					hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	332a      	adds	r3, #42	@ 0x2a
 8001778:	2202      	movs	r2, #2
 800177a:	701a      	strb	r2, [r3, #0]
		break;
 800177c:	e0c3      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x296>
				if (hhcd->hc[ch_num].do_ssplit == 1U) {
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	331a      	adds	r3, #26
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	f040 80b8 	bne.w	8001906 <HAL_HCD_HC_SubmitRequest+0x296>
					if (hhcd->hc[ch_num].toggle_in == 0U) {
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	333c      	adds	r3, #60	@ 0x3c
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10a      	bne.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x152>
						hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	332a      	adds	r3, #42	@ 0x2a
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
		break;
 80017c0:	e0a1      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x296>
						hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	1a9b      	subs	r3, r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	332a      	adds	r3, #42	@ 0x2a
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
		break;
 80017d6:	e096      	b.n	8001906 <HAL_HCD_HC_SubmitRequest+0x296>

	case EP_TYPE_BULK:
		if (direction == 0U) {
 80017d8:	78bb      	ldrb	r3, [r7, #2]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d120      	bne.n	8001820 <HAL_HCD_HC_SubmitRequest+0x1b0>
			/* Set the Data Toggle bit as per the Flag */
			if (hhcd->hc[ch_num].toggle_out == 0U) {
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	333d      	adds	r3, #61	@ 0x3d
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10a      	bne.n	800180a <HAL_HCD_HC_SubmitRequest+0x19a>
				/* Put the PID 0 */
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	332a      	adds	r3, #42	@ 0x2a
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
			} else {
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
			}
		}

		break;
 8001808:	e07e      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	332a      	adds	r3, #42	@ 0x2a
 800181a:	2202      	movs	r2, #2
 800181c:	701a      	strb	r2, [r3, #0]
		break;
 800181e:	e073      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x298>
			if (hhcd->hc[ch_num].toggle_in == 0U) {
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	333c      	adds	r3, #60	@ 0x3c
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10a      	bne.n	800184c <HAL_HCD_HC_SubmitRequest+0x1dc>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	332a      	adds	r3, #42	@ 0x2a
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
		break;
 800184a:	e05d      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	332a      	adds	r3, #42	@ 0x2a
 800185c:	2202      	movs	r2, #2
 800185e:	701a      	strb	r2, [r3, #0]
		break;
 8001860:	e052      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x298>
	case EP_TYPE_INTR:
		if (direction == 0U) {
 8001862:	78bb      	ldrb	r3, [r7, #2]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d120      	bne.n	80018aa <HAL_HCD_HC_SubmitRequest+0x23a>
			/* Set the Data Toggle bit as per the Flag */
			if (hhcd->hc[ch_num].toggle_out == 0U) {
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	333d      	adds	r3, #61	@ 0x3d
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10a      	bne.n	8001894 <HAL_HCD_HC_SubmitRequest+0x224>
				/* Put the PID 0 */
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	332a      	adds	r3, #42	@ 0x2a
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
			} else {
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
			}
		}
		break;
 8001892:	e039      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	332a      	adds	r3, #42	@ 0x2a
 80018a4:	2202      	movs	r2, #2
 80018a6:	701a      	strb	r2, [r3, #0]
		break;
 80018a8:	e02e      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x298>
			if (hhcd->hc[ch_num].toggle_in == 0U) {
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	333c      	adds	r3, #60	@ 0x3c
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10a      	bne.n	80018d6 <HAL_HCD_HC_SubmitRequest+0x266>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	332a      	adds	r3, #42	@ 0x2a
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
		break;
 80018d4:	e018      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	332a      	adds	r3, #42	@ 0x2a
 80018e6:	2202      	movs	r2, #2
 80018e8:	701a      	strb	r2, [r3, #0]
		break;
 80018ea:	e00d      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x298>

	case EP_TYPE_ISOC:
		hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	332a      	adds	r3, #42	@ 0x2a
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
		break;
 8001900:	e002      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x298>

	default:
		break;
 8001902:	bf00      	nop
 8001904:	e000      	b.n	8001908 <HAL_HCD_HC_SubmitRequest+0x298>
		break;
 8001906:	bf00      	nop
	}

	hhcd->hc[ch_num].xfer_buff = pbuff;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	332c      	adds	r3, #44	@ 0x2c
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	601a      	str	r2, [r3, #0]
	hhcd->hc[ch_num].xfer_len = length;
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	8b39      	ldrh	r1, [r7, #24]
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4403      	add	r3, r0
 800192c:	3334      	adds	r3, #52	@ 0x34
 800192e:	6019      	str	r1, [r3, #0]
	hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	334c      	adds	r3, #76	@ 0x4c
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].xfer_count = 0U;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3338      	adds	r3, #56	@ 0x38
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
	hhcd->hc[ch_num].ch_num = ch_num;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	3315      	adds	r3, #21
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].state = HC_IDLE;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	334d      	adds	r3, #77	@ 0x4d
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]

	return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num],
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	4613      	mov	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	3310      	adds	r3, #16
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	1d19      	adds	r1, r3, #4
			(uint8_t) hhcd->Init.dma_enable);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	799b      	ldrb	r3, [r3, #6]
	return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num],
 800199a:	461a      	mov	r2, r3
 800199c:	f003 ff80 	bl	80058a0 <USB_HC_StartXfer>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop

080019ac <HAL_HCD_IRQHandler>:
/**
 * @brief  Handle HCD interrupt request.
 * @param  hhcd HCD handle
 * @retval None
 */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	613b      	str	r3, [r7, #16]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	60fb      	str	r3, [r7, #12]
	uint32_t i;
	uint32_t interrupt;

	/* Ensure that we are in device mode */
	if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fc75 	bl	80052b2 <USB_GetMode>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	f040 80fb 	bne.w	8001bc6 <HAL_HCD_IRQHandler+0x21a>
		/* Avoid spurious interrupt */
		if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fc38 	bl	800524a <USB_ReadInterrupts>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80f1 	beq.w	8001bc4 <HAL_HCD_IRQHandler+0x218>
			return;
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fc2f 	bl	800524a <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80019f6:	d104      	bne.n	8001a02 <HAL_HCD_IRQHandler+0x56>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a00:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR)) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fc1f 	bl	800524a <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a16:	d104      	bne.n	8001a22 <HAL_HCD_IRQHandler+0x76>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a20:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE)) {
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 fc0f 	bl	800524a <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a36:	d104      	bne.n	8001a42 <HAL_HCD_IRQHandler+0x96>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a40:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS)) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fbff 	bl	800524a <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d103      	bne.n	8001a5e <HAL_HCD_IRQHandler+0xb2>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	615a      	str	r2, [r3, #20]
		}

		/* Handle Host Disconnect Interrupts */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT)) {
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fbf1 	bl	800524a <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a72:	d120      	bne.n	8001ab6 <HAL_HCD_IRQHandler+0x10a>
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a7c:	615a      	str	r2, [r3, #20]

			if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U) {
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d113      	bne.n	8001ab6 <HAL_HCD_IRQHandler+0x10a>
				/* Flush USB Fifo */
				(void) USB_FlushTxFifo(USBx, 0x10U);
 8001a8e:	2110      	movs	r1, #16
 8001a90:	6938      	ldr	r0, [r7, #16]
 8001a92:	f003 fae4 	bl	800505e <USB_FlushTxFifo>
				(void) USB_FlushRxFifo(USBx);
 8001a96:	6938      	ldr	r0, [r7, #16]
 8001a98:	f003 fb13 	bl	80050c2 <USB_FlushRxFifo>

				if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7a5b      	ldrb	r3, [r3, #9]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d105      	bne.n	8001ab0 <HAL_HCD_IRQHandler+0x104>
					/* Restore FS Clock */
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 fd04 	bl	80054b8 <USB_InitFSLSPClkSel>

				/* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
				HAL_HCD_Disconnect_Callback(hhcd);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f006 fccb 	bl	800844c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
			}
		}

		/* Handle Host Port Interrupts */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT)) {
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fbc5 	bl	800524a <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aca:	d102      	bne.n	8001ad2 <HAL_HCD_IRQHandler+0x126>
			HCD_Port_IRQHandler(hhcd);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f001 fd4d 	bl	800356c <HCD_Port_IRQHandler>
		}

		/* Handle Host SOF Interrupt */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF)) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fbb7 	bl	800524a <USB_ReadInterrupts>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d106      	bne.n	8001af4 <HAL_HCD_IRQHandler+0x148>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
			HAL_HCD_SOF_Callback(hhcd);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f006 fc94 	bl	8008414 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2208      	movs	r2, #8
 8001af2:	615a      	str	r2, [r3, #20]
		}

		/* Handle Host channel Interrupt */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT)) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 fba6 	bl	800524a <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b08:	d139      	bne.n	8001b7e <HAL_HCD_IRQHandler+0x1d2>
			interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 f940 	bl	8005d94 <USB_HC_ReadInterrupt>
 8001b14:	60b8      	str	r0, [r7, #8]
			for (i = 0U; i < hhcd->Init.Host_channels; i++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e025      	b.n	8001b68 <HAL_HCD_IRQHandler+0x1bc>
				if ((interrupt & (1UL << (i & 0xFU))) != 0U) {
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d018      	beq.n	8001b62 <HAL_HCD_IRQHandler+0x1b6>
					if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b46:	d106      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x1aa>
							== USB_OTG_HCCHAR_EPDIR) {
						HCD_HC_IN_IRQHandler(hhcd, (uint8_t) i);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f905 	bl	8001d5e <HCD_HC_IN_IRQHandler>
 8001b54:	e005      	b.n	8001b62 <HAL_HCD_IRQHandler+0x1b6>
					} else {
						HCD_HC_OUT_IRQHandler(hhcd, (uint8_t) i);
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 ff67 	bl	8002a30 <HCD_HC_OUT_IRQHandler>
			for (i = 0U; i < hhcd->Init.Host_channels; i++) {
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	795b      	ldrb	r3, [r3, #5]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d3d3      	bcc.n	8001b1c <HAL_HCD_IRQHandler+0x170>
					}
				}
			}
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b7c:	615a      	str	r2, [r3, #20]
		}

		/* Handle Rx Queue Level Interrupts */
		if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U) {
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fb61 	bl	800524a <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d101      	bne.n	8001b96 <HAL_HCD_IRQHandler+0x1ea>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_HCD_IRQHandler+0x1ec>
 8001b96:	2300      	movs	r3, #0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d014      	beq.n	8001bc6 <HAL_HCD_IRQHandler+0x21a>
			USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0210 	bic.w	r2, r2, #16
 8001baa:	619a      	str	r2, [r3, #24]

			HCD_RXQLVL_IRQHandler(hhcd);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f001 fbfe 	bl	80033ae <HCD_RXQLVL_IRQHandler>

			USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0210 	orr.w	r2, r2, #16
 8001bc0:	619a      	str	r2, [r3, #24]
 8001bc2:	e000      	b.n	8001bc6 <HAL_HCD_IRQHandler+0x21a>
			return;
 8001bc4:	bf00      	nop
		}
	}
}
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_HCD_Start>:
/**
 * @brief  Start the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	__HAL_LOCK(hhcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_HCD_Start+0x16>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e013      	b.n	8001c0a <HAL_HCD_Start+0x3e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	/* Enable port power */
	(void) USB_DriveVbus(hhcd->Instance, 1U);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 fcc8 	bl	8005586 <USB_DriveVbus>

	/* Enable global interrupt */
	__HAL_HCD_ENABLE(hhcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f9c1 	bl	8004f82 <USB_EnableGlobalInt>
	__HAL_UNLOCK(hhcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_HCD_Stop>:
 * @brief  Stop the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd) {
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
	__HAL_LOCK(hhcd);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_HCD_Stop+0x16>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e00d      	b.n	8001c44 <HAL_HCD_Stop+0x32>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	(void) USB_StopHost(hhcd->Instance);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 fa1b 	bl	8006070 <USB_StopHost>
	__HAL_UNLOCK(hhcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_HCD_ResetPort>:
/**
 * @brief  Reset the host port.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	return (USB_ResetPort(hhcd->Instance));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fc6a 	bl	8005532 <USB_ResetPort>
 8001c5e:	4603      	mov	r3, r0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_HCD_HC_GetURBState>:
 *            URB_NYET/
 *            URB_ERROR/
 *            URB_STALL
 */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd,
		uint8_t chnum) {
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
	return hhcd->hc[chnum].urb_state;
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	334c      	adds	r3, #76	@ 0x4c
 8001c84:	781b      	ldrb	r3, [r3, #0]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_HCD_HC_GetXferCount>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval last transfer size in byte
 */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum) {
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	70fb      	strb	r3, [r7, #3]
	return hhcd->hc[chnum].xfer_count;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	3338      	adds	r3, #56	@ 0x38
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_HCD_GetCurrentFrame>:
/**
 * @brief  Return the current Host frame number.
 * @param  hhcd HCD handle
 * @retval Current Host frame number
 */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	return (USB_GetCurrentFrame(hhcd->Instance));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fcac 	bl	8005626 <USB_GetCurrentFrame>
 8001cce:	4603      	mov	r3, r0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_HCD_GetCurrentSpeed>:
/**
 * @brief  Return the Host enumeration speed.
 * @param  hhcd HCD handle
 * @retval Enumeration speed
 */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	return (USB_GetHostSpeed(hhcd->Instance));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fc87 	bl	80055f8 <USB_GetHostSpeed>
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_HCD_HC_ClearHubInfo>:
 * @param  ch_num Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd,
		uint8_t ch_num) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
	hhcd->hc[ch_num].do_ssplit = 0U;
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	331a      	adds	r3, #26
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].do_csplit = 0U;
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	331b      	adds	r3, #27
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].hub_addr = 0U;
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	3325      	adds	r3, #37	@ 0x25
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3324      	adds	r3, #36	@ 0x24
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HCD_HC_IN_IRQHandler>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval none
 */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum) {
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70fb      	strb	r3, [r7, #3]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg;

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR)) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fa77 	bl	8005270 <USB_ReadChInterrupts>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d11a      	bne.n	8001dc2 <HCD_HC_IN_IRQHandler+0x64>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8001d9e:	78fa      	ldrb	r2, [r7, #3]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	334d      	adds	r3, #77	@ 0x4d
 8001dae:	2207      	movs	r2, #7
 8001db0:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 fffb 	bl	8005db6 <USB_HC_Halt>
 8001dc0:	e09e      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR)) {
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fa50 	bl	8005270 <USB_ReadChInterrupts>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dda:	d11b      	bne.n	8001e14 <HCD_HC_IN_IRQHandler+0xb6>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001de8:	461a      	mov	r2, r3
 8001dea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dee:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_BBLERR;
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	334d      	adds	r3, #77	@ 0x4d
 8001e00:	2208      	movs	r2, #8
 8001e02:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 ffd2 	bl	8005db6 <USB_HC_Halt>
 8001e12:	e075      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL)) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fa27 	bl	8005270 <USB_ReadChInterrupts>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d11a      	bne.n	8001e62 <HCD_HC_IN_IRQHandler+0x104>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_STALL;
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	1a9b      	subs	r3, r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	334d      	adds	r3, #77	@ 0x4d
 8001e4e:	2206      	movs	r2, #6
 8001e50:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 ffab 	bl	8005db6 <USB_HC_Halt>
 8001e60:	e04e      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR)) {
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fa00 	bl	8005270 <USB_ReadChInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e7a:	d11b      	bne.n	8001eb4 <HCD_HC_IN_IRQHandler+0x156>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e8e:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	334d      	adds	r3, #77	@ 0x4d
 8001ea0:	2209      	movs	r2, #9
 8001ea2:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 ff82 	bl	8005db6 <USB_HC_Halt>
 8001eb2:	e025      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR)) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f9d7 	bl	8005270 <USB_ReadChInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec8:	2b80      	cmp	r3, #128	@ 0x80
 8001eca:	d119      	bne.n	8001f00 <HCD_HC_IN_IRQHandler+0x1a2>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2380      	movs	r3, #128	@ 0x80
 8001edc:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	334d      	adds	r3, #77	@ 0x4d
 8001eee:	2207      	movs	r2, #7
 8001ef0:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 ff5b 	bl	8005db6 <USB_HC_Halt>
	} else {
		/* ... */
	}

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR)) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 f9b1 	bl	8005270 <USB_ReadChInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f18:	d112      	bne.n	8001f40 <HCD_HC_IN_IRQHandler+0x1e2>
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 ff47 	bl	8005db6 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f34:	461a      	mov	r2, r3
 8001f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f3a:	6093      	str	r3, [r2, #8]
 8001f3c:	f000 bd75 	b.w	8002a2a <HCD_HC_IN_IRQHandler+0xccc>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC)) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 f991 	bl	8005270 <USB_ReadChInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	f040 8128 	bne.w	80021aa <HCD_HC_IN_IRQHandler+0x44c>
		/* Clear any pending ACK IT */
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f66:	461a      	mov	r2, r3
 8001f68:	2320      	movs	r3, #32
 8001f6a:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_csplit == 1U) {
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	331b      	adds	r3, #27
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d119      	bne.n	8001fb6 <HCD_HC_IN_IRQHandler+0x258>
			hhcd->hc[chnum].do_csplit = 0U;
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	331b      	adds	r3, #27
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	0151      	lsls	r1, r2, #5
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	440a      	add	r2, r1
 8001fac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb4:	6053      	str	r3, [r2, #4]
		}

		if (hhcd->Init.dma_enable != 0U) {
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	799b      	ldrb	r3, [r3, #6]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01b      	beq.n	8001ff6 <HCD_HC_IN_IRQHandler+0x298>
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3330      	adds	r3, #48	@ 0x30
 8001fce:	6819      	ldr	r1, [r3, #0]
					- (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
					- (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fe4:	1ac9      	subs	r1, r1, r3
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4403      	add	r3, r0
 8001ff2:	3338      	adds	r3, #56	@ 0x38
 8001ff4:	6019      	str	r1, [r3, #0]
		}

		hhcd->hc[chnum].state = HC_XFRC;
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	334d      	adds	r3, #77	@ 0x4d
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
		hhcd->hc[chnum].ErrCnt = 0U;
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3344      	adds	r3, #68	@ 0x44
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800202a:	461a      	mov	r2, r3
 800202c:	2301      	movs	r3, #1
 800202e:	6093      	str	r3, [r2, #8]

		if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3326      	adds	r3, #38	@ 0x26
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HCD_HC_IN_IRQHandler+0x2fe>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3326      	adds	r3, #38	@ 0x26
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d110      	bne.n	800207e <HCD_HC_IN_IRQHandler+0x320>
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fea6 	bl	8005db6 <USB_HC_Halt>
			__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002076:	461a      	mov	r2, r3
 8002078:	2310      	movs	r3, #16
 800207a:	6093      	str	r3, [r2, #8]
 800207c:	e03d      	b.n	80020fa <HCD_HC_IN_IRQHandler+0x39c>
		} else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3326      	adds	r3, #38	@ 0x26
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d00a      	beq.n	80020aa <HCD_HC_IN_IRQHandler+0x34c>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC)) {
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	3326      	adds	r3, #38	@ 0x26
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d127      	bne.n	80020fa <HCD_HC_IN_IRQHandler+0x39c>
			USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	0151      	lsls	r1, r2, #5
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	440a      	add	r2, r1
 80020c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020c8:	6013      	str	r3, [r2, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	334c      	adds	r3, #76	@ 0x4c
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
			HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	334c      	adds	r3, #76	@ 0x4c
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f006 f9b7 	bl	8008468 <HAL_HCD_HC_NotifyURBChange_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		} else {
			/* ... */
		}

		if (hhcd->Init.dma_enable == 1U) {
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	799b      	ldrb	r3, [r3, #6]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d13b      	bne.n	800217a <HCD_HC_IN_IRQHandler+0x41c>
			if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U)
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	3338      	adds	r3, #56	@ 0x38
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4403      	add	r3, r0
 8002122:	3328      	adds	r3, #40	@ 0x28
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	440b      	add	r3, r1
 8002128:	1e59      	subs	r1, r3, #1
					/ hhcd->hc[chnum].max_packet) & 1U) != 0U) {
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4403      	add	r3, r0
 8002138:	3328      	adds	r3, #40	@ 0x28
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002140:	f003 0301 	and.w	r3, r3, #1
			if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U)
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8470 	beq.w	8002a2a <HCD_HC_IN_IRQHandler+0xccc>
				hhcd->hc[chnum].toggle_in ^= 1U;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	333c      	adds	r3, #60	@ 0x3c
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	f083 0301 	eor.w	r3, r3, #1
 8002162:	b2d8      	uxtb	r0, r3
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	333c      	adds	r3, #60	@ 0x3c
 8002172:	4602      	mov	r2, r0
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	f000 bc58 	b.w	8002a2a <HCD_HC_IN_IRQHandler+0xccc>
			}
		} else {
			hhcd->hc[chnum].toggle_in ^= 1U;
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	333c      	adds	r3, #60	@ 0x3c
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2d8      	uxtb	r0, r3
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	333c      	adds	r3, #60	@ 0x3c
 80021a2:	4602      	mov	r2, r0
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	f000 bc40 	b.w	8002a2a <HCD_HC_IN_IRQHandler+0xccc>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK)) {
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 f85c 	bl	8005270 <USB_ReadChInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d131      	bne.n	8002226 <HCD_HC_IN_IRQHandler+0x4c8>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ce:	461a      	mov	r2, r3
 80021d0:	2320      	movs	r3, #32
 80021d2:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_ssplit == 1U) {
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	331a      	adds	r3, #26
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	f040 841f 	bne.w	8002a2a <HCD_HC_IN_IRQHandler+0xccc>
			hhcd->hc[chnum].do_csplit = 1U;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	331b      	adds	r3, #27
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_ACK;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	334d      	adds	r3, #77	@ 0x4d
 8002210:	2203      	movs	r2, #3
 8002212:	701a      	strb	r2, [r3, #0]

			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f003 fdca 	bl	8005db6 <USB_HC_Halt>
 8002222:	f000 bc02 	b.w	8002a2a <HCD_HC_IN_IRQHandler+0xccc>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH)) {
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f003 f81e 	bl	8005270 <USB_ReadChInterrupts>
 8002234:	4603      	mov	r3, r0
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	f040 8305 	bne.w	800284a <HCD_HC_IN_IRQHandler+0xaec>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800224c:	461a      	mov	r2, r3
 800224e:	2302      	movs	r3, #2
 8002250:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].state == HC_XFRC) {
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	334d      	adds	r3, #77	@ 0x4d
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d114      	bne.n	8002292 <HCD_HC_IN_IRQHandler+0x534>
			hhcd->hc[chnum].state = HC_HALTED;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	334d      	adds	r3, #77	@ 0x4d
 8002278:	2202      	movs	r2, #2
 800227a:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	334c      	adds	r3, #76	@ 0x4c
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e2cc      	b.n	800282c <HCD_HC_IN_IRQHandler+0xace>
		} else if (hhcd->hc[chnum].state == HC_STALL) {
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	334d      	adds	r3, #77	@ 0x4d
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b06      	cmp	r3, #6
 80022a6:	d114      	bne.n	80022d2 <HCD_HC_IN_IRQHandler+0x574>
			hhcd->hc[chnum].state = HC_HALTED;
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	334d      	adds	r3, #77	@ 0x4d
 80022b8:	2202      	movs	r2, #2
 80022ba:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_STALL;
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	334c      	adds	r3, #76	@ 0x4c
 80022cc:	2205      	movs	r2, #5
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	e2ac      	b.n	800282c <HCD_HC_IN_IRQHandler+0xace>
		} else if ((hhcd->hc[chnum].state == HC_XACTERR)
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	334d      	adds	r3, #77	@ 0x4d
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b07      	cmp	r3, #7
 80022e6:	d00b      	beq.n	8002300 <HCD_HC_IN_IRQHandler+0x5a2>
				|| (hhcd->hc[chnum].state == HC_DATATGLERR)) {
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	334d      	adds	r3, #77	@ 0x4d
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	f040 80a6 	bne.w	800244c <HCD_HC_IN_IRQHandler+0x6ee>
			hhcd->hc[chnum].state = HC_HALTED;
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	334d      	adds	r3, #77	@ 0x4d
 8002310:	2202      	movs	r2, #2
 8002312:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3344      	adds	r3, #68	@ 0x44
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1c59      	adds	r1, r3, #1
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4403      	add	r3, r0
 8002334:	3344      	adds	r3, #68	@ 0x44
 8002336:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	3344      	adds	r3, #68	@ 0x44
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d943      	bls.n	80023d6 <HCD_HC_IN_IRQHandler+0x678>
				hhcd->hc[chnum].ErrCnt = 0U;
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3344      	adds	r3, #68	@ 0x44
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

				if (hhcd->hc[chnum].do_ssplit == 1U) {
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	331a      	adds	r3, #26
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d123      	bne.n	80023c0 <HCD_HC_IN_IRQHandler+0x662>
					hhcd->hc[chnum].do_csplit = 0U;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	331b      	adds	r3, #27
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
					hhcd->hc[chnum].ep_ss_schedule = 0U;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	331c      	adds	r3, #28
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
					__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	0151      	lsls	r1, r2, #5
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	440a      	add	r2, r1
 80023b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023be:	6053      	str	r3, [r2, #4]
				}

				hhcd->hc[chnum].urb_state = URB_ERROR;
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	334c      	adds	r3, #76	@ 0x4c
 80023d0:	2204      	movs	r2, #4
 80023d2:	701a      	strb	r2, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80023d4:	e229      	b.n	800282a <HCD_HC_IN_IRQHandler+0xacc>
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	334c      	adds	r3, #76	@ 0x4c
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3326      	adds	r3, #38	@ 0x26
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00b      	beq.n	8002418 <HCD_HC_IN_IRQHandler+0x6ba>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3326      	adds	r3, #38	@ 0x26
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b02      	cmp	r3, #2
 8002414:	f040 8209 	bne.w	800282a <HCD_HC_IN_IRQHandler+0xacc>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800242e:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002436:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002444:	461a      	mov	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6013      	str	r3, [r2, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 800244a:	e1ee      	b.n	800282a <HCD_HC_IN_IRQHandler+0xacc>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_NYET) {
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	334d      	adds	r3, #77	@ 0x4d
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b05      	cmp	r3, #5
 8002460:	f040 80c8 	bne.w	80025f4 <HCD_HC_IN_IRQHandler+0x896>
			hhcd->hc[chnum].state = HC_HALTED;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	334d      	adds	r3, #77	@ 0x4d
 8002474:	2202      	movs	r2, #2
 8002476:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	331b      	adds	r3, #27
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	f040 81ce 	bne.w	800282c <HCD_HC_IN_IRQHandler+0xace>
				if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR) {
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3326      	adds	r3, #38	@ 0x26
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d16b      	bne.n	800257e <HCD_HC_IN_IRQHandler+0x820>
					hhcd->hc[chnum].NyetErrCnt++;
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3348      	adds	r3, #72	@ 0x48
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	1c59      	adds	r1, r3, #1
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4403      	add	r3, r0
 80024c6:	3348      	adds	r3, #72	@ 0x48
 80024c8:	6019      	str	r1, [r3, #0]
					if (hhcd->hc[chnum].NyetErrCnt > 2U) {
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3348      	adds	r3, #72	@ 0x48
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d943      	bls.n	8002568 <HCD_HC_IN_IRQHandler+0x80a>
						hhcd->hc[chnum].NyetErrCnt = 0U;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3348      	adds	r3, #72	@ 0x48
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
						hhcd->hc[chnum].do_csplit = 0U;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	331b      	adds	r3, #27
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]

						if (hhcd->hc[chnum].ErrCnt < 3U) {
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3344      	adds	r3, #68	@ 0x44
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d809      	bhi.n	8002532 <HCD_HC_IN_IRQHandler+0x7d4>
							hhcd->hc[chnum].ep_ss_schedule = 1U;
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	331c      	adds	r3, #28
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
						}
						__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	0151      	lsls	r1, r2, #5
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	440a      	add	r2, r1
 8002548:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800254c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002550:	6053      	str	r3, [r2, #4]
						hhcd->hc[chnum].urb_state = URB_ERROR;
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	334c      	adds	r3, #76	@ 0x4c
 8002562:	2204      	movs	r2, #4
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	e014      	b.n	8002592 <HCD_HC_IN_IRQHandler+0x834>
					} else {
						hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	334c      	adds	r3, #76	@ 0x4c
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e009      	b.n	8002592 <HCD_HC_IN_IRQHandler+0x834>
					}
				} else {
					hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	334c      	adds	r3, #76	@ 0x4c
 800258e:	2202      	movs	r2, #2
 8002590:	701a      	strb	r2, [r3, #0]
				}

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	3326      	adds	r3, #38	@ 0x26
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00b      	beq.n	80025c0 <HCD_HC_IN_IRQHandler+0x862>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3326      	adds	r3, #38	@ 0x26
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	f040 8136 	bne.w	800282c <HCD_HC_IN_IRQHandler+0xace>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025d6:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025de:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ec:	461a      	mov	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e11b      	b.n	800282c <HCD_HC_IN_IRQHandler+0xace>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_ACK) {
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	334d      	adds	r3, #77	@ 0x4d
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b03      	cmp	r3, #3
 8002608:	f040 8081 	bne.w	800270e <HCD_HC_IN_IRQHandler+0x9b0>
			hhcd->hc[chnum].state = HC_HALTED;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	334d      	adds	r3, #77	@ 0x4d
 800261c:	2202      	movs	r2, #2
 800261e:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	331b      	adds	r3, #27
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	f040 80fa 	bne.w	800282c <HCD_HC_IN_IRQHandler+0xace>
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	334c      	adds	r3, #76	@ 0x4c
 8002648:	2202      	movs	r2, #2
 800264a:	701a      	strb	r2, [r3, #0]

				/* Set Complete split and re-activate the channel */
				USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	0151      	lsls	r1, r2, #5
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	440a      	add	r2, r1
 8002662:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266a:	6053      	str	r3, [r2, #4]
				USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	0151      	lsls	r1, r2, #5
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	440a      	add	r2, r1
 8002682:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800268a:	60d3      	str	r3, [r2, #12]
				USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	0151      	lsls	r1, r2, #5
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	440a      	add	r2, r1
 80026a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026a6:	f023 0320 	bic.w	r3, r3, #32
 80026aa:	60d3      	str	r3, [r2, #12]

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3326      	adds	r3, #38	@ 0x26
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HCD_HC_IN_IRQHandler+0x97c>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3326      	adds	r3, #38	@ 0x26
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 80a9 	bne.w	800282c <HCD_HC_IN_IRQHandler+0xace>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026f0:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026f8:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e08e      	b.n	800282c <HCD_HC_IN_IRQHandler+0xace>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_NAK) {
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	334d      	adds	r3, #77	@ 0x4d
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d143      	bne.n	80027ac <HCD_HC_IN_IRQHandler+0xa4e>
			hhcd->hc[chnum].state = HC_HALTED;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	334d      	adds	r3, #77	@ 0x4d
 8002734:	2202      	movs	r2, #2
 8002736:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	334c      	adds	r3, #76	@ 0x4c
 8002748:	2202      	movs	r2, #2
 800274a:	701a      	strb	r2, [r3, #0]

			if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3326      	adds	r3, #38	@ 0x26
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HCD_HC_IN_IRQHandler+0xa1a>
					|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3326      	adds	r3, #38	@ 0x26
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d159      	bne.n	800282c <HCD_HC_IN_IRQHandler+0xace>
				/* re-activate the channel */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800278e:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002796:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a4:	461a      	mov	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e03f      	b.n	800282c <HCD_HC_IN_IRQHandler+0xace>
			}
		} else if (hhcd->hc[chnum].state == HC_BBLERR) {
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	334d      	adds	r3, #77	@ 0x4d
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d126      	bne.n	8002810 <HCD_HC_IN_IRQHandler+0xab2>
			hhcd->hc[chnum].state = HC_HALTED;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	334d      	adds	r3, #77	@ 0x4d
 80027d2:	2202      	movs	r2, #2
 80027d4:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	3344      	adds	r3, #68	@ 0x44
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	1c59      	adds	r1, r3, #1
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4403      	add	r3, r0
 80027f6:	3344      	adds	r3, #68	@ 0x44
 80027f8:	6019      	str	r1, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_ERROR;
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	334c      	adds	r3, #76	@ 0x4c
 800280a:	2204      	movs	r2, #4
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e00d      	b.n	800282c <HCD_HC_IN_IRQHandler+0xace>
		} else {
			if (hhcd->hc[chnum].state == HC_HALTED) {
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	334d      	adds	r3, #77	@ 0x4d
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b02      	cmp	r3, #2
 8002824:	f000 8100 	beq.w	8002a28 <HCD_HC_IN_IRQHandler+0xcca>
 8002828:	e000      	b.n	800282c <HCD_HC_IN_IRQHandler+0xace>
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 800282a:	bf00      	nop
		}

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
		HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	334c      	adds	r3, #76	@ 0x4c
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	4619      	mov	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f005 fe10 	bl	8008468 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002848:	e0ef      	b.n	8002a2a <HCD_HC_IN_IRQHandler+0xccc>
				hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fd0c 	bl	8005270 <USB_ReadChInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285e:	2b40      	cmp	r3, #64	@ 0x40
 8002860:	d12f      	bne.n	80028c2 <HCD_HC_IN_IRQHandler+0xb64>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	2340      	movs	r3, #64	@ 0x40
 8002872:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_NYET;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334d      	adds	r3, #77	@ 0x4d
 8002884:	2205      	movs	r2, #5
 8002886:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ssplit == 0U) {
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	331a      	adds	r3, #26
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HCD_HC_IN_IRQHandler+0xb54>
			hhcd->hc[chnum].ErrCnt = 0U;
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	3344      	adds	r3, #68	@ 0x44
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
		}

		(void) USB_HC_Halt(hhcd->Instance, chnum);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 fa7b 	bl	8005db6 <USB_HC_Halt>
 80028c0:	e0b3      	b.n	8002a2a <HCD_HC_IN_IRQHandler+0xccc>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK)) {
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 fcd0 	bl	8005270 <USB_ReadChInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	f040 80a7 	bne.w	8002a2a <HCD_HC_IN_IRQHandler+0xccc>
		if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR) {
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3326      	adds	r3, #38	@ 0x26
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d11b      	bne.n	800292a <HCD_HC_IN_IRQHandler+0xbcc>
			hhcd->hc[chnum].ErrCnt = 0U;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3344      	adds	r3, #68	@ 0x44
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_NAK;
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	334d      	adds	r3, #77	@ 0x4d
 8002916:	2204      	movs	r2, #4
 8002918:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f003 fa47 	bl	8005db6 <USB_HC_Halt>
 8002928:	e03f      	b.n	80029aa <HCD_HC_IN_IRQHandler+0xc4c>
		} else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3326      	adds	r3, #38	@ 0x26
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HCD_HC_IN_IRQHandler+0xbf8>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3326      	adds	r3, #38	@ 0x26
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d129      	bne.n	80029aa <HCD_HC_IN_IRQHandler+0xc4c>
			hhcd->hc[chnum].ErrCnt = 0U;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3344      	adds	r3, #68	@ 0x44
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

			if ((hhcd->Init.dma_enable == 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	799b      	ldrb	r3, [r3, #6]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HCD_HC_IN_IRQHandler+0xc2a>
					|| (hhcd->hc[chnum].do_csplit == 1U)) {
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	331b      	adds	r3, #27
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d110      	bne.n	80029aa <HCD_HC_IN_IRQHandler+0xc4c>
				hhcd->hc[chnum].state = HC_NAK;
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	334d      	adds	r3, #77	@ 0x4d
 8002998:	2204      	movs	r2, #4
 800299a:	701a      	strb	r2, [r3, #0]
				(void) USB_HC_Halt(hhcd->Instance, chnum);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 fa06 	bl	8005db6 <USB_HC_Halt>
			}
		} else {
			/* ... */
		}

		if (hhcd->hc[chnum].do_csplit == 1U) {
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	331b      	adds	r3, #27
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d129      	bne.n	8002a14 <HCD_HC_IN_IRQHandler+0xcb6>
			hhcd->hc[chnum].do_csplit = 0U;
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	331b      	adds	r3, #27
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	0151      	lsls	r1, r2, #5
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	440a      	add	r2, r1
 80029ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f2:	6053      	str	r3, [r2, #4]
			__HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	0151      	lsls	r1, r2, #5
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	440a      	add	r2, r1
 8002a0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a0e:	f043 0320 	orr.w	r3, r3, #32
 8002a12:	60d3      	str	r3, [r2, #12]
		}

		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a20:	461a      	mov	r2, r3
 8002a22:	2310      	movs	r3, #16
 8002a24:	6093      	str	r3, [r2, #8]
 8002a26:	e000      	b.n	8002a2a <HCD_HC_IN_IRQHandler+0xccc>
				return;
 8002a28:	bf00      	nop
	} else {
		/* ... */
	}
}
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HCD_HC_OUT_IRQHandler>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval none
 */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	70fb      	strb	r3, [r7, #3]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg;
	uint32_t num_packets;

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR)) {
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f002 fc0e 	bl	8005270 <USB_ReadChInterrupts>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d11b      	bne.n	8002a96 <HCD_HC_OUT_IRQHandler+0x66>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	334d      	adds	r3, #77	@ 0x4d
 8002a80:	2207      	movs	r2, #7
 8002a82:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 f992 	bl	8005db6 <USB_HC_Halt>
 8002a92:	f000 bc89 	b.w	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK)) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fbe6 	bl	8005270 <USB_ReadChInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	f040 8082 	bne.w	8002bb4 <HCD_HC_OUT_IRQHandler+0x184>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002abc:	461a      	mov	r2, r3
 8002abe:	2320      	movs	r3, #32
 8002ac0:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_ping == 1U) {
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	3319      	adds	r3, #25
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d124      	bne.n	8002b22 <HCD_HC_OUT_IRQHandler+0xf2>
			hhcd->hc[chnum].do_ping = 0U;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3319      	adds	r3, #25
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	334c      	adds	r3, #76	@ 0x4c
 8002afc:	2202      	movs	r2, #2
 8002afe:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_ACK;
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	334d      	adds	r3, #77	@ 0x4d
 8002b10:	2203      	movs	r2, #3
 8002b12:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 f94a 	bl	8005db6 <USB_HC_Halt>
		}

		if ((hhcd->hc[chnum].do_ssplit == 1U)
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	331a      	adds	r3, #26
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 8437 	bne.w	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
				&& (hhcd->hc[chnum].do_csplit == 0U)) {
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	331b      	adds	r3, #27
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 842b 	bne.w	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
			if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC) {
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3326      	adds	r3, #38	@ 0x26
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d009      	beq.n	8002b7c <HCD_HC_OUT_IRQHandler+0x14c>
				hhcd->hc[chnum].do_csplit = 1U;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	331b      	adds	r3, #27
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
			}

			hhcd->hc[chnum].state = HC_ACK;
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	334d      	adds	r3, #77	@ 0x4d
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 f90c 	bl	8005db6 <USB_HC_Halt>

			/* reset error_count */
			hhcd->hc[chnum].ErrCnt = 0U;
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3344      	adds	r3, #68	@ 0x44
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e3f9      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR)) {
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f002 fb57 	bl	8005270 <USB_ReadChInterrupts>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bcc:	d111      	bne.n	8002bf2 <HCD_HC_OUT_IRQHandler+0x1c2>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002be0:	6093      	str	r3, [r2, #8]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 f8e3 	bl	8005db6 <USB_HC_Halt>
 8002bf0:	e3da      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC)) {
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 fb38 	bl	8005270 <USB_ReadChInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d168      	bne.n	8002cdc <HCD_HC_OUT_IRQHandler+0x2ac>
		hhcd->hc[chnum].ErrCnt = 0U;
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	3344      	adds	r3, #68	@ 0x44
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]

		/* transaction completed with NYET state, update do ping state */
		if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 fb22 	bl	8005270 <USB_ReadChInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c32:	2b40      	cmp	r3, #64	@ 0x40
 8002c34:	d112      	bne.n	8002c5c <HCD_HC_OUT_IRQHandler+0x22c>
			hhcd->hc[chnum].do_ping = 1U;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3319      	adds	r3, #25
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c56:	461a      	mov	r2, r3
 8002c58:	2340      	movs	r3, #64	@ 0x40
 8002c5a:	6093      	str	r3, [r2, #8]
		}

		if (hhcd->hc[chnum].do_csplit != 0U) {
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	331b      	adds	r3, #27
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d019      	beq.n	8002ca6 <HCD_HC_OUT_IRQHandler+0x276>
			hhcd->hc[chnum].do_csplit = 0U;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	331b      	adds	r3, #27
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	0151      	lsls	r1, r2, #5
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	440a      	add	r2, r1
 8002c9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca4:	6053      	str	r3, [r2, #4]
		}

		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XFRC;
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	334d      	adds	r3, #77	@ 0x4d
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 f86e 	bl	8005db6 <USB_HC_Halt>
 8002cda:	e365      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f002 fac3 	bl	8005270 <USB_ReadChInterrupts>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b40      	cmp	r3, #64	@ 0x40
 8002cf2:	d139      	bne.n	8002d68 <HCD_HC_OUT_IRQHandler+0x338>
		hhcd->hc[chnum].state = HC_NYET;
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	334d      	adds	r3, #77	@ 0x4d
 8002d04:	2205      	movs	r2, #5
 8002d06:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ssplit == 0U) {
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	331a      	adds	r3, #26
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HCD_HC_OUT_IRQHandler+0x302>
			hhcd->hc[chnum].do_ping = 1U;
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3319      	adds	r3, #25
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
		}

		hhcd->hc[chnum].ErrCnt = 0U;
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3344      	adds	r3, #68	@ 0x44
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 f831 	bl	8005db6 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d60:	461a      	mov	r2, r3
 8002d62:	2340      	movs	r3, #64	@ 0x40
 8002d64:	6093      	str	r3, [r2, #8]
 8002d66:	e31f      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL)) {
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 fa7d 	bl	8005270 <USB_ReadChInterrupts>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d11a      	bne.n	8002db6 <HCD_HC_OUT_IRQHandler+0x386>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2308      	movs	r3, #8
 8002d90:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_STALL;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	334d      	adds	r3, #77	@ 0x4d
 8002da2:	2206      	movs	r2, #6
 8002da4:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 f801 	bl	8005db6 <USB_HC_Halt>
 8002db4:	e2f8      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK)) {
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 fa56 	bl	8005270 <USB_ReadChInterrupts>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d144      	bne.n	8002e58 <HCD_HC_OUT_IRQHandler+0x428>
		hhcd->hc[chnum].ErrCnt = 0U;
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	3344      	adds	r3, #68	@ 0x44
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
		hhcd->hc[chnum].state = HC_NAK;
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	334d      	adds	r3, #77	@ 0x4d
 8002df2:	2204      	movs	r2, #4
 8002df4:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ping == 0U) {
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3319      	adds	r3, #25
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d114      	bne.n	8002e36 <HCD_HC_OUT_IRQHandler+0x406>
			if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH) {
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3318      	adds	r3, #24
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HCD_HC_OUT_IRQHandler+0x406>
				hhcd->hc[chnum].do_ping = 1U;
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3319      	adds	r3, #25
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
			}
		}

		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 ffb9 	bl	8005db6 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e50:	461a      	mov	r2, r3
 8002e52:	2310      	movs	r3, #16
 8002e54:	6093      	str	r3, [r2, #8]
 8002e56:	e2a7      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR)) {
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fa05 	bl	8005270 <USB_ReadChInterrupts>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6c:	2b80      	cmp	r3, #128	@ 0x80
 8002e6e:	f040 8083 	bne.w	8002f78 <HCD_HC_OUT_IRQHandler+0x548>
		if (hhcd->Init.dma_enable == 0U) {
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	799b      	ldrb	r3, [r3, #6]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d111      	bne.n	8002e9e <HCD_HC_OUT_IRQHandler+0x46e>
			hhcd->hc[chnum].state = HC_XACTERR;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334d      	adds	r3, #77	@ 0x4d
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f002 ff8d 	bl	8005db6 <USB_HC_Halt>
 8002e9c:	e062      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x534>
		} else {
			hhcd->hc[chnum].ErrCnt++;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3344      	adds	r3, #68	@ 0x44
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	1c59      	adds	r1, r3, #1
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4403      	add	r3, r0
 8002ebe:	3344      	adds	r3, #68	@ 0x44
 8002ec0:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	3344      	adds	r3, #68	@ 0x44
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d922      	bls.n	8002f1e <HCD_HC_OUT_IRQHandler+0x4ee>
				hhcd->hc[chnum].ErrCnt = 0U;
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3344      	adds	r3, #68	@ 0x44
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
				hhcd->hc[chnum].urb_state = URB_ERROR;
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	334c      	adds	r3, #76	@ 0x4c
 8002efc:	2204      	movs	r2, #4
 8002efe:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
				HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	334c      	adds	r3, #76	@ 0x4c
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f005 faa6 	bl	8008468 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f1c:	e022      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x534>
						hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	334c      	adds	r3, #76	@ 0x4c
 8002f2e:	2202      	movs	r2, #2
 8002f30:	701a      	strb	r2, [r3, #0]

				/* Re-activate the channel  */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f48:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f50:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6013      	str	r3, [r2, #0]
			}
		}
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	2380      	movs	r3, #128	@ 0x80
 8002f74:	6093      	str	r3, [r2, #8]
 8002f76:	e217      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR)) {
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f002 f975 	bl	8005270 <USB_ReadChInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f90:	d11b      	bne.n	8002fca <HCD_HC_OUT_IRQHandler+0x59a>
		hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	334d      	adds	r3, #77	@ 0x4d
 8002fa2:	2209      	movs	r2, #9
 8002fa4:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 ff01 	bl	8005db6 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fc6:	6093      	str	r3, [r2, #8]
 8002fc8:	e1ee      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH)) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 f94c 	bl	8005270 <USB_ReadChInterrupts>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	f040 81df 	bne.w	80033a2 <HCD_HC_OUT_IRQHandler+0x972>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].state == HC_XFRC) {
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	334d      	adds	r3, #77	@ 0x4d
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	f040 8093 	bne.w	8003134 <HCD_HC_OUT_IRQHandler+0x704>
			hhcd->hc[chnum].state = HC_HALTED;
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	334d      	adds	r3, #77	@ 0x4d
 800301e:	2202      	movs	r2, #2
 8003020:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	334c      	adds	r3, #76	@ 0x4c
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]

			if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3326      	adds	r3, #38	@ 0x26
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d00b      	beq.n	8003064 <HCD_HC_OUT_IRQHandler+0x634>
					|| (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)) {
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3326      	adds	r3, #38	@ 0x26
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b03      	cmp	r3, #3
 8003060:	f040 8190 	bne.w	8003384 <HCD_HC_OUT_IRQHandler+0x954>
				if (hhcd->Init.dma_enable == 0U) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	799b      	ldrb	r3, [r3, #6]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d115      	bne.n	8003098 <HCD_HC_OUT_IRQHandler+0x668>
					hhcd->hc[chnum].toggle_out ^= 1U;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	333d      	adds	r3, #61	@ 0x3d
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	f083 0301 	eor.w	r3, r3, #1
 8003084:	b2d8      	uxtb	r0, r3
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	333d      	adds	r3, #61	@ 0x3d
 8003094:	4602      	mov	r2, r0
 8003096:	701a      	strb	r2, [r3, #0]
				}

				if ((hhcd->Init.dma_enable == 1U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	799b      	ldrb	r3, [r3, #6]
 800309c:	2b01      	cmp	r3, #1
 800309e:	f040 8171 	bne.w	8003384 <HCD_HC_OUT_IRQHandler+0x954>
						&& (hhcd->hc[chnum].xfer_len > 0U)) {
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3334      	adds	r3, #52	@ 0x34
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8165 	beq.w	8003384 <HCD_HC_OUT_IRQHandler+0x954>
					num_packets = (hhcd->hc[chnum].xfer_len
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3334      	adds	r3, #52	@ 0x34
 80030ca:	6819      	ldr	r1, [r3, #0]
							+ hhcd->hc[chnum].max_packet - 1U)
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4403      	add	r3, r0
 80030da:	3328      	adds	r3, #40	@ 0x28
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	440b      	add	r3, r1
 80030e0:	1e59      	subs	r1, r3, #1
							/ hhcd->hc[chnum].max_packet;
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4403      	add	r3, r0
 80030f0:	3328      	adds	r3, #40	@ 0x28
 80030f2:	881b      	ldrh	r3, [r3, #0]
					num_packets = (hhcd->hc[chnum].xfer_len
 80030f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f8:	60bb      	str	r3, [r7, #8]

					if ((num_packets & 1U) != 0U) {
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 813f 	beq.w	8003384 <HCD_HC_OUT_IRQHandler+0x954>
						hhcd->hc[chnum].toggle_out ^= 1U;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	333d      	adds	r3, #61	@ 0x3d
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2d8      	uxtb	r0, r3
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	333d      	adds	r3, #61	@ 0x3d
 800312e:	4602      	mov	r2, r0
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e127      	b.n	8003384 <HCD_HC_OUT_IRQHandler+0x954>
					}
				}
			}
		} else if (hhcd->hc[chnum].state == HC_ACK) {
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	334d      	adds	r3, #77	@ 0x4d
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d120      	bne.n	800318c <HCD_HC_OUT_IRQHandler+0x75c>
			hhcd->hc[chnum].state = HC_HALTED;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	334d      	adds	r3, #77	@ 0x4d
 800315a:	2202      	movs	r2, #2
 800315c:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	331b      	adds	r3, #27
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 8107 	bne.w	8003384 <HCD_HC_OUT_IRQHandler+0x954>
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334c      	adds	r3, #76	@ 0x4c
 8003186:	2202      	movs	r2, #2
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e0fb      	b.n	8003384 <HCD_HC_OUT_IRQHandler+0x954>
			}
		} else if (hhcd->hc[chnum].state == HC_NAK) {
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	334d      	adds	r3, #77	@ 0x4d
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d13a      	bne.n	8003218 <HCD_HC_OUT_IRQHandler+0x7e8>
			hhcd->hc[chnum].state = HC_HALTED;
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	334d      	adds	r3, #77	@ 0x4d
 80031b2:	2202      	movs	r2, #2
 80031b4:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	334c      	adds	r3, #76	@ 0x4c
 80031c6:	2202      	movs	r2, #2
 80031c8:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	331b      	adds	r3, #27
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	f040 80d1 	bne.w	8003384 <HCD_HC_OUT_IRQHandler+0x954>
				hhcd->hc[chnum].do_csplit = 0U;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	331b      	adds	r3, #27
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
				__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	0151      	lsls	r1, r2, #5
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	440a      	add	r2, r1
 800320c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003214:	6053      	str	r3, [r2, #4]
 8003216:	e0b5      	b.n	8003384 <HCD_HC_OUT_IRQHandler+0x954>
			}
		} else if (hhcd->hc[chnum].state == HC_NYET) {
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334d      	adds	r3, #77	@ 0x4d
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b05      	cmp	r3, #5
 800322c:	d114      	bne.n	8003258 <HCD_HC_OUT_IRQHandler+0x828>
			hhcd->hc[chnum].state = HC_HALTED;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	334d      	adds	r3, #77	@ 0x4d
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334c      	adds	r3, #76	@ 0x4c
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e095      	b.n	8003384 <HCD_HC_OUT_IRQHandler+0x954>
		} else if (hhcd->hc[chnum].state == HC_STALL) {
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334d      	adds	r3, #77	@ 0x4d
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d114      	bne.n	8003298 <HCD_HC_OUT_IRQHandler+0x868>
			hhcd->hc[chnum].state = HC_HALTED;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334d      	adds	r3, #77	@ 0x4d
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_STALL;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	334c      	adds	r3, #76	@ 0x4c
 8003292:	2205      	movs	r2, #5
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e075      	b.n	8003384 <HCD_HC_OUT_IRQHandler+0x954>
		} else if ((hhcd->hc[chnum].state == HC_XACTERR)
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334d      	adds	r3, #77	@ 0x4d
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b07      	cmp	r3, #7
 80032ac:	d00a      	beq.n	80032c4 <HCD_HC_OUT_IRQHandler+0x894>
				|| (hhcd->hc[chnum].state == HC_DATATGLERR)) {
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	334d      	adds	r3, #77	@ 0x4d
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	d170      	bne.n	80033a6 <HCD_HC_OUT_IRQHandler+0x976>
			hhcd->hc[chnum].state = HC_HALTED;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	334d      	adds	r3, #77	@ 0x4d
 80032d4:	2202      	movs	r2, #2
 80032d6:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3344      	adds	r3, #68	@ 0x44
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	1c59      	adds	r1, r3, #1
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4403      	add	r3, r0
 80032f8:	3344      	adds	r3, #68	@ 0x44
 80032fa:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	3344      	adds	r3, #68	@ 0x44
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d914      	bls.n	800333c <HCD_HC_OUT_IRQHandler+0x90c>
				hhcd->hc[chnum].ErrCnt = 0U;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3344      	adds	r3, #68	@ 0x44
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
				hhcd->hc[chnum].urb_state = URB_ERROR;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334c      	adds	r3, #76	@ 0x4c
 8003336:	2204      	movs	r2, #4
 8003338:	701a      	strb	r2, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 800333a:	e022      	b.n	8003382 <HCD_HC_OUT_IRQHandler+0x952>
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334c      	adds	r3, #76	@ 0x4c
 800334c:	2202      	movs	r2, #2
 800334e:	701a      	strb	r2, [r3, #0]

				/* re-activate the channel  */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003366:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800336e:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800337c:	461a      	mov	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6013      	str	r3, [r2, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003382:	bf00      	nop
		}

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
		HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334c      	adds	r3, #76	@ 0x4c
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f005 f864 	bl	8008468 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033a0:	e002      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
				hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
	} else {
		return;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x978>
			return;
 80033a6:	bf00      	nop
	}
}
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HCD_RXQLVL_IRQHandler>:
/**
 * @brief  Handle Rx Queue Level interrupt requests.
 * @param  hhcd HCD handle
 * @retval none
 */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd) {
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b08a      	sub	sp, #40	@ 0x28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t USBx_BASE = (uint32_t) USBx;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	623b      	str	r3, [r7, #32]
	uint32_t GrxstspReg;
	uint32_t xferSizePktCnt;
	uint32_t tmpreg;
	uint32_t chnum;

	GrxstspReg = hhcd->Instance->GRXSTSP;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	61fb      	str	r3, [r7, #28]
	chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	61bb      	str	r3, [r7, #24]
	pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	0c5b      	lsrs	r3, r3, #17
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	617b      	str	r3, [r7, #20]
	pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e2:	613b      	str	r3, [r7, #16]

	switch (pktsts) {
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d004      	beq.n	80033f4 <HCD_RXQLVL_IRQHandler+0x46>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	f000 80b6 	beq.w	800355e <HCD_RXQLVL_IRQHandler+0x1b0>
		break;

	case GRXSTS_PKTSTS_IN_XFER_COMP:
	case GRXSTS_PKTSTS_CH_HALTED:
	default:
		break;
 80033f2:	e0b7      	b.n	8003564 <HCD_RXQLVL_IRQHandler+0x1b6>
		if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void*) 0)) {
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80b3 	beq.w	8003562 <HCD_RXQLVL_IRQHandler+0x1b4>
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	332c      	adds	r3, #44	@ 0x2c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80a7 	beq.w	8003562 <HCD_RXQLVL_IRQHandler+0x1b4>
			if ((hhcd->hc[chnum].xfer_count + pktcnt)
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3338      	adds	r3, #56	@ 0x38
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	18d1      	adds	r1, r2, r3
					<= hhcd->hc[chnum].xfer_len) {
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4403      	add	r3, r0
 8003438:	3334      	adds	r3, #52	@ 0x34
 800343a:	681b      	ldr	r3, [r3, #0]
			if ((hhcd->hc[chnum].xfer_count + pktcnt)
 800343c:	4299      	cmp	r1, r3
 800343e:	f200 8083 	bhi.w	8003548 <HCD_RXQLVL_IRQHandler+0x19a>
				(void) USB_ReadPacket(hhcd->Instance, hhcd->hc[chnum].xfer_buff,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	332c      	adds	r3, #44	@ 0x2c
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	b292      	uxth	r2, r2
 800345c:	4619      	mov	r1, r3
 800345e:	f001 fe9c 	bl	800519a <USB_ReadPacket>
				hhcd->hc[chnum].xfer_buff += pktcnt;
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	332c      	adds	r3, #44	@ 0x2c
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	18d1      	adds	r1, r2, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4403      	add	r3, r0
 8003486:	332c      	adds	r3, #44	@ 0x2c
 8003488:	6019      	str	r1, [r3, #0]
				hhcd->hc[chnum].xfer_count += pktcnt;
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3338      	adds	r3, #56	@ 0x38
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	18d1      	adds	r1, r2, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4403      	add	r3, r0
 80034ae:	3338      	adds	r3, #56	@ 0x38
 80034b0:	6019      	str	r1, [r3, #0]
						(USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	0cdb      	lsrs	r3, r3, #19
				xferSizePktCnt =
 80034c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034c6:	60fb      	str	r3, [r7, #12]
				if ((hhcd->hc[chnum].max_packet == pktcnt)
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3328      	adds	r3, #40	@ 0x28
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4293      	cmp	r3, r2
 80034e0:	d13f      	bne.n	8003562 <HCD_RXQLVL_IRQHandler+0x1b4>
						&& (xferSizePktCnt > 0U)) {
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d03c      	beq.n	8003562 <HCD_RXQLVL_IRQHandler+0x1b4>
					tmpreg = USBx_HC(chnum)->HCCHAR;
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60bb      	str	r3, [r7, #8]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034fe:	60bb      	str	r3, [r7, #8]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003506:	60bb      	str	r3, [r7, #8]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	4413      	add	r3, r2
 8003510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6013      	str	r3, [r2, #0]
					hhcd->hc[chnum].toggle_in ^= 1U;
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	333c      	adds	r3, #60	@ 0x3c
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	f083 0301 	eor.w	r3, r3, #1
 8003530:	b2d8      	uxtb	r0, r3
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	333c      	adds	r3, #60	@ 0x3c
 8003542:	4602      	mov	r2, r0
 8003544:	701a      	strb	r2, [r3, #0]
		break;
 8003546:	e00c      	b.n	8003562 <HCD_RXQLVL_IRQHandler+0x1b4>
				hhcd->hc[chnum].urb_state = URB_ERROR;
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334c      	adds	r3, #76	@ 0x4c
 8003558:	2204      	movs	r2, #4
 800355a:	701a      	strb	r2, [r3, #0]
		break;
 800355c:	e001      	b.n	8003562 <HCD_RXQLVL_IRQHandler+0x1b4>
		break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <HCD_RXQLVL_IRQHandler+0x1b6>
		break;
 8003562:	bf00      	nop
	}
}
 8003564:	bf00      	nop
 8003566:	3728      	adds	r7, #40	@ 0x28
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HCD_Port_IRQHandler>:
/**
 * @brief  Handle Host Port interrupt requests.
 * @param  hhcd HCD handle
 * @retval None
 */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	613b      	str	r3, [r7, #16]
	__IO uint32_t hprt0;
	__IO uint32_t hprt0_dup;

	/* Handle Host Port Interrupts */
	hprt0 = USBx_HPRT0;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]
	hprt0_dup = USBx_HPRT0;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60bb      	str	r3, [r7, #8]

	hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003598:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	/* Check whether Port Connect detected */
	if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET) {
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d10b      	bne.n	80035bc <HCD_Port_IRQHandler+0x50>
		if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS) {
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d102      	bne.n	80035b4 <HCD_Port_IRQHandler+0x48>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
			HAL_HCD_Connect_Callback(hhcd);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f004 ff3e 	bl	8008430 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		}
		hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	60bb      	str	r3, [r7, #8]
	}

	/* Check whether Port Enable Changed */
	if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG) {
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d132      	bne.n	800362c <HCD_Port_IRQHandler+0xc0>
		hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f043 0308 	orr.w	r3, r3, #8
 80035cc:	60bb      	str	r3, [r7, #8]

		if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA) {
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d126      	bne.n	8003626 <HCD_Port_IRQHandler+0xba>
			if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY) {
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7a5b      	ldrb	r3, [r3, #9]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d113      	bne.n	8003608 <HCD_Port_IRQHandler+0x9c>
				if ((hprt0 & USB_OTG_HPRT_PSPD)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80035e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035ea:	d106      	bne.n	80035fa <HCD_Port_IRQHandler+0x8e>
						== (HPRT0_PRTSPD_LOW_SPEED << 17)) {
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2102      	movs	r1, #2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 ff60 	bl	80054b8 <USB_InitFSLSPClkSel>
 80035f8:	e011      	b.n	800361e <HCD_Port_IRQHandler+0xb2>
				} else {
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2101      	movs	r1, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f001 ff59 	bl	80054b8 <USB_InitFSLSPClkSel>
 8003606:	e00a      	b.n	800361e <HCD_Port_IRQHandler+0xb2>
				}
			} else {
				if (hhcd->Init.speed == HCD_SPEED_FULL) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	79db      	ldrb	r3, [r3, #7]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d106      	bne.n	800361e <HCD_Port_IRQHandler+0xb2>
					USBx_HOST->HFIR = HFIR_60_MHZ;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003616:	461a      	mov	r2, r3
 8003618:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800361c:	6053      	str	r3, [r2, #4]
				}
			}
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
			HAL_HCD_PortEnabled_Callback(hhcd);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f004 ff30 	bl	8008484 <HAL_HCD_PortEnabled_Callback>
 8003624:	e002      	b.n	800362c <HCD_Port_IRQHandler+0xc0>

		} else {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
			HAL_HCD_PortDisabled_Callback(hhcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f004 ff3a 	bl	80084a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		}
	}

	/* Check for an overcurrent */
	if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG) {
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b20      	cmp	r3, #32
 8003634:	d103      	bne.n	800363e <HCD_Port_IRQHandler+0xd2>
		hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f043 0320 	orr.w	r3, r3, #32
 800363c:	60bb      	str	r3, [r7, #8]
	}

	/* Clear Port Interrupts */
	USBx_HPRT0 = hprt0_dup;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003644:	461a      	mov	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	6013      	str	r3, [r2, #0]
}
 800364a:	bf00      	nop
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e12b      	b.n	80038be <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd f982 	bl	8000984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2224      	movs	r2, #36	@ 0x24
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036a6:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036b6:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 80036b8:	f001 fa20 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 80036bc:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4a81      	ldr	r2, [pc, #516]	@ (80038c8 <HAL_I2C_Init+0x274>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d807      	bhi.n	80036d8 <HAL_I2C_Init+0x84>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a80      	ldr	r2, [pc, #512]	@ (80038cc <HAL_I2C_Init+0x278>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	bf94      	ite	ls
 80036d0:	2301      	movls	r3, #1
 80036d2:	2300      	movhi	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	e006      	b.n	80036e6 <HAL_I2C_Init+0x92>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a7d      	ldr	r2, [pc, #500]	@ (80038d0 <HAL_I2C_Init+0x27c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	bf94      	ite	ls
 80036e0:	2301      	movls	r3, #1
 80036e2:	2300      	movhi	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0e7      	b.n	80038be <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a78      	ldr	r2, [pc, #480]	@ (80038d4 <HAL_I2C_Init+0x280>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0c9b      	lsrs	r3, r3, #18
 80036f8:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a6a      	ldr	r2, [pc, #424]	@ (80038c8 <HAL_I2C_Init+0x274>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d802      	bhi.n	8003728 <HAL_I2C_Init+0xd4>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3301      	adds	r3, #1
 8003726:	e009      	b.n	800373c <HAL_I2C_Init+0xe8>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	4a69      	ldr	r2, [pc, #420]	@ (80038d8 <HAL_I2C_Init+0x284>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	3301      	adds	r3, #1
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	430b      	orrs	r3, r1
 8003742:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800374e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	495c      	ldr	r1, [pc, #368]	@ (80038c8 <HAL_I2C_Init+0x274>)
 8003758:	428b      	cmp	r3, r1
 800375a:	d819      	bhi.n	8003790 <HAL_I2C_Init+0x13c>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1e59      	subs	r1, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	fbb1 f3f3 	udiv	r3, r1, r3
 800376a:	1c59      	adds	r1, r3, #1
 800376c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003770:	400b      	ands	r3, r1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_I2C_Init+0x138>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1e59      	subs	r1, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fbb1 f3f3 	udiv	r3, r1, r3
 8003784:	3301      	adds	r3, #1
 8003786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378a:	e051      	b.n	8003830 <HAL_I2C_Init+0x1dc>
 800378c:	2304      	movs	r3, #4
 800378e:	e04f      	b.n	8003830 <HAL_I2C_Init+0x1dc>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d111      	bne.n	80037bc <HAL_I2C_Init+0x168>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	440b      	add	r3, r1
 80037a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e012      	b.n	80037e2 <HAL_I2C_Init+0x18e>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1e58      	subs	r0, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	0099      	lsls	r1, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d2:	3301      	adds	r3, #1
 80037d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Init+0x196>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e022      	b.n	8003830 <HAL_I2C_Init+0x1dc>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10e      	bne.n	8003810 <HAL_I2C_Init+0x1bc>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1e58      	subs	r0, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	460b      	mov	r3, r1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	440b      	add	r3, r1
 8003800:	fbb0 f3f3 	udiv	r3, r0, r3
 8003804:	3301      	adds	r3, #1
 8003806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800380e:	e00f      	b.n	8003830 <HAL_I2C_Init+0x1dc>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1e58      	subs	r0, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	0099      	lsls	r1, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	fbb0 f3f3 	udiv	r3, r0, r3
 8003826:	3301      	adds	r3, #1
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	6809      	ldr	r1, [r1, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800385e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6911      	ldr	r1, [r2, #16]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68d2      	ldr	r2, [r2, #12]
 800386a:	4311      	orrs	r1, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	430b      	orrs	r3, r1
 8003872:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	641a      	str	r2, [r3, #64]	@ 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	000186a0 	.word	0x000186a0
 80038cc:	001e847f 	.word	0x001e847f
 80038d0:	003d08ff 	.word	0x003d08ff
 80038d4:	431bde83 	.word	0x431bde83
 80038d8:	10624dd3 	.word	0x10624dd3

080038dc <HAL_I2S_Init>:
 *         in the I2S_InitTypeDef and create the associated handle.
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
	uint16_t tmpreg;
#endif

	/* Check the I2S handle allocation */
	if (hi2s == NULL) {
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_I2S_Init+0x12>
		return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e128      	b.n	8003b40 <HAL_I2S_Init+0x264>
	assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
	assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
	assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
	assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

	if (hi2s->State == HAL_I2S_STATE_RESET) {
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <HAL_I2S_Init+0x32>
		/* Allocate lock resource and initialize it */
		hi2s->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

		/* Initialize Default I2S IrqHandler ISR */
		hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a90      	ldr	r2, [pc, #576]	@ (8003b48 <HAL_I2S_Init+0x26c>)
 8003906:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
		/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
		HAL_I2S_MspInit(hi2s);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fd f883 	bl	8000a14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}

	hi2s->State = HAL_I2S_STATE_BUSY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	CLEAR_BIT(hi2s->Instance->I2SCFGR,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003924:	f023 030f 	bic.w	r3, r3, #15
 8003928:	61d3      	str	r3, [r2, #28]
			(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
	hi2s->Instance->I2SPR = 0x0002U;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2202      	movs	r2, #2
 8003930:	621a      	str	r2, [r3, #32]

	/*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
	/* If the requested audio frequency is not the default, compute the prescaler */
	if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT) {
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d060      	beq.n	80039fc <HAL_I2S_Init+0x120>
		/* Check the frame length (For the Prescaler computing) ********************/
		if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B) {
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <HAL_I2S_Init+0x6c>
			/* Packet length is 16 bits */
			packetlength = 16U;
 8003942:	2310      	movs	r3, #16
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	e001      	b.n	800394c <HAL_I2S_Init+0x70>
		} else {
			/* Packet length is 32 bits */
			packetlength = 32U;
 8003948:	2320      	movs	r3, #32
 800394a:	617b      	str	r3, [r7, #20]
		}

		/* I2S standard */
		if (hi2s->Init.Standard <= I2S_STANDARD_LSB) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b20      	cmp	r3, #32
 8003952:	d802      	bhi.n	800395a <HAL_I2S_Init+0x7e>
			/* In I2S standard packet length is multiplied by 2 */
			packetlength = packetlength * 2U;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
		i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800395a:	2001      	movs	r0, #1
 800395c:	f001 f9c4 	bl	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003960:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

		/* Compute the Real divider depending on the MCLK output state, with a floating point */
		if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE) {
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800396a:	d125      	bne.n	80039b8 <HAL_I2S_Init+0xdc>
			/* MCLK output is enabled */
			if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d010      	beq.n	8003996 <HAL_I2S_Init+0xba>
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	fbb2 f2f3 	udiv	r2, r2, r3
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8003990:	3305      	adds	r3, #5
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e01f      	b.n	80039d6 <HAL_I2S_Init+0xfa>
			} else {
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 80039b2:	3305      	adds	r3, #5
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	e00e      	b.n	80039d6 <HAL_I2S_Init+0xfa>
			}
		} else {
			/* MCLK output is disabled */
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	461a      	mov	r2, r3
					/ hi2s->Init.AudioFreq)) + 5U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 80039d2:	3305      	adds	r3, #5
 80039d4:	613b      	str	r3, [r7, #16]
		}

		/* Remove the flatting point */
		tmp = tmp / 10U;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4a5c      	ldr	r2, [pc, #368]	@ (8003b4c <HAL_I2S_Init+0x270>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	08db      	lsrs	r3, r3, #3
 80039e0:	613b      	str	r3, [r7, #16]

		/* Check the parity of the divider */
		i2sodd = (uint32_t) (tmp & (uint32_t) 1U);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	61bb      	str	r3, [r7, #24]

		/* Compute the i2sdiv prescaler */
		i2sdiv = (uint32_t) ((tmp - i2sodd) / 2U);
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]

		/* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
		i2sodd = (uint32_t) (i2sodd << 8U);
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	e003      	b.n	8003a04 <HAL_I2S_Init+0x128>
	} else {
		/* Set the default values */
		i2sdiv = 2U;
 80039fc:	2302      	movs	r3, #2
 80039fe:	61fb      	str	r3, [r7, #28]
		i2sodd = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61bb      	str	r3, [r7, #24]
	}

	/* Test if the divider is 1 or 0 or greater than 0xFF */
	if ((i2sdiv < 2U) || (i2sdiv > 0xFFU)) {
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d902      	bls.n	8003a10 <HAL_I2S_Init+0x134>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2bff      	cmp	r3, #255	@ 0xff
 8003a0e:	d907      	bls.n	8003a20 <HAL_I2S_Init+0x144>
		/* Set the error code and execute error callback*/
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a14:	f043 0210 	orr.w	r2, r3, #16
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	645a      	str	r2, [r3, #68]	@ 0x44
		return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e08f      	b.n	8003b40 <HAL_I2S_Init+0x264>

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

	/* Write to SPIx I2SPR register the computed value */
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
			| (uint32_t) (i2sodd | (uint32_t) hi2s->Init.MCLKOutput));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	ea42 0103 	orr.w	r1, r2, r3
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	621a      	str	r2, [r3, #32]

	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	/* And configure the I2S with the I2S_InitStruct values                      */
	MODIFY_REG(hi2s->Instance->I2SCFGR,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a3e:	f023 030f 	bic.w	r3, r3, #15
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6851      	ldr	r1, [r2, #4]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6892      	ldr	r2, [r2, #8]
 8003a4a:	4311      	orrs	r1, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68d2      	ldr	r2, [r2, #12]
 8003a50:	4311      	orrs	r1, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6992      	ldr	r2, [r2, #24]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a62:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

	/* Configure the I2S extended if the full duplex mode is enabled */
	assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

	if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE) {
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d161      	bne.n	8003b30 <HAL_I2S_Init+0x254>
		/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
		hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a38      	ldr	r2, [pc, #224]	@ (8003b50 <HAL_I2S_Init+0x274>)
 8003a70:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
		CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a37      	ldr	r2, [pc, #220]	@ (8003b54 <HAL_I2S_Init+0x278>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_I2S_Init+0x1a4>
 8003a7c:	4b36      	ldr	r3, [pc, #216]	@ (8003b58 <HAL_I2S_Init+0x27c>)
 8003a7e:	e001      	b.n	8003a84 <HAL_I2S_Init+0x1a8>
 8003a80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	4932      	ldr	r1, [pc, #200]	@ (8003b54 <HAL_I2S_Init+0x278>)
 8003a8c:	428a      	cmp	r2, r1
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2S_Init+0x1b8>
 8003a90:	4a31      	ldr	r2, [pc, #196]	@ (8003b58 <HAL_I2S_Init+0x27c>)
 8003a92:	e001      	b.n	8003a98 <HAL_I2S_Init+0x1bc>
 8003a94:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a98:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a9c:	f023 030f 	bic.w	r3, r3, #15
 8003aa0:	61d3      	str	r3, [r2, #28]
				(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
		I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b54 <HAL_I2S_Init+0x278>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_I2S_Init+0x1d4>
 8003aac:	4b2a      	ldr	r3, [pc, #168]	@ (8003b58 <HAL_I2S_Init+0x27c>)
 8003aae:	e001      	b.n	8003ab4 <HAL_I2S_Init+0x1d8>
 8003ab0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	621a      	str	r2, [r3, #32]

		/* Get the I2SCFGR register value */
		tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a25      	ldr	r2, [pc, #148]	@ (8003b54 <HAL_I2S_Init+0x278>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2S_Init+0x1ea>
 8003ac2:	4b25      	ldr	r3, [pc, #148]	@ (8003b58 <HAL_I2S_Init+0x27c>)
 8003ac4:	e001      	b.n	8003aca <HAL_I2S_Init+0x1ee>
 8003ac6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	817b      	strh	r3, [r7, #10]

		/* Get the mode to be configured for the extended I2S */
		if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad6:	d003      	beq.n	8003ae0 <HAL_I2S_Init+0x204>
				|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <HAL_I2S_Init+0x20c>
			tmp = I2S_MODE_SLAVE_RX;
 8003ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	e001      	b.n	8003aec <HAL_I2S_Init+0x210>
		} else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
		{
			tmp = I2S_MODE_SLAVE_TX;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
		}

		/* Configure the I2S Slave with the I2S Master parameter values */
		tmpreg |=
				(uint16_t) ((uint16_t) SPI_I2SCFGR_I2SMOD | (uint16_t) tmp
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.Standard
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	b29b      	uxth	r3, r3
		tmpreg |=
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.DataFormat
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	b29b      	uxth	r3, r3
		tmpreg |=
 8003b00:	4313      	orrs	r3, r2
 8003b02:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.CPOL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	b29b      	uxth	r3, r3
		tmpreg |=
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	897b      	ldrh	r3, [r7, #10]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b18:	817b      	strh	r3, [r7, #10]

		/* Write to SPIx I2SCFGR */
		WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003b54 <HAL_I2S_Init+0x278>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <HAL_I2S_Init+0x24c>
 8003b24:	4b0c      	ldr	r3, [pc, #48]	@ (8003b58 <HAL_I2S_Init+0x27c>)
 8003b26:	e001      	b.n	8003b2c <HAL_I2S_Init+0x250>
 8003b28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b2c:	897a      	ldrh	r2, [r7, #10]
 8003b2e:	61da      	str	r2, [r3, #28]
	}
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
	hi2s->State = HAL_I2S_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3720      	adds	r7, #32
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	08003c53 	.word	0x08003c53
 8003b4c:	cccccccd 	.word	0xcccccccd
 8003b50:	08003d69 	.word	0x08003d69
 8003b54:	40003800 	.word	0x40003800
 8003b58:	40003400 	.word	0x40003400

08003b5c <HAL_I2S_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_TxCpltCallback could be implemented in the user file
	 */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_I2S_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_I2S_ErrorCallback>:
 * @brief  I2S error callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_ErrorCallback could be implemented in the user file
	 */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <I2S_Transmit_IT>:
 * @brief  Transmit an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
	/* Transmit data */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	881a      	ldrh	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60da      	str	r2, [r3, #12]
	hi2s->pTxBuffPtr++;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	1c9a      	adds	r2, r3, #2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	625a      	str	r2, [r3, #36]	@ 0x24
	hi2s->TxXferCount--;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10e      	bne.n	8003bec <I2S_Transmit_IT+0x54>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003bdc:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
		HAL_I2S_TxCpltCallback(hi2s);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ffb8 	bl	8003b5c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <I2S_Receive_IT>:
 * @brief  Receive an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	/* Receive data */
	(*hi2s->pRxBuffPtr) = (uint16_t) hi2s->Instance->DR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c06:	b292      	uxth	r2, r2
 8003c08:	801a      	strh	r2, [r3, #0]
	hi2s->pRxBuffPtr++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	62da      	str	r2, [r3, #44]	@ 0x2c
	hi2s->RxXferCount--;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10e      	bne.n	8003c4a <I2S_Receive_IT+0x56>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c3a:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
		HAL_I2S_RxCpltCallback(hi2s);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff93 	bl	8003b70 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <I2S_IRQHandler>:
 * @brief  This function handles I2S interrupt request.
 * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s) {
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b086      	sub	sp, #24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	617b      	str	r3, [r7, #20]

	if (hi2s->State == HAL_I2S_STATE_BUSY_RX) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d13a      	bne.n	8003ce4 <I2S_IRQHandler+0x92>
		/* I2S in mode Receiver ------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d109      	bne.n	8003c8c <I2S_IRQHandler+0x3a>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET)) {
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c82:	2b40      	cmp	r3, #64	@ 0x40
 8003c84:	d102      	bne.n	8003c8c <I2S_IRQHandler+0x3a>
			I2S_Receive_IT(hi2s);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ffb4 	bl	8003bf4 <I2S_Receive_IT>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c92:	2b40      	cmp	r3, #64	@ 0x40
 8003c94:	d126      	bne.n	8003ce4 <I2S_IRQHandler+0x92>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d11f      	bne.n	8003ce4 <I2S_IRQHandler+0x92>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cb2:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	f043 0202 	orr.w	r2, r3, #2
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff ff50 	bl	8003b84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}

	if (hi2s->State == HAL_I2S_STATE_BUSY_TX) {
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d136      	bne.n	8003d5e <I2S_IRQHandler+0x10c>
		/* I2S in mode Transmitter -----------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d109      	bne.n	8003d0e <I2S_IRQHandler+0xbc>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET)) {
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d04:	2b80      	cmp	r3, #128	@ 0x80
 8003d06:	d102      	bne.n	8003d0e <I2S_IRQHandler+0xbc>
			I2S_Transmit_IT(hi2s);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff45 	bl	8003b98 <I2S_Transmit_IT>
		}

		/* I2S Underrun error interrupt occurred --------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d122      	bne.n	8003d5e <I2S_IRQHandler+0x10c>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d11b      	bne.n	8003d5e <I2S_IRQHandler+0x10c>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d34:	605a      	str	r2, [r3, #4]

			/* Clear Underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d50:	f043 0204 	orr.w	r2, r3, #4
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ff13 	bl	8003b84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8003d5e:	bf00      	nop
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_I2SEx_FullDuplex_IRQHandler>:
/**
 * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
 * @param  hi2s I2S handle
 * @retval HAL status
 */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a92      	ldr	r2, [pc, #584]	@ (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d82:	4b92      	ldr	r3, [pc, #584]	@ (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d84:	e001      	b.n	8003d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	61bb      	str	r3, [r7, #24]
	__IO uint32_t i2scr2 = hi2s->Instance->CR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	617b      	str	r3, [r7, #20]
	__IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a8b      	ldr	r2, [pc, #556]	@ (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003da0:	4b8a      	ldr	r3, [pc, #552]	@ (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003da2:	e001      	b.n	8003da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003da4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	613b      	str	r3, [r7, #16]

	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db4:	d004      	beq.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
			|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 8099 	bne.w	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
		/* I2S in mode Transmitter -------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d107      	bne.n	8003dda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
				&& ((i2scr2 & I2S_IT_TXE) != RESET)) {
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2S(hi2s);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f925 	bl	8004024 <I2SEx_TxISR_I2S>
		}

		/* I2Sext in mode Receiver -----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
				&& ((i2sextcr2 & I2S_IT_RXNE) != RESET)) {
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2SExt(hi2s);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9c8 	bl	8004184 <I2SEx_RxISR_I2SExt>
		}

		/* I2Sext Overrun error interrupt occurred --------------------------------*/
		if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d13a      	bne.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d035      	beq.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e12:	4b6e      	ldr	r3, [pc, #440]	@ (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e14:	e001      	b.n	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4969      	ldr	r1, [pc, #420]	@ (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e22:	428b      	cmp	r3, r1
 8003e24:	d101      	bne.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e26:	4b69      	ldr	r3, [pc, #420]	@ (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e28:	e001      	b.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e32:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e42:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	f043 0202 	orr.w	r2, r3, #2
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fe88 	bl	8003b84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2S Underrun error interrupt occurred ----------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	f040 80c3 	bne.w	8004006 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80bd 	beq.w	8004006 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e9a:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a49      	ldr	r2, [pc, #292]	@ (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ea6:	4b49      	ldr	r3, [pc, #292]	@ (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea8:	e001      	b.n	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003eaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4944      	ldr	r1, [pc, #272]	@ (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb6:	428b      	cmp	r3, r1
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003eba:	4b44      	ldr	r3, [pc, #272]	@ (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ebc:	e001      	b.n	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ebe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ec6:	605a      	str	r2, [r3, #4]

			/* Clear underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	f043 0204 	orr.w	r2, r3, #4
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff fe4a 	bl	8003b84 <HAL_I2S_ErrorCallback>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8003ef0:	e089      	b.n	8004006 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
		}
	}
	/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
	else {
		/* I2Sext in mode Transmitter ----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d107      	bne.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
				&& ((i2sextcr2 & I2S_IT_TXE) != RESET)) {
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2SExt(hi2s);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8be 	bl	8004088 <I2SEx_TxISR_I2SExt>
		}

		/* I2S in mode Receiver --------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d107      	bne.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
				&& ((i2scr2 & I2S_IT_RXNE) != RESET)) {
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2S(hi2s);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f8fd 	bl	8004120 <I2SEx_RxISR_I2S>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d12f      	bne.n	8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d02a      	beq.n	8003f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f48:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f54:	4b1d      	ldr	r3, [pc, #116]	@ (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f56:	e001      	b.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4919      	ldr	r1, [pc, #100]	@ (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d101      	bne.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f68:	4b18      	ldr	r3, [pc, #96]	@ (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f6a:	e001      	b.n	8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f74:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f043 0202 	orr.w	r2, r3, #2
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fdfa 	bl	8003b84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2Sext Underrun error interrupt occurred -------------------------------*/
		if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d136      	bne.n	8004008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d031      	beq.n	8004008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a07      	ldr	r2, [pc, #28]	@ (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003fae:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fb0:	e001      	b.n	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003fb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4902      	ldr	r1, [pc, #8]	@ (8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fbe:	428b      	cmp	r3, r1
 8003fc0:	d106      	bne.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003fc2:	4b02      	ldr	r3, [pc, #8]	@ (8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fc4:	e006      	b.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003fc6:	bf00      	nop
 8003fc8:	40003800 	.word	0x40003800
 8003fcc:	40003400 	.word	0x40003400
 8003fd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fd8:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fe8:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f043 0204 	orr.w	r2, r3, #4
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff fdc0 	bl	8003b84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8004004:	e000      	b.n	8004008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8004006:	bf00      	nop
}
 8004008:	bf00      	nop
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_I2SEx_TxRxCpltCallback>:
/**
 * @brief  Tx and Rx Transfer completed callback
 * @param  hi2s I2S handle
 * @retval None
 */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
	 */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <I2SEx_TxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	1c99      	adds	r1, r3, #2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6251      	str	r1, [r2, #36]	@ 0x24
 8004036:	881a      	ldrh	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d113      	bne.n	800407e <I2SEx_TxISR_I2S+0x5a>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004064:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d106      	bne.n	800407e <I2SEx_TxISR_I2S+0x5a>
			hi2s->State = HAL_I2S_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff ffc9 	bl	8004010 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <I2SEx_TxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	1c99      	adds	r1, r3, #2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6251      	str	r1, [r2, #36]	@ 0x24
 800409a:	8819      	ldrh	r1, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004118 <I2SEx_TxISR_I2SExt+0x90>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <I2SEx_TxISR_I2SExt+0x22>
 80040a6:	4b1d      	ldr	r3, [pc, #116]	@ (800411c <I2SEx_TxISR_I2SExt+0x94>)
 80040a8:	e001      	b.n	80040ae <I2SEx_TxISR_I2SExt+0x26>
 80040aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ae:	460a      	mov	r2, r1
 80040b0:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d121      	bne.n	800410e <I2SEx_TxISR_I2SExt+0x86>
		/* Disable I2Sext TXE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a12      	ldr	r2, [pc, #72]	@ (8004118 <I2SEx_TxISR_I2SExt+0x90>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <I2SEx_TxISR_I2SExt+0x50>
 80040d4:	4b11      	ldr	r3, [pc, #68]	@ (800411c <I2SEx_TxISR_I2SExt+0x94>)
 80040d6:	e001      	b.n	80040dc <I2SEx_TxISR_I2SExt+0x54>
 80040d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	490d      	ldr	r1, [pc, #52]	@ (8004118 <I2SEx_TxISR_I2SExt+0x90>)
 80040e4:	428b      	cmp	r3, r1
 80040e6:	d101      	bne.n	80040ec <I2SEx_TxISR_I2SExt+0x64>
 80040e8:	4b0c      	ldr	r3, [pc, #48]	@ (800411c <I2SEx_TxISR_I2SExt+0x94>)
 80040ea:	e001      	b.n	80040f0 <I2SEx_TxISR_I2SExt+0x68>
 80040ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040f4:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <I2SEx_TxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff81 	bl	8004010 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40003800 	.word	0x40003800
 800411c:	40003400 	.word	0x40003400

08004120 <I2SEx_RxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68d8      	ldr	r0, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	1c99      	adds	r1, r3, #2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004138:	b282      	uxth	r2, r0
 800413a:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d113      	bne.n	800417c <I2SEx_RxISR_I2S+0x5c>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004162:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <I2SEx_RxISR_I2S+0x5c>
			hi2s->State = HAL_I2S_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ff4a 	bl	8004010 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <I2SEx_RxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a20      	ldr	r2, [pc, #128]	@ (8004214 <I2SEx_RxISR_I2SExt+0x90>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <I2SEx_RxISR_I2SExt+0x16>
 8004196:	4b20      	ldr	r3, [pc, #128]	@ (8004218 <I2SEx_RxISR_I2SExt+0x94>)
 8004198:	e001      	b.n	800419e <I2SEx_RxISR_I2SExt+0x1a>
 800419a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800419e:	68d8      	ldr	r0, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	1c99      	adds	r1, r3, #2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041aa:	b282      	uxth	r2, r0
 80041ac:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d121      	bne.n	800420a <I2SEx_RxISR_I2SExt+0x86>
		/* Disable I2Sext RXNE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a12      	ldr	r2, [pc, #72]	@ (8004214 <I2SEx_RxISR_I2SExt+0x90>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <I2SEx_RxISR_I2SExt+0x50>
 80041d0:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <I2SEx_RxISR_I2SExt+0x94>)
 80041d2:	e001      	b.n	80041d8 <I2SEx_RxISR_I2SExt+0x54>
 80041d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	490d      	ldr	r1, [pc, #52]	@ (8004214 <I2SEx_RxISR_I2SExt+0x90>)
 80041e0:	428b      	cmp	r3, r1
 80041e2:	d101      	bne.n	80041e8 <I2SEx_RxISR_I2SExt+0x64>
 80041e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <I2SEx_RxISR_I2SExt+0x94>)
 80041e6:	e001      	b.n	80041ec <I2SEx_RxISR_I2SExt+0x68>
 80041e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041f0:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <I2SEx_RxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff03 	bl	8004010 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40003800 	.word	0x40003800
 8004218:	40003400 	.word	0x40003400

0800421c <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e267      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d075      	beq.n	8004326 <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800423a:	4b88      	ldr	r3, [pc, #544]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b04      	cmp	r3, #4
 8004244:	d00c      	beq.n	8004260 <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004246:	4b85      	ldr	r3, [pc, #532]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b08      	cmp	r3, #8
 8004250:	d112      	bne.n	8004278 <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8004252:	4b82      	ldr	r3, [pc, #520]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800425a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800425e:	d10b      	bne.n	8004278 <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004260:	4b7e      	ldr	r3, [pc, #504]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d05b      	beq.n	8004324 <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d157      	bne.n	8004324 <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e242      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004280:	d106      	bne.n	8004290 <HAL_RCC_OscConfig+0x74>
 8004282:	4b76      	ldr	r3, [pc, #472]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a75      	ldr	r2, [pc, #468]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e01d      	b.n	80042cc <HAL_RCC_OscConfig+0xb0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x98>
 800429a:	4b70      	ldr	r3, [pc, #448]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a6f      	ldr	r2, [pc, #444]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80042a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b6d      	ldr	r3, [pc, #436]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a6c      	ldr	r2, [pc, #432]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0xb0>
 80042b4:	4b69      	ldr	r3, [pc, #420]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a68      	ldr	r2, [pc, #416]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80042ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	4b66      	ldr	r3, [pc, #408]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a65      	ldr	r2, [pc, #404]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80042c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ca:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d013      	beq.n	80042fc <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80042d4:	f7fc fd78 	bl	8000dc8 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80042dc:	f7fc fd74 	bl	8000dc8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	@ 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e207      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80042ee:	4b5b      	ldr	r3, [pc, #364]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0xc0>
 80042fa:	e014      	b.n	8004326 <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80042fc:	f7fc fd64 	bl	8000dc8 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004304:	f7fc fd60 	bl	8000dc8 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	@ 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e1f3      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8004316:	4b51      	ldr	r3, [pc, #324]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0xe8>
 8004322:	e000      	b.n	8004326 <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004324:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d063      	beq.n	80043fa <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004332:	4b4a      	ldr	r3, [pc, #296]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800433e:	4b47      	ldr	r3, [pc, #284]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b08      	cmp	r3, #8
 8004348:	d11c      	bne.n	8004384 <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800434a:	4b44      	ldr	r3, [pc, #272]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d116      	bne.n	8004384 <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	4b41      	ldr	r3, [pc, #260]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e1c7      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800436e:	4b3b      	ldr	r3, [pc, #236]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4937      	ldr	r1, [pc, #220]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	e03a      	b.n	80043fa <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 800438c:	4b34      	ldr	r3, [pc, #208]	@ (8004460 <HAL_RCC_OscConfig+0x244>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004392:	f7fc fd19 	bl	8000dc8 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800439a:	f7fc fd15 	bl	8000dc8 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e1a8      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80043ac:	4b2b      	ldr	r3, [pc, #172]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80043b8:	4b28      	ldr	r3, [pc, #160]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4925      	ldr	r1, [pc, #148]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]
 80043cc:	e015      	b.n	80043fa <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 80043ce:	4b24      	ldr	r3, [pc, #144]	@ (8004460 <HAL_RCC_OscConfig+0x244>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80043d4:	f7fc fcf8 	bl	8000dc8 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80043dc:	f7fc fcf4 	bl	8000dc8 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e187      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80043ee:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d036      	beq.n	8004474 <HAL_RCC_OscConfig+0x258>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d016      	beq.n	800443c <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800440e:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <HAL_RCC_OscConfig+0x248>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004414:	f7fc fcd8 	bl	8000dc8 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800441c:	f7fc fcd4 	bl	8000dc8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e167      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800442e:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <HAL_RCC_OscConfig+0x240>)
 8004430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x200>
 800443a:	e01b      	b.n	8004474 <HAL_RCC_OscConfig+0x258>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 800443c:	4b09      	ldr	r3, [pc, #36]	@ (8004464 <HAL_RCC_OscConfig+0x248>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8004442:	f7fc fcc1 	bl	8000dc8 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8004448:	e00e      	b.n	8004468 <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800444a:	f7fc fcbd 	bl	8000dc8 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d907      	bls.n	8004468 <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e150      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
 800445c:	40023800 	.word	0x40023800
 8004460:	42470000 	.word	0x42470000
 8004464:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8004468:	4b88      	ldr	r3, [pc, #544]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 800446a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ea      	bne.n	800444a <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8097 	beq.w	80045b0 <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8004482:	2300      	movs	r3, #0
 8004484:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8004486:	4b81      	ldr	r3, [pc, #516]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <HAL_RCC_OscConfig+0x296>
			__HAL_RCC_PWR_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	4b7d      	ldr	r3, [pc, #500]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	4a7c      	ldr	r2, [pc, #496]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044a2:	4b7a      	ldr	r3, [pc, #488]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80044b2:	4b77      	ldr	r3, [pc, #476]	@ (8004690 <HAL_RCC_OscConfig+0x474>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d118      	bne.n	80044f0 <HAL_RCC_OscConfig+0x2d4>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 80044be:	4b74      	ldr	r3, [pc, #464]	@ (8004690 <HAL_RCC_OscConfig+0x474>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a73      	ldr	r2, [pc, #460]	@ (8004690 <HAL_RCC_OscConfig+0x474>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c8:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 80044ca:	f7fc fc7d 	bl	8000dc8 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x2c8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80044d2:	f7fc fc79 	bl	8000dc8 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x2c8>
					return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e10c      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80044e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004690 <HAL_RCC_OscConfig+0x474>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d106      	bne.n	8004506 <HAL_RCC_OscConfig+0x2ea>
 80044f8:	4b64      	ldr	r3, [pc, #400]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fc:	4a63      	ldr	r2, [pc, #396]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	6713      	str	r3, [r2, #112]	@ 0x70
 8004504:	e01c      	b.n	8004540 <HAL_RCC_OscConfig+0x324>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x30c>
 800450e:	4b5f      	ldr	r3, [pc, #380]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004512:	4a5e      	ldr	r2, [pc, #376]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004514:	f043 0304 	orr.w	r3, r3, #4
 8004518:	6713      	str	r3, [r2, #112]	@ 0x70
 800451a:	4b5c      	ldr	r3, [pc, #368]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451e:	4a5b      	ldr	r2, [pc, #364]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6713      	str	r3, [r2, #112]	@ 0x70
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0x324>
 8004528:	4b58      	ldr	r3, [pc, #352]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452c:	4a57      	ldr	r2, [pc, #348]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	6713      	str	r3, [r2, #112]	@ 0x70
 8004534:	4b55      	ldr	r3, [pc, #340]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004538:	4a54      	ldr	r2, [pc, #336]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 800453a:	f023 0304 	bic.w	r3, r3, #4
 800453e:	6713      	str	r3, [r2, #112]	@ 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <HAL_RCC_OscConfig+0x358>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004548:	f7fc fc3e 	bl	8000dc8 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800454e:	e00a      	b.n	8004566 <HAL_RCC_OscConfig+0x34a>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004550:	f7fc fc3a 	bl	8000dc8 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x34a>
					return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0cb      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004566:	4b49      	ldr	r3, [pc, #292]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0ee      	beq.n	8004550 <HAL_RCC_OscConfig+0x334>
 8004572:	e014      	b.n	800459e <HAL_RCC_OscConfig+0x382>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8004574:	f7fc fc28 	bl	8000dc8 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 800457a:	e00a      	b.n	8004592 <HAL_RCC_OscConfig+0x376>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800457c:	f7fc fc24 	bl	8000dc8 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x376>
					return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0b5      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8004592:	4b3e      	ldr	r3, [pc, #248]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1ee      	bne.n	800457c <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <HAL_RCC_OscConfig+0x394>
			__HAL_RCC_PWR_CLK_DISABLE();
 80045a4:	4b39      	ldr	r3, [pc, #228]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	4a38      	ldr	r2, [pc, #224]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 80045aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	6413      	str	r3, [r2, #64]	@ 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80a1 	beq.w	80046fc <HAL_RCC_OscConfig+0x4e0>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 80045ba:	4b34      	ldr	r3, [pc, #208]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d05c      	beq.n	8004680 <HAL_RCC_OscConfig+0x464>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d141      	bne.n	8004652 <HAL_RCC_OscConfig+0x436>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80045ce:	4b31      	ldr	r3, [pc, #196]	@ (8004694 <HAL_RCC_OscConfig+0x478>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80045d4:	f7fc fbf8 	bl	8000dc8 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x3d2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80045dc:	f7fc fbf4 	bl	8000dc8 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x3d2>
						return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e087      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80045ee:	4b27      	ldr	r3, [pc, #156]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	019b      	lsls	r3, r3, #6
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	3b01      	subs	r3, #1
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	491b      	ldr	r1, [pc, #108]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8004624:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <HAL_RCC_OscConfig+0x478>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800462a:	f7fc fbcd 	bl	8000dc8 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x428>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004632:	f7fc fbc9 	bl	8000dc8 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x428>
						return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e05c      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004644:	4b11      	ldr	r3, [pc, #68]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x416>
 8004650:	e054      	b.n	80046fc <HAL_RCC_OscConfig+0x4e0>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8004652:	4b10      	ldr	r3, [pc, #64]	@ (8004694 <HAL_RCC_OscConfig+0x478>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004658:	f7fc fbb6 	bl	8000dc8 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x456>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004660:	f7fc fbb2 	bl	8000dc8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x456>
						return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e045      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004672:	4b06      	ldr	r3, [pc, #24]	@ (800468c <HAL_RCC_OscConfig+0x470>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x444>
 800467e:	e03d      	b.n	80046fc <HAL_RCC_OscConfig+0x4e0>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d107      	bne.n	8004698 <HAL_RCC_OscConfig+0x47c>
				return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e038      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
 800468c:	40023800 	.word	0x40023800
 8004690:	40007000 	.word	0x40007000
 8004694:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 8004698:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <HAL_RCC_OscConfig+0x4ec>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d028      	beq.n	80046f8 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d121      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80046be:	429a      	cmp	r2, r3
 80046c0:	d11a      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046c8:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 80046ce:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d111      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046de:	085b      	lsrs	r3, r3, #1
 80046e0:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 80046e2:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 80046f2:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
						{
					return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_RCC_OscConfig+0x4e2>
				}
			}
		}
	}
	return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800

0800470c <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0cc      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8004720:	4b68      	ldr	r3, [pc, #416]	@ (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d90c      	bls.n	8004748 <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800472e:	4b65      	ldr	r3, [pc, #404]	@ (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8004736:	4b63      	ldr	r3, [pc, #396]	@ (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0b8      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d020      	beq.n	8004796 <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004760:	4b59      	ldr	r3, [pc, #356]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4a58      	ldr	r2, [pc, #352]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800476a:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004778:	4b53      	ldr	r3, [pc, #332]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4a52      	ldr	r2, [pc, #328]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004782:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004784:	4b50      	ldr	r3, [pc, #320]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	494d      	ldr	r1, [pc, #308]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d044      	beq.n	800482c <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80047aa:	4b47      	ldr	r3, [pc, #284]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d119      	bne.n	80047ea <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e07f      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d003      	beq.n	80047ca <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d107      	bne.n	80047da <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80047ca:	4b3f      	ldr	r3, [pc, #252]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e06f      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80047da:	4b3b      	ldr	r3, [pc, #236]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e067      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ea:	4b37      	ldr	r3, [pc, #220]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f023 0203 	bic.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4934      	ldr	r1, [pc, #208]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 80047fc:	f7fc fae4 	bl	8000dc8 <HAL_GetTick>
 8004800:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004802:	e00a      	b.n	800481a <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8004804:	f7fc fae0 	bl	8000dc8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e04f      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800481a:	4b2b      	ldr	r3, [pc, #172]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	429a      	cmp	r2, r3
 800482a:	d1eb      	bne.n	8004804 <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 800482c:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d20c      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800483a:	4b22      	ldr	r3, [pc, #136]	@ (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8004842:	4b20      	ldr	r3, [pc, #128]	@ (80048c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e032      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8004860:	4b19      	ldr	r3, [pc, #100]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4916      	ldr	r1, [pc, #88]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 800487e:	4b12      	ldr	r3, [pc, #72]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	490e      	ldr	r1, [pc, #56]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004892:	f000 f821 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 8004896:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004898:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	490a      	ldr	r1, [pc, #40]	@ (80048cc <HAL_RCC_ClockConfig+0x1c0>)
 80048a4:	5ccb      	ldrb	r3, [r1, r3]
 80048a6:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80048aa:	4a09      	ldr	r2, [pc, #36]	@ (80048d0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 80048ae:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <HAL_RCC_ClockConfig+0x1c8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc fa44 	bl	8000d40 <HAL_InitTick>

	return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023c00 	.word	0x40023c00
 80048c8:	40023800 	.word	0x40023800
 80048cc:	08008b5c 	.word	0x08008b5c
 80048d0:	20000000 	.word	0x20000000
 80048d4:	20000004 	.word	0x20000004

080048d8 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 80048d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048dc:	b094      	sub	sp, #80	@ 0x50
 80048de:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t pllvco = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t pllp = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t sysclockfreq = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	64bb      	str	r3, [r7, #72]	@ 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80048f0:	4b79      	ldr	r3, [pc, #484]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d00d      	beq.n	8004918 <HAL_RCC_GetSysClockFreq+0x40>
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	f200 80e1 	bhi.w	8004ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x34>
 8004906:	2b04      	cmp	r3, #4
 8004908:	d003      	beq.n	8004912 <HAL_RCC_GetSysClockFreq+0x3a>
 800490a:	e0db      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 800490c:	4b73      	ldr	r3, [pc, #460]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x204>)
 800490e:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004910:	e0db      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 8004912:	4b73      	ldr	r3, [pc, #460]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004914:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004916:	e0d8      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004918:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004920:	647b      	str	r3, [r7, #68]	@ 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8004922:	4b6d      	ldr	r3, [pc, #436]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d063      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0x11e>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800492e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004930:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004932:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004934:	2200      	movs	r2, #0
 8004936:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004938:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800493a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004940:	633b      	str	r3, [r7, #48]	@ 0x30
 8004942:	2300      	movs	r3, #0
 8004944:	637b      	str	r3, [r7, #52]	@ 0x34
 8004946:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800494a:	4622      	mov	r2, r4
 800494c:	462b      	mov	r3, r5
 800494e:	f04f 0000 	mov.w	r0, #0
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	0159      	lsls	r1, r3, #5
 8004958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800495c:	0150      	lsls	r0, r2, #5
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4621      	mov	r1, r4
 8004964:	1a51      	subs	r1, r2, r1
 8004966:	6139      	str	r1, [r7, #16]
 8004968:	4629      	mov	r1, r5
 800496a:	eb63 0301 	sbc.w	r3, r3, r1
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800497c:	4659      	mov	r1, fp
 800497e:	018b      	lsls	r3, r1, #6
 8004980:	4651      	mov	r1, sl
 8004982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004986:	4651      	mov	r1, sl
 8004988:	018a      	lsls	r2, r1, #6
 800498a:	4651      	mov	r1, sl
 800498c:	ebb2 0801 	subs.w	r8, r2, r1
 8004990:	4659      	mov	r1, fp
 8004992:	eb63 0901 	sbc.w	r9, r3, r1
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049aa:	4690      	mov	r8, r2
 80049ac:	4699      	mov	r9, r3
 80049ae:	4623      	mov	r3, r4
 80049b0:	eb18 0303 	adds.w	r3, r8, r3
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	462b      	mov	r3, r5
 80049b8:	eb49 0303 	adc.w	r3, r9, r3
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049ca:	4629      	mov	r1, r5
 80049cc:	024b      	lsls	r3, r1, #9
 80049ce:	4621      	mov	r1, r4
 80049d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049d4:	4621      	mov	r1, r4
 80049d6:	024a      	lsls	r2, r1, #9
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80049dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049de:	2200      	movs	r2, #0
 80049e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049e8:	f7fb fbee 	bl	80001c8 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80049f0:	4613      	mov	r3, r2
 80049f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049f4:	e058      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x1d0>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80049f6:	4b38      	ldr	r3, [pc, #224]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f8:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80049fa:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80049fc:	2200      	movs	r2, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	4611      	mov	r1, r2
 8004a02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a06:	623b      	str	r3, [r7, #32]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a10:	4642      	mov	r2, r8
 8004a12:	464b      	mov	r3, r9
 8004a14:	f04f 0000 	mov.w	r0, #0
 8004a18:	f04f 0100 	mov.w	r1, #0
 8004a1c:	0159      	lsls	r1, r3, #5
 8004a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a22:	0150      	lsls	r0, r2, #5
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4641      	mov	r1, r8
 8004a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a2e:	4649      	mov	r1, r9
 8004a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a48:	ebb2 040a 	subs.w	r4, r2, sl
 8004a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	00eb      	lsls	r3, r5, #3
 8004a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5e:	00e2      	lsls	r2, r4, #3
 8004a60:	4614      	mov	r4, r2
 8004a62:	461d      	mov	r5, r3
 8004a64:	4643      	mov	r3, r8
 8004a66:	18e3      	adds	r3, r4, r3
 8004a68:	603b      	str	r3, [r7, #0]
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	eb45 0303 	adc.w	r3, r5, r3
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a7e:	4629      	mov	r1, r5
 8004a80:	028b      	lsls	r3, r1, #10
 8004a82:	4621      	mov	r1, r4
 8004a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a88:	4621      	mov	r1, r4
 8004a8a:	028a      	lsls	r2, r1, #10
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a92:	2200      	movs	r2, #0
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	61fa      	str	r2, [r7, #28]
 8004a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a9c:	f7fb fb94 	bl	80001c8 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 8004ab2:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	643b      	str	r3, [r7, #64]	@ 0x40

		sysclockfreq = pllvco / pllp;
 8004ab8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004ac2:	e002      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 8004ac4:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004ac8:	bf00      	nop
	}
	}
	return sysclockfreq;
 8004aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3750      	adds	r7, #80	@ 0x50
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	00f42400 	.word	0x00f42400
 8004ae0:	007a1200 	.word	0x007a1200

08004ae4 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aea:	681b      	ldr	r3, [r3, #0]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000000 	.word	0x20000000

08004afc <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8004b00:	f7ff fff0 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b06:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	0a9b      	lsrs	r3, r3, #10
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4903      	ldr	r1, [pc, #12]	@ (8004b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	08008b6c 	.word	0x08008b6c

08004b24 <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg1 = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d105      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x28>
			== RCC_PERIPHCLK_I2S)
			|| (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d035      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x94>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8004b4c:	4b62      	ldr	r3, [pc, #392]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8004b52:	f7fc f939 	bl	8000dc8 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8004b58:	e008      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x48>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8004b5a:	f7fc f935 	bl	8000dc8 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x48>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e0b0      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8004b6c:	4b5b      	ldr	r3, [pc, #364]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f0      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	019a      	lsls	r2, r3, #6
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	071b      	lsls	r3, r3, #28
 8004b84:	4955      	ldr	r1, [pc, #340]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
				PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 8004b8c:	4b52      	ldr	r3, [pc, #328]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8004b92:	f7fc f919 	bl	8000dc8 <HAL_GetTick>
 8004b96:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8004b98:	e008      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x88>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8004b9a:	f7fc f915 	bl	8000dc8 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x88>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e090      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8004bac:	4b4b      	ldr	r3, [pc, #300]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8083 	beq.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
			== (RCC_PERIPHCLK_RTC)) {
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	4b44      	ldr	r3, [pc, #272]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	4a43      	ldr	r2, [pc, #268]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bd6:	4b41      	ldr	r3, [pc, #260]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 8004be2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bec:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 8004bee:	f7fc f8eb 	bl	8000dc8 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8004bf4:	e008      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8004bf6:	f7fc f8e7 	bl	8000dc8 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
				return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e062      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8004c08:	4b35      	ldr	r3, [pc, #212]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c14:	4b31      	ldr	r3, [pc, #196]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c1c:	613b      	str	r3, [r7, #16]
		if ((tmpreg1 != 0x00000000U)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d02f      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x160>
				&& ((tmpreg1)
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
				&& ((tmpreg1)
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d028      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x160>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c32:	4b2a      	ldr	r3, [pc, #168]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c3a:	613b      	str	r3, [r7, #16]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8004c3c:	4b29      	ldr	r3, [pc, #164]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 8004c42:	4b28      	ldr	r3, [pc, #160]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 8004c48:	4a24      	ldr	r2, [pc, #144]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6713      	str	r3, [r2, #112]	@ 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 8004c4e:	4b23      	ldr	r3, [pc, #140]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d114      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x160>
				/* Get tick */
				tickstart = HAL_GetTick();
 8004c5a:	f7fc f8b5 	bl	8000dc8 <HAL_GetTick>
 8004c5e:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004c60:	e00a      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x154>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004c62:	f7fc f8b1 	bl	8000dc8 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x154>
						return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e02a      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004c78:	4b18      	ldr	r3, [pc, #96]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0ee      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c90:	d10d      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c92:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca6:	490d      	ldr	r1, [pc, #52]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]
 8004cac:	e005      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004cb8:	6093      	str	r3, [r2, #8]
 8004cba:	4b08      	ldr	r3, [pc, #32]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc6:	4905      	ldr	r1, [pc, #20]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	42470068 	.word	0x42470068
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	40007000 	.word	0x40007000
 8004ce4:	42470e40 	.word	0x42470e40

08004ce8 <HAL_RCCEx_GetPeriphCLKFreq>:
 * @param  PeriphClk Peripheral clock identifier
 *         This parameter can be one of the following values:
 *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
 * @retval Frequency in KHz
 */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk) {
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
	/* This variable used to store the I2S clock frequency (value in Hz) */
	uint32_t frequency = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
	/* This variable used to store the VCO Input (value in Hz) */
	uint32_t vcoinput = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]
	uint32_t srcclk = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
	/* This variable used to store the VCO Output (value in Hz) */
	uint32_t vcooutput = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60bb      	str	r3, [r7, #8]
	switch (PeriphClk) {
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d13f      	bne.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
	case RCC_PERIPHCLK_I2S: {
		/* Get the current I2S source */
		srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d06:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d0e:	60fb      	str	r3, [r7, #12]
		switch (srcclk) {
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d1c:	d12f      	bne.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
		/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
		case RCC_I2SCLKSOURCE_EXT: {
			/* Set the I2S clock to the external clock  value */
			frequency = EXTERNAL_CLOCK_VALUE;
 8004d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d20:	617b      	str	r3, [r7, #20]
			break;
 8004d22:	e02f      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
			/* Configure the PLLI2S division factor */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE) {
 8004d24:	4b1c      	ldr	r3, [pc, #112]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d30:	d108      	bne.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSE_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d32:	4b19      	ldr	r3, [pc, #100]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSE_VALUE
 8004d3a:	4a19      	ldr	r2, [pc, #100]	@ (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	e007      	b.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
			} else {
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSI_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d44:	4b14      	ldr	r3, [pc, #80]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSI_VALUE
 8004d4c:	4a15      	ldr	r2, [pc, #84]	@ (8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d52:	613b      	str	r3, [r7, #16]
			}
#endif /* STM32F411xE */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			vcooutput = (uint32_t) (vcoinput
					* (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)
 8004d54:	4b10      	ldr	r3, [pc, #64]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d5a:	099b      	lsrs	r3, r3, #6
							& (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
			vcooutput = (uint32_t) (vcoinput
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	60bb      	str	r3, [r7, #8]
			/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
			frequency = (uint32_t) (vcooutput
					/ (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U)
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d6e:	0f1b      	lsrs	r3, r3, #28
							& (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d70:	f003 0307 	and.w	r3, r3, #7
			frequency = (uint32_t) (vcooutput
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	617b      	str	r3, [r7, #20]
			break;
 8004d7c:	e002      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
		}
			/* Clock not enabled for I2S*/
		default: {
			frequency = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]
			break;
 8004d82:	bf00      	nop
		}
		}
		break;
 8004d84:	e000      	b.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
	}
	default: {
		break;
 8004d86:	bf00      	nop
	}
	}
	return frequency;
 8004d88:	697b      	ldr	r3, [r7, #20]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	00bb8000 	.word	0x00bb8000
 8004da0:	007a1200 	.word	0x007a1200
 8004da4:	00f42400 	.word	0x00f42400

08004da8 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07b      	b.n	8004eb2 <HAL_SPI_Init+0x10a>
	assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d108      	bne.n	8004dd4 <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dca:	d009      	beq.n	8004de0 <HAL_SPI_Init+0x38>
			assert_param(
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	61da      	str	r2, [r3, #28]
 8004dd2:	e005      	b.n	8004de0 <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fb fe8a 	bl	8000b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e16:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e64:	ea42 0103 	orr.w	r1, r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
			((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) | (hspi->Init.Direction & (SPI_CR1_RXONLY | SPI_CR1_BIDIMODE)) | (hspi->Init.DataSize & SPI_CR1_DFF) | (hspi->Init.CLKPolarity & SPI_CR1_CPOL) | (hspi->Init.CLKPhase & SPI_CR1_CPHA) | (hspi->Init.NSS & SPI_CR1_SSM) | (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) | (hspi->Init.FirstBit & SPI_CR1_LSBFIRST) | (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management, TI Mode */
	WRITE_REG(hspi->Instance->CR2,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 0104 	and.w	r1, r3, #4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	f003 0210 	and.w	r2, r3, #16
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ea0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->State = HAL_SPI_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <USB_CoreInit>:
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 8004eba:	b084      	sub	sp, #16
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	f107 001c 	add.w	r0, r7, #28
 8004ec8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret;
	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8004ecc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d123      	bne.n	8004f1c <USB_CoreInit+0x62>
		USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Init The ULPI Interface */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	60d3      	str	r3, [r2, #12]
				| USB_OTG_GUSBCFG_PHYSEL);

		/* Select vbus source */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]
				| USB_OTG_GUSBCFG_ULPIEVBUSI);
		if (cfg.use_external_vbus == 1U) {
 8004efc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d105      	bne.n	8004f10 <USB_CoreInit+0x56>
			USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]
		}

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f9dc 	bl	80052ce <USB_CoreReset>
 8004f16:	4603      	mov	r3, r0
 8004f18:	73fb      	strb	r3, [r7, #15]
 8004f1a:	e01b      	b.n	8004f54 <USB_CoreInit+0x9a>
	} else /* FS interface (embedded Phy) */
	{
		/* Select FS Embedded PHY */
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f9d0 	bl	80052ce <USB_CoreReset>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	73fb      	strb	r3, [r7, #15]

		if (cfg.battery_charging_enable == 0U) {
 8004f32:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <USB_CoreInit+0x8e>
			/* Activate the USB Transceiver */
			USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f46:	e005      	b.n	8004f54 <USB_CoreInit+0x9a>
		} else {
			/* Deactivate the USB Transceiver */
			USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (cfg.dma_enable == 1U) {
 8004f54:	7fbb      	ldrb	r3, [r7, #30]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10b      	bne.n	8004f72 <USB_CoreInit+0xb8>
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f043 0206 	orr.w	r2, r3, #6
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	609a      	str	r2, [r3, #8]
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f043 0220 	orr.w	r2, r3, #32
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	609a      	str	r2, [r3, #8]
	}

	return ret;
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f7e:	b004      	add	sp, #16
 8004f80:	4770      	bx	lr

08004f82 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f043 0201 	orr.w	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 0201 	bic.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <USB_SetCurrentMode>:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_ModeTypeDef mode) {
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	70fb      	strb	r3, [r7, #3]
	uint32_t ms = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]

	USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60da      	str	r2, [r3, #12]

	if (mode == USB_HOST_MODE) {
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d115      	bne.n	8005014 <USB_SetCurrentMode+0x4e>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 8004ff4:	200a      	movs	r0, #10
 8004ff6:	f7fb fef3 	bl	8000de0 <HAL_Delay>
			ms += 10U;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	330a      	adds	r3, #10
 8004ffe:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_HOST_MODE)
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f956 	bl	80052b2 <USB_GetMode>
 8005006:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005008:	2b01      	cmp	r3, #1
 800500a:	d01e      	beq.n	800504a <USB_SetCurrentMode+0x84>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005010:	d9f0      	bls.n	8004ff4 <USB_SetCurrentMode+0x2e>
 8005012:	e01a      	b.n	800504a <USB_SetCurrentMode+0x84>
	} else if (mode == USB_DEVICE_MODE) {
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d115      	bne.n	8005046 <USB_SetCurrentMode+0x80>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 8005026:	200a      	movs	r0, #10
 8005028:	f7fb feda 	bl	8000de0 <HAL_Delay>
			ms += 10U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	330a      	adds	r3, #10
 8005030:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_DEVICE_MODE)
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f93d 	bl	80052b2 <USB_GetMode>
 8005038:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <USB_SetCurrentMode+0x84>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2bc7      	cmp	r3, #199	@ 0xc7
 8005042:	d9f0      	bls.n	8005026 <USB_SetCurrentMode+0x60>
 8005044:	e001      	b.n	800504a <USB_SetCurrentMode+0x84>
	} else {
		return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e005      	b.n	8005056 <USB_SetCurrentMode+0x90>
	}

	if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS) {
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2bc8      	cmp	r3, #200	@ 0xc8
 800504e:	d101      	bne.n	8005054 <USB_SetCurrentMode+0x8e>
		return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <USB_SetCurrentMode+0x90>
	}

	return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <USB_FlushTxFifo>:
 * @param  num  FIFO number
 *         This parameter can be a value from 1 to 15
 15 means Flush all Tx FIFOs
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num) {
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3301      	adds	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005078:	d901      	bls.n	800507e <USB_FlushTxFifo+0x20>
			return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e01b      	b.n	80050b6 <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	daf2      	bge.n	800506c <USB_FlushTxFifo+0xe>

	/* Flush TX Fifo */
	count = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050a2:	d901      	bls.n	80050a8 <USB_FlushTxFifo+0x4a>
			return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e006      	b.n	80050b6 <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0320 	and.w	r3, r3, #32
			== USB_OTG_GRSTCTL_TXFFLSH);
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d0f0      	beq.n	8005096 <USB_FlushTxFifo+0x38>

	return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx) {
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050da:	d901      	bls.n	80050e0 <USB_FlushRxFifo+0x1e>
			return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e018      	b.n	8005112 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	daf2      	bge.n	80050ce <USB_FlushRxFifo+0xc>

	/* Flush RX Fifo */
	count = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2210      	movs	r2, #16
 80050f0:	611a      	str	r2, [r3, #16]

	do {
		count++;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3301      	adds	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050fe:	d901      	bls.n	8005104 <USB_FlushRxFifo+0x42>
			return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e006      	b.n	8005112 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f003 0310 	and.w	r3, r3, #16
			== USB_OTG_GRSTCTL_RXFFLSH);
 800510c:	2b10      	cmp	r3, #16
 800510e:	d0f0      	beq.n	80050f2 <USB_FlushRxFifo+0x30>

	return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <USB_WritePacket>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 800511e:	b480      	push	{r7}
 8005120:	b089      	sub	sp, #36	@ 0x24
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	4611      	mov	r1, r2
 800512a:	461a      	mov	r2, r3
 800512c:	460b      	mov	r3, r1
 800512e:	71fb      	strb	r3, [r7, #7]
 8005130:	4613      	mov	r3, r2
 8005132:	80bb      	strh	r3, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	617b      	str	r3, [r7, #20]
	uint8_t *pSrc = src;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	61fb      	str	r3, [r7, #28]
	uint32_t count32b;
	uint32_t i;

	if (dma == 0U) {
 800513c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005140:	2b00      	cmp	r3, #0
 8005142:	d123      	bne.n	800518c <USB_WritePacket+0x6e>
		count32b = ((uint32_t) len + 3U) / 4U;
 8005144:	88bb      	ldrh	r3, [r7, #4]
 8005146:	3303      	adds	r3, #3
 8005148:	089b      	lsrs	r3, r3, #2
 800514a:	613b      	str	r3, [r7, #16]
		for (i = 0U; i < count32b; i++) {
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	e018      	b.n	8005184 <USB_WritePacket+0x66>
			USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	031a      	lsls	r2, r3, #12
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	4413      	add	r3, r2
 800515a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800515e:	461a      	mov	r2, r3
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6013      	str	r3, [r2, #0]
			pSrc++;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3301      	adds	r3, #1
 800516a:	61fb      	str	r3, [r7, #28]
			pSrc++;
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	3301      	adds	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3301      	adds	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	3301      	adds	r3, #1
 800517c:	61fb      	str	r3, [r7, #28]
		for (i = 0U; i < count32b; i++) {
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	3301      	adds	r3, #1
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	429a      	cmp	r2, r3
 800518a:	d3e2      	bcc.n	8005152 <USB_WritePacket+0x34>
		}
	}

	return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3724      	adds	r7, #36	@ 0x24
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <USB_ReadPacket>:
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void* USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest,
		uint16_t len) {
 800519a:	b480      	push	{r7}
 800519c:	b08b      	sub	sp, #44	@ 0x2c
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	4613      	mov	r3, r2
 80051a6:	80fb      	strh	r3, [r7, #6]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	61bb      	str	r3, [r7, #24]
	uint8_t *pDest = dest;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t pData;
	uint32_t i;
	uint32_t count32b = (uint32_t) len >> 2U;
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	617b      	str	r3, [r7, #20]
	uint16_t remaining_bytes = len % 4U;
 80051b8:	88fb      	ldrh	r3, [r7, #6]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	83fb      	strh	r3, [r7, #30]

	for (i = 0U; i < count32b; i++) {
 80051c0:	2300      	movs	r3, #0
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	e014      	b.n	80051f0 <USB_ReadPacket+0x56>
		__UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	601a      	str	r2, [r3, #0]
		pDest++;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	3301      	adds	r3, #1
 80051d6:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	3301      	adds	r3, #1
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	3301      	adds	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	3301      	adds	r3, #1
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0U; i < count32b; i++) {
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	3301      	adds	r3, #1
 80051ee:	623b      	str	r3, [r7, #32]
 80051f0:	6a3a      	ldr	r2, [r7, #32]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d3e6      	bcc.n	80051c6 <USB_ReadPacket+0x2c>
	}

	/* When Number of data is not word aligned, read the remaining byte */
	if (remaining_bytes != 0U) {
 80051f8:	8bfb      	ldrh	r3, [r7, #30]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01e      	beq.n	800523c <USB_ReadPacket+0xa2>
		i = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	623b      	str	r3, [r7, #32]
		__UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005208:	461a      	mov	r2, r3
 800520a:	f107 0310 	add.w	r3, r7, #16
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	601a      	str	r2, [r3, #0]

		do {
			*(uint8_t*) pDest = (uint8_t) (pData >> (8U * (uint8_t) (i)));
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	fa22 f303 	lsr.w	r3, r2, r3
 800521e:	b2da      	uxtb	r2, r3
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	701a      	strb	r2, [r3, #0]
			i++;
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	3301      	adds	r3, #1
 8005228:	623b      	str	r3, [r7, #32]
			pDest++;
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	3301      	adds	r3, #1
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
			remaining_bytes--;
 8005230:	8bfb      	ldrh	r3, [r7, #30]
 8005232:	3b01      	subs	r3, #1
 8005234:	83fb      	strh	r3, [r7, #30]
		} while (remaining_bytes != 0U);
 8005236:	8bfb      	ldrh	r3, [r7, #30]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ea      	bne.n	8005212 <USB_ReadPacket+0x78>
	}

	return ((void*) pDest);
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800523e:	4618      	mov	r0, r3
 8005240:	372c      	adds	r7, #44	@ 0x2c
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval USB Global Interrupt status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx) {
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;

	tmpreg = USBx->GINTSTS;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	60fb      	str	r3, [r7, #12]
	tmpreg &= USBx->GINTMSK;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4013      	ands	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

	return tmpreg;
 8005262:	68fb      	ldr	r3, [r7, #12]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <USB_ReadChInterrupts>:
 * @brief  USB_ReadChInterrupts: return USB channel interrupt status
 * @param  USBx  Selected device
 * @param  chnum Channel number
 * @retval USB Channel Interrupt status
 */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum) {
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_HC(chnum)->HCINT;
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4013      	ands	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 80052a4:	68bb      	ldr	r3, [r7, #8]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx) {
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
	return ((USBx->GINTSTS) & 0x1U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0301 	and.w	r3, r3, #1
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx) {
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3301      	adds	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052e6:	d901      	bls.n	80052ec <USB_CoreReset+0x1e>
			return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e01b      	b.n	8005324 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	daf2      	bge.n	80052da <USB_CoreReset+0xc>

	/* Core Soft Reset */
	count = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005310:	d901      	bls.n	8005316 <USB_CoreReset+0x48>
			return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e006      	b.n	8005324 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b01      	cmp	r3, #1
 8005320:	d0f0      	beq.n	8005304 <USB_CoreReset+0x36>

	return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_HostInit>:
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 8005330:	b084      	sub	sp, #16
 8005332:	b580      	push	{r7, lr}
 8005334:	b086      	sub	sp, #24
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800533e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60fb      	str	r3, [r7, #12]
	uint32_t i;

	/* Restart the Phy Clock */
	USBx_PCGCCTL = 0U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005350:	461a      	mov	r2, r3
 8005352:	2300      	movs	r3, #0
 8005354:	6013      	str	r3, [r2, #0]
#else
	/*
	 * Disable HW VBUS sensing. VBUS is internally considered to be always
	 * at VBUS-Valid level (5V).
	 */
	USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	639a      	str	r2, [r3, #56]	@ 0x38
	USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	639a      	str	r2, [r3, #56]	@ 0x38
	USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005372:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

	if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U) {
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d119      	bne.n	80053ba <USB_HostInit+0x8a>
		if (cfg.speed == USBH_FSLS_SPEED) {
 8005386:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800538a:	2b01      	cmp	r3, #1
 800538c:	d10a      	bne.n	80053a4 <USB_HostInit+0x74>
			/* Force Device Enumeration to FS/LS mode only */
			USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800539c:	f043 0304 	orr.w	r3, r3, #4
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	e014      	b.n	80053ce <USB_HostInit+0x9e>
		} else {
			/* Set default Max speed support */
			USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053b2:	f023 0304 	bic.w	r3, r3, #4
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	e009      	b.n	80053ce <USB_HostInit+0x9e>
		}
	} else {
		/* Set default Max speed support */
		USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053c8:	f023 0304 	bic.w	r3, r3, #4
 80053cc:	6013      	str	r3, [r2, #0]
	}

	/* Make sure the FIFOs are flushed. */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053ce:	2110      	movs	r1, #16
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fe44 	bl	800505e <USB_FlushTxFifo>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <USB_HostInit+0xb0>
	{
		ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	75fb      	strb	r3, [r7, #23]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff fe6e 	bl	80050c2 <USB_FlushRxFifo>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <USB_HostInit+0xc0>
		ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	75fb      	strb	r3, [r7, #23]
	}

	/* Clear all pending HC Interrupts */
	for (i = 0U; i < cfg.Host_channels; i++) {
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	e015      	b.n	8005422 <USB_HostInit+0xf2>
		USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005402:	461a      	mov	r2, r3
 8005404:	f04f 33ff 	mov.w	r3, #4294967295
 8005408:	6093      	str	r3, [r2, #8]
		USBx_HC(i)->HCINTMSK = 0U;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005416:	461a      	mov	r2, r3
 8005418:	2300      	movs	r3, #0
 800541a:	60d3      	str	r3, [r2, #12]
	for (i = 0U; i < cfg.Host_channels; i++) {
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	3301      	adds	r3, #1
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005426:	461a      	mov	r2, r3
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4293      	cmp	r3, r2
 800542c:	d3e3      	bcc.n	80053f6 <USB_HostInit+0xc6>
	}

	/* Disable all interrupts. */
	USBx->GINTMSK = 0U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	619a      	str	r2, [r3, #24]

	/* Clear any pending interrupts */
	USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f04f 32ff 	mov.w	r2, #4294967295
 800543a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
	if (USBx == USB_OTG_HS) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a18      	ldr	r2, [pc, #96]	@ (80054a0 <USB_HostInit+0x170>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d10b      	bne.n	800545c <USB_HostInit+0x12c>
		/* set Rx FIFO size */
		USBx->GRXFSIZ = 0x200U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800544a:	625a      	str	r2, [r3, #36]	@ 0x24
		USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t) (((0x100U << 16) & USB_OTG_NPTXFD)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a15      	ldr	r2, [pc, #84]	@ (80054a4 <USB_HostInit+0x174>)
 8005450:	629a      	str	r2, [r3, #40]	@ 0x28
				| 0x200U);
		USBx->HPTXFSIZ = (uint32_t) (((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a14      	ldr	r2, [pc, #80]	@ (80054a8 <USB_HostInit+0x178>)
 8005456:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800545a:	e009      	b.n	8005470 <USB_HostInit+0x140>
				| 0x300U);
	} else
#endif /* defined (USB_OTG_HS) */
	{
		/* set Rx FIFO size */
		USBx->GRXFSIZ = 0x80U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2280      	movs	r2, #128	@ 0x80
 8005460:	625a      	str	r2, [r3, #36]	@ 0x24
		USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t) (((0x60U << 16) & USB_OTG_NPTXFD)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a11      	ldr	r2, [pc, #68]	@ (80054ac <USB_HostInit+0x17c>)
 8005466:	629a      	str	r2, [r3, #40]	@ 0x28
				| 0x80U);
		USBx->HPTXFSIZ = (uint32_t) (((0x40U << 16) & USB_OTG_HPTXFSIZ_PTXFD)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a11      	ldr	r2, [pc, #68]	@ (80054b0 <USB_HostInit+0x180>)
 800546c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
				| 0xE0U);
	}

	/* Enable the common interrupts */
	if (cfg.dma_enable == 0U) {
 8005470:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005474:	2b00      	cmp	r3, #0
 8005476:	d105      	bne.n	8005484 <USB_HostInit+0x154>
		USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f043 0210 	orr.w	r2, r3, #16
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	619a      	str	r2, [r3, #24]
	}

	/* Enable interrupts matching to the Host mode ONLY */
	USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM | USB_OTG_GINTMSK_HCIM |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699a      	ldr	r2, [r3, #24]
 8005488:	4b0a      	ldr	r3, [pc, #40]	@ (80054b4 <USB_HostInit+0x184>)
 800548a:	4313      	orrs	r3, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6193      	str	r3, [r2, #24]
	USB_OTG_GINTMSK_SOFM | USB_OTG_GINTSTS_DISCINT |
	USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

	return ret;
 8005490:	7dfb      	ldrb	r3, [r7, #23]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800549c:	b004      	add	sp, #16
 800549e:	4770      	bx	lr
 80054a0:	40040000 	.word	0x40040000
 80054a4:	01000200 	.word	0x01000200
 80054a8:	00e00300 	.word	0x00e00300
 80054ac:	00600080 	.word	0x00600080
 80054b0:	004000e0 	.word	0x004000e0
 80054b4:	a3200008 	.word	0xa3200008

080054b8 <USB_InitFSLSPClkSel>:
 *           HCFG_48_MHZ : Full Speed 48 MHz Clock
 *           HCFG_6_MHZ : Low Speed 6 MHz Clock
 * @retval HAL status
 */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t freq) {
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

	USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054d6:	f023 0303 	bic.w	r3, r3, #3
 80054da:	6013      	str	r3, [r2, #0]
	USBx_HOST->HCFG |= (uint32_t) freq & USB_OTG_HCFG_FSLSPCS;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054f0:	4313      	orrs	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]

	if (freq == HCFG_48_MHZ) {
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d107      	bne.n	800550a <USB_InitFSLSPClkSel+0x52>
		USBx_HOST->HFIR = HFIR_48_MHZ;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005500:	461a      	mov	r2, r3
 8005502:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005506:	6053      	str	r3, [r2, #4]
 8005508:	e00c      	b.n	8005524 <USB_InitFSLSPClkSel+0x6c>
	} else if (freq == HCFG_6_MHZ) {
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d107      	bne.n	8005520 <USB_InitFSLSPClkSel+0x68>
		USBx_HOST->HFIR = HFIR_6_MHZ;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005516:	461a      	mov	r2, r3
 8005518:	f241 7370 	movw	r3, #6000	@ 0x1770
 800551c:	6053      	str	r3, [r2, #4]
 800551e:	e001      	b.n	8005524 <USB_InitFSLSPClkSel+0x6c>
	} else {
		return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <USB_InitFSLSPClkSel+0x6e>
	}

	return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <USB_ResetPort>:
 * @param  USBx  Selected device
 * @retval HAL status
 * @note (1)The application must wait at least 10 ms
 *   before clearing the reset bit.
 */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx) {
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]

	__IO uint32_t hprt0 = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60bb      	str	r3, [r7, #8]

	hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005552:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800555c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005560:	6013      	str	r3, [r2, #0]
	HAL_Delay(100U); /* See Note #1 */
 8005562:	2064      	movs	r0, #100	@ 0x64
 8005564:	f7fb fc3c 	bl	8000de0 <HAL_Delay>
	USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005574:	6013      	str	r3, [r2, #0]
	HAL_Delay(10U);
 8005576:	200a      	movs	r0, #10
 8005578:	f7fb fc32 	bl	8000de0 <HAL_Delay>

	return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <USB_DriveVbus>:
 *           0 : Deactivate VBUS
 *           1 : Activate VBUS
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t state) {
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]
	__IO uint32_t hprt0 = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60bb      	str	r3, [r7, #8]

	hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055aa:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U)) {
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <USB_DriveVbus+0x44>
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d106      	bne.n	80055ca <USB_DriveVbus+0x44>
		USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055c8:	6013      	str	r3, [r2, #0]
	}
	if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U)) {
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d4:	d109      	bne.n	80055ea <USB_DriveVbus+0x64>
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d106      	bne.n	80055ea <USB_DriveVbus+0x64>
		USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055e8:	6013      	str	r3, [r2, #0]
	}
	return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <USB_GetHostSpeed>:
 *          This parameter can be one of these values:
 *            @arg HCD_SPEED_HIGH: High speed mode
 *            @arg HCD_SPEED_FULL: Full speed mode
 *            @arg HCD_SPEED_LOW: Low speed mode
 */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx) {
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60fb      	str	r3, [r7, #12]
	__IO uint32_t hprt0 = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60bb      	str	r3, [r7, #8]
	return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	0c5b      	lsrs	r3, r3, #17
 8005616:	f003 0303 	and.w	r3, r3, #3
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <USB_GetCurrentFrame>:
/**
 * @brief  Return Host Current Frame number
 * @param  USBx  Selected device
 * @retval current frame number
 */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx) {
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60fb      	str	r3, [r7, #12]

	return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	b29b      	uxth	r3, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_HC_Init>:
 *          This parameter can be a value from 0 to 32K
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
		uint8_t epnum, uint8_t dev_address, uint8_t speed, uint8_t ep_type,
		uint16_t mps) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	4608      	mov	r0, r1
 8005652:	4611      	mov	r1, r2
 8005654:	461a      	mov	r2, r3
 8005656:	4603      	mov	r3, r0
 8005658:	70fb      	strb	r3, [r7, #3]
 800565a:	460b      	mov	r3, r1
 800565c:	70bb      	strb	r3, [r7, #2]
 800565e:	4613      	mov	r3, r2
 8005660:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	77fb      	strb	r3, [r7, #31]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	613b      	str	r3, [r7, #16]
	uint32_t HCcharEpDir;
	uint32_t HCcharLowSpeed;
	uint32_t HostCoreSpeed;

	/* Clear old interrupt conditions for this host channel. */
	USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4413      	add	r3, r2
 8005672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005676:	461a      	mov	r2, r3
 8005678:	f04f 33ff 	mov.w	r3, #4294967295
 800567c:	6093      	str	r3, [r2, #8]

	/* Enable channel interrupts required for this transfer. */
	switch (ep_type) {
 800567e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005682:	2b03      	cmp	r3, #3
 8005684:	d87c      	bhi.n	8005780 <USB_HC_Init+0x138>
 8005686:	a201      	add	r2, pc, #4	@ (adr r2, 800568c <USB_HC_Init+0x44>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	0800569d 	.word	0x0800569d
 8005690:	08005743 	.word	0x08005743
 8005694:	0800569d 	.word	0x0800569d
 8005698:	08005705 	.word	0x08005705
	case EP_TYPE_CTRL:
	case EP_TYPE_BULK:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a8:	461a      	mov	r2, r3
 80056aa:	f240 439d 	movw	r3, #1181	@ 0x49d
 80056ae:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_TXERRM |
		USB_OTG_HCINTMSK_DTERRM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_NAKM;

		if ((epnum & 0x80U) == 0x80U) {
 80056b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	da10      	bge.n	80056da <USB_HC_Init+0x92>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d6:	60d3      	str	r3, [r2, #12]
						USB_OTG_HCINTMSK_NYET |
						USB_OTG_HCINTMSK_ACKM;
			}
#endif /* defined (USB_OTG_HS) */
		}
		break;
 80056d8:	e055      	b.n	8005786 <USB_HC_Init+0x13e>
			if (USBx == USB_OTG_HS) {
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a6f      	ldr	r2, [pc, #444]	@ (800589c <USB_HC_Init+0x254>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d151      	bne.n	8005786 <USB_HC_Init+0x13e>
				USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	78fa      	ldrb	r2, [r7, #3]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005700:	60d3      	str	r3, [r2, #12]
		break;
 8005702:	e040      	b.n	8005786 <USB_HC_Init+0x13e>

	case EP_TYPE_INTR:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005710:	461a      	mov	r2, r3
 8005712:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005716:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_DTERRM |
		USB_OTG_HCINTMSK_NAKM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_FRMORM;

		if ((epnum & 0x80U) == 0x80U) {
 8005718:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800571c:	2b00      	cmp	r3, #0
 800571e:	da34      	bge.n	800578a <USB_HC_Init+0x142>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	78fa      	ldrb	r2, [r7, #3]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	440a      	add	r2, r1
 8005736:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800573a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800573e:	60d3      	str	r3, [r2, #12]
					USB_OTG_HCINTMSK_BBERRM;
		}

		break;
 8005740:	e023      	b.n	800578a <USB_HC_Init+0x142>

	case EP_TYPE_ISOC:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800574e:	461a      	mov	r2, r3
 8005750:	f240 2325 	movw	r3, #549	@ 0x225
 8005754:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_ACKM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_FRMORM;

		if ((epnum & 0x80U) == 0x80U) {
 8005756:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800575a:	2b00      	cmp	r3, #0
 800575c:	da17      	bge.n	800578e <USB_HC_Init+0x146>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	78fa      	ldrb	r2, [r7, #3]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	440a      	add	r2, r1
 8005774:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005778:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800577c:	60d3      	str	r3, [r2, #12]
					(USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
		}
		break;
 800577e:	e006      	b.n	800578e <USB_HC_Init+0x146>

	default:
		ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	77fb      	strb	r3, [r7, #31]
		break;
 8005784:	e004      	b.n	8005790 <USB_HC_Init+0x148>
		break;
 8005786:	bf00      	nop
 8005788:	e002      	b.n	8005790 <USB_HC_Init+0x148>
		break;
 800578a:	bf00      	nop
 800578c:	e000      	b.n	8005790 <USB_HC_Init+0x148>
		break;
 800578e:	bf00      	nop
	}

	/* Clear Hub Start Split transaction */
	USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4413      	add	r3, r2
 8005798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800579c:	461a      	mov	r2, r3
 800579e:	2300      	movs	r3, #0
 80057a0:	6053      	str	r3, [r2, #4]

	/* Enable host channel Halt interrupt */
	USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	78fa      	ldrb	r2, [r7, #3]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057bc:	f043 0302 	orr.w	r3, r3, #2
 80057c0:	60d3      	str	r3, [r2, #12]

	/* Enable the top level host channel interrupt. */
	USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	2101      	movs	r1, #1
 80057d2:	fa01 f303 	lsl.w	r3, r1, r3
 80057d6:	6939      	ldr	r1, [r7, #16]
 80057d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80057dc:	4313      	orrs	r3, r2
 80057de:	618b      	str	r3, [r1, #24]

	/* Make sure host channel interrupts are enabled. */
	USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	619a      	str	r2, [r3, #24]

	/* Program the HCCHAR register */
	if ((epnum & 0x80U) == 0x80U) {
 80057ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	da03      	bge.n	80057fc <USB_HC_Init+0x1b4>
		HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80057f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	e001      	b.n	8005800 <USB_HC_Init+0x1b8>
	} else {
		HCcharEpDir = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61bb      	str	r3, [r7, #24]
	}

	HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fef9 	bl	80055f8 <USB_GetHostSpeed>
 8005806:	60f8      	str	r0, [r7, #12]

	/* LS device plugged to HUB */
	if ((speed == HPRT0_PRTSPD_LOW_SPEED)
 8005808:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800580c:	2b02      	cmp	r3, #2
 800580e:	d106      	bne.n	800581e <USB_HC_Init+0x1d6>
			&& (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED)) {
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d003      	beq.n	800581e <USB_HC_Init+0x1d6>
		HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005816:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e001      	b.n	8005822 <USB_HC_Init+0x1da>
	} else {
		HCcharLowSpeed = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
	}

	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8005822:	787b      	ldrb	r3, [r7, #1]
 8005824:	059b      	lsls	r3, r3, #22
			& USB_OTG_HCCHAR_DAD)
 8005826:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
			| ((((uint32_t) epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM)
 800582a:	78bb      	ldrb	r3, [r7, #2]
 800582c:	02db      	lsls	r3, r3, #11
 800582e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
 8005832:	431a      	orrs	r2, r3
			| (((uint32_t) ep_type << 18) & USB_OTG_HCCHAR_EPTYP)
 8005834:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005838:	049b      	lsls	r3, r3, #18
 800583a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800583e:	431a      	orrs	r2, r3
			| ((uint32_t) mps & USB_OTG_HCCHAR_MPSIZ) |
 8005840:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005846:	431a      	orrs	r2, r3
			USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	431a      	orrs	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4313      	orrs	r3, r2
	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8005850:	78fa      	ldrb	r2, [r7, #3]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	440a      	add	r2, r1
 8005858:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
			USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800585c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8005860:	6013      	str	r3, [r2, #0]

	if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC)) {
 8005862:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005866:	2b03      	cmp	r3, #3
 8005868:	d003      	beq.n	8005872 <USB_HC_Init+0x22a>
 800586a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10f      	bne.n	8005892 <USB_HC_Init+0x24a>
		USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	440a      	add	r2, r1
 8005888:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800588c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005890:	6013      	str	r3, [r2, #0]
	}

	return ret;
 8005892:	7ffb      	ldrb	r3, [r7, #31]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40040000 	.word	0x40040000

080058a0 <USB_HC_StartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_HCTypeDef *hc, uint8_t dma) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08c      	sub	sp, #48	@ 0x30
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	71fb      	strb	r3, [r7, #7]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	623b      	str	r3, [r7, #32]
	uint32_t ch_num = (uint32_t) hc->ch_num;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	61fb      	str	r3, [r7, #28]
	__IO uint32_t tmpreg;
	uint8_t is_oddframe;
	uint16_t len_words;
	uint16_t num_packets;
	uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80058b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058bc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
	if (USBx == USB_OTG_HS) {
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005a38 <USB_HC_StartXfer+0x198>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d12f      	bne.n	8005926 <USB_HC_StartXfer+0x86>
		/* in DMA mode host Core automatically issues ping in case of NYET/NAK */
		if (dma == 1U) {
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d11c      	bne.n	8005906 <USB_HC_StartXfer+0x66>
			if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	7c9b      	ldrb	r3, [r3, #18]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <USB_HC_StartXfer+0x3c>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	7c9b      	ldrb	r3, [r3, #18]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d124      	bne.n	8005926 <USB_HC_StartXfer+0x86>
					&& (hc->do_ssplit == 0U)) {
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	799b      	ldrb	r3, [r3, #6]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d120      	bne.n	8005926 <USB_HC_StartXfer+0x86>

				USBx_HC((uint32_t)ch_num)->HCINTMSK &=
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	6a3a      	ldr	r2, [r7, #32]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005902:	60d3      	str	r3, [r2, #12]
 8005904:	e00f      	b.n	8005926 <USB_HC_StartXfer+0x86>
						~(USB_OTG_HCINTMSK_NYET |
						USB_OTG_HCINTMSK_ACKM |
						USB_OTG_HCINTMSK_NAKM);
			}
		} else {
			if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U)) {
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	791b      	ldrb	r3, [r3, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10b      	bne.n	8005926 <USB_HC_StartXfer+0x86>
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	795b      	ldrb	r3, [r3, #5]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d107      	bne.n	8005926 <USB_HC_StartXfer+0x86>
				(void) USB_DoPing(USBx, hc->ch_num);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	4619      	mov	r1, r3
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fb6b 	bl	8005ff8 <USB_DoPing>
				return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e232      	b.n	8005d8c <USB_HC_StartXfer+0x4ec>
			}
		}
	}
#endif /* defined (USB_OTG_HS) */

	if (hc->do_ssplit == 1U) {
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	799b      	ldrb	r3, [r3, #6]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d158      	bne.n	80059e0 <USB_HC_StartXfer+0x140>
		/* Set number of packet to 1 for Split transaction */
		num_packets = 1U;
 800592e:	2301      	movs	r3, #1
 8005930:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (hc->ep_is_in != 0U) {
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	78db      	ldrb	r3, [r3, #3]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <USB_HC_StartXfer+0xaa>
			hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 800593a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	8a92      	ldrh	r2, [r2, #20]
 8005940:	fb03 f202 	mul.w	r2, r3, r2
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	61da      	str	r2, [r3, #28]
 8005948:	e07c      	b.n	8005a44 <USB_HC_StartXfer+0x1a4>
		} else {
			if (hc->ep_type == EP_TYPE_ISOC) {
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	7c9b      	ldrb	r3, [r3, #18]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d130      	bne.n	80059b4 <USB_HC_StartXfer+0x114>
				if (hc->xfer_len > ISO_SPLT_MPS) {
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	2bbc      	cmp	r3, #188	@ 0xbc
 8005958:	d918      	bls.n	800598c <USB_HC_StartXfer+0xec>
					/* Isochrone Max Packet Size for Split mode */
					hc->XferSize = hc->max_packet;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	8a9b      	ldrh	r3, [r3, #20]
 800595e:	461a      	mov	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	61da      	str	r2, [r3, #28]
					hc->xfer_len = hc->XferSize;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	621a      	str	r2, [r3, #32]

					if ((hc->iso_splt_xactPos == HCSPLT_BEGIN)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d003      	beq.n	800597c <USB_HC_StartXfer+0xdc>
							|| (hc->iso_splt_xactPos == HCSPLT_MIDDLE)) {
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d103      	bne.n	8005984 <USB_HC_StartXfer+0xe4>
						hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2202      	movs	r2, #2
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	e05f      	b.n	8005a44 <USB_HC_StartXfer+0x1a4>
					} else {
						hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2201      	movs	r2, #1
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	e05b      	b.n	8005a44 <USB_HC_StartXfer+0x1a4>
					}
				} else {
					hc->XferSize = hc->xfer_len;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6a1a      	ldr	r2, [r3, #32]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	61da      	str	r2, [r3, #28]

					if ((hc->iso_splt_xactPos != HCSPLT_BEGIN)
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d007      	beq.n	80059ac <USB_HC_StartXfer+0x10c>
							&& (hc->iso_splt_xactPos != HCSPLT_MIDDLE)) {
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d003      	beq.n	80059ac <USB_HC_StartXfer+0x10c>
						hc->iso_splt_xactPos = HCSPLT_FULL;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2204      	movs	r2, #4
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	e04b      	b.n	8005a44 <USB_HC_StartXfer+0x1a4>
					} else {
						hc->iso_splt_xactPos = HCSPLT_END;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2203      	movs	r2, #3
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	e047      	b.n	8005a44 <USB_HC_StartXfer+0x1a4>
					}
				}
			} else {
				if ((dma == 1U) && (hc->xfer_len > hc->max_packet)) {
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d10d      	bne.n	80059d6 <USB_HC_StartXfer+0x136>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	8a92      	ldrh	r2, [r2, #20]
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d907      	bls.n	80059d6 <USB_HC_StartXfer+0x136>
					hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 80059c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	8a92      	ldrh	r2, [r2, #20]
 80059cc:	fb03 f202 	mul.w	r2, r3, r2
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	61da      	str	r2, [r3, #28]
 80059d4:	e036      	b.n	8005a44 <USB_HC_StartXfer+0x1a4>
				} else {
					hc->XferSize = hc->xfer_len;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6a1a      	ldr	r2, [r3, #32]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	61da      	str	r2, [r3, #28]
 80059de:	e031      	b.n	8005a44 <USB_HC_StartXfer+0x1a4>
				}
			}
		}
	} else {
		/* Compute the expected number of packets associated to the transfer */
		if (hc->xfer_len > 0U) {
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d018      	beq.n	8005a1a <USB_HC_StartXfer+0x17a>
			num_packets = (uint16_t) ((hc->xfer_len + hc->max_packet - 1U)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	8a92      	ldrh	r2, [r2, #20]
 80059f0:	4413      	add	r3, r2
 80059f2:	3b01      	subs	r3, #1
					/ hc->max_packet);
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	8a92      	ldrh	r2, [r2, #20]
 80059f8:	fbb3 f3f2 	udiv	r3, r3, r2
			num_packets = (uint16_t) ((hc->xfer_len + hc->max_packet - 1U)
 80059fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

			if (num_packets > max_hc_pkt_count) {
 80059fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005a00:	8b7b      	ldrh	r3, [r7, #26]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d90b      	bls.n	8005a1e <USB_HC_StartXfer+0x17e>
				num_packets = max_hc_pkt_count;
 8005a06:	8b7b      	ldrh	r3, [r7, #26]
 8005a08:	84fb      	strh	r3, [r7, #38]	@ 0x26
				hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8005a0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	8a92      	ldrh	r2, [r2, #20]
 8005a10:	fb03 f202 	mul.w	r2, r3, r2
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	61da      	str	r2, [r3, #28]
 8005a18:	e001      	b.n	8005a1e <USB_HC_StartXfer+0x17e>
			}
		} else {
			num_packets = 1U;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	84fb      	strh	r3, [r7, #38]	@ 0x26

		/*
		 * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
		 * max_packet size.
		 */
		if (hc->ep_is_in != 0U) {
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	78db      	ldrb	r3, [r3, #3]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <USB_HC_StartXfer+0x19c>
			hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8005a26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	8a92      	ldrh	r2, [r2, #20]
 8005a2c:	fb03 f202 	mul.w	r2, r3, r2
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	61da      	str	r2, [r3, #28]
 8005a34:	e006      	b.n	8005a44 <USB_HC_StartXfer+0x1a4>
 8005a36:	bf00      	nop
 8005a38:	40040000 	.word	0x40040000
		} else {
			hc->XferSize = hc->xfer_len;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	61da      	str	r2, [r3, #28]
		}
	}

	/* Initialize the HCTSIZn register */
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f3c3 0212 	ubfx	r2, r3, #0, #19
			| (((uint32_t) num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT)
 8005a4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a4e:	04d9      	lsls	r1, r3, #19
 8005a50:	4ba3      	ldr	r3, [pc, #652]	@ (8005ce0 <USB_HC_StartXfer+0x440>)
 8005a52:	400b      	ands	r3, r1
 8005a54:	431a      	orrs	r2, r3
			| (((uint32_t) hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	7d9b      	ldrb	r3, [r3, #22]
 8005a5a:	075b      	lsls	r3, r3, #29
 8005a5c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8005a60:	69f9      	ldr	r1, [r7, #28]
 8005a62:	0148      	lsls	r0, r1, #5
 8005a64:	6a39      	ldr	r1, [r7, #32]
 8005a66:	4401      	add	r1, r0
 8005a68:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
			| (((uint32_t) hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a6c:	4313      	orrs	r3, r2
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8005a6e:	610b      	str	r3, [r1, #16]

	if (dma != 0U) {
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <USB_HC_StartXfer+0x1ea>
		/* xfer_buff MUST be 32-bits aligned */
		USBx_HC(ch_num)->HCDMA = (uint32_t) hc->xfer_buff;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a86:	460a      	mov	r2, r1
 8005a88:	615a      	str	r2, [r3, #20]
	}

	is_oddframe = (((uint32_t) USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bf0c      	ite	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	2300      	movne	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	767b      	strb	r3, [r7, #25]
	USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	6a3a      	ldr	r2, [r7, #32]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005abc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ac0:	6013      	str	r3, [r2, #0]
	USBx_HC(ch_num)->HCCHAR |= (uint32_t) is_oddframe << 29;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	7e7b      	ldrb	r3, [r7, #25]
 8005ad2:	075b      	lsls	r3, r3, #29
 8005ad4:	69f9      	ldr	r1, [r7, #28]
 8005ad6:	0148      	lsls	r0, r1, #5
 8005ad8:	6a39      	ldr	r1, [r7, #32]
 8005ada:	4401      	add	r1, r0
 8005adc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	600b      	str	r3, [r1, #0]

	if (hc->do_ssplit == 1U) {
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	799b      	ldrb	r3, [r3, #6]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	f040 80c3 	bne.w	8005c74 <USB_HC_StartXfer+0x3d4>
		/* Set Hub start Split transaction */
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	7c5b      	ldrb	r3, [r3, #17]
				<< USB_OTG_HCSPLT_HUBADDR_Pos) | (uint32_t) hc->hub_port_nbr
 8005af2:	01db      	lsls	r3, r3, #7
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	7c12      	ldrb	r2, [r2, #16]
 8005af8:	4313      	orrs	r3, r2
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	6a3a      	ldr	r2, [r7, #32]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
				| USB_OTG_HCSPLT_SPLITEN;
 8005b06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8005b0a:	6053      	str	r3, [r2, #4]

		/* unmask ack & nyet for IN/OUT transactions */
		USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	6a3a      	ldr	r2, [r7, #32]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b26:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b2a:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_NYET);

		if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U)) {
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	79db      	ldrb	r3, [r3, #7]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d123      	bne.n	8005b7c <USB_HC_StartXfer+0x2dc>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	78db      	ldrb	r3, [r3, #3]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d11f      	bne.n	8005b7c <USB_HC_StartXfer+0x2dc>
			USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	6a3a      	ldr	r2, [r7, #32]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b5a:	6053      	str	r3, [r2, #4]
					USB_OTG_HCSPLT_COMPLSPLT;
			USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	6a3a      	ldr	r2, [r7, #32]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b7a:	60d3      	str	r3, [r2, #12]
		}

		if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	7c9b      	ldrb	r3, [r3, #18]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d003      	beq.n	8005b8c <USB_HC_StartXfer+0x2ec>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	7c9b      	ldrb	r3, [r3, #18]
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d117      	bne.n	8005bbc <USB_HC_StartXfer+0x31c>
				&& (hc->do_csplit == 1U) && (hc->ep_is_in == 1U)) {
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	79db      	ldrb	r3, [r3, #7]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d113      	bne.n	8005bbc <USB_HC_StartXfer+0x31c>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	78db      	ldrb	r3, [r3, #3]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d10f      	bne.n	8005bbc <USB_HC_StartXfer+0x31c>
			USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bba:	6053      	str	r3, [r2, #4]
					USB_OTG_HCSPLT_COMPLSPLT;
		}

		/* Position management for iso out transaction on split mode */
		if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U)) {
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	7c9b      	ldrb	r3, [r3, #18]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d162      	bne.n	8005c8a <USB_HC_StartXfer+0x3ea>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	78db      	ldrb	r3, [r3, #3]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d15e      	bne.n	8005c8a <USB_HC_StartXfer+0x3ea>
			/* Set data payload position */
			switch (hc->iso_splt_xactPos) {
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d858      	bhi.n	8005c88 <USB_HC_StartXfer+0x3e8>
 8005bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <USB_HC_StartXfer+0x33c>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005bed 	.word	0x08005bed
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c31 	.word	0x08005c31
 8005be8:	08005c53 	.word	0x08005c53
			case HCSPLT_BEGIN:
				/* First data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	6a3a      	ldr	r2, [r7, #32]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c0a:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_1;
				break;
 8005c0c:	e03d      	b.n	8005c8a <USB_HC_StartXfer+0x3ea>

			case HCSPLT_MIDDLE:
				/* Middle data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	6a3a      	ldr	r2, [r7, #32]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c28:	f043 030e 	orr.w	r3, r3, #14
 8005c2c:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_Pos;
				break;
 8005c2e:	e02c      	b.n	8005c8a <USB_HC_StartXfer+0x3ea>

			case HCSPLT_END:
				/* End data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	6a3a      	ldr	r2, [r7, #32]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c4e:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_0;
				break;
 8005c50:	e01b      	b.n	8005c8a <USB_HC_StartXfer+0x3ea>

			case HCSPLT_FULL:
				/* Entire data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	6a3a      	ldr	r2, [r7, #32]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c70:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS;
				break;
 8005c72:	e00a      	b.n	8005c8a <USB_HC_StartXfer+0x3ea>
				break;
			}
		}
	} else {
		/* Clear Hub Start Split transaction */
		USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c80:	461a      	mov	r2, r3
 8005c82:	2300      	movs	r3, #0
 8005c84:	6053      	str	r3, [r2, #4]
 8005c86:	e000      	b.n	8005c8a <USB_HC_StartXfer+0x3ea>
				break;
 8005c88:	bf00      	nop
	}

	/* Set host channel enable */
	tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	613b      	str	r3, [r7, #16]
	tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ca0:	613b      	str	r3, [r7, #16]

	/* make sure to set the correct ep direction */
	if (hc->ep_is_in != 0U) {
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	78db      	ldrb	r3, [r3, #3]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <USB_HC_StartXfer+0x414>
		tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	e003      	b.n	8005cbc <USB_HC_StartXfer+0x41c>
	} else {
		tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cba:	613b      	str	r3, [r7, #16]
	}
	tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cc2:	613b      	str	r3, [r7, #16]
	USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6013      	str	r3, [r2, #0]

	if (dma != 0U) /* dma mode */
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <USB_HC_StartXfer+0x444>
	{
		return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e055      	b.n	8005d8c <USB_HC_StartXfer+0x4ec>
 8005ce0:	1ff80000 	.word	0x1ff80000
	}

	if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U)) {
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	78db      	ldrb	r3, [r3, #3]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d14e      	bne.n	8005d8a <USB_HC_StartXfer+0x4ea>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d04a      	beq.n	8005d8a <USB_HC_StartXfer+0x4ea>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	79db      	ldrb	r3, [r3, #7]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d146      	bne.n	8005d8a <USB_HC_StartXfer+0x4ea>
		switch (hc->ep_type) {
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	7c9b      	ldrb	r3, [r3, #18]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d831      	bhi.n	8005d68 <USB_HC_StartXfer+0x4c8>
 8005d04:	a201      	add	r2, pc, #4	@ (adr r2, 8005d0c <USB_HC_StartXfer+0x46c>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d1d 	.word	0x08005d1d
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005d1d 	.word	0x08005d1d
 8005d18:	08005d41 	.word	0x08005d41
		/* Non periodic transfer */
		case EP_TYPE_CTRL:
		case EP_TYPE_BULK:

			len_words = (uint16_t) ((hc->xfer_len + 3U) / 4U);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	3303      	adds	r3, #3
 8005d22:	089b      	lsrs	r3, r3, #2
 8005d24:	82fb      	strh	r3, [r7, #22]

			/* check if there is enough space in FIFO space */
			if (len_words > (USBx->HNPTXSTS & 0xFFFFU)) {
 8005d26:	8afa      	ldrh	r2, [r7, #22]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d91c      	bls.n	8005d6c <USB_HC_StartXfer+0x4cc>
				/* need to process data in nptxfempty interrupt */
				USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f043 0220 	orr.w	r2, r3, #32
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	619a      	str	r2, [r3, #24]
			}
			break;
 8005d3e:	e015      	b.n	8005d6c <USB_HC_StartXfer+0x4cc>

			/* Periodic transfer */
		case EP_TYPE_INTR:
		case EP_TYPE_ISOC:
			len_words = (uint16_t) ((hc->xfer_len + 3U) / 4U);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	3303      	adds	r3, #3
 8005d46:	089b      	lsrs	r3, r3, #2
 8005d48:	82fb      	strh	r3, [r7, #22]
			/* check if there is enough space in FIFO space */
			if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005d4a:	8afa      	ldrh	r2, [r7, #22]
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d90a      	bls.n	8005d70 <USB_HC_StartXfer+0x4d0>
			{
				/* need to process data in ptxfempty interrupt */
				USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	619a      	str	r2, [r3, #24]
			}
			break;
 8005d66:	e003      	b.n	8005d70 <USB_HC_StartXfer+0x4d0>

		default:
			break;
 8005d68:	bf00      	nop
 8005d6a:	e002      	b.n	8005d72 <USB_HC_StartXfer+0x4d2>
			break;
 8005d6c:	bf00      	nop
 8005d6e:	e000      	b.n	8005d72 <USB_HC_StartXfer+0x4d2>
			break;
 8005d70:	bf00      	nop
		}

		/* Write packet into the Tx FIFO. */
		(void) USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num,
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	6999      	ldr	r1, [r3, #24]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	785a      	ldrb	r2, [r3, #1]
				(uint16_t) hc->xfer_len, 0);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
		(void) USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num,
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2000      	movs	r0, #0
 8005d82:	9000      	str	r0, [sp, #0]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f7ff f9ca 	bl	800511e <USB_WritePacket>
	}

	return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3728      	adds	r7, #40	@ 0x28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USB_HC_ReadInterrupt>:
/**
 * @brief Read all host channel interrupts status
 * @param  USBx  Selected device
 * @retval HAL state
 */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]

	return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	b29b      	uxth	r3, r3
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USB_HC_Halt>:
 * @param  USBx  Selected device
 * @param  hc_num  Host Channel number
 *         This parameter can be a value from 1 to 15
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num) {
 8005db6:	b480      	push	{r7}
 8005db8:	b089      	sub	sp, #36	@ 0x24
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	61fb      	str	r3, [r7, #28]
	uint32_t hcnum = (uint32_t) hc_num;
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	61bb      	str	r3, [r7, #24]
	__IO uint32_t count = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]
	uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	0c9b      	lsrs	r3, r3, #18
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	617b      	str	r3, [r7, #20]
	uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	0fdb      	lsrs	r3, r3, #31
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	613b      	str	r3, [r7, #16]
	uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	0fdb      	lsrs	r3, r3, #31
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]

	/* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
	 At the end of the next uframe/frame (in the worst case), the core generates a channel halted
	 and disables the channel automatically. */

	if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d10d      	bne.n	8005e38 <USB_HC_Halt+0x82>
			&& (SplitEna == 0U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <USB_HC_Halt+0x82>
			&& ((ChannelEna == 0U)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <USB_HC_Halt+0x7e>
					|| (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR))))) {
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d002      	beq.n	8005e34 <USB_HC_Halt+0x7e>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d101      	bne.n	8005e38 <USB_HC_Halt+0x82>
		return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e0d8      	b.n	8005fea <USB_HC_Halt+0x234>
	}

	/* Check for space in the request queue to issue the halt. */
	if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK)) {
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <USB_HC_Halt+0x8e>
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d173      	bne.n	8005f2c <USB_HC_Halt+0x176>
		USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e62:	6013      	str	r3, [r2, #0]

		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d14a      	bne.n	8005f06 <USB_HC_Halt+0x150>
			if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d133      	bne.n	8005ee4 <USB_HC_Halt+0x12e>
				USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e9a:	6013      	str	r3, [r2, #0]
				USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005eba:	6013      	str	r3, [r2, #0]
				do {
					count++;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	60bb      	str	r3, [r7, #8]

					if (count > 1000U) {
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ec8:	d82e      	bhi.n	8005f28 <USB_HC_Halt+0x172>
						break;
					}
				} while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
						== USB_OTG_HCCHAR_CHENA);
 8005edc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ee0:	d0ec      	beq.n	8005ebc <USB_HC_Halt+0x106>
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8005ee2:	e081      	b.n	8005fe8 <USB_HC_Halt+0x232>
			} else {
				USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005efe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f02:	6013      	str	r3, [r2, #0]
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8005f04:	e070      	b.n	8005fe8 <USB_HC_Halt+0x232>
			}
		} else {
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f24:	6013      	str	r3, [r2, #0]
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8005f26:	e05f      	b.n	8005fe8 <USB_HC_Halt+0x232>
						break;
 8005f28:	bf00      	nop
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8005f2a:	e05d      	b.n	8005fe8 <USB_HC_Halt+0x232>
		}
	} else {
		USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f4a:	6013      	str	r3, [r2, #0]

		if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U) {
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d133      	bne.n	8005fc4 <USB_HC_Halt+0x20e>
			USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f7a:	6013      	str	r3, [r2, #0]
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f9a:	6013      	str	r3, [r2, #0]
			do {
				count++;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60bb      	str	r3, [r7, #8]

				if (count > 1000U) {
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fa8:	d81d      	bhi.n	8005fe6 <USB_HC_Halt+0x230>
					break;
				}
			} while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_HCCHAR_CHENA);
 8005fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fc0:	d0ec      	beq.n	8005f9c <USB_HC_Halt+0x1e6>
 8005fc2:	e011      	b.n	8005fe8 <USB_HC_Halt+0x232>
		} else {
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	e000      	b.n	8005fe8 <USB_HC_Halt+0x232>
					break;
 8005fe6:	bf00      	nop
		}
	}

	return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3724      	adds	r7, #36	@ 0x24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
	...

08005ff8 <USB_DoPing>:
 * @param  USBx  Selected device
 * @param  hc_num  Host Channel number
 *         This parameter can be a value from 1 to 15
 * @retval HAL state
 */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num) {
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	617b      	str	r3, [r7, #20]
	uint32_t chnum = (uint32_t) ch_num;
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	613b      	str	r3, [r7, #16]
	uint32_t num_packets = 1U;
 800600c:	2301      	movs	r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	04da      	lsls	r2, r3, #19
 8006014:	4b15      	ldr	r3, [pc, #84]	@ (800606c <USB_DoPing+0x74>)
 8006016:	4013      	ands	r3, r2
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	440a      	add	r2, r1
 8006020:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006024:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006028:	6113      	str	r3, [r2, #16]
	USB_OTG_HCTSIZ_DOPING;

	/* Set host channel enable */
	tmpreg = USBx_HC(chnum)->HCCHAR;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	4413      	add	r3, r2
 8006032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60bb      	str	r3, [r7, #8]
	tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006040:	60bb      	str	r3, [r7, #8]
	tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006048:	60bb      	str	r3, [r7, #8]
	USBx_HC(chnum)->HCCHAR = tmpreg;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	4413      	add	r3, r2
 8006052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006056:	461a      	mov	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	1ff80000 	.word	0x1ff80000

08006070 <USB_StopHost>:
/**
 * @brief  Stop Host Core
 * @param  USBx  Selected device
 * @retval HAL state
 */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	77fb      	strb	r3, [r7, #31]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	617b      	str	r3, [r7, #20]
	__IO uint32_t count = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
	uint32_t value;
	uint32_t i;

	(void) USB_DisableGlobalInt(USBx);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fe ff8d 	bl	8004fa4 <USB_DisableGlobalInt>

	/* Flush USB FIFO */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800608a:	2110      	movs	r1, #16
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7fe ffe6 	bl	800505e <USB_FlushTxFifo>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <USB_StopHost+0x2c>
	{
		ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	77fb      	strb	r3, [r7, #31]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff f810 	bl	80050c2 <USB_FlushRxFifo>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <USB_StopHost+0x3c>
		ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	77fb      	strb	r3, [r7, #31]
	}

	/* Flush out any leftover queued requests. */
	for (i = 0U; i <= 15U; i++) {
 80060ac:	2300      	movs	r3, #0
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	e01f      	b.n	80060f2 <USB_StopHost+0x82>
		value = USBx_HC(i)->HCCHAR;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHDIS;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060c8:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_CHENA;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060d0:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_EPDIR;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060d8:	613b      	str	r3, [r7, #16]
		USBx_HC(i)->HCCHAR = value;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e6:	461a      	mov	r2, r3
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6013      	str	r3, [r2, #0]
	for (i = 0U; i <= 15U; i++) {
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	3301      	adds	r3, #1
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b0f      	cmp	r3, #15
 80060f6:	d9dc      	bls.n	80060b2 <USB_StopHost+0x42>
	}

	/* Halt all channels to put them into a known state. */
	for (i = 0U; i <= 15U; i++) {
 80060f8:	2300      	movs	r3, #0
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e034      	b.n	8006168 <USB_StopHost+0xf8>
		value = USBx_HC(i)->HCCHAR;
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	4413      	add	r3, r2
 8006106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHDIS;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006114:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHENA;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800611c:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_EPDIR;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006124:	613b      	str	r3, [r7, #16]
		USBx_HC(i)->HCCHAR = value;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006132:	461a      	mov	r2, r3
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	6013      	str	r3, [r2, #0]

		do {
			count++;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3301      	adds	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]

			if (count > 1000U) {
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006144:	d80c      	bhi.n	8006160 <USB_StopHost+0xf0>
				break;
			}
		} while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
				== USB_OTG_HCCHAR_CHENA);
 8006158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800615c:	d0ec      	beq.n	8006138 <USB_StopHost+0xc8>
 800615e:	e000      	b.n	8006162 <USB_StopHost+0xf2>
				break;
 8006160:	bf00      	nop
	for (i = 0U; i <= 15U; i++) {
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	3301      	adds	r3, #1
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	2b0f      	cmp	r3, #15
 800616c:	d9c7      	bls.n	80060fe <USB_StopHost+0x8e>
	}

	/* Clear any pending Host interrupts */
	USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006174:	461a      	mov	r2, r3
 8006176:	f04f 33ff 	mov.w	r3, #4294967295
 800617a:	6153      	str	r3, [r2, #20]
	USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f04f 32ff 	mov.w	r2, #4294967295
 8006182:	615a      	str	r2, [r3, #20]

	(void) USB_EnableGlobalInt(USBx);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fe fefc 	bl	8004f82 <USB_EnableGlobalInt>

	return ret;
 800618a:	7ffb      	ldrb	r3, [r7, #31]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b089      	sub	sp, #36	@ 0x24
 8006198:	af04      	add	r7, sp, #16
 800619a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800619c:	2301      	movs	r3, #1
 800619e:	2202      	movs	r2, #2
 80061a0:	2102      	movs	r1, #2
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fc85 	bl	8006ab2 <USBH_FindInterface>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2bff      	cmp	r3, #255	@ 0xff
 80061b0:	d002      	beq.n	80061b8 <USBH_CDC_InterfaceInit+0x24>
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d901      	bls.n	80061bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061b8:	2302      	movs	r3, #2
 80061ba:	e13d      	b.n	8006438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fc5a 	bl	8006a7a <USBH_SelectInterface>
 80061c6:	4603      	mov	r3, r0
 80061c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80061d0:	2302      	movs	r3, #2
 80061d2:	e131      	b.n	8006438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80061da:	2050      	movs	r0, #80	@ 0x50
 80061dc:	f002 fb64 	bl	80088a8 <malloc>
 80061e0:	4603      	mov	r3, r0
 80061e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80061f4:	2302      	movs	r3, #2
 80061f6:	e11f      	b.n	8006438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80061f8:	2250      	movs	r2, #80	@ 0x50
 80061fa:	2100      	movs	r1, #0
 80061fc:	68b8      	ldr	r0, [r7, #8]
 80061fe:	f002 fc11 	bl	8008a24 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	211a      	movs	r1, #26
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	4413      	add	r3, r2
 800620e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b25b      	sxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	da15      	bge.n	8006246 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	211a      	movs	r1, #26
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	4413      	add	r3, r2
 8006226:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800622a:	781a      	ldrb	r2, [r3, #0]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	211a      	movs	r1, #26
 8006236:	fb01 f303 	mul.w	r3, r1, r3
 800623a:	4413      	add	r3, r2
 800623c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006240:	881a      	ldrh	r2, [r3, #0]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 ffbe 	bl	80081ce <USBH_AllocPipe>
 8006252:	4603      	mov	r3, r0
 8006254:	461a      	mov	r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	7819      	ldrb	r1, [r3, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	7858      	ldrb	r0, [r3, #1]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	8952      	ldrh	r2, [r2, #10]
 8006272:	9202      	str	r2, [sp, #8]
 8006274:	2203      	movs	r2, #3
 8006276:	9201      	str	r2, [sp, #4]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	4623      	mov	r3, r4
 800627c:	4602      	mov	r2, r0
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 ff76 	bl	8008170 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2200      	movs	r2, #0
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f002 fa85 	bl	800879c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006292:	2300      	movs	r3, #0
 8006294:	2200      	movs	r2, #0
 8006296:	210a      	movs	r1, #10
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fc0a 	bl	8006ab2 <USBH_FindInterface>
 800629e:	4603      	mov	r3, r0
 80062a0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	2bff      	cmp	r3, #255	@ 0xff
 80062a6:	d002      	beq.n	80062ae <USBH_CDC_InterfaceInit+0x11a>
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d901      	bls.n	80062b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80062ae:	2302      	movs	r3, #2
 80062b0:	e0c2      	b.n	8006438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	211a      	movs	r1, #26
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	4413      	add	r3, r2
 80062be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	b25b      	sxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	da16      	bge.n	80062f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	211a      	movs	r1, #26
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	4413      	add	r3, r2
 80062d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	211a      	movs	r1, #26
 80062e6:	fb01 f303 	mul.w	r3, r1, r3
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062f0:	881a      	ldrh	r2, [r3, #0]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	835a      	strh	r2, [r3, #26]
 80062f6:	e015      	b.n	8006324 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	211a      	movs	r1, #26
 80062fe:	fb01 f303 	mul.w	r3, r1, r3
 8006302:	4413      	add	r3, r2
 8006304:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	211a      	movs	r1, #26
 8006314:	fb01 f303 	mul.w	r3, r1, r3
 8006318:	4413      	add	r3, r2
 800631a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800631e:	881a      	ldrh	r2, [r3, #0]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	211a      	movs	r1, #26
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	4413      	add	r3, r2
 8006330:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	b25b      	sxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	da16      	bge.n	800636a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	211a      	movs	r1, #26
 8006342:	fb01 f303 	mul.w	r3, r1, r3
 8006346:	4413      	add	r3, r2
 8006348:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800634c:	781a      	ldrb	r2, [r3, #0]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	211a      	movs	r1, #26
 8006358:	fb01 f303 	mul.w	r3, r1, r3
 800635c:	4413      	add	r3, r2
 800635e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006362:	881a      	ldrh	r2, [r3, #0]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	835a      	strh	r2, [r3, #26]
 8006368:	e015      	b.n	8006396 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	211a      	movs	r1, #26
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	4413      	add	r3, r2
 8006376:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800637a:	781a      	ldrb	r2, [r3, #0]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	211a      	movs	r1, #26
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4413      	add	r3, r2
 800638c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006390:	881a      	ldrh	r2, [r3, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	7b9b      	ldrb	r3, [r3, #14]
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 ff16 	bl	80081ce <USBH_AllocPipe>
 80063a2:	4603      	mov	r3, r0
 80063a4:	461a      	mov	r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	7bdb      	ldrb	r3, [r3, #15]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 ff0c 	bl	80081ce <USBH_AllocPipe>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	7b59      	ldrb	r1, [r3, #13]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	7b98      	ldrb	r0, [r3, #14]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	8b12      	ldrh	r2, [r2, #24]
 80063d6:	9202      	str	r2, [sp, #8]
 80063d8:	2202      	movs	r2, #2
 80063da:	9201      	str	r2, [sp, #4]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	4623      	mov	r3, r4
 80063e0:	4602      	mov	r2, r0
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fec4 	bl	8008170 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	7b19      	ldrb	r1, [r3, #12]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	7bd8      	ldrb	r0, [r3, #15]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	8b52      	ldrh	r2, [r2, #26]
 8006400:	9202      	str	r2, [sp, #8]
 8006402:	2202      	movs	r2, #2
 8006404:	9201      	str	r2, [sp, #4]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	4623      	mov	r3, r4
 800640a:	4602      	mov	r2, r0
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 feaf 	bl	8008170 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	7b5b      	ldrb	r3, [r3, #13]
 800641e:	2200      	movs	r2, #0
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f002 f9ba 	bl	800879c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	7b1b      	ldrb	r3, [r3, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f002 f9b3 	bl	800879c <USBH_LL_SetToggle>

  return USBH_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	bd90      	pop	{r4, r7, pc}

08006440 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00e      	beq.n	8006478 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 fea4 	bl	80081ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fecf 	bl	8008210 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	7b1b      	ldrb	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00e      	beq.n	800649e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	7b1b      	ldrb	r3, [r3, #12]
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 fe91 	bl	80081ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	7b1b      	ldrb	r3, [r3, #12]
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 febc 	bl	8008210 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	7b5b      	ldrb	r3, [r3, #13]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00e      	beq.n	80064c4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	7b5b      	ldrb	r3, [r3, #13]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 fe7e 	bl	80081ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	7b5b      	ldrb	r3, [r3, #13]
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 fea9 	bl	8008210 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	4618      	mov	r0, r3
 80064da:	f002 f9ed 	bl	80088b8 <free>
    phost->pActiveClass->pData = 0U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064e4:	2200      	movs	r2, #0
 80064e6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3340      	adds	r3, #64	@ 0x40
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8b1 	bl	8006672 <GetLineCoding>
 8006510:	4603      	mov	r3, r0
 8006512:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d105      	bne.n	8006526 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006520:	2102      	movs	r1, #2
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006526:	7afb      	ldrb	r3, [r7, #11]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006538:	2301      	movs	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006550:	2b04      	cmp	r3, #4
 8006552:	d877      	bhi.n	8006644 <USBH_CDC_Process+0x114>
 8006554:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <USBH_CDC_Process+0x2c>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	08006571 	.word	0x08006571
 8006560:	08006577 	.word	0x08006577
 8006564:	080065a7 	.word	0x080065a7
 8006568:	0800661b 	.word	0x0800661b
 800656c:	08006629 	.word	0x08006629
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]
      break;
 8006574:	e06d      	b.n	8006652 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f897 	bl	80066b0 <SetLineCoding>
 8006582:	4603      	mov	r3, r0
 8006584:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006586:	7bbb      	ldrb	r3, [r7, #14]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d104      	bne.n	8006596 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006594:	e058      	b.n	8006648 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d055      	beq.n	8006648 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2204      	movs	r2, #4
 80065a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80065a4:	e050      	b.n	8006648 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	3340      	adds	r3, #64	@ 0x40
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f860 	bl	8006672 <GetLineCoding>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d126      	bne.n	800660a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ce:	791b      	ldrb	r3, [r3, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d13b      	bne.n	800664c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065de:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d133      	bne.n	800664c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d12b      	bne.n	800664c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065fc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80065fe:	429a      	cmp	r2, r3
 8006600:	d124      	bne.n	800664c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f958 	bl	80068b8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006608:	e020      	b.n	800664c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800660a:	7bbb      	ldrb	r3, [r7, #14]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d01d      	beq.n	800664c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2204      	movs	r2, #4
 8006614:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006618:	e018      	b.n	800664c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f867 	bl	80066ee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f8da 	bl	80067da <CDC_ProcessReception>
      break;
 8006626:	e014      	b.n	8006652 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006628:	2100      	movs	r1, #0
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 f81a 	bl	8007664 <USBH_ClrFeature>
 8006630:	4603      	mov	r3, r0
 8006632:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006642:	e005      	b.n	8006650 <USBH_CDC_Process+0x120>

    default:
      break;
 8006644:	bf00      	nop
 8006646:	e004      	b.n	8006652 <USBH_CDC_Process+0x122>
      break;
 8006648:	bf00      	nop
 800664a:	e002      	b.n	8006652 <USBH_CDC_Process+0x122>
      break;
 800664c:	bf00      	nop
 800664e:	e000      	b.n	8006652 <USBH_CDC_Process+0x122>
      break;
 8006650:	bf00      	nop

  }

  return status;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	22a1      	movs	r2, #161	@ 0xa1
 8006680:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2221      	movs	r2, #33	@ 0x21
 8006686:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2207      	movs	r2, #7
 8006698:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2207      	movs	r2, #7
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 fb14 	bl	8007cce <USBH_CtlReq>
 80066a6:	4603      	mov	r3, r0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2221      	movs	r2, #33	@ 0x21
 80066be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2207      	movs	r2, #7
 80066d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2207      	movs	r2, #7
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 faf5 	bl	8007cce <USBH_CtlReq>
 80066e4:	4603      	mov	r3, r0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b086      	sub	sp, #24
 80066f2:	af02      	add	r7, sp, #8
 80066f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006700:	2300      	movs	r3, #0
 8006702:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800670a:	2b01      	cmp	r3, #1
 800670c:	d002      	beq.n	8006714 <CDC_ProcessTransmission+0x26>
 800670e:	2b02      	cmp	r3, #2
 8006710:	d023      	beq.n	800675a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006712:	e05e      	b.n	80067d2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	8b12      	ldrh	r2, [r2, #24]
 800671c:	4293      	cmp	r3, r2
 800671e:	d90b      	bls.n	8006738 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	69d9      	ldr	r1, [r3, #28]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8b1a      	ldrh	r2, [r3, #24]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	7b5b      	ldrb	r3, [r3, #13]
 800672c:	2001      	movs	r0, #1
 800672e:	9000      	str	r0, [sp, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fcda 	bl	80080ea <USBH_BulkSendData>
 8006736:	e00b      	b.n	8006750 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	7b5b      	ldrb	r3, [r3, #13]
 8006746:	2001      	movs	r0, #1
 8006748:	9000      	str	r0, [sp, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f001 fccd 	bl	80080ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006758:	e03b      	b.n	80067d2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	7b5b      	ldrb	r3, [r3, #13]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fff1 	bl	8008748 <USBH_LL_GetURBState>
 8006766:	4603      	mov	r3, r0
 8006768:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d128      	bne.n	80067c2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	8b12      	ldrh	r2, [r2, #24]
 8006778:	4293      	cmp	r3, r2
 800677a:	d90e      	bls.n	800679a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	8b12      	ldrh	r2, [r2, #24]
 8006784:	1a9a      	subs	r2, r3, r2
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	8b12      	ldrh	r2, [r2, #24]
 8006792:	441a      	add	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	61da      	str	r2, [r3, #28]
 8006798:	e002      	b.n	80067a0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80067b0:	e00e      	b.n	80067d0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f868 	bl	8006890 <USBH_CDC_TransmitCallback>
      break;
 80067c0:	e006      	b.n	80067d0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80067c2:	7afb      	ldrb	r3, [r7, #11]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d103      	bne.n	80067d0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80067d0:	bf00      	nop
  }
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b086      	sub	sp, #24
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d002      	beq.n	8006800 <CDC_ProcessReception+0x26>
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d00e      	beq.n	800681c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80067fe:	e043      	b.n	8006888 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	6a19      	ldr	r1, [r3, #32]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	8b5a      	ldrh	r2, [r3, #26]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	7b1b      	ldrb	r3, [r3, #12]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 fc91 	bl	8008134 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2204      	movs	r2, #4
 8006816:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800681a:	e035      	b.n	8006888 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	7b1b      	ldrb	r3, [r3, #12]
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 ff90 	bl	8008748 <USBH_LL_GetURBState>
 8006828:	4603      	mov	r3, r0
 800682a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800682c:	7cfb      	ldrb	r3, [r7, #19]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d129      	bne.n	8006886 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	7b1b      	ldrb	r3, [r3, #12]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fef3 	bl	8008624 <USBH_LL_GetLastXferSize>
 800683e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	429a      	cmp	r2, r3
 8006848:	d016      	beq.n	8006878 <CDC_ProcessReception+0x9e>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	8b5b      	ldrh	r3, [r3, #26]
 800684e:	461a      	mov	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4293      	cmp	r3, r2
 8006854:	d110      	bne.n	8006878 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	1ad2      	subs	r2, r2, r3
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	6a1a      	ldr	r2, [r3, #32]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	441a      	add	r2, r3
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2203      	movs	r2, #3
 8006872:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006876:	e006      	b.n	8006886 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f80f 	bl	80068a4 <USBH_CDC_ReceiveCallback>
      break;
 8006886:	bf00      	nop
  }
}
 8006888:	bf00      	nop
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80068e0:	2302      	movs	r3, #2
 80068e2:	e029      	b.n	8006938 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	79fa      	ldrb	r2, [r7, #7]
 80068e8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 f81f 	bl	8006940 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f001 fdc3 	bl	80084bc <USBH_LL_Init>

  return USBH_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e009      	b.n	8006966 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	33e0      	adds	r3, #224	@ 0xe0
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	2200      	movs	r2, #0
 800695e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3301      	adds	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b0f      	cmp	r3, #15
 800696a:	d9f2      	bls.n	8006952 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	e009      	b.n	8006986 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3301      	adds	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800698c:	d3f1      	bcc.n	8006972 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2240      	movs	r2, #64	@ 0x40
 80069b2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	331c      	adds	r3, #28
 80069de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f002 f81d 	bl	8008a24 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80069f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f002 f814 	bl	8008a24 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006a02:	2212      	movs	r2, #18
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f002 f80c 	bl	8008a24 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006a12:	223e      	movs	r2, #62	@ 0x3e
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f002 f804 	bl	8008a24 <memset>

  return USBH_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d016      	beq.n	8006a68 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10e      	bne.n	8006a62 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006a4a:	1c59      	adds	r1, r3, #1
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	33de      	adds	r3, #222	@ 0xde
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]
 8006a60:	e004      	b.n	8006a6c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a62:	2302      	movs	r3, #2
 8006a64:	73fb      	strb	r3, [r7, #15]
 8006a66:	e001      	b.n	8006a6c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	460b      	mov	r3, r1
 8006a84:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006a90:	78fa      	ldrb	r2, [r7, #3]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d204      	bcs.n	8006aa0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	78fa      	ldrb	r2, [r7, #3]
 8006a9a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006a9e:	e001      	b.n	8006aa4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b087      	sub	sp, #28
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	4608      	mov	r0, r1
 8006abc:	4611      	mov	r1, r2
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	70fb      	strb	r3, [r7, #3]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70bb      	strb	r3, [r7, #2]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006ada:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006adc:	e025      	b.n	8006b2a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	221a      	movs	r2, #26
 8006ae2:	fb02 f303 	mul.w	r3, r2, r3
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	3302      	adds	r3, #2
 8006aee:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	795b      	ldrb	r3, [r3, #5]
 8006af4:	78fa      	ldrb	r2, [r7, #3]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d002      	beq.n	8006b00 <USBH_FindInterface+0x4e>
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	2bff      	cmp	r3, #255	@ 0xff
 8006afe:	d111      	bne.n	8006b24 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b04:	78ba      	ldrb	r2, [r7, #2]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d002      	beq.n	8006b10 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b0a:	78bb      	ldrb	r3, [r7, #2]
 8006b0c:	2bff      	cmp	r3, #255	@ 0xff
 8006b0e:	d109      	bne.n	8006b24 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b14:	787a      	ldrb	r2, [r7, #1]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d002      	beq.n	8006b20 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b1a:	787b      	ldrb	r3, [r7, #1]
 8006b1c:	2bff      	cmp	r3, #255	@ 0xff
 8006b1e:	d101      	bne.n	8006b24 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	e006      	b.n	8006b32 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	3301      	adds	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d9d6      	bls.n	8006ade <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b30:	23ff      	movs	r3, #255	@ 0xff
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fcf4 	bl	8008534 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 fe0d 	bl	800876e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af04      	add	r7, sp, #16
 8006b66:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d102      	bne.n	8006b82 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2203      	movs	r2, #3
 8006b80:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b0b      	cmp	r3, #11
 8006b8a:	f200 81bb 	bhi.w	8006f04 <USBH_Process+0x3a4>
 8006b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b94 <USBH_Process+0x34>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006bc5 	.word	0x08006bc5
 8006b98:	08006bf7 	.word	0x08006bf7
 8006b9c:	08006c5f 	.word	0x08006c5f
 8006ba0:	08006e9f 	.word	0x08006e9f
 8006ba4:	08006f05 	.word	0x08006f05
 8006ba8:	08006cff 	.word	0x08006cff
 8006bac:	08006e45 	.word	0x08006e45
 8006bb0:	08006d35 	.word	0x08006d35
 8006bb4:	08006d55 	.word	0x08006d55
 8006bb8:	08006d73 	.word	0x08006d73
 8006bbc:	08006db7 	.word	0x08006db7
 8006bc0:	08006e87 	.word	0x08006e87
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 819b 	beq.w	8006f08 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006bd8:	20c8      	movs	r0, #200	@ 0xc8
 8006bda:	f001 fe12 	bl	8008802 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fd05 	bl	80085ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006bf4:	e188      	b.n	8006f08 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d107      	bne.n	8006c10 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c0e:	e18a      	b.n	8006f26 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c1a:	d914      	bls.n	8006c46 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006c22:	3301      	adds	r3, #1
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d903      	bls.n	8006c3e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	220d      	movs	r2, #13
 8006c3a:	701a      	strb	r2, [r3, #0]
      break;
 8006c3c:	e173      	b.n	8006f26 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	701a      	strb	r2, [r3, #0]
      break;
 8006c44:	e16f      	b.n	8006f26 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006c4c:	f103 020a 	add.w	r2, r3, #10
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006c56:	200a      	movs	r0, #10
 8006c58:	f001 fdd3 	bl	8008802 <USBH_Delay>
      break;
 8006c5c:	e163      	b.n	8006f26 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c6e:	2104      	movs	r1, #4
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006c74:	2064      	movs	r0, #100	@ 0x64
 8006c76:	f001 fdc4 	bl	8008802 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fc90 	bl	80085a0 <USBH_LL_GetSpeed>
 8006c80:	4603      	mov	r3, r0
 8006c82:	461a      	mov	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2205      	movs	r2, #5
 8006c8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006c90:	2100      	movs	r1, #0
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fa9b 	bl	80081ce <USBH_AllocPipe>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006ca0:	2180      	movs	r1, #128	@ 0x80
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fa93 	bl	80081ce <USBH_AllocPipe>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	461a      	mov	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	7919      	ldrb	r1, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006cc4:	9202      	str	r2, [sp, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2280      	movs	r2, #128	@ 0x80
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fa4d 	bl	8008170 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	7959      	ldrb	r1, [r3, #5]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006cea:	9202      	str	r2, [sp, #8]
 8006cec:	2200      	movs	r2, #0
 8006cee:	9201      	str	r2, [sp, #4]
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fa3a 	bl	8008170 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cfc:	e113      	b.n	8006f26 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f916 	bl	8006f30 <USBH_HandleEnum>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f040 80fd 	bne.w	8006f0c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d103      	bne.n	8006d2c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2208      	movs	r2, #8
 8006d28:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d2a:	e0ef      	b.n	8006f0c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2207      	movs	r2, #7
 8006d30:	701a      	strb	r2, [r3, #0]
      break;
 8006d32:	e0eb      	b.n	8006f0c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80e8 	beq.w	8006f10 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d46:	2101      	movs	r1, #1
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2208      	movs	r2, #8
 8006d50:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006d52:	e0dd      	b.n	8006f10 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fc3a 	bl	80075d6 <USBH_SetCfg>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f040 80d5 	bne.w	8006f14 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2209      	movs	r2, #9
 8006d6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d70:	e0d0      	b.n	8006f14 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d016      	beq.n	8006dae <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006d80:	2101      	movs	r1, #1
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fc4a 	bl	800761c <USBH_SetFeature>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d103      	bne.n	8006d9c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	220a      	movs	r2, #10
 8006d98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d9a:	e0bd      	b.n	8006f18 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	f040 80b9 	bne.w	8006f18 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	220a      	movs	r2, #10
 8006daa:	701a      	strb	r2, [r3, #0]
      break;
 8006dac:	e0b4      	b.n	8006f18 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	220a      	movs	r2, #10
 8006db2:	701a      	strb	r2, [r3, #0]
      break;
 8006db4:	e0b0      	b.n	8006f18 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80ad 	beq.w	8006f1c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
 8006dce:	e016      	b.n	8006dfe <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006dd0:	7bfa      	ldrb	r2, [r7, #15]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	32de      	adds	r2, #222	@ 0xde
 8006dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dda:	791a      	ldrb	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d108      	bne.n	8006df8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006de6:	7bfa      	ldrb	r2, [r7, #15]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	32de      	adds	r2, #222	@ 0xde
 8006dec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006df6:	e005      	b.n	8006e04 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	73fb      	strb	r3, [r7, #15]
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0e5      	beq.n	8006dd0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2206      	movs	r2, #6
 8006e24:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e2c:	2103      	movs	r1, #3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e32:	e073      	b.n	8006f1c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	220d      	movs	r2, #13
 8006e38:	701a      	strb	r2, [r3, #0]
      break;
 8006e3a:	e06f      	b.n	8006f1c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	220d      	movs	r2, #13
 8006e40:	701a      	strb	r2, [r3, #0]
      break;
 8006e42:	e06b      	b.n	8006f1c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d017      	beq.n	8006e7e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	220b      	movs	r2, #11
 8006e6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e6c:	e058      	b.n	8006f20 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d154      	bne.n	8006f20 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	220d      	movs	r2, #13
 8006e7a:	701a      	strb	r2, [r3, #0]
      break;
 8006e7c:	e050      	b.n	8006f20 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	220d      	movs	r2, #13
 8006e82:	701a      	strb	r2, [r3, #0]
      break;
 8006e84:	e04c      	b.n	8006f20 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d049      	beq.n	8006f24 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
      }
      break;
 8006e9c:	e042      	b.n	8006f24 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fd4a 	bl	8006940 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006eda:	2105      	movs	r1, #5
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d107      	bne.n	8006efc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff fe22 	bl	8006b3e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006efa:	e014      	b.n	8006f26 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fb19 	bl	8008534 <USBH_LL_Start>
      break;
 8006f02:	e010      	b.n	8006f26 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f04:	bf00      	nop
 8006f06:	e00e      	b.n	8006f26 <USBH_Process+0x3c6>
      break;
 8006f08:	bf00      	nop
 8006f0a:	e00c      	b.n	8006f26 <USBH_Process+0x3c6>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e00a      	b.n	8006f26 <USBH_Process+0x3c6>
    break;
 8006f10:	bf00      	nop
 8006f12:	e008      	b.n	8006f26 <USBH_Process+0x3c6>
      break;
 8006f14:	bf00      	nop
 8006f16:	e006      	b.n	8006f26 <USBH_Process+0x3c6>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e004      	b.n	8006f26 <USBH_Process+0x3c6>
      break;
 8006f1c:	bf00      	nop
 8006f1e:	e002      	b.n	8006f26 <USBH_Process+0x3c6>
      break;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <USBH_Process+0x3c6>
      break;
 8006f24:	bf00      	nop
  }
  return USBH_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af04      	add	r7, sp, #16
 8006f36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	2b07      	cmp	r3, #7
 8006f46:	f200 81bd 	bhi.w	80072c4 <USBH_HandleEnum+0x394>
 8006f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f50 <USBH_HandleEnum+0x20>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006f71 	.word	0x08006f71
 8006f54:	0800702b 	.word	0x0800702b
 8006f58:	08007095 	.word	0x08007095
 8006f5c:	0800711f 	.word	0x0800711f
 8006f60:	08007189 	.word	0x08007189
 8006f64:	080071f9 	.word	0x080071f9
 8006f68:	0800723f 	.word	0x0800723f
 8006f6c:	08007285 	.word	0x08007285
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006f70:	2108      	movs	r1, #8
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa4c 	bl	8007410 <USBH_Get_DevDesc>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d12e      	bne.n	8006fe0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	7919      	ldrb	r1, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006fa6:	9202      	str	r2, [sp, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	9201      	str	r2, [sp, #4]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2280      	movs	r2, #128	@ 0x80
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 f8dc 	bl	8008170 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	7959      	ldrb	r1, [r3, #5]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fcc:	9202      	str	r2, [sp, #8]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	9201      	str	r2, [sp, #4]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 f8c9 	bl	8008170 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006fde:	e173      	b.n	80072c8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	f040 8170 	bne.w	80072c8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006fee:	3301      	adds	r3, #1
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d903      	bls.n	800700a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	220d      	movs	r2, #13
 8007006:	701a      	strb	r2, [r3, #0]
      break;
 8007008:	e15e      	b.n	80072c8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	795b      	ldrb	r3, [r3, #5]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 f8fd 	bl	8008210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	791b      	ldrb	r3, [r3, #4]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f8f7 	bl	8008210 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
      break;
 8007028:	e14e      	b.n	80072c8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800702a:	2112      	movs	r1, #18
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f9ef 	bl	8007410 <USBH_Get_DevDesc>
 8007032:	4603      	mov	r3, r0
 8007034:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007042:	e143      	b.n	80072cc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b03      	cmp	r3, #3
 8007048:	f040 8140 	bne.w	80072cc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007052:	3301      	adds	r3, #1
 8007054:	b2da      	uxtb	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007062:	2b03      	cmp	r3, #3
 8007064:	d903      	bls.n	800706e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	220d      	movs	r2, #13
 800706a:	701a      	strb	r2, [r3, #0]
      break;
 800706c:	e12e      	b.n	80072cc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	795b      	ldrb	r3, [r3, #5]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 f8cb 	bl	8008210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	791b      	ldrb	r3, [r3, #4]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f8c5 	bl	8008210 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
      break;
 8007092:	e11b      	b.n	80072cc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007094:	2101      	movs	r1, #1
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fa79 	bl	800758e <USBH_SetAddress>
 800709c:	4603      	mov	r3, r0
 800709e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d130      	bne.n	8007108 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80070a6:	2002      	movs	r0, #2
 80070a8:	f001 fbab 	bl	8008802 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2203      	movs	r2, #3
 80070b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	7919      	ldrb	r1, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80070ce:	9202      	str	r2, [sp, #8]
 80070d0:	2200      	movs	r2, #0
 80070d2:	9201      	str	r2, [sp, #4]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	4603      	mov	r3, r0
 80070d8:	2280      	movs	r2, #128	@ 0x80
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 f848 	bl	8008170 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	7959      	ldrb	r1, [r3, #5]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070f4:	9202      	str	r2, [sp, #8]
 80070f6:	2200      	movs	r2, #0
 80070f8:	9201      	str	r2, [sp, #4]
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	4603      	mov	r3, r0
 80070fe:	2200      	movs	r2, #0
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 f835 	bl	8008170 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007106:	e0e3      	b.n	80072d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b03      	cmp	r3, #3
 800710c:	f040 80e0 	bne.w	80072d0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	220d      	movs	r2, #13
 8007114:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	705a      	strb	r2, [r3, #1]
      break;
 800711c:	e0d8      	b.n	80072d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800711e:	2109      	movs	r1, #9
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f9a1 	bl	8007468 <USBH_Get_CfgDesc>
 8007126:	4603      	mov	r3, r0
 8007128:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d103      	bne.n	8007138 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2204      	movs	r2, #4
 8007134:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007136:	e0cd      	b.n	80072d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b03      	cmp	r3, #3
 800713c:	f040 80ca 	bne.w	80072d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007146:	3301      	adds	r3, #1
 8007148:	b2da      	uxtb	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007156:	2b03      	cmp	r3, #3
 8007158:	d903      	bls.n	8007162 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	220d      	movs	r2, #13
 800715e:	701a      	strb	r2, [r3, #0]
      break;
 8007160:	e0b8      	b.n	80072d4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	795b      	ldrb	r3, [r3, #5]
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 f851 	bl	8008210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	791b      	ldrb	r3, [r3, #4]
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 f84b 	bl	8008210 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	701a      	strb	r2, [r3, #0]
      break;
 8007186:	e0a5      	b.n	80072d4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f969 	bl	8007468 <USBH_Get_CfgDesc>
 8007196:	4603      	mov	r3, r0
 8007198:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d103      	bne.n	80071a8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2205      	movs	r2, #5
 80071a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071a6:	e097      	b.n	80072d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	f040 8094 	bne.w	80072d8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071b6:	3301      	adds	r3, #1
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d903      	bls.n	80071d2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	220d      	movs	r2, #13
 80071ce:	701a      	strb	r2, [r3, #0]
      break;
 80071d0:	e082      	b.n	80072d8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	795b      	ldrb	r3, [r3, #5]
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 f819 	bl	8008210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	791b      	ldrb	r3, [r3, #4]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 f813 	bl	8008210 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	701a      	strb	r2, [r3, #0]
      break;
 80071f6:	e06f      	b.n	80072d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d019      	beq.n	8007236 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800720e:	23ff      	movs	r3, #255	@ 0xff
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f953 	bl	80074bc <USBH_Get_StringDesc>
 8007216:	4603      	mov	r3, r0
 8007218:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2206      	movs	r2, #6
 8007224:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007226:	e059      	b.n	80072dc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	2b03      	cmp	r3, #3
 800722c:	d156      	bne.n	80072dc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2206      	movs	r2, #6
 8007232:	705a      	strb	r2, [r3, #1]
      break;
 8007234:	e052      	b.n	80072dc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2206      	movs	r2, #6
 800723a:	705a      	strb	r2, [r3, #1]
      break;
 800723c:	e04e      	b.n	80072dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007244:	2b00      	cmp	r3, #0
 8007246:	d019      	beq.n	800727c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007254:	23ff      	movs	r3, #255	@ 0xff
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f930 	bl	80074bc <USBH_Get_StringDesc>
 800725c:	4603      	mov	r3, r0
 800725e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2207      	movs	r2, #7
 800726a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800726c:	e038      	b.n	80072e0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	2b03      	cmp	r3, #3
 8007272:	d135      	bne.n	80072e0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2207      	movs	r2, #7
 8007278:	705a      	strb	r2, [r3, #1]
      break;
 800727a:	e031      	b.n	80072e0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2207      	movs	r2, #7
 8007280:	705a      	strb	r2, [r3, #1]
      break;
 8007282:	e02d      	b.n	80072e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800728a:	2b00      	cmp	r3, #0
 800728c:	d017      	beq.n	80072be <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800729a:	23ff      	movs	r3, #255	@ 0xff
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f90d 	bl	80074bc <USBH_Get_StringDesc>
 80072a2:	4603      	mov	r3, r0
 80072a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80072b0:	e018      	b.n	80072e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d115      	bne.n	80072e4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]
      break;
 80072bc:	e012      	b.n	80072e4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]
      break;
 80072c2:	e00f      	b.n	80072e4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80072c4:	bf00      	nop
 80072c6:	e00e      	b.n	80072e6 <USBH_HandleEnum+0x3b6>
      break;
 80072c8:	bf00      	nop
 80072ca:	e00c      	b.n	80072e6 <USBH_HandleEnum+0x3b6>
      break;
 80072cc:	bf00      	nop
 80072ce:	e00a      	b.n	80072e6 <USBH_HandleEnum+0x3b6>
      break;
 80072d0:	bf00      	nop
 80072d2:	e008      	b.n	80072e6 <USBH_HandleEnum+0x3b6>
      break;
 80072d4:	bf00      	nop
 80072d6:	e006      	b.n	80072e6 <USBH_HandleEnum+0x3b6>
      break;
 80072d8:	bf00      	nop
 80072da:	e004      	b.n	80072e6 <USBH_HandleEnum+0x3b6>
      break;
 80072dc:	bf00      	nop
 80072de:	e002      	b.n	80072e6 <USBH_HandleEnum+0x3b6>
      break;
 80072e0:	bf00      	nop
 80072e2:	e000      	b.n	80072e6 <USBH_HandleEnum+0x3b6>
      break;
 80072e4:	bf00      	nop
  }
  return Status;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f804 	bl	8007332 <USBH_HandleSof>
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b0b      	cmp	r3, #11
 8007342:	d10a      	bne.n	800735a <USBH_HandleSof+0x28>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
  }
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007372:	bf00      	nop
}
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800738e:	bf00      	nop
}
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 f8be 	bl	800856a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	791b      	ldrb	r3, [r3, #4]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 ff0b 	bl	8008210 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	795b      	ldrb	r3, [r3, #5]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 ff05 	bl	8008210 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af02      	add	r7, sp, #8
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800741c:	887b      	ldrh	r3, [r7, #2]
 800741e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007422:	d901      	bls.n	8007428 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007424:	2303      	movs	r3, #3
 8007426:	e01b      	b.n	8007460 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800742e:	887b      	ldrh	r3, [r7, #2]
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	4613      	mov	r3, r2
 8007434:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007438:	2100      	movs	r1, #0
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f872 	bl	8007524 <USBH_GetDescriptor>
 8007440:	4603      	mov	r3, r0
 8007442:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d109      	bne.n	800745e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007450:	887a      	ldrh	r2, [r7, #2]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f929 	bl	80076ac <USBH_ParseDevDesc>
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af02      	add	r7, sp, #8
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	331c      	adds	r3, #28
 8007478:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800747a:	887b      	ldrh	r3, [r7, #2]
 800747c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007480:	d901      	bls.n	8007486 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007482:	2303      	movs	r3, #3
 8007484:	e016      	b.n	80074b4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007486:	887b      	ldrh	r3, [r7, #2]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007490:	2100      	movs	r1, #0
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f846 	bl	8007524 <USBH_GetDescriptor>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d107      	bne.n	80074b2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80074a2:	887b      	ldrh	r3, [r7, #2]
 80074a4:	461a      	mov	r2, r3
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f9af 	bl	800780c <USBH_ParseCfgDesc>
 80074ae:	4603      	mov	r3, r0
 80074b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	607a      	str	r2, [r7, #4]
 80074c6:	461a      	mov	r2, r3
 80074c8:	460b      	mov	r3, r1
 80074ca:	72fb      	strb	r3, [r7, #11]
 80074cc:	4613      	mov	r3, r2
 80074ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80074d0:	893b      	ldrh	r3, [r7, #8]
 80074d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074d6:	d802      	bhi.n	80074de <USBH_Get_StringDesc+0x22>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074de:	2303      	movs	r3, #3
 80074e0:	e01c      	b.n	800751c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80074e2:	7afb      	ldrb	r3, [r7, #11]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80074ea:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80074f2:	893b      	ldrh	r3, [r7, #8]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	460b      	mov	r3, r1
 80074f8:	2100      	movs	r1, #0
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 f812 	bl	8007524 <USBH_GetDescriptor>
 8007500:	4603      	mov	r3, r0
 8007502:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d107      	bne.n	800751a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007510:	893a      	ldrh	r2, [r7, #8]
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	4618      	mov	r0, r3
 8007516:	f000 fb8d 	bl	8007c34 <USBH_ParseStringDesc>
  }

  return status;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	607b      	str	r3, [r7, #4]
 800752e:	460b      	mov	r3, r1
 8007530:	72fb      	strb	r3, [r7, #11]
 8007532:	4613      	mov	r3, r2
 8007534:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	789b      	ldrb	r3, [r3, #2]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d11c      	bne.n	8007578 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800753e:	7afb      	ldrb	r3, [r7, #11]
 8007540:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007544:	b2da      	uxtb	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2206      	movs	r2, #6
 800754e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	893a      	ldrh	r2, [r7, #8]
 8007554:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007556:	893b      	ldrh	r3, [r7, #8]
 8007558:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800755c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007560:	d104      	bne.n	800756c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f240 4209 	movw	r2, #1033	@ 0x409
 8007568:	829a      	strh	r2, [r3, #20]
 800756a:	e002      	b.n	8007572 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8b3a      	ldrh	r2, [r7, #24]
 8007576:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007578:	8b3b      	ldrh	r3, [r7, #24]
 800757a:	461a      	mov	r2, r3
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 fba5 	bl	8007cce <USBH_CtlReq>
 8007584:	4603      	mov	r3, r0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	789b      	ldrb	r3, [r3, #2]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d10f      	bne.n	80075c2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2205      	movs	r2, #5
 80075ac:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075c2:	2200      	movs	r2, #0
 80075c4:	2100      	movs	r1, #0
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fb81 	bl	8007cce <USBH_CtlReq>
 80075cc:	4603      	mov	r3, r0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	789b      	ldrb	r3, [r3, #2]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d10e      	bne.n	8007608 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2209      	movs	r2, #9
 80075f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	887a      	ldrh	r2, [r7, #2]
 80075fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007608:	2200      	movs	r2, #0
 800760a:	2100      	movs	r1, #0
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fb5e 	bl	8007cce <USBH_CtlReq>
 8007612:	4603      	mov	r3, r0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	789b      	ldrb	r3, [r3, #2]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d10f      	bne.n	8007650 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2203      	movs	r2, #3
 800763a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007650:	2200      	movs	r2, #0
 8007652:	2100      	movs	r1, #0
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fb3a 	bl	8007cce <USBH_CtlReq>
 800765a:	4603      	mov	r3, r0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	789b      	ldrb	r3, [r3, #2]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d10f      	bne.n	8007698 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	b29a      	uxth	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007698:	2200      	movs	r2, #0
 800769a:	2100      	movs	r1, #0
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fb16 	bl	8007cce <USBH_CtlReq>
 80076a2:	4603      	mov	r3, r0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80076c0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80076cc:	2302      	movs	r3, #2
 80076ce:	e094      	b.n	80077fa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	785a      	ldrb	r2, [r3, #1]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	3302      	adds	r3, #2
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	3303      	adds	r3, #3
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4313      	orrs	r3, r2
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	791a      	ldrb	r2, [r3, #4]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	795a      	ldrb	r2, [r3, #5]
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	799a      	ldrb	r2, [r3, #6]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	79da      	ldrb	r2, [r3, #7]
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800772a:	2b01      	cmp	r3, #1
 800772c:	d11b      	bne.n	8007766 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	79db      	ldrb	r3, [r3, #7]
 8007732:	2b20      	cmp	r3, #32
 8007734:	dc0f      	bgt.n	8007756 <USBH_ParseDevDesc+0xaa>
 8007736:	2b08      	cmp	r3, #8
 8007738:	db0f      	blt.n	800775a <USBH_ParseDevDesc+0xae>
 800773a:	3b08      	subs	r3, #8
 800773c:	4a32      	ldr	r2, [pc, #200]	@ (8007808 <USBH_ParseDevDesc+0x15c>)
 800773e:	fa22 f303 	lsr.w	r3, r2, r3
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	bf14      	ite	ne
 800774a:	2301      	movne	r3, #1
 800774c:	2300      	moveq	r3, #0
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <USBH_ParseDevDesc+0xb6>
 8007754:	e001      	b.n	800775a <USBH_ParseDevDesc+0xae>
 8007756:	2b40      	cmp	r3, #64	@ 0x40
 8007758:	d003      	beq.n	8007762 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2208      	movs	r2, #8
 800775e:	71da      	strb	r2, [r3, #7]
        break;
 8007760:	e000      	b.n	8007764 <USBH_ParseDevDesc+0xb8>
        break;
 8007762:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007764:	e00e      	b.n	8007784 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800776c:	2b02      	cmp	r3, #2
 800776e:	d107      	bne.n	8007780 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	79db      	ldrb	r3, [r3, #7]
 8007774:	2b08      	cmp	r3, #8
 8007776:	d005      	beq.n	8007784 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2208      	movs	r2, #8
 800777c:	71da      	strb	r2, [r3, #7]
 800777e:	e001      	b.n	8007784 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007780:	2303      	movs	r3, #3
 8007782:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	2b08      	cmp	r3, #8
 8007788:	d936      	bls.n	80077f8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	3308      	adds	r3, #8
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	3309      	adds	r3, #9
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	b29b      	uxth	r3, r3
 800779c:	4313      	orrs	r3, r2
 800779e:	b29a      	uxth	r2, r3
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	330a      	adds	r3, #10
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	330b      	adds	r3, #11
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	021b      	lsls	r3, r3, #8
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	4313      	orrs	r3, r2
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	330c      	adds	r3, #12
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	330d      	adds	r3, #13
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	4313      	orrs	r3, r2
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	7b9a      	ldrb	r2, [r3, #14]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	7bda      	ldrb	r2, [r3, #15]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	7c1a      	ldrb	r2, [r3, #16]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	7c5a      	ldrb	r2, [r3, #17]
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	01000101 	.word	0x01000101

0800780c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	@ 0x30
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007820:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800783a:	2302      	movs	r3, #2
 800783c:	e0da      	b.n	80079f4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b09      	cmp	r3, #9
 8007848:	d002      	beq.n	8007850 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800784a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784c:	2209      	movs	r2, #9
 800784e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	781a      	ldrb	r2, [r3, #0]
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	785a      	ldrb	r2, [r3, #1]
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	3302      	adds	r3, #2
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	3303      	adds	r3, #3
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	021b      	lsls	r3, r3, #8
 8007870:	b29b      	uxth	r3, r3
 8007872:	4313      	orrs	r3, r2
 8007874:	b29b      	uxth	r3, r3
 8007876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800787a:	bf28      	it	cs
 800787c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007880:	b29a      	uxth	r2, r3
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	791a      	ldrb	r2, [r3, #4]
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	795a      	ldrb	r2, [r3, #5]
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	799a      	ldrb	r2, [r3, #6]
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	79da      	ldrb	r2, [r3, #7]
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	7a1a      	ldrb	r2, [r3, #8]
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078ae:	88fb      	ldrh	r3, [r7, #6]
 80078b0:	2b09      	cmp	r3, #9
 80078b2:	f240 809d 	bls.w	80079f0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80078b6:	2309      	movs	r3, #9
 80078b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078be:	e081      	b.n	80079c4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078c0:	f107 0316 	add.w	r3, r7, #22
 80078c4:	4619      	mov	r1, r3
 80078c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078c8:	f000 f9e7 	bl	8007c9a <USBH_GetNextDesc>
 80078cc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80078ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d176      	bne.n	80079c4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b09      	cmp	r3, #9
 80078dc:	d002      	beq.n	80078e4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80078de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e0:	2209      	movs	r2, #9
 80078e2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80078e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078e8:	221a      	movs	r2, #26
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	3308      	adds	r3, #8
 80078f0:	6a3a      	ldr	r2, [r7, #32]
 80078f2:	4413      	add	r3, r2
 80078f4:	3302      	adds	r3, #2
 80078f6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80078f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078fa:	69f8      	ldr	r0, [r7, #28]
 80078fc:	f000 f87e 	bl	80079fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800790a:	e043      	b.n	8007994 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800790c:	f107 0316 	add.w	r3, r7, #22
 8007910:	4619      	mov	r1, r3
 8007912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007914:	f000 f9c1 	bl	8007c9a <USBH_GetNextDesc>
 8007918:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800791a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b05      	cmp	r3, #5
 8007920:	d138      	bne.n	8007994 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	795b      	ldrb	r3, [r3, #5]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d113      	bne.n	8007952 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800792e:	2b02      	cmp	r3, #2
 8007930:	d003      	beq.n	800793a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	799b      	ldrb	r3, [r3, #6]
 8007936:	2b03      	cmp	r3, #3
 8007938:	d10b      	bne.n	8007952 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	79db      	ldrb	r3, [r3, #7]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10b      	bne.n	800795a <USBH_ParseCfgDesc+0x14e>
 8007942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b09      	cmp	r3, #9
 8007948:	d007      	beq.n	800795a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800794a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794c:	2209      	movs	r2, #9
 800794e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007950:	e003      	b.n	800795a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007954:	2207      	movs	r2, #7
 8007956:	701a      	strb	r2, [r3, #0]
 8007958:	e000      	b.n	800795c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800795a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800795c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007960:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007964:	3201      	adds	r2, #1
 8007966:	00d2      	lsls	r2, r2, #3
 8007968:	211a      	movs	r1, #26
 800796a:	fb01 f303 	mul.w	r3, r1, r3
 800796e:	4413      	add	r3, r2
 8007970:	3308      	adds	r3, #8
 8007972:	6a3a      	ldr	r2, [r7, #32]
 8007974:	4413      	add	r3, r2
 8007976:	3304      	adds	r3, #4
 8007978:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800797a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800797c:	69b9      	ldr	r1, [r7, #24]
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 f870 	bl	8007a64 <USBH_ParseEPDesc>
 8007984:	4603      	mov	r3, r0
 8007986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800798a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800798e:	3301      	adds	r3, #1
 8007990:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	791b      	ldrb	r3, [r3, #4]
 8007998:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800799c:	429a      	cmp	r2, r3
 800799e:	d204      	bcs.n	80079aa <USBH_ParseCfgDesc+0x19e>
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	885a      	ldrh	r2, [r3, #2]
 80079a4:	8afb      	ldrh	r3, [r7, #22]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d8b0      	bhi.n	800790c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	791b      	ldrb	r3, [r3, #4]
 80079ae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d201      	bcs.n	80079ba <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e01c      	b.n	80079f4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80079ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079be:	3301      	adds	r3, #1
 80079c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d805      	bhi.n	80079d8 <USBH_ParseCfgDesc+0x1cc>
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	885a      	ldrh	r2, [r3, #2]
 80079d0:	8afb      	ldrh	r3, [r7, #22]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	f63f af74 	bhi.w	80078c0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	791b      	ldrb	r3, [r3, #4]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	bf28      	it	cs
 80079e0:	2302      	movcs	r3, #2
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d201      	bcs.n	80079f0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e001      	b.n	80079f4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80079f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3730      	adds	r7, #48	@ 0x30
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	785a      	ldrb	r2, [r3, #1]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	789a      	ldrb	r2, [r3, #2]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	78da      	ldrb	r2, [r3, #3]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	bf28      	it	cs
 8007a30:	2302      	movcs	r3, #2
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	795a      	ldrb	r2, [r3, #5]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	799a      	ldrb	r2, [r3, #6]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	79da      	ldrb	r2, [r3, #7]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	7a1a      	ldrb	r2, [r3, #8]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	721a      	strb	r2, [r3, #8]
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	785a      	ldrb	r2, [r3, #1]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	789a      	ldrb	r2, [r3, #2]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	78da      	ldrb	r2, [r3, #3]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3304      	adds	r3, #4
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3305      	adds	r3, #5
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	799a      	ldrb	r2, [r3, #6]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	889b      	ldrh	r3, [r3, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d009      	beq.n	8007ad2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ac6:	d804      	bhi.n	8007ad2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ad0:	d901      	bls.n	8007ad6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d136      	bne.n	8007b4e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	78db      	ldrb	r3, [r3, #3]
 8007ae4:	f003 0303 	and.w	r3, r3, #3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d108      	bne.n	8007afe <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	889b      	ldrh	r3, [r3, #4]
 8007af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007af4:	f240 8097 	bls.w	8007c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007af8:	2303      	movs	r3, #3
 8007afa:	75fb      	strb	r3, [r7, #23]
 8007afc:	e093      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	78db      	ldrb	r3, [r3, #3]
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d107      	bne.n	8007b1a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	889b      	ldrh	r3, [r3, #4]
 8007b0e:	2b40      	cmp	r3, #64	@ 0x40
 8007b10:	f240 8089 	bls.w	8007c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b14:	2303      	movs	r3, #3
 8007b16:	75fb      	strb	r3, [r7, #23]
 8007b18:	e085      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	78db      	ldrb	r3, [r3, #3]
 8007b1e:	f003 0303 	and.w	r3, r3, #3
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d005      	beq.n	8007b32 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	78db      	ldrb	r3, [r3, #3]
 8007b2a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d10a      	bne.n	8007b48 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	799b      	ldrb	r3, [r3, #6]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <USBH_ParseEPDesc+0xde>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	799b      	ldrb	r3, [r3, #6]
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d970      	bls.n	8007c24 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007b42:	2303      	movs	r3, #3
 8007b44:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b46:	e06d      	b.n	8007c24 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	75fb      	strb	r3, [r7, #23]
 8007b4c:	e06b      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d13c      	bne.n	8007bd2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	78db      	ldrb	r3, [r3, #3]
 8007b5c:	f003 0303 	and.w	r3, r3, #3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d005      	beq.n	8007b70 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	78db      	ldrb	r3, [r3, #3]
 8007b68:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d106      	bne.n	8007b7e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	889b      	ldrh	r3, [r3, #4]
 8007b74:	2b40      	cmp	r3, #64	@ 0x40
 8007b76:	d956      	bls.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b7c:	e053      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	78db      	ldrb	r3, [r3, #3]
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d10e      	bne.n	8007ba8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	799b      	ldrb	r3, [r3, #6]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d007      	beq.n	8007ba2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007b96:	2b10      	cmp	r3, #16
 8007b98:	d803      	bhi.n	8007ba2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007b9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ba0:	d941      	bls.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	75fb      	strb	r3, [r7, #23]
 8007ba6:	e03e      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	78db      	ldrb	r3, [r3, #3]
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d10b      	bne.n	8007bcc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	799b      	ldrb	r3, [r3, #6]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d004      	beq.n	8007bc6 <USBH_ParseEPDesc+0x162>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	889b      	ldrh	r3, [r3, #4]
 8007bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bc4:	d32f      	bcc.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	75fb      	strb	r3, [r7, #23]
 8007bca:	e02c      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	75fb      	strb	r3, [r7, #23]
 8007bd0:	e029      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d120      	bne.n	8007c1e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	78db      	ldrb	r3, [r3, #3]
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d106      	bne.n	8007bf6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	889b      	ldrh	r3, [r3, #4]
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d01a      	beq.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	75fb      	strb	r3, [r7, #23]
 8007bf4:	e017      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	78db      	ldrb	r3, [r3, #3]
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d10a      	bne.n	8007c18 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	799b      	ldrb	r3, [r3, #6]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <USBH_ParseEPDesc+0x1ae>
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	889b      	ldrh	r3, [r3, #4]
 8007c0e:	2b08      	cmp	r3, #8
 8007c10:	d909      	bls.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c12:	2303      	movs	r3, #3
 8007c14:	75fb      	strb	r3, [r7, #23]
 8007c16:	e006      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	75fb      	strb	r3, [r7, #23]
 8007c1c:	e003      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	75fb      	strb	r3, [r7, #23]
 8007c22:	e000      	b.n	8007c26 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c24:	bf00      	nop
  }

  return status;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d120      	bne.n	8007c8e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	1e9a      	subs	r2, r3, #2
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	bf28      	it	cs
 8007c58:	4613      	movcs	r3, r2
 8007c5a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3302      	adds	r3, #2
 8007c60:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c62:	2300      	movs	r3, #0
 8007c64:	82fb      	strh	r3, [r7, #22]
 8007c66:	e00b      	b.n	8007c80 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c68:	8afb      	ldrh	r3, [r7, #22]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c7a:	8afb      	ldrh	r3, [r7, #22]
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	82fb      	strh	r3, [r7, #22]
 8007c80:	8afa      	ldrh	r2, [r7, #22]
 8007c82:	8abb      	ldrh	r3, [r7, #20]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d3ef      	bcc.n	8007c68 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
  }
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7812      	ldrb	r2, [r2, #0]
 8007cac:	4413      	add	r3, r2
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b086      	sub	sp, #24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	789b      	ldrb	r3, [r3, #2]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d002      	beq.n	8007cee <USBH_CtlReq+0x20>
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d00f      	beq.n	8007d0c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007cec:	e027      	b.n	8007d3e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	88fa      	ldrh	r2, [r7, #6]
 8007cf8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2202      	movs	r2, #2
 8007d04:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d06:	2301      	movs	r3, #1
 8007d08:	75fb      	strb	r3, [r7, #23]
      break;
 8007d0a:	e018      	b.n	8007d3e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f81b 	bl	8007d48 <USBH_HandleControl>
 8007d12:	4603      	mov	r3, r0
 8007d14:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <USBH_CtlReq+0x54>
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d106      	bne.n	8007d30 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	761a      	strb	r2, [r3, #24]
      break;
 8007d2e:	e005      	b.n	8007d3c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d102      	bne.n	8007d3c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	709a      	strb	r2, [r3, #2]
      break;
 8007d3c:	bf00      	nop
  }
  return status;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	7e1b      	ldrb	r3, [r3, #24]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	2b0a      	cmp	r3, #10
 8007d60:	f200 8156 	bhi.w	8008010 <USBH_HandleControl+0x2c8>
 8007d64:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <USBH_HandleControl+0x24>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	08007db3 	.word	0x08007db3
 8007d74:	08007e1d 	.word	0x08007e1d
 8007d78:	08007e43 	.word	0x08007e43
 8007d7c:	08007e7b 	.word	0x08007e7b
 8007d80:	08007ea5 	.word	0x08007ea5
 8007d84:	08007ef7 	.word	0x08007ef7
 8007d88:	08007f19 	.word	0x08007f19
 8007d8c:	08007f55 	.word	0x08007f55
 8007d90:	08007f7b 	.word	0x08007f7b
 8007d94:	08007fb9 	.word	0x08007fb9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f103 0110 	add.w	r1, r3, #16
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	795b      	ldrb	r3, [r3, #5]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f943 	bl	8008030 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2202      	movs	r2, #2
 8007dae:	761a      	strb	r2, [r3, #24]
      break;
 8007db0:	e139      	b.n	8008026 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	795b      	ldrb	r3, [r3, #5]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fcc5 	bl	8008748 <USBH_LL_GetURBState>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d11e      	bne.n	8007e06 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	7c1b      	ldrb	r3, [r3, #16]
 8007dcc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007dd0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	8adb      	ldrh	r3, [r3, #22]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007dda:	7b7b      	ldrb	r3, [r7, #13]
 8007ddc:	2b80      	cmp	r3, #128	@ 0x80
 8007dde:	d103      	bne.n	8007de8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2203      	movs	r2, #3
 8007de4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007de6:	e115      	b.n	8008014 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2205      	movs	r2, #5
 8007dec:	761a      	strb	r2, [r3, #24]
      break;
 8007dee:	e111      	b.n	8008014 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007df0:	7b7b      	ldrb	r3, [r7, #13]
 8007df2:	2b80      	cmp	r3, #128	@ 0x80
 8007df4:	d103      	bne.n	8007dfe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2209      	movs	r2, #9
 8007dfa:	761a      	strb	r2, [r3, #24]
      break;
 8007dfc:	e10a      	b.n	8008014 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2207      	movs	r2, #7
 8007e02:	761a      	strb	r2, [r3, #24]
      break;
 8007e04:	e106      	b.n	8008014 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d003      	beq.n	8007e14 <USBH_HandleControl+0xcc>
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	f040 8100 	bne.w	8008014 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	220b      	movs	r2, #11
 8007e18:	761a      	strb	r2, [r3, #24]
      break;
 8007e1a:	e0fb      	b.n	8008014 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6899      	ldr	r1, [r3, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	899a      	ldrh	r2, [r3, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	791b      	ldrb	r3, [r3, #4]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f93a 	bl	80080ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	761a      	strb	r2, [r3, #24]
      break;
 8007e40:	e0f1      	b.n	8008026 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	791b      	ldrb	r3, [r3, #4]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fc7d 	bl	8008748 <USBH_LL_GetURBState>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d102      	bne.n	8007e5e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2209      	movs	r2, #9
 8007e5c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	d102      	bne.n	8007e6a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e64:	2303      	movs	r3, #3
 8007e66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e68:	e0d6      	b.n	8008018 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	f040 80d3 	bne.w	8008018 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	220b      	movs	r2, #11
 8007e76:	761a      	strb	r2, [r3, #24]
      break;
 8007e78:	e0ce      	b.n	8008018 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6899      	ldr	r1, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	899a      	ldrh	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	795b      	ldrb	r3, [r3, #5]
 8007e86:	2001      	movs	r0, #1
 8007e88:	9000      	str	r0, [sp, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f8ea 	bl	8008064 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	761a      	strb	r2, [r3, #24]
      break;
 8007ea2:	e0c0      	b.n	8008026 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	795b      	ldrb	r3, [r3, #5]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fc4c 	bl	8008748 <USBH_LL_GetURBState>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d103      	bne.n	8007ec2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2207      	movs	r2, #7
 8007ebe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ec0:	e0ac      	b.n	800801c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	d105      	bne.n	8007ed4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	220c      	movs	r2, #12
 8007ecc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed2:	e0a3      	b.n	800801c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d103      	bne.n	8007ee2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2205      	movs	r2, #5
 8007ede:	761a      	strb	r2, [r3, #24]
      break;
 8007ee0:	e09c      	b.n	800801c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	f040 8099 	bne.w	800801c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	220b      	movs	r2, #11
 8007eee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef4:	e092      	b.n	800801c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	791b      	ldrb	r3, [r3, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	2100      	movs	r1, #0
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f8d5 	bl	80080ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2208      	movs	r2, #8
 8007f14:	761a      	strb	r2, [r3, #24]

      break;
 8007f16:	e086      	b.n	8008026 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	791b      	ldrb	r3, [r3, #4]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fc12 	bl	8008748 <USBH_LL_GetURBState>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d105      	bne.n	8007f3a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220d      	movs	r2, #13
 8007f32:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f38:	e072      	b.n	8008020 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d103      	bne.n	8007f48 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	220b      	movs	r2, #11
 8007f44:	761a      	strb	r2, [r3, #24]
      break;
 8007f46:	e06b      	b.n	8008020 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d168      	bne.n	8008020 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	73fb      	strb	r3, [r7, #15]
      break;
 8007f52:	e065      	b.n	8008020 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	795b      	ldrb	r3, [r3, #5]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	9200      	str	r2, [sp, #0]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2100      	movs	r1, #0
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f87f 	bl	8008064 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	220a      	movs	r2, #10
 8007f76:	761a      	strb	r2, [r3, #24]
      break;
 8007f78:	e055      	b.n	8008026 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	795b      	ldrb	r3, [r3, #5]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fbe1 	bl	8008748 <USBH_LL_GetURBState>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d105      	bne.n	8007f9c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	220d      	movs	r2, #13
 8007f98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f9a:	e043      	b.n	8008024 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d103      	bne.n	8007faa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2209      	movs	r2, #9
 8007fa6:	761a      	strb	r2, [r3, #24]
      break;
 8007fa8:	e03c      	b.n	8008024 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d139      	bne.n	8008024 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	220b      	movs	r2, #11
 8007fb4:	761a      	strb	r2, [r3, #24]
      break;
 8007fb6:	e035      	b.n	8008024 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7e5b      	ldrb	r3, [r3, #25]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	765a      	strb	r2, [r3, #25]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	7e5b      	ldrb	r3, [r3, #25]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d806      	bhi.n	8007fda <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007fd8:	e025      	b.n	8008026 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fe0:	2106      	movs	r1, #6
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	795b      	ldrb	r3, [r3, #5]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f90c 	bl	8008210 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	791b      	ldrb	r3, [r3, #4]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f906 	bl	8008210 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800800a:	2302      	movs	r3, #2
 800800c:	73fb      	strb	r3, [r7, #15]
      break;
 800800e:	e00a      	b.n	8008026 <USBH_HandleControl+0x2de>

    default:
      break;
 8008010:	bf00      	nop
 8008012:	e008      	b.n	8008026 <USBH_HandleControl+0x2de>
      break;
 8008014:	bf00      	nop
 8008016:	e006      	b.n	8008026 <USBH_HandleControl+0x2de>
      break;
 8008018:	bf00      	nop
 800801a:	e004      	b.n	8008026 <USBH_HandleControl+0x2de>
      break;
 800801c:	bf00      	nop
 800801e:	e002      	b.n	8008026 <USBH_HandleControl+0x2de>
      break;
 8008020:	bf00      	nop
 8008022:	e000      	b.n	8008026 <USBH_HandleControl+0x2de>
      break;
 8008024:	bf00      	nop
  }

  return status;
 8008026:	7bfb      	ldrb	r3, [r7, #15]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b088      	sub	sp, #32
 8008034:	af04      	add	r7, sp, #16
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	4613      	mov	r3, r2
 800803c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800803e:	79f9      	ldrb	r1, [r7, #7]
 8008040:	2300      	movs	r3, #0
 8008042:	9303      	str	r3, [sp, #12]
 8008044:	2308      	movs	r3, #8
 8008046:	9302      	str	r3, [sp, #8]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	2300      	movs	r3, #0
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	2300      	movs	r3, #0
 8008052:	2200      	movs	r2, #0
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 fb46 	bl	80086e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b088      	sub	sp, #32
 8008068:	af04      	add	r7, sp, #16
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4611      	mov	r1, r2
 8008070:	461a      	mov	r2, r3
 8008072:	460b      	mov	r3, r1
 8008074:	80fb      	strh	r3, [r7, #6]
 8008076:	4613      	mov	r3, r2
 8008078:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008088:	7979      	ldrb	r1, [r7, #5]
 800808a:	7e3b      	ldrb	r3, [r7, #24]
 800808c:	9303      	str	r3, [sp, #12]
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	9302      	str	r3, [sp, #8]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	2301      	movs	r3, #1
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	2200      	movs	r2, #0
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fb21 	bl	80086e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b088      	sub	sp, #32
 80080b2:	af04      	add	r7, sp, #16
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	4611      	mov	r1, r2
 80080ba:	461a      	mov	r2, r3
 80080bc:	460b      	mov	r3, r1
 80080be:	80fb      	strh	r3, [r7, #6]
 80080c0:	4613      	mov	r3, r2
 80080c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080c4:	7979      	ldrb	r1, [r7, #5]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9303      	str	r3, [sp, #12]
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	9302      	str	r3, [sp, #8]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	2301      	movs	r3, #1
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	2300      	movs	r3, #0
 80080d8:	2201      	movs	r2, #1
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 fb03 	bl	80086e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080e0:	2300      	movs	r3, #0

}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b088      	sub	sp, #32
 80080ee:	af04      	add	r7, sp, #16
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	4611      	mov	r1, r2
 80080f6:	461a      	mov	r2, r3
 80080f8:	460b      	mov	r3, r1
 80080fa:	80fb      	strh	r3, [r7, #6]
 80080fc:	4613      	mov	r3, r2
 80080fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800810e:	7979      	ldrb	r1, [r7, #5]
 8008110:	7e3b      	ldrb	r3, [r7, #24]
 8008112:	9303      	str	r3, [sp, #12]
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	9302      	str	r3, [sp, #8]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	2301      	movs	r3, #1
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2302      	movs	r3, #2
 8008122:	2200      	movs	r2, #0
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fade 	bl	80086e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af04      	add	r7, sp, #16
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4611      	mov	r1, r2
 8008140:	461a      	mov	r2, r3
 8008142:	460b      	mov	r3, r1
 8008144:	80fb      	strh	r3, [r7, #6]
 8008146:	4613      	mov	r3, r2
 8008148:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800814a:	7979      	ldrb	r1, [r7, #5]
 800814c:	2300      	movs	r3, #0
 800814e:	9303      	str	r3, [sp, #12]
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	9302      	str	r3, [sp, #8]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	2301      	movs	r3, #1
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	2302      	movs	r3, #2
 800815e:	2201      	movs	r2, #1
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 fac0 	bl	80086e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af04      	add	r7, sp, #16
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	461a      	mov	r2, r3
 800817e:	4603      	mov	r3, r0
 8008180:	70fb      	strb	r3, [r7, #3]
 8008182:	460b      	mov	r3, r1
 8008184:	70bb      	strb	r3, [r7, #2]
 8008186:	4613      	mov	r3, r2
 8008188:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800818a:	7878      	ldrb	r0, [r7, #1]
 800818c:	78ba      	ldrb	r2, [r7, #2]
 800818e:	78f9      	ldrb	r1, [r7, #3]
 8008190:	8b3b      	ldrh	r3, [r7, #24]
 8008192:	9302      	str	r3, [sp, #8]
 8008194:	7d3b      	ldrb	r3, [r7, #20]
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	7c3b      	ldrb	r3, [r7, #16]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	4603      	mov	r3, r0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa53 	bl	800864a <USBH_LL_OpenPipe>

  return USBH_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa72 	bl	80086a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f836 	bl	800824c <USBH_GetFreePipe>
 80081e0:	4603      	mov	r3, r0
 80081e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081e4:	89fb      	ldrh	r3, [r7, #14]
 80081e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00a      	beq.n	8008204 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80081ee:	78fa      	ldrb	r2, [r7, #3]
 80081f0:	89fb      	ldrh	r3, [r7, #14]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	33e0      	adds	r3, #224	@ 0xe0
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008204:	89fb      	ldrh	r3, [r7, #14]
 8008206:	b2db      	uxtb	r3, r3
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	2b0f      	cmp	r3, #15
 8008220:	d80d      	bhi.n	800823e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008222:	78fb      	ldrb	r3, [r7, #3]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	33e0      	adds	r3, #224	@ 0xe0
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	33e0      	adds	r3, #224	@ 0xe0
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	440b      	add	r3, r1
 800823c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]
 800825c:	e00f      	b.n	800827e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800825e:	7bfb      	ldrb	r3, [r7, #15]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	33e0      	adds	r3, #224	@ 0xe0
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d102      	bne.n	8008278 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	b29b      	uxth	r3, r3
 8008276:	e007      	b.n	8008288 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	3301      	adds	r3, #1
 800827c:	73fb      	strb	r3, [r7, #15]
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	2b0f      	cmp	r3, #15
 8008282:	d9ec      	bls.n	800825e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008298:	2201      	movs	r2, #1
 800829a:	490e      	ldr	r1, [pc, #56]	@ (80082d4 <MX_USB_HOST_Init+0x40>)
 800829c:	480e      	ldr	r0, [pc, #56]	@ (80082d8 <MX_USB_HOST_Init+0x44>)
 800829e:	f7fe fb15 	bl	80068cc <USBH_Init>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80082a8:	f7f8 fb3e 	bl	8000928 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80082ac:	490b      	ldr	r1, [pc, #44]	@ (80082dc <MX_USB_HOST_Init+0x48>)
 80082ae:	480a      	ldr	r0, [pc, #40]	@ (80082d8 <MX_USB_HOST_Init+0x44>)
 80082b0:	f7fe fbb9 	bl	8006a26 <USBH_RegisterClass>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80082ba:	f7f8 fb35 	bl	8000928 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80082be:	4806      	ldr	r0, [pc, #24]	@ (80082d8 <MX_USB_HOST_Init+0x44>)
 80082c0:	f7fe fc3d 	bl	8006b3e <USBH_Start>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80082ca:	f7f8 fb2d 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80082ce:	bf00      	nop
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	080082f5 	.word	0x080082f5
 80082d8:	20000194 	.word	0x20000194
 80082dc:	2000000c 	.word	0x2000000c

080082e0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80082e4:	4802      	ldr	r0, [pc, #8]	@ (80082f0 <MX_USB_HOST_Process+0x10>)
 80082e6:	f7fe fc3b 	bl	8006b60 <USBH_Process>
}
 80082ea:	bf00      	nop
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000194 	.word	0x20000194

080082f4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	3b01      	subs	r3, #1
 8008304:	2b04      	cmp	r3, #4
 8008306:	d819      	bhi.n	800833c <USBH_UserProcess+0x48>
 8008308:	a201      	add	r2, pc, #4	@ (adr r2, 8008310 <USBH_UserProcess+0x1c>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	0800833d 	.word	0x0800833d
 8008314:	0800832d 	.word	0x0800832d
 8008318:	0800833d 	.word	0x0800833d
 800831c:	08008335 	.word	0x08008335
 8008320:	08008325 	.word	0x08008325
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008324:	4b09      	ldr	r3, [pc, #36]	@ (800834c <USBH_UserProcess+0x58>)
 8008326:	2203      	movs	r2, #3
 8008328:	701a      	strb	r2, [r3, #0]
  break;
 800832a:	e008      	b.n	800833e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800832c:	4b07      	ldr	r3, [pc, #28]	@ (800834c <USBH_UserProcess+0x58>)
 800832e:	2202      	movs	r2, #2
 8008330:	701a      	strb	r2, [r3, #0]
  break;
 8008332:	e004      	b.n	800833e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008334:	4b05      	ldr	r3, [pc, #20]	@ (800834c <USBH_UserProcess+0x58>)
 8008336:	2201      	movs	r2, #1
 8008338:	701a      	strb	r2, [r3, #0]
  break;
 800833a:	e000      	b.n	800833e <USBH_UserProcess+0x4a>

  default:
  break;
 800833c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	2000056c 	.word	0x2000056c

08008350 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	@ 0x28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008358:	f107 0314 	add.w	r3, r7, #20
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	605a      	str	r2, [r3, #4]
 8008362:	609a      	str	r2, [r3, #8]
 8008364:	60da      	str	r2, [r3, #12]
 8008366:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008370:	d147      	bne.n	8008402 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	4b25      	ldr	r3, [pc, #148]	@ (800840c <HAL_HCD_MspInit+0xbc>)
 8008378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800837a:	4a24      	ldr	r2, [pc, #144]	@ (800840c <HAL_HCD_MspInit+0xbc>)
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	6313      	str	r3, [r2, #48]	@ 0x30
 8008382:	4b22      	ldr	r3, [pc, #136]	@ (800840c <HAL_HCD_MspInit+0xbc>)
 8008384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800838e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008394:	2300      	movs	r3, #0
 8008396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008398:	2300      	movs	r3, #0
 800839a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800839c:	f107 0314 	add.w	r3, r7, #20
 80083a0:	4619      	mov	r1, r3
 80083a2:	481b      	ldr	r0, [pc, #108]	@ (8008410 <HAL_HCD_MspInit+0xc0>)
 80083a4:	f7f8 fe52 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80083a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80083ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ae:	2302      	movs	r3, #2
 80083b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083b6:	2300      	movs	r3, #0
 80083b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083ba:	230a      	movs	r3, #10
 80083bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083be:	f107 0314 	add.w	r3, r7, #20
 80083c2:	4619      	mov	r1, r3
 80083c4:	4812      	ldr	r0, [pc, #72]	@ (8008410 <HAL_HCD_MspInit+0xc0>)
 80083c6:	f7f8 fe41 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083ca:	4b10      	ldr	r3, [pc, #64]	@ (800840c <HAL_HCD_MspInit+0xbc>)
 80083cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ce:	4a0f      	ldr	r2, [pc, #60]	@ (800840c <HAL_HCD_MspInit+0xbc>)
 80083d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d4:	6353      	str	r3, [r2, #52]	@ 0x34
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	4b0c      	ldr	r3, [pc, #48]	@ (800840c <HAL_HCD_MspInit+0xbc>)
 80083dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083de:	4a0b      	ldr	r2, [pc, #44]	@ (800840c <HAL_HCD_MspInit+0xbc>)
 80083e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80083e6:	4b09      	ldr	r3, [pc, #36]	@ (800840c <HAL_HCD_MspInit+0xbc>)
 80083e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083f2:	2200      	movs	r2, #0
 80083f4:	2100      	movs	r1, #0
 80083f6:	2043      	movs	r0, #67	@ 0x43
 80083f8:	f7f8 fdf1 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083fc:	2043      	movs	r0, #67	@ 0x43
 80083fe:	f7f8 fe0a 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008402:	bf00      	nop
 8008404:	3728      	adds	r7, #40	@ 0x28
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	40023800 	.word	0x40023800
 8008410:	40020000 	.word	0x40020000

08008414 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe ff73 	bl	800730e <USBH_LL_IncTimer>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe ffab 	bl	800739a <USBH_LL_Connect>
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe ffb4 	bl	80073c8 <USBH_LL_Disconnect>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
 8008474:	4613      	mov	r3, r2
 8008476:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe ff65 	bl	8007362 <USBH_LL_PortEnabled>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe ff65 	bl	800737e <USBH_LL_PortDisabled>
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d12a      	bne.n	8008524 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80084ce:	4a18      	ldr	r2, [pc, #96]	@ (8008530 <USBH_LL_Init+0x74>)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a15      	ldr	r2, [pc, #84]	@ (8008530 <USBH_LL_Init+0x74>)
 80084da:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084de:	4b14      	ldr	r3, [pc, #80]	@ (8008530 <USBH_LL_Init+0x74>)
 80084e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084e6:	4b12      	ldr	r3, [pc, #72]	@ (8008530 <USBH_LL_Init+0x74>)
 80084e8:	2208      	movs	r2, #8
 80084ea:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084ec:	4b10      	ldr	r3, [pc, #64]	@ (8008530 <USBH_LL_Init+0x74>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084f2:	4b0f      	ldr	r3, [pc, #60]	@ (8008530 <USBH_LL_Init+0x74>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80084f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008530 <USBH_LL_Init+0x74>)
 80084fa:	2202      	movs	r2, #2
 80084fc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008530 <USBH_LL_Init+0x74>)
 8008500:	2200      	movs	r2, #0
 8008502:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008504:	480a      	ldr	r0, [pc, #40]	@ (8008530 <USBH_LL_Init+0x74>)
 8008506:	f7f8 ff70 	bl	80013ea <HAL_HCD_Init>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008510:	f7f8 fa0a 	bl	8000928 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008514:	4806      	ldr	r0, [pc, #24]	@ (8008530 <USBH_LL_Init+0x74>)
 8008516:	f7f9 fbd1 	bl	8001cbc <HAL_HCD_GetCurrentFrame>
 800851a:	4603      	mov	r3, r0
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7fe fee6 	bl	80072f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000570 	.word	0x20000570

08008534 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800854a:	4618      	mov	r0, r3
 800854c:	f7f9 fb3e 	bl	8001bcc <HAL_HCD_Start>
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f95e 	bl	8008818 <USBH_Get_USB_Status>
 800855c:	4603      	mov	r3, r0
 800855e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008560:	7bbb      	ldrb	r3, [r7, #14]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008580:	4618      	mov	r0, r3
 8008582:	f7f9 fb46 	bl	8001c12 <HAL_HCD_Stop>
 8008586:	4603      	mov	r3, r0
 8008588:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	4618      	mov	r0, r3
 800858e:	f000 f943 	bl	8008818 <USBH_Get_USB_Status>
 8008592:	4603      	mov	r3, r0
 8008594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008596:	7bbb      	ldrb	r3, [r7, #14]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80085a8:	2301      	movs	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7f9 fb90 	bl	8001cd8 <HAL_HCD_GetCurrentSpeed>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d00c      	beq.n	80085d8 <USBH_LL_GetSpeed+0x38>
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d80d      	bhi.n	80085de <USBH_LL_GetSpeed+0x3e>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <USBH_LL_GetSpeed+0x2c>
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d003      	beq.n	80085d2 <USBH_LL_GetSpeed+0x32>
 80085ca:	e008      	b.n	80085de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
    break;
 80085d0:	e008      	b.n	80085e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80085d2:	2301      	movs	r3, #1
 80085d4:	73fb      	strb	r3, [r7, #15]
    break;
 80085d6:	e005      	b.n	80085e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80085d8:	2302      	movs	r3, #2
 80085da:	73fb      	strb	r3, [r7, #15]
    break;
 80085dc:	e002      	b.n	80085e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80085de:	2301      	movs	r3, #1
 80085e0:	73fb      	strb	r3, [r7, #15]
    break;
 80085e2:	bf00      	nop
  }
  return  speed;
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008604:	4618      	mov	r0, r3
 8008606:	f7f9 fb21 	bl	8001c4c <HAL_HCD_ResetPort>
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	4618      	mov	r0, r3
 8008612:	f000 f901 	bl	8008818 <USBH_Get_USB_Status>
 8008616:	4603      	mov	r3, r0
 8008618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861a:	7bbb      	ldrb	r3, [r7, #14]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f7f9 fb29 	bl	8001c92 <HAL_HCD_HC_GetXferCount>
 8008640:	4603      	mov	r3, r0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800864a:	b590      	push	{r4, r7, lr}
 800864c:	b089      	sub	sp, #36	@ 0x24
 800864e:	af04      	add	r7, sp, #16
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	4608      	mov	r0, r1
 8008654:	4611      	mov	r1, r2
 8008656:	461a      	mov	r2, r3
 8008658:	4603      	mov	r3, r0
 800865a:	70fb      	strb	r3, [r7, #3]
 800865c:	460b      	mov	r3, r1
 800865e:	70bb      	strb	r3, [r7, #2]
 8008660:	4613      	mov	r3, r2
 8008662:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008672:	787c      	ldrb	r4, [r7, #1]
 8008674:	78ba      	ldrb	r2, [r7, #2]
 8008676:	78f9      	ldrb	r1, [r7, #3]
 8008678:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800867a:	9302      	str	r3, [sp, #8]
 800867c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	4623      	mov	r3, r4
 800868a:	f7f8 ff15 	bl	80014b8 <HAL_HCD_HC_Init>
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f8bf 	bl	8008818 <USBH_Get_USB_Status>
 800869a:	4603      	mov	r3, r0
 800869c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800869e:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd90      	pop	{r4, r7, pc}

080086a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086c2:	78fa      	ldrb	r2, [r7, #3]
 80086c4:	4611      	mov	r1, r2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7f8 ffae 	bl	8001628 <HAL_HCD_HC_Halt>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 f8a0 	bl	8008818 <USBH_Get_USB_Status>
 80086d8:	4603      	mov	r3, r0
 80086da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80086e6:	b590      	push	{r4, r7, lr}
 80086e8:	b089      	sub	sp, #36	@ 0x24
 80086ea:	af04      	add	r7, sp, #16
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	4608      	mov	r0, r1
 80086f0:	4611      	mov	r1, r2
 80086f2:	461a      	mov	r2, r3
 80086f4:	4603      	mov	r3, r0
 80086f6:	70fb      	strb	r3, [r7, #3]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70bb      	strb	r3, [r7, #2]
 80086fc:	4613      	mov	r3, r2
 80086fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800870e:	787c      	ldrb	r4, [r7, #1]
 8008710:	78ba      	ldrb	r2, [r7, #2]
 8008712:	78f9      	ldrb	r1, [r7, #3]
 8008714:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008718:	9303      	str	r3, [sp, #12]
 800871a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	4623      	mov	r3, r4
 800872a:	f7f8 ffa1 	bl	8001670 <HAL_HCD_HC_SubmitRequest>
 800872e:	4603      	mov	r3, r0
 8008730:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f86f 	bl	8008818 <USBH_Get_USB_Status>
 800873a:	4603      	mov	r3, r0
 800873c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	bd90      	pop	{r4, r7, pc}

08008748 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	4611      	mov	r1, r2
 800875e:	4618      	mov	r0, r3
 8008760:	f7f9 fa82 	bl	8001c68 <HAL_HCD_HC_GetURBState>
 8008764:	4603      	mov	r3, r0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008780:	2b01      	cmp	r3, #1
 8008782:	d103      	bne.n	800878c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	4618      	mov	r0, r3
 8008788:	f000 f872 	bl	8008870 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800878c:	20c8      	movs	r0, #200	@ 0xc8
 800878e:	f7f8 fb27 	bl	8000de0 <HAL_Delay>
  return USBH_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
 80087a8:	4613      	mov	r3, r2
 80087aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80087b4:	78fa      	ldrb	r2, [r7, #3]
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	4613      	mov	r3, r2
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	1a9b      	subs	r3, r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	440b      	add	r3, r1
 80087c2:	3317      	adds	r3, #23
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80087ca:	78fa      	ldrb	r2, [r7, #3]
 80087cc:	68f9      	ldr	r1, [r7, #12]
 80087ce:	4613      	mov	r3, r2
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	333c      	adds	r3, #60	@ 0x3c
 80087da:	78ba      	ldrb	r2, [r7, #2]
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	e009      	b.n	80087f4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80087e0:	78fa      	ldrb	r2, [r7, #3]
 80087e2:	68f9      	ldr	r1, [r7, #12]
 80087e4:	4613      	mov	r3, r2
 80087e6:	011b      	lsls	r3, r3, #4
 80087e8:	1a9b      	subs	r3, r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	440b      	add	r3, r1
 80087ee:	333d      	adds	r3, #61	@ 0x3d
 80087f0:	78ba      	ldrb	r2, [r7, #2]
 80087f2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7f8 fae8 	bl	8000de0 <HAL_Delay>
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d817      	bhi.n	800885c <USBH_Get_USB_Status+0x44>
 800882c:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <USBH_Get_USB_Status+0x1c>)
 800882e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008832:	bf00      	nop
 8008834:	08008845 	.word	0x08008845
 8008838:	0800884b 	.word	0x0800884b
 800883c:	08008851 	.word	0x08008851
 8008840:	08008857 	.word	0x08008857
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
    break;
 8008848:	e00b      	b.n	8008862 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800884a:	2302      	movs	r3, #2
 800884c:	73fb      	strb	r3, [r7, #15]
    break;
 800884e:	e008      	b.n	8008862 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008850:	2301      	movs	r3, #1
 8008852:	73fb      	strb	r3, [r7, #15]
    break;
 8008854:	e005      	b.n	8008862 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008856:	2302      	movs	r3, #2
 8008858:	73fb      	strb	r3, [r7, #15]
    break;
 800885a:	e002      	b.n	8008862 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800885c:	2302      	movs	r3, #2
 800885e:	73fb      	strb	r3, [r7, #15]
    break;
 8008860:	bf00      	nop
  }
  return usb_status;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800887a:	79fb      	ldrb	r3, [r7, #7]
 800887c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d102      	bne.n	800888a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
 8008888:	e001      	b.n	800888e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800888a:	2301      	movs	r3, #1
 800888c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	461a      	mov	r2, r3
 8008892:	2101      	movs	r1, #1
 8008894:	4803      	ldr	r0, [pc, #12]	@ (80088a4 <MX_DriverVbusFS+0x34>)
 8008896:	f7f8 fd75 	bl	8001384 <HAL_GPIO_WritePin>
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	40020800 	.word	0x40020800

080088a8 <malloc>:
 80088a8:	4b02      	ldr	r3, [pc, #8]	@ (80088b4 <malloc+0xc>)
 80088aa:	4601      	mov	r1, r0
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	f000 b82d 	b.w	800890c <_malloc_r>
 80088b2:	bf00      	nop
 80088b4:	2000002c 	.word	0x2000002c

080088b8 <free>:
 80088b8:	4b02      	ldr	r3, [pc, #8]	@ (80088c4 <free+0xc>)
 80088ba:	4601      	mov	r1, r0
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	f000 b8f5 	b.w	8008aac <_free_r>
 80088c2:	bf00      	nop
 80088c4:	2000002c 	.word	0x2000002c

080088c8 <sbrk_aligned>:
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	4e0f      	ldr	r6, [pc, #60]	@ (8008908 <sbrk_aligned+0x40>)
 80088cc:	460c      	mov	r4, r1
 80088ce:	6831      	ldr	r1, [r6, #0]
 80088d0:	4605      	mov	r5, r0
 80088d2:	b911      	cbnz	r1, 80088da <sbrk_aligned+0x12>
 80088d4:	f000 f8ae 	bl	8008a34 <_sbrk_r>
 80088d8:	6030      	str	r0, [r6, #0]
 80088da:	4621      	mov	r1, r4
 80088dc:	4628      	mov	r0, r5
 80088de:	f000 f8a9 	bl	8008a34 <_sbrk_r>
 80088e2:	1c43      	adds	r3, r0, #1
 80088e4:	d103      	bne.n	80088ee <sbrk_aligned+0x26>
 80088e6:	f04f 34ff 	mov.w	r4, #4294967295
 80088ea:	4620      	mov	r0, r4
 80088ec:	bd70      	pop	{r4, r5, r6, pc}
 80088ee:	1cc4      	adds	r4, r0, #3
 80088f0:	f024 0403 	bic.w	r4, r4, #3
 80088f4:	42a0      	cmp	r0, r4
 80088f6:	d0f8      	beq.n	80088ea <sbrk_aligned+0x22>
 80088f8:	1a21      	subs	r1, r4, r0
 80088fa:	4628      	mov	r0, r5
 80088fc:	f000 f89a 	bl	8008a34 <_sbrk_r>
 8008900:	3001      	adds	r0, #1
 8008902:	d1f2      	bne.n	80088ea <sbrk_aligned+0x22>
 8008904:	e7ef      	b.n	80088e6 <sbrk_aligned+0x1e>
 8008906:	bf00      	nop
 8008908:	20000950 	.word	0x20000950

0800890c <_malloc_r>:
 800890c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008910:	1ccd      	adds	r5, r1, #3
 8008912:	f025 0503 	bic.w	r5, r5, #3
 8008916:	3508      	adds	r5, #8
 8008918:	2d0c      	cmp	r5, #12
 800891a:	bf38      	it	cc
 800891c:	250c      	movcc	r5, #12
 800891e:	2d00      	cmp	r5, #0
 8008920:	4606      	mov	r6, r0
 8008922:	db01      	blt.n	8008928 <_malloc_r+0x1c>
 8008924:	42a9      	cmp	r1, r5
 8008926:	d904      	bls.n	8008932 <_malloc_r+0x26>
 8008928:	230c      	movs	r3, #12
 800892a:	6033      	str	r3, [r6, #0]
 800892c:	2000      	movs	r0, #0
 800892e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a08 <_malloc_r+0xfc>
 8008936:	f000 f869 	bl	8008a0c <__malloc_lock>
 800893a:	f8d8 3000 	ldr.w	r3, [r8]
 800893e:	461c      	mov	r4, r3
 8008940:	bb44      	cbnz	r4, 8008994 <_malloc_r+0x88>
 8008942:	4629      	mov	r1, r5
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff ffbf 	bl	80088c8 <sbrk_aligned>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	4604      	mov	r4, r0
 800894e:	d158      	bne.n	8008a02 <_malloc_r+0xf6>
 8008950:	f8d8 4000 	ldr.w	r4, [r8]
 8008954:	4627      	mov	r7, r4
 8008956:	2f00      	cmp	r7, #0
 8008958:	d143      	bne.n	80089e2 <_malloc_r+0xd6>
 800895a:	2c00      	cmp	r4, #0
 800895c:	d04b      	beq.n	80089f6 <_malloc_r+0xea>
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	4639      	mov	r1, r7
 8008962:	4630      	mov	r0, r6
 8008964:	eb04 0903 	add.w	r9, r4, r3
 8008968:	f000 f864 	bl	8008a34 <_sbrk_r>
 800896c:	4581      	cmp	r9, r0
 800896e:	d142      	bne.n	80089f6 <_malloc_r+0xea>
 8008970:	6821      	ldr	r1, [r4, #0]
 8008972:	1a6d      	subs	r5, r5, r1
 8008974:	4629      	mov	r1, r5
 8008976:	4630      	mov	r0, r6
 8008978:	f7ff ffa6 	bl	80088c8 <sbrk_aligned>
 800897c:	3001      	adds	r0, #1
 800897e:	d03a      	beq.n	80089f6 <_malloc_r+0xea>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	442b      	add	r3, r5
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	f8d8 3000 	ldr.w	r3, [r8]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	bb62      	cbnz	r2, 80089e8 <_malloc_r+0xdc>
 800898e:	f8c8 7000 	str.w	r7, [r8]
 8008992:	e00f      	b.n	80089b4 <_malloc_r+0xa8>
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	1b52      	subs	r2, r2, r5
 8008998:	d420      	bmi.n	80089dc <_malloc_r+0xd0>
 800899a:	2a0b      	cmp	r2, #11
 800899c:	d917      	bls.n	80089ce <_malloc_r+0xc2>
 800899e:	1961      	adds	r1, r4, r5
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	6025      	str	r5, [r4, #0]
 80089a4:	bf18      	it	ne
 80089a6:	6059      	strne	r1, [r3, #4]
 80089a8:	6863      	ldr	r3, [r4, #4]
 80089aa:	bf08      	it	eq
 80089ac:	f8c8 1000 	streq.w	r1, [r8]
 80089b0:	5162      	str	r2, [r4, r5]
 80089b2:	604b      	str	r3, [r1, #4]
 80089b4:	4630      	mov	r0, r6
 80089b6:	f000 f82f 	bl	8008a18 <__malloc_unlock>
 80089ba:	f104 000b 	add.w	r0, r4, #11
 80089be:	1d23      	adds	r3, r4, #4
 80089c0:	f020 0007 	bic.w	r0, r0, #7
 80089c4:	1ac2      	subs	r2, r0, r3
 80089c6:	bf1c      	itt	ne
 80089c8:	1a1b      	subne	r3, r3, r0
 80089ca:	50a3      	strne	r3, [r4, r2]
 80089cc:	e7af      	b.n	800892e <_malloc_r+0x22>
 80089ce:	6862      	ldr	r2, [r4, #4]
 80089d0:	42a3      	cmp	r3, r4
 80089d2:	bf0c      	ite	eq
 80089d4:	f8c8 2000 	streq.w	r2, [r8]
 80089d8:	605a      	strne	r2, [r3, #4]
 80089da:	e7eb      	b.n	80089b4 <_malloc_r+0xa8>
 80089dc:	4623      	mov	r3, r4
 80089de:	6864      	ldr	r4, [r4, #4]
 80089e0:	e7ae      	b.n	8008940 <_malloc_r+0x34>
 80089e2:	463c      	mov	r4, r7
 80089e4:	687f      	ldr	r7, [r7, #4]
 80089e6:	e7b6      	b.n	8008956 <_malloc_r+0x4a>
 80089e8:	461a      	mov	r2, r3
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	d1fb      	bne.n	80089e8 <_malloc_r+0xdc>
 80089f0:	2300      	movs	r3, #0
 80089f2:	6053      	str	r3, [r2, #4]
 80089f4:	e7de      	b.n	80089b4 <_malloc_r+0xa8>
 80089f6:	230c      	movs	r3, #12
 80089f8:	6033      	str	r3, [r6, #0]
 80089fa:	4630      	mov	r0, r6
 80089fc:	f000 f80c 	bl	8008a18 <__malloc_unlock>
 8008a00:	e794      	b.n	800892c <_malloc_r+0x20>
 8008a02:	6005      	str	r5, [r0, #0]
 8008a04:	e7d6      	b.n	80089b4 <_malloc_r+0xa8>
 8008a06:	bf00      	nop
 8008a08:	20000954 	.word	0x20000954

08008a0c <__malloc_lock>:
 8008a0c:	4801      	ldr	r0, [pc, #4]	@ (8008a14 <__malloc_lock+0x8>)
 8008a0e:	f000 b84b 	b.w	8008aa8 <__retarget_lock_acquire_recursive>
 8008a12:	bf00      	nop
 8008a14:	20000a94 	.word	0x20000a94

08008a18 <__malloc_unlock>:
 8008a18:	4801      	ldr	r0, [pc, #4]	@ (8008a20 <__malloc_unlock+0x8>)
 8008a1a:	f000 b846 	b.w	8008aaa <__retarget_lock_release_recursive>
 8008a1e:	bf00      	nop
 8008a20:	20000a94 	.word	0x20000a94

08008a24 <memset>:
 8008a24:	4402      	add	r2, r0
 8008a26:	4603      	mov	r3, r0
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d100      	bne.n	8008a2e <memset+0xa>
 8008a2c:	4770      	bx	lr
 8008a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a32:	e7f9      	b.n	8008a28 <memset+0x4>

08008a34 <_sbrk_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d06      	ldr	r5, [pc, #24]	@ (8008a50 <_sbrk_r+0x1c>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	f7f8 f8ea 	bl	8000c18 <_sbrk>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_sbrk_r+0x1a>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_sbrk_r+0x1a>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20000a90 	.word	0x20000a90

08008a54 <__errno>:
 8008a54:	4b01      	ldr	r3, [pc, #4]	@ (8008a5c <__errno+0x8>)
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	2000002c 	.word	0x2000002c

08008a60 <__libc_init_array>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	4d0d      	ldr	r5, [pc, #52]	@ (8008a98 <__libc_init_array+0x38>)
 8008a64:	4c0d      	ldr	r4, [pc, #52]	@ (8008a9c <__libc_init_array+0x3c>)
 8008a66:	1b64      	subs	r4, r4, r5
 8008a68:	10a4      	asrs	r4, r4, #2
 8008a6a:	2600      	movs	r6, #0
 8008a6c:	42a6      	cmp	r6, r4
 8008a6e:	d109      	bne.n	8008a84 <__libc_init_array+0x24>
 8008a70:	4d0b      	ldr	r5, [pc, #44]	@ (8008aa0 <__libc_init_array+0x40>)
 8008a72:	4c0c      	ldr	r4, [pc, #48]	@ (8008aa4 <__libc_init_array+0x44>)
 8008a74:	f000 f864 	bl	8008b40 <_init>
 8008a78:	1b64      	subs	r4, r4, r5
 8008a7a:	10a4      	asrs	r4, r4, #2
 8008a7c:	2600      	movs	r6, #0
 8008a7e:	42a6      	cmp	r6, r4
 8008a80:	d105      	bne.n	8008a8e <__libc_init_array+0x2e>
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a88:	4798      	blx	r3
 8008a8a:	3601      	adds	r6, #1
 8008a8c:	e7ee      	b.n	8008a6c <__libc_init_array+0xc>
 8008a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a92:	4798      	blx	r3
 8008a94:	3601      	adds	r6, #1
 8008a96:	e7f2      	b.n	8008a7e <__libc_init_array+0x1e>
 8008a98:	08008b7c 	.word	0x08008b7c
 8008a9c:	08008b7c 	.word	0x08008b7c
 8008aa0:	08008b7c 	.word	0x08008b7c
 8008aa4:	08008b80 	.word	0x08008b80

08008aa8 <__retarget_lock_acquire_recursive>:
 8008aa8:	4770      	bx	lr

08008aaa <__retarget_lock_release_recursive>:
 8008aaa:	4770      	bx	lr

08008aac <_free_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4605      	mov	r5, r0
 8008ab0:	2900      	cmp	r1, #0
 8008ab2:	d041      	beq.n	8008b38 <_free_r+0x8c>
 8008ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab8:	1f0c      	subs	r4, r1, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bfb8      	it	lt
 8008abe:	18e4      	addlt	r4, r4, r3
 8008ac0:	f7ff ffa4 	bl	8008a0c <__malloc_lock>
 8008ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b3c <_free_r+0x90>)
 8008ac6:	6813      	ldr	r3, [r2, #0]
 8008ac8:	b933      	cbnz	r3, 8008ad8 <_free_r+0x2c>
 8008aca:	6063      	str	r3, [r4, #4]
 8008acc:	6014      	str	r4, [r2, #0]
 8008ace:	4628      	mov	r0, r5
 8008ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ad4:	f7ff bfa0 	b.w	8008a18 <__malloc_unlock>
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	d908      	bls.n	8008aee <_free_r+0x42>
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	1821      	adds	r1, r4, r0
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	bf01      	itttt	eq
 8008ae4:	6819      	ldreq	r1, [r3, #0]
 8008ae6:	685b      	ldreq	r3, [r3, #4]
 8008ae8:	1809      	addeq	r1, r1, r0
 8008aea:	6021      	streq	r1, [r4, #0]
 8008aec:	e7ed      	b.n	8008aca <_free_r+0x1e>
 8008aee:	461a      	mov	r2, r3
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	b10b      	cbz	r3, 8008af8 <_free_r+0x4c>
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	d9fa      	bls.n	8008aee <_free_r+0x42>
 8008af8:	6811      	ldr	r1, [r2, #0]
 8008afa:	1850      	adds	r0, r2, r1
 8008afc:	42a0      	cmp	r0, r4
 8008afe:	d10b      	bne.n	8008b18 <_free_r+0x6c>
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	4401      	add	r1, r0
 8008b04:	1850      	adds	r0, r2, r1
 8008b06:	4283      	cmp	r3, r0
 8008b08:	6011      	str	r1, [r2, #0]
 8008b0a:	d1e0      	bne.n	8008ace <_free_r+0x22>
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	6053      	str	r3, [r2, #4]
 8008b12:	4408      	add	r0, r1
 8008b14:	6010      	str	r0, [r2, #0]
 8008b16:	e7da      	b.n	8008ace <_free_r+0x22>
 8008b18:	d902      	bls.n	8008b20 <_free_r+0x74>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	602b      	str	r3, [r5, #0]
 8008b1e:	e7d6      	b.n	8008ace <_free_r+0x22>
 8008b20:	6820      	ldr	r0, [r4, #0]
 8008b22:	1821      	adds	r1, r4, r0
 8008b24:	428b      	cmp	r3, r1
 8008b26:	bf04      	itt	eq
 8008b28:	6819      	ldreq	r1, [r3, #0]
 8008b2a:	685b      	ldreq	r3, [r3, #4]
 8008b2c:	6063      	str	r3, [r4, #4]
 8008b2e:	bf04      	itt	eq
 8008b30:	1809      	addeq	r1, r1, r0
 8008b32:	6021      	streq	r1, [r4, #0]
 8008b34:	6054      	str	r4, [r2, #4]
 8008b36:	e7ca      	b.n	8008ace <_free_r+0x22>
 8008b38:	bd38      	pop	{r3, r4, r5, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000954 	.word	0x20000954

08008b40 <_init>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	bf00      	nop
 8008b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b46:	bc08      	pop	{r3}
 8008b48:	469e      	mov	lr, r3
 8008b4a:	4770      	bx	lr

08008b4c <_fini>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	bf00      	nop
 8008b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b52:	bc08      	pop	{r3}
 8008b54:	469e      	mov	lr, r3
 8008b56:	4770      	bx	lr
