
Serial_Monitor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fcc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008154  08008154  00009154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081bc  080081bc  0000a0fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080081bc  080081bc  000091bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081c4  080081c4  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081c4  080081c4  000091c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081c8  080081c8  000091c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080081cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0fc  2**0
                  CONTENTS
 10 .bss          00001cf8  200000fc  200000fc  0000a0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20001df4  20001df4  0000a0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000142f7  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003704  00000000  00000000  0001e423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00021b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da3  00000000  00000000  00022d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ffa  00000000  00000000  00023ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018867  00000000  00000000  00047aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca949  00000000  00000000  00060314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ac5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a34  00000000  00000000  0012aca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0012f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800813c 	.word	0x0800813c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800813c 	.word	0x0800813c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fbbe 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80c 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f908 	bl	8000714 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f872 	bl	80005ec <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f89e 	bl	8000648 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8cc 	bl	80006a8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000510:	f007 f8b0 	bl	8007674 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <main+0x20>

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	@ 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	@ 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f007 fddc 	bl	80080e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	@ (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	@ (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	@ 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	@ (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000590:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fefe 	bl	80033a0 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f9b1 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 f95f 	bl	8003890 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d8:	f000 f99a 	bl	8000910 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	@ 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_I2C1_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	@ (8000640 <MX_I2C1_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_I2C1_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <MX_I2C1_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_I2C1_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800060e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <MX_I2C1_Init+0x50>)
 800062a:	f000 fe83 	bl	8001334 <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f96c 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000118 	.word	0x20000118
 8000640:	40005400 	.word	0x40005400
 8000644:	000186a0 	.word	0x000186a0

08000648 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800064c:	4b13      	ldr	r3, [pc, #76]	@ (800069c <MX_I2S3_Init+0x54>)
 800064e:	4a14      	ldr	r2, [pc, #80]	@ (80006a0 <MX_I2S3_Init+0x58>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_I2S3_Init+0x54>)
 8000654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000658:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <MX_I2S3_Init+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800066c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <MX_I2S3_Init+0x54>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	@ (80006a4 <MX_I2S3_Init+0x5c>)
 8000672:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <MX_I2S3_Init+0x54>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_I2S3_Init+0x54>)
 8000688:	f000 ff98 	bl	80015bc <HAL_I2S_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000692:	f000 f93d 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000016c 	.word	0x2000016c
 80006a0:	40003c00 	.word	0x40003c00
 80006a4:	00017700 	.word	0x00017700

080006a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_SPI1_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	@ (8000710 <MX_SPI1_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b16      	ldr	r3, [pc, #88]	@ (800070c <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_SPI1_Init+0x64>)
 80006d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_SPI1_Init+0x64>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_SPI1_Init+0x64>)
 80006fa:	f003 fc17 	bl	8003f2c <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f904 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200001b4 	.word	0x200001b4
 8000710:	40013000 	.word	0x40013000

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	@ 0x30
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	4b72      	ldr	r3, [pc, #456]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a71      	ldr	r2, [pc, #452]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b6f      	ldr	r3, [pc, #444]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	4b6b      	ldr	r3, [pc, #428]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a6a      	ldr	r2, [pc, #424]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b68      	ldr	r3, [pc, #416]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b64      	ldr	r3, [pc, #400]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a63      	ldr	r2, [pc, #396]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b61      	ldr	r3, [pc, #388]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b5d      	ldr	r3, [pc, #372]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a5c      	ldr	r2, [pc, #368]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b5a      	ldr	r3, [pc, #360]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b56      	ldr	r3, [pc, #344]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a55      	ldr	r2, [pc, #340]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b53      	ldr	r3, [pc, #332]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b4f      	ldr	r3, [pc, #316]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a4e      	ldr	r2, [pc, #312]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b4c      	ldr	r3, [pc, #304]	@ (80008f8 <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2108      	movs	r1, #8
 80007d6:	4849      	ldr	r0, [pc, #292]	@ (80008fc <MX_GPIO_Init+0x1e8>)
 80007d8:	f000 fd92 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2101      	movs	r1, #1
 80007e0:	4847      	ldr	r0, [pc, #284]	@ (8000900 <MX_GPIO_Init+0x1ec>)
 80007e2:	f000 fd8d 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007e6:	2200      	movs	r2, #0
 80007e8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007ec:	4845      	ldr	r0, [pc, #276]	@ (8000904 <MX_GPIO_Init+0x1f0>)
 80007ee:	f000 fd87 	bl	8001300 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	483c      	ldr	r0, [pc, #240]	@ (80008fc <MX_GPIO_Init+0x1e8>)
 800080a:	f000 fbdd 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800080e:	2301      	movs	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4836      	ldr	r0, [pc, #216]	@ (8000900 <MX_GPIO_Init+0x1ec>)
 8000826:	f000 fbcf 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082a:	2308      	movs	r3, #8
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083a:	2305      	movs	r3, #5
 800083c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	482e      	ldr	r0, [pc, #184]	@ (8000900 <MX_GPIO_Init+0x1ec>)
 8000846:	f000 fbbf 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800084e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	482a      	ldr	r0, [pc, #168]	@ (8000908 <MX_GPIO_Init+0x1f4>)
 8000860:	f000 fbb2 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000864:	2304      	movs	r3, #4
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4825      	ldr	r0, [pc, #148]	@ (800090c <MX_GPIO_Init+0x1f8>)
 8000878:	f000 fba6 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800087c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088e:	2305      	movs	r3, #5
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	481c      	ldr	r0, [pc, #112]	@ (800090c <MX_GPIO_Init+0x1f8>)
 800089a:	f000 fb95 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4813      	ldr	r0, [pc, #76]	@ (8000904 <MX_GPIO_Init+0x1f0>)
 80008b8:	f000 fb86 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	480d      	ldr	r0, [pc, #52]	@ (8000904 <MX_GPIO_Init+0x1f0>)
 80008d0:	f000 fb7a 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_GPIO_Init+0x1e8>)
 80008ea:	f000 fb6d 	bl	8000fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	@ 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40021000 	.word	0x40021000
 8000900:	40020800 	.word	0x40020800
 8000904:	40020c00 	.word	0x40020c00
 8000908:	40020000 	.word	0x40020000
 800090c:	40020400 	.word	0x40020400

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	@ (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095a:	2007      	movs	r0, #7
 800095c:	f000 faf2 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <HAL_I2C_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12c      	bne.n	80009e8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <HAL_I2C_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_I2C_MspInit+0x88>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_I2C_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009aa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b0:	2312      	movs	r3, #18
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009bc:	2304      	movs	r3, #4
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <HAL_I2C_MspInit+0x8c>)
 80009c8:	f000 fafe 	bl	8000fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <HAL_I2C_MspInit+0x88>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	4a07      	ldr	r2, [pc, #28]	@ (80009f4 <HAL_I2C_MspInit+0x88>)
 80009d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009da:	6413      	str	r3, [r2, #64]	@ 0x40
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <HAL_I2C_MspInit+0x88>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	@ 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40005400 	.word	0x40005400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020400 	.word	0x40020400

080009fc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08e      	sub	sp, #56	@ 0x38
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a31      	ldr	r2, [pc, #196]	@ (8000aec <HAL_I2S_MspInit+0xf0>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d15a      	bne.n	8000ae2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a30:	23c0      	movs	r3, #192	@ 0xc0
 8000a32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 f933 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a48:	f7ff ff62 	bl	8000910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <HAL_I2S_MspInit+0xf4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a54:	4a26      	ldr	r2, [pc, #152]	@ (8000af0 <HAL_I2S_MspInit+0xf4>)
 8000a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5c:	4b24      	ldr	r3, [pc, #144]	@ (8000af0 <HAL_I2S_MspInit+0xf4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <HAL_I2S_MspInit+0xf4>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a70:	4a1f      	ldr	r2, [pc, #124]	@ (8000af0 <HAL_I2S_MspInit+0xf4>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a78:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <HAL_I2S_MspInit+0xf4>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <HAL_I2S_MspInit+0xf4>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	4a18      	ldr	r2, [pc, #96]	@ (8000af0 <HAL_I2S_MspInit+0xf4>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <HAL_I2S_MspInit+0xf4>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480e      	ldr	r0, [pc, #56]	@ (8000af4 <HAL_I2S_MspInit+0xf8>)
 8000abc:	f000 fa84 	bl	8000fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ac0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <HAL_I2S_MspInit+0xfc>)
 8000ade:	f000 fa73 	bl	8000fc8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3738      	adds	r7, #56	@ 0x38
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40003c00 	.word	0x40003c00
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40020800 	.word	0x40020800

08000afc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	@ 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a19      	ldr	r2, [pc, #100]	@ (8000b80 <HAL_SPI_MspInit+0x84>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d12b      	bne.n	8000b76 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <HAL_SPI_MspInit+0x88>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	4a17      	ldr	r2, [pc, #92]	@ (8000b84 <HAL_SPI_MspInit+0x88>)
 8000b28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <HAL_SPI_MspInit+0x88>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_SPI_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a10      	ldr	r2, [pc, #64]	@ (8000b84 <HAL_SPI_MspInit+0x88>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <HAL_SPI_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b56:	23e0      	movs	r3, #224	@ 0xe0
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b66:	2305      	movs	r3, #5
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <HAL_SPI_MspInit+0x8c>)
 8000b72:	f000 fa29 	bl	8000fc8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	@ 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40013000 	.word	0x40013000
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be2:	f000 f89b 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <OTG_FS_IRQHandler+0x10>)
 8000bf2:	f001 fac7 	bl	8002184 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200016f0 	.word	0x200016f0

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c28:	f7ff ffea 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f007 fa4f 	bl	80080f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc4d 	bl	80004f4 <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000c68:	080081cc 	.word	0x080081cc
  ldr r2, =_sbss
 8000c6c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000c70:	20001df4 	.word	0x20001df4

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f94f 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8000cac:	f7ff fe36 	bl	800091c <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f967 	bl	8000fae <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
		return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f92f 	bl	8000f5a <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	@ (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
		return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000004 	.word	0x20000004

08000d1c <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	2000020c 	.word	0x2000020c

08000d44 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	2000020c 	.word	0x2000020c

08000d5c <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff ffee 	bl	8000d44 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_Delay+0x44>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8000d82:	bf00      	nop
 8000d84:	f7ff ffde 	bl	8000d44 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
	}
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4907      	ldr	r1, [pc, #28]	@ (8000e40 <__NVIC_EnableIRQ+0x38>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	@ 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff8e 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff29 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff3e 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff8e 	bl	8000e98 <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff31 	bl	8000e08 <__NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffa2 	bl	8000f00 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	e16b      	b.n	80012bc <HAL_GPIO_Init+0x2f4>
		/* Get the IO position */
		ioposition = 0x01U << position;
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	f040 815a 	bne.w	80012b6 <HAL_GPIO_Init+0x2ee>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d005      	beq.n	800101a <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d130      	bne.n	800107c <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	091b      	lsrs	r3, r3, #4
 8001066:	f003 0201 	and.w	r2, r3, #1
						<< position);
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b03      	cmp	r3, #3
 8001086:	d017      	beq.n	80010b8 <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d123      	bne.n	800110c <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d0:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	69b9      	ldr	r1, [r7, #24]
 8001108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0203 	and.w	r2, r3, #3
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80b4 	beq.w	80012b6 <HAL_GPIO_Init+0x2ee>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b60      	ldr	r3, [pc, #384]	@ (80012d4 <HAL_GPIO_Init+0x30c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	4a5f      	ldr	r2, [pc, #380]	@ (80012d4 <HAL_GPIO_Init+0x30c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115c:	6453      	str	r3, [r2, #68]	@ 0x44
 800115e:	4b5d      	ldr	r3, [pc, #372]	@ (80012d4 <HAL_GPIO_Init+0x30c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 800116a:	4a5b      	ldr	r2, [pc, #364]	@ (80012d8 <HAL_GPIO_Init+0x310>)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a52      	ldr	r2, [pc, #328]	@ (80012dc <HAL_GPIO_Init+0x314>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d02b      	beq.n	80011ee <HAL_GPIO_Init+0x226>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a51      	ldr	r2, [pc, #324]	@ (80012e0 <HAL_GPIO_Init+0x318>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d025      	beq.n	80011ea <HAL_GPIO_Init+0x222>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a50      	ldr	r2, [pc, #320]	@ (80012e4 <HAL_GPIO_Init+0x31c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d01f      	beq.n	80011e6 <HAL_GPIO_Init+0x21e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4f      	ldr	r2, [pc, #316]	@ (80012e8 <HAL_GPIO_Init+0x320>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d019      	beq.n	80011e2 <HAL_GPIO_Init+0x21a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4e      	ldr	r2, [pc, #312]	@ (80012ec <HAL_GPIO_Init+0x324>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x216>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4d      	ldr	r2, [pc, #308]	@ (80012f0 <HAL_GPIO_Init+0x328>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x212>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4c      	ldr	r2, [pc, #304]	@ (80012f4 <HAL_GPIO_Init+0x32c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x20e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4b      	ldr	r2, [pc, #300]	@ (80012f8 <HAL_GPIO_Init+0x330>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x20a>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e00e      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011d2:	2308      	movs	r3, #8
 80011d4:	e00c      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e00a      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011da:	2305      	movs	r3, #5
 80011dc:	e008      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011de:	2304      	movs	r3, #4
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x228>
 80011ee:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	f002 0203 	and.w	r2, r2, #3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	@ (80012d8 <HAL_GPIO_Init+0x310>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 800120e:	4b3b      	ldr	r3, [pc, #236]	@ (80012fc <HAL_GPIO_Init+0x334>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x26a>
					temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 8001232:	4a32      	ldr	r2, [pc, #200]	@ (80012fc <HAL_GPIO_Init+0x334>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8001238:	4b30      	ldr	r3, [pc, #192]	@ (80012fc <HAL_GPIO_Init+0x334>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x294>
					temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 800125c:	4a27      	ldr	r2, [pc, #156]	@ (80012fc <HAL_GPIO_Init+0x334>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 8001262:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <HAL_GPIO_Init+0x334>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2be>
					temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 8001286:	4a1d      	ldr	r2, [pc, #116]	@ (80012fc <HAL_GPIO_Init+0x334>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <HAL_GPIO_Init+0x334>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2e8>
					temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 80012b0:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <HAL_GPIO_Init+0x334>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	f67f ae90 	bls.w	8000fe4 <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	@ 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40021c00 	.word	0x40021c00
 80012fc:	40013c00 	.word	0x40013c00

08001300 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e12b      	b.n	800159e <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fb06 	bl	800096c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2224      	movs	r2, #36	@ 0x24
 8001364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001386:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001396:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8001398:	f002 fc72 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 800139c:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a81      	ldr	r2, [pc, #516]	@ (80015a8 <HAL_I2C_Init+0x274>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d807      	bhi.n	80013b8 <HAL_I2C_Init+0x84>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4a80      	ldr	r2, [pc, #512]	@ (80015ac <HAL_I2C_Init+0x278>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	bf94      	ite	ls
 80013b0:	2301      	movls	r3, #1
 80013b2:	2300      	movhi	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	e006      	b.n	80013c6 <HAL_I2C_Init+0x92>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4a7d      	ldr	r2, [pc, #500]	@ (80015b0 <HAL_I2C_Init+0x27c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	bf94      	ite	ls
 80013c0:	2301      	movls	r3, #1
 80013c2:	2300      	movhi	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0e7      	b.n	800159e <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4a78      	ldr	r2, [pc, #480]	@ (80015b4 <HAL_I2C_Init+0x280>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9b      	lsrs	r3, r3, #18
 80013d8:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a6a      	ldr	r2, [pc, #424]	@ (80015a8 <HAL_I2C_Init+0x274>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d802      	bhi.n	8001408 <HAL_I2C_Init+0xd4>
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3301      	adds	r3, #1
 8001406:	e009      	b.n	800141c <HAL_I2C_Init+0xe8>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	4a69      	ldr	r2, [pc, #420]	@ (80015b8 <HAL_I2C_Init+0x284>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	3301      	adds	r3, #1
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	430b      	orrs	r3, r1
 8001422:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800142e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	495c      	ldr	r1, [pc, #368]	@ (80015a8 <HAL_I2C_Init+0x274>)
 8001438:	428b      	cmp	r3, r1
 800143a:	d819      	bhi.n	8001470 <HAL_I2C_Init+0x13c>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e59      	subs	r1, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fbb1 f3f3 	udiv	r3, r1, r3
 800144a:	1c59      	adds	r1, r3, #1
 800144c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001450:	400b      	ands	r3, r1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00a      	beq.n	800146c <HAL_I2C_Init+0x138>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1e59      	subs	r1, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fbb1 f3f3 	udiv	r3, r1, r3
 8001464:	3301      	adds	r3, #1
 8001466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146a:	e051      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 800146c:	2304      	movs	r3, #4
 800146e:	e04f      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d111      	bne.n	800149c <HAL_I2C_Init+0x168>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1e58      	subs	r0, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	440b      	add	r3, r1
 8001486:	fbb0 f3f3 	udiv	r3, r0, r3
 800148a:	3301      	adds	r3, #1
 800148c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001490:	2b00      	cmp	r3, #0
 8001492:	bf0c      	ite	eq
 8001494:	2301      	moveq	r3, #1
 8001496:	2300      	movne	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	e012      	b.n	80014c2 <HAL_I2C_Init+0x18e>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1e58      	subs	r0, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	0099      	lsls	r1, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_Init+0x196>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e022      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10e      	bne.n	80014f0 <HAL_I2C_Init+0x1bc>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1e58      	subs	r0, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6859      	ldr	r1, [r3, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	440b      	add	r3, r1
 80014e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ee:	e00f      	b.n	8001510 <HAL_I2C_Init+0x1dc>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1e58      	subs	r0, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6859      	ldr	r1, [r3, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	0099      	lsls	r1, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	fbb0 f3f3 	udiv	r3, r0, r3
 8001506:	3301      	adds	r3, #1
 8001508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	6809      	ldr	r1, [r1, #0]
 8001514:	4313      	orrs	r3, r2
 8001516:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69da      	ldr	r2, [r3, #28]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800153e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6911      	ldr	r1, [r2, #16]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68d2      	ldr	r2, [r2, #12]
 800154a:	4311      	orrs	r1, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	430b      	orrs	r3, r1
 8001552:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	641a      	str	r2, [r3, #64]	@ 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2220      	movs	r2, #32
 800158a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	631a      	str	r2, [r3, #48]	@ 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	000186a0 	.word	0x000186a0
 80015ac:	001e847f 	.word	0x001e847f
 80015b0:	003d08ff 	.word	0x003d08ff
 80015b4:	431bde83 	.word	0x431bde83
 80015b8:	10624dd3 	.word	0x10624dd3

080015bc <HAL_I2S_Init>:
 *         in the I2S_InitTypeDef and create the associated handle.
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
	uint16_t tmpreg;
#endif

	/* Check the I2S handle allocation */
	if (hi2s == NULL) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_I2S_Init+0x12>
		return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e128      	b.n	8001820 <HAL_I2S_Init+0x264>
	assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
	assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
	assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
	assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

	if (hi2s->State == HAL_I2S_STATE_RESET) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_I2S_Init+0x32>
		/* Allocate lock resource and initialize it */
		hi2s->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

		/* Initialize Default I2S IrqHandler ISR */
		hi2s->IrqHandlerISR = I2S_IRQHandler;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a90      	ldr	r2, [pc, #576]	@ (8001828 <HAL_I2S_Init+0x26c>)
 80015e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
		/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
		HAL_I2S_MspInit(hi2s);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fa07 	bl	80009fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}

	hi2s->State = HAL_I2S_STATE_BUSY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2202      	movs	r2, #2
 80015f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	CLEAR_BIT(hi2s->Instance->I2SCFGR,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001604:	f023 030f 	bic.w	r3, r3, #15
 8001608:	61d3      	str	r3, [r2, #28]
			(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
	hi2s->Instance->I2SPR = 0x0002U;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2202      	movs	r2, #2
 8001610:	621a      	str	r2, [r3, #32]

	/*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
	/* If the requested audio frequency is not the default, compute the prescaler */
	if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT) {
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d060      	beq.n	80016dc <HAL_I2S_Init+0x120>
		/* Check the frame length (For the Prescaler computing) ********************/
		if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_I2S_Init+0x6c>
			/* Packet length is 16 bits */
			packetlength = 16U;
 8001622:	2310      	movs	r3, #16
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e001      	b.n	800162c <HAL_I2S_Init+0x70>
		} else {
			/* Packet length is 32 bits */
			packetlength = 32U;
 8001628:	2320      	movs	r3, #32
 800162a:	617b      	str	r3, [r7, #20]
		}

		/* I2S standard */
		if (hi2s->Init.Standard <= I2S_STANDARD_LSB) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b20      	cmp	r3, #32
 8001632:	d802      	bhi.n	800163a <HAL_I2S_Init+0x7e>
			/* In I2S standard packet length is multiplied by 2 */
			packetlength = packetlength * 2U;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
		i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800163a:	2001      	movs	r0, #1
 800163c:	f002 fc16 	bl	8003e6c <HAL_RCCEx_GetPeriphCLKFreq>
 8001640:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

		/* Compute the Real divider depending on the MCLK output state, with a floating point */
		if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE) {
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800164a:	d125      	bne.n	8001698 <HAL_I2S_Init+0xdc>
			/* MCLK output is enabled */
			if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d010      	beq.n	8001676 <HAL_I2S_Init+0xba>
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	fbb2 f2f3 	udiv	r2, r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8001670:	3305      	adds	r3, #5
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	e01f      	b.n	80016b6 <HAL_I2S_Init+0xfa>
			} else {
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8001692:	3305      	adds	r3, #5
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	e00e      	b.n	80016b6 <HAL_I2S_Init+0xfa>
			}
		} else {
			/* MCLK output is disabled */
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fbb2 f2f3 	udiv	r2, r2, r3
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	461a      	mov	r2, r3
					/ hi2s->Init.AudioFreq)) + 5U);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 80016b2:	3305      	adds	r3, #5
 80016b4:	613b      	str	r3, [r7, #16]
		}

		/* Remove the flatting point */
		tmp = tmp / 10U;
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4a5c      	ldr	r2, [pc, #368]	@ (800182c <HAL_I2S_Init+0x270>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	613b      	str	r3, [r7, #16]

		/* Check the parity of the divider */
		i2sodd = (uint32_t) (tmp & (uint32_t) 1U);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]

		/* Compute the i2sdiv prescaler */
		i2sdiv = (uint32_t) ((tmp - i2sodd) / 2U);
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]

		/* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
		i2sodd = (uint32_t) (i2sodd << 8U);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	e003      	b.n	80016e4 <HAL_I2S_Init+0x128>
	} else {
		/* Set the default values */
		i2sdiv = 2U;
 80016dc:	2302      	movs	r3, #2
 80016de:	61fb      	str	r3, [r7, #28]
		i2sodd = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
	}

	/* Test if the divider is 1 or 0 or greater than 0xFF */
	if ((i2sdiv < 2U) || (i2sdiv > 0xFFU)) {
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d902      	bls.n	80016f0 <HAL_I2S_Init+0x134>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2bff      	cmp	r3, #255	@ 0xff
 80016ee:	d907      	bls.n	8001700 <HAL_I2S_Init+0x144>
		/* Set the error code and execute error callback*/
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f4:	f043 0210 	orr.w	r2, r3, #16
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	645a      	str	r2, [r3, #68]	@ 0x44
		return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e08f      	b.n	8001820 <HAL_I2S_Init+0x264>

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

	/* Write to SPIx I2SPR register the computed value */
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
			| (uint32_t) (i2sodd | (uint32_t) hi2s->Init.MCLKOutput));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	ea42 0103 	orr.w	r1, r2, r3
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	430a      	orrs	r2, r1
 8001712:	621a      	str	r2, [r3, #32]

	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	/* And configure the I2S with the I2S_InitStruct values                      */
	MODIFY_REG(hi2s->Instance->I2SCFGR,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800171e:	f023 030f 	bic.w	r3, r3, #15
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6851      	ldr	r1, [r2, #4]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6892      	ldr	r2, [r2, #8]
 800172a:	4311      	orrs	r1, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6992      	ldr	r2, [r2, #24]
 8001736:	430a      	orrs	r2, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001742:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

	/* Configure the I2S extended if the full duplex mode is enabled */
	assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

	if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d161      	bne.n	8001810 <HAL_I2S_Init+0x254>
		/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
		hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a38      	ldr	r2, [pc, #224]	@ (8001830 <HAL_I2S_Init+0x274>)
 8001750:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
		CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a37      	ldr	r2, [pc, #220]	@ (8001834 <HAL_I2S_Init+0x278>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_I2S_Init+0x1a4>
 800175c:	4b36      	ldr	r3, [pc, #216]	@ (8001838 <HAL_I2S_Init+0x27c>)
 800175e:	e001      	b.n	8001764 <HAL_I2S_Init+0x1a8>
 8001760:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	4932      	ldr	r1, [pc, #200]	@ (8001834 <HAL_I2S_Init+0x278>)
 800176c:	428a      	cmp	r2, r1
 800176e:	d101      	bne.n	8001774 <HAL_I2S_Init+0x1b8>
 8001770:	4a31      	ldr	r2, [pc, #196]	@ (8001838 <HAL_I2S_Init+0x27c>)
 8001772:	e001      	b.n	8001778 <HAL_I2S_Init+0x1bc>
 8001774:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001778:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800177c:	f023 030f 	bic.w	r3, r3, #15
 8001780:	61d3      	str	r3, [r2, #28]
				(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
		I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2b      	ldr	r2, [pc, #172]	@ (8001834 <HAL_I2S_Init+0x278>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d101      	bne.n	8001790 <HAL_I2S_Init+0x1d4>
 800178c:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <HAL_I2S_Init+0x27c>)
 800178e:	e001      	b.n	8001794 <HAL_I2S_Init+0x1d8>
 8001790:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001794:	2202      	movs	r2, #2
 8001796:	621a      	str	r2, [r3, #32]

		/* Get the I2SCFGR register value */
		tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a25      	ldr	r2, [pc, #148]	@ (8001834 <HAL_I2S_Init+0x278>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_I2S_Init+0x1ea>
 80017a2:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <HAL_I2S_Init+0x27c>)
 80017a4:	e001      	b.n	80017aa <HAL_I2S_Init+0x1ee>
 80017a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	817b      	strh	r3, [r7, #10]

		/* Get the mode to be configured for the extended I2S */
		if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017b6:	d003      	beq.n	80017c0 <HAL_I2S_Init+0x204>
				|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d103      	bne.n	80017c8 <HAL_I2S_Init+0x20c>
			tmp = I2S_MODE_SLAVE_RX;
 80017c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	e001      	b.n	80017cc <HAL_I2S_Init+0x210>
		} else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
		{
			tmp = I2S_MODE_SLAVE_TX;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
		}

		/* Configure the I2S Slave with the I2S Master parameter values */
		tmpreg |=
				(uint16_t) ((uint16_t) SPI_I2SCFGR_I2SMOD | (uint16_t) tmp
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.Standard
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	b29b      	uxth	r3, r3
		tmpreg |=
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.DataFormat
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	b29b      	uxth	r3, r3
		tmpreg |=
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.CPOL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	b29b      	uxth	r3, r3
		tmpreg |=
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	897b      	ldrh	r3, [r7, #10]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017f8:	817b      	strh	r3, [r7, #10]

		/* Write to SPIx I2SCFGR */
		WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <HAL_I2S_Init+0x278>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d101      	bne.n	8001808 <HAL_I2S_Init+0x24c>
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <HAL_I2S_Init+0x27c>)
 8001806:	e001      	b.n	800180c <HAL_I2S_Init+0x250>
 8001808:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800180c:	897a      	ldrh	r2, [r7, #10]
 800180e:	61da      	str	r2, [r3, #28]
	}
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	645a      	str	r2, [r3, #68]	@ 0x44
	hi2s->State = HAL_I2S_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	08001933 	.word	0x08001933
 800182c:	cccccccd 	.word	0xcccccccd
 8001830:	08001a49 	.word	0x08001a49
 8001834:	40003800 	.word	0x40003800
 8001838:	40003400 	.word	0x40003400

0800183c <HAL_I2S_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_TxCpltCallback could be implemented in the user file
	 */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_I2S_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_I2S_ErrorCallback>:
 * @brief  I2S error callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_ErrorCallback could be implemented in the user file
	 */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <I2S_Transmit_IT>:
 * @brief  Transmit an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	/* Transmit data */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	881a      	ldrh	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	60da      	str	r2, [r3, #12]
	hi2s->pTxBuffPtr++;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	1c9a      	adds	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24
	hi2s->TxXferCount--;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10e      	bne.n	80018cc <I2S_Transmit_IT+0x54>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80018bc:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
		HAL_I2S_TxCpltCallback(hi2s);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffb8 	bl	800183c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <I2S_Receive_IT>:
 * @brief  Receive an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	/* Receive data */
	(*hi2s->pRxBuffPtr) = (uint16_t) hi2s->Instance->DR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e6:	b292      	uxth	r2, r2
 80018e8:	801a      	strh	r2, [r3, #0]
	hi2s->pRxBuffPtr++;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	1c9a      	adds	r2, r3, #2
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hi2s->RxXferCount--;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001906:	b29b      	uxth	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10e      	bne.n	800192a <I2S_Receive_IT+0x56>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800191a:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
		HAL_I2S_RxCpltCallback(hi2s);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff93 	bl	8001850 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <I2S_IRQHandler>:
 * @brief  This function handles I2S interrupt request.
 * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s) {
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	617b      	str	r3, [r7, #20]

	if (hi2s->State == HAL_I2S_STATE_BUSY_RX) {
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b04      	cmp	r3, #4
 800194c:	d13a      	bne.n	80019c4 <I2S_IRQHandler+0x92>
		/* I2S in mode Receiver ------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d109      	bne.n	800196c <I2S_IRQHandler+0x3a>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET)) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001962:	2b40      	cmp	r3, #64	@ 0x40
 8001964:	d102      	bne.n	800196c <I2S_IRQHandler+0x3a>
			I2S_Receive_IT(hi2s);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffb4 	bl	80018d4 <I2S_Receive_IT>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001972:	2b40      	cmp	r3, #64	@ 0x40
 8001974:	d126      	bne.n	80019c4 <I2S_IRQHandler+0x92>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b20      	cmp	r3, #32
 8001982:	d11f      	bne.n	80019c4 <I2S_IRQHandler+0x92>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001992:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f043 0202 	orr.w	r2, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff50 	bl	8001864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}

	if (hi2s->State == HAL_I2S_STATE_BUSY_TX) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d136      	bne.n	8001a3e <I2S_IRQHandler+0x10c>
		/* I2S in mode Transmitter -----------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d109      	bne.n	80019ee <I2S_IRQHandler+0xbc>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET)) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e4:	2b80      	cmp	r3, #128	@ 0x80
 80019e6:	d102      	bne.n	80019ee <I2S_IRQHandler+0xbc>
			I2S_Transmit_IT(hi2s);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff45 	bl	8001878 <I2S_Transmit_IT>
		}

		/* I2S Underrun error interrupt occurred --------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d122      	bne.n	8001a3e <I2S_IRQHandler+0x10c>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d11b      	bne.n	8001a3e <I2S_IRQHandler+0x10c>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001a14:	605a      	str	r2, [r3, #4]

			/* Clear Underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a30:	f043 0204 	orr.w	r2, r3, #4
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff13 	bl	8001864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_I2SEx_FullDuplex_IRQHandler>:
/**
 * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
 * @param  hi2s I2S handle
 * @retval HAL status
 */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a92      	ldr	r2, [pc, #584]	@ (8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001a62:	4b92      	ldr	r3, [pc, #584]	@ (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a64:	e001      	b.n	8001a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001a66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	61bb      	str	r3, [r7, #24]
	__IO uint32_t i2scr2 = hi2s->Instance->CR2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	617b      	str	r3, [r7, #20]
	__IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a8b      	ldr	r2, [pc, #556]	@ (8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001a80:	4b8a      	ldr	r3, [pc, #552]	@ (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a82:	e001      	b.n	8001a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001a84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	613b      	str	r3, [r7, #16]

	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a94:	d004      	beq.n	8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
			|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8099 	bne.w	8001bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
		/* I2S in mode Transmitter -------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d107      	bne.n	8001aba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
				&& ((i2scr2 & I2S_IT_TXE) != RESET)) {
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2S(hi2s);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f925 	bl	8001d04 <I2SEx_TxISR_I2S>
		}

		/* I2Sext in mode Receiver -----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d107      	bne.n	8001ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
				&& ((i2sextcr2 & I2S_IT_RXNE) != RESET)) {
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2SExt(hi2s);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f9c8 	bl	8001e64 <I2SEx_RxISR_I2SExt>
		}

		/* I2Sext Overrun error interrupt occurred --------------------------------*/
		if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ada:	2b40      	cmp	r3, #64	@ 0x40
 8001adc:	d13a      	bne.n	8001b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d035      	beq.n	8001b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001af2:	4b6e      	ldr	r3, [pc, #440]	@ (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001af4:	e001      	b.n	8001afa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001af6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4969      	ldr	r1, [pc, #420]	@ (8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b02:	428b      	cmp	r3, r1
 8001b04:	d101      	bne.n	8001b0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001b06:	4b69      	ldr	r3, [pc, #420]	@ (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b08:	e001      	b.n	8001b0e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001b0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001b12:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b22:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	f043 0202 	orr.w	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fe88 	bl	8001864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2S Underrun error interrupt occurred ----------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	f040 80c3 	bne.w	8001ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80bd 	beq.w	8001ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b7a:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a49      	ldr	r2, [pc, #292]	@ (8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001b86:	4b49      	ldr	r3, [pc, #292]	@ (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b88:	e001      	b.n	8001b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4944      	ldr	r1, [pc, #272]	@ (8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b96:	428b      	cmp	r3, r1
 8001b98:	d101      	bne.n	8001b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001b9a:	4b44      	ldr	r3, [pc, #272]	@ (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b9c:	e001      	b.n	8001ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001b9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ba2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ba6:	605a      	str	r2, [r3, #4]

			/* Clear underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f043 0204 	orr.w	r2, r3, #4
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fe4a 	bl	8001864 <HAL_I2S_ErrorCallback>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8001bd0:	e089      	b.n	8001ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
		}
	}
	/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
	else {
		/* I2Sext in mode Transmitter ----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d107      	bne.n	8001bec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
				&& ((i2sextcr2 & I2S_IT_TXE) != RESET)) {
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2SExt(hi2s);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8be 	bl	8001d68 <I2SEx_TxISR_I2SExt>
		}

		/* I2S in mode Receiver --------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
				&& ((i2scr2 & I2S_IT_RXNE) != RESET)) {
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2S(hi2s);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f8fd 	bl	8001e00 <I2SEx_RxISR_I2S>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0c:	2b40      	cmp	r3, #64	@ 0x40
 8001c0e:	d12f      	bne.n	8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d02a      	beq.n	8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c28:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001c34:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c36:	e001      	b.n	8001c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001c38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4919      	ldr	r1, [pc, #100]	@ (8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c44:	428b      	cmp	r3, r1
 8001c46:	d101      	bne.n	8001c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c4a:	e001      	b.n	8001c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001c54:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	f043 0202 	orr.w	r2, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fdfa 	bl	8001864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2Sext Underrun error interrupt occurred -------------------------------*/
		if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d136      	bne.n	8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d031      	beq.n	8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001c8e:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c90:	e001      	b.n	8001c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001c92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4902      	ldr	r1, [pc, #8]	@ (8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c9e:	428b      	cmp	r3, r1
 8001ca0:	d106      	bne.n	8001cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001ca2:	4b02      	ldr	r3, [pc, #8]	@ (8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ca4:	e006      	b.n	8001cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001ca6:	bf00      	nop
 8001ca8:	40003800 	.word	0x40003800
 8001cac:	40003400 	.word	0x40003400
 8001cb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cb4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001cb8:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001cc8:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f043 0204 	orr.w	r2, r3, #4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fdc0 	bl	8001864 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8001ce4:	e000      	b.n	8001ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8001ce6:	bf00      	nop
}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_I2SEx_TxRxCpltCallback>:
/**
 * @brief  Tx and Rx Transfer completed callback
 * @param  hi2s I2S handle
 * @retval None
 */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
	 */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <I2SEx_TxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	1c99      	adds	r1, r3, #2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6251      	str	r1, [r2, #36]	@ 0x24
 8001d16:	881a      	ldrh	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d113      	bne.n	8001d5e <I2SEx_TxISR_I2S+0x5a>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001d44:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d106      	bne.n	8001d5e <I2SEx_TxISR_I2S+0x5a>
			hi2s->State = HAL_I2S_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ffc9 	bl	8001cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <I2SEx_TxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	1c99      	adds	r1, r3, #2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6251      	str	r1, [r2, #36]	@ 0x24
 8001d7a:	8819      	ldrh	r1, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1d      	ldr	r2, [pc, #116]	@ (8001df8 <I2SEx_TxISR_I2SExt+0x90>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <I2SEx_TxISR_I2SExt+0x22>
 8001d86:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <I2SEx_TxISR_I2SExt+0x94>)
 8001d88:	e001      	b.n	8001d8e <I2SEx_TxISR_I2SExt+0x26>
 8001d8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d8e:	460a      	mov	r2, r1
 8001d90:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d121      	bne.n	8001dee <I2SEx_TxISR_I2SExt+0x86>
		/* Disable I2Sext TXE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <I2SEx_TxISR_I2SExt+0x90>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <I2SEx_TxISR_I2SExt+0x50>
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <I2SEx_TxISR_I2SExt+0x94>)
 8001db6:	e001      	b.n	8001dbc <I2SEx_TxISR_I2SExt+0x54>
 8001db8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	490d      	ldr	r1, [pc, #52]	@ (8001df8 <I2SEx_TxISR_I2SExt+0x90>)
 8001dc4:	428b      	cmp	r3, r1
 8001dc6:	d101      	bne.n	8001dcc <I2SEx_TxISR_I2SExt+0x64>
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <I2SEx_TxISR_I2SExt+0x94>)
 8001dca:	e001      	b.n	8001dd0 <I2SEx_TxISR_I2SExt+0x68>
 8001dcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001dd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001dd4:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d106      	bne.n	8001dee <I2SEx_TxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff81 	bl	8001cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40003800 	.word	0x40003800
 8001dfc:	40003400 	.word	0x40003400

08001e00 <I2SEx_RxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68d8      	ldr	r0, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e12:	1c99      	adds	r1, r3, #2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001e18:	b282      	uxth	r2, r0
 8001e1a:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d113      	bne.n	8001e5c <I2SEx_RxISR_I2S+0x5c>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e42:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <I2SEx_RxISR_I2S+0x5c>
			hi2s->State = HAL_I2S_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff4a 	bl	8001cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <I2SEx_RxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a20      	ldr	r2, [pc, #128]	@ (8001ef4 <I2SEx_RxISR_I2SExt+0x90>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <I2SEx_RxISR_I2SExt+0x16>
 8001e76:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <I2SEx_RxISR_I2SExt+0x94>)
 8001e78:	e001      	b.n	8001e7e <I2SEx_RxISR_I2SExt+0x1a>
 8001e7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e7e:	68d8      	ldr	r0, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e84:	1c99      	adds	r1, r3, #2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001e8a:	b282      	uxth	r2, r0
 8001e8c:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d121      	bne.n	8001eea <I2SEx_RxISR_I2SExt+0x86>
		/* Disable I2Sext RXNE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a12      	ldr	r2, [pc, #72]	@ (8001ef4 <I2SEx_RxISR_I2SExt+0x90>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <I2SEx_RxISR_I2SExt+0x50>
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <I2SEx_RxISR_I2SExt+0x94>)
 8001eb2:	e001      	b.n	8001eb8 <I2SEx_RxISR_I2SExt+0x54>
 8001eb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	490d      	ldr	r1, [pc, #52]	@ (8001ef4 <I2SEx_RxISR_I2SExt+0x90>)
 8001ec0:	428b      	cmp	r3, r1
 8001ec2:	d101      	bne.n	8001ec8 <I2SEx_RxISR_I2SExt+0x64>
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <I2SEx_RxISR_I2SExt+0x94>)
 8001ec6:	e001      	b.n	8001ecc <I2SEx_RxISR_I2SExt+0x68>
 8001ec8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ecc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ed0:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d106      	bne.n	8001eea <I2SEx_RxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff03 	bl	8001cf0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40003800 	.word	0x40003800
 8001ef8:	40003400 	.word	0x40003400

08001efc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e101      	b.n	8002112 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d106      	bne.n	8001f2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f005 fdb9 	bl	8007aa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2203      	movs	r2, #3
 8001f32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f3c:	d102      	bne.n	8001f44 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 f990 	bl	800426e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7c1a      	ldrb	r2, [r3, #16]
 8001f56:	f88d 2000 	strb.w	r2, [sp]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5e:	f002 f86e 	bl	800403e <USB_CoreInit>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0ce      	b.n	8002112 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 f988 	bl	8004290 <USB_SetCurrentMode>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0bf      	b.n	8002112 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	e04a      	b.n	800202e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3315      	adds	r3, #21
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3314      	adds	r3, #20
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	b298      	uxth	r0, r3
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	332e      	adds	r3, #46	@ 0x2e
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3318      	adds	r3, #24
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	331c      	adds	r3, #28
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	3320      	adds	r3, #32
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3324      	adds	r3, #36	@ 0x24
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	3301      	adds	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	791b      	ldrb	r3, [r3, #4]
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	429a      	cmp	r2, r3
 8002036:	d3af      	bcc.n	8001f98 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e044      	b.n	80020c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	3301      	adds	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	791b      	ldrb	r3, [r3, #4]
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d3b5      	bcc.n	800203e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7c1a      	ldrb	r2, [r3, #16]
 80020da:	f88d 2000 	strb.w	r2, [sp]
 80020de:	3304      	adds	r3, #4
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	f002 f921 	bl	8004328 <USB_DevInit>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e00c      	b.n	8002112 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f003 f96b 	bl	80053e6 <USB_DevDisconnect>

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_PCD_Start+0x1c>
 8002132:	2302      	movs	r3, #2
 8002134:	e022      	b.n	800217c <HAL_PCD_Start+0x62>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800214e:	2b01      	cmp	r3, #1
 8002150:	d105      	bne.n	800215e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002156:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f002 f872 	bl	800424c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f003 f919 	bl	80053a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b08d      	sub	sp, #52	@ 0x34
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 f9d7 	bl	800554e <USB_GetMode>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 848c 	bne.w	8002ac0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 f93b 	bl	8005428 <USB_ReadInterrupts>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8482 	beq.w	8002abe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 f928 	bl	8005428 <USB_ReadInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d107      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f002 0202 	and.w	r2, r2, #2
 80021f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 f916 	bl	8005428 <USB_ReadInterrupts>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b10      	cmp	r3, #16
 8002204:	d161      	bne.n	80022ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0210 	bic.w	r2, r2, #16
 8002214:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	f003 020f 	and.w	r2, r3, #15
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800223c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002240:	d124      	bne.n	800228c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d035      	beq.n	80022ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800225c:	b29b      	uxth	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	6a38      	ldr	r0, [r7, #32]
 8002262:	f002 ff4d 	bl	8005100 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002272:	441a      	add	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002284:	441a      	add	r2, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	615a      	str	r2, [r3, #20]
 800228a:	e016      	b.n	80022ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002292:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002296:	d110      	bne.n	80022ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800229e:	2208      	movs	r2, #8
 80022a0:	4619      	mov	r1, r3
 80022a2:	6a38      	ldr	r0, [r7, #32]
 80022a4:	f002 ff2c 	bl	8005100 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b4:	441a      	add	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0210 	orr.w	r2, r2, #16
 80022c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 f8aa 	bl	8005428 <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80022de:	f040 80a7 	bne.w	8002430 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 f8af 	bl	800544e <USB_ReadDevAllOutEpInterrupt>
 80022f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80022f2:	e099      	b.n	8002428 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 808e 	beq.w	800241c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f003 f8d3 	bl	80054b6 <USB_ReadDevOutEPInterrupt>
 8002310:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00c      	beq.n	8002336 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002328:	461a      	mov	r2, r3
 800232a:	2301      	movs	r3, #1
 800232c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800232e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fea3 	bl	800307c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00c      	beq.n	800235a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	2308      	movs	r3, #8
 8002350:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002352:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 ff79 	bl	800324c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002370:	461a      	mov	r2, r3
 8002372:	2310      	movs	r3, #16
 8002374:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d030      	beq.n	80023e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002388:	2b80      	cmp	r3, #128	@ 0x80
 800238a:	d109      	bne.n	80023a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800239a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800239e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	3304      	adds	r3, #4
 80023b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	78db      	ldrb	r3, [r3, #3]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2200      	movs	r2, #0
 80023c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	4619      	mov	r1, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f005 fc7c 	bl	8007cc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023dc:	461a      	mov	r2, r3
 80023de:	2302      	movs	r3, #2
 80023e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f8:	461a      	mov	r2, r3
 80023fa:	2320      	movs	r3, #32
 80023fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002414:	461a      	mov	r2, r3
 8002416:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800241a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	3301      	adds	r3, #1
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242a:	2b00      	cmp	r3, #0
 800242c:	f47f af62 	bne.w	80022f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f002 fff7 	bl	8005428 <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002440:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002444:	f040 80db 	bne.w	80025fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f003 f818 	bl	8005482 <USB_ReadDevAllInEpInterrupt>
 8002452:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002458:	e0cd      	b.n	80025f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80c2 	beq.w	80025ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f003 f83e 	bl	80054f2 <USB_ReadDevInEPInterrupt>
 8002476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d057      	beq.n	8002532 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	2201      	movs	r2, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	43db      	mvns	r3, r3
 800249c:	69f9      	ldr	r1, [r7, #28]
 800249e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80024a2:	4013      	ands	r3, r2
 80024a4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024b2:	461a      	mov	r2, r3
 80024b4:	2301      	movs	r3, #1
 80024b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	799b      	ldrb	r3, [r3, #6]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d132      	bne.n	8002526 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3320      	adds	r3, #32
 80024d0:	6819      	ldr	r1, [r3, #0]
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4403      	add	r3, r0
 80024e0:	331c      	adds	r3, #28
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4419      	add	r1, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4403      	add	r3, r0
 80024f4:	3320      	adds	r3, #32
 80024f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d113      	bne.n	8002526 <HAL_PCD_IRQHandler+0x3a2>
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3324      	adds	r3, #36	@ 0x24
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d108      	bne.n	8002526 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800251e:	461a      	mov	r2, r3
 8002520:	2101      	movs	r1, #1
 8002522:	f003 f845 	bl	80055b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4619      	mov	r1, r3
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f005 fb46 	bl	8007bbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002548:	461a      	mov	r2, r3
 800254a:	2308      	movs	r3, #8
 800254c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002564:	461a      	mov	r2, r3
 8002566:	2310      	movs	r3, #16
 8002568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	4413      	add	r3, r2
 800257c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002580:	461a      	mov	r2, r3
 8002582:	2340      	movs	r3, #64	@ 0x40
 8002584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d023      	beq.n	80025d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002590:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002592:	6a38      	ldr	r0, [r7, #32]
 8002594:	f002 f82c 	bl	80045f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	3310      	adds	r3, #16
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	3304      	adds	r3, #4
 80025aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	78db      	ldrb	r3, [r3, #3]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d108      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2200      	movs	r2, #0
 80025b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f005 fb93 	bl	8007cec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025d2:	461a      	mov	r2, r3
 80025d4:	2302      	movs	r3, #2
 80025d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fcbd 	bl	8002f64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	3301      	adds	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f af2e 	bne.w	800245a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f002 ff10 	bl	8005428 <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800260e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002612:	d122      	bne.n	800265a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800262e:	2b01      	cmp	r3, #1
 8002630:	d108      	bne.n	8002644 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800263a:	2100      	movs	r1, #0
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fea3 	bl	8003388 <HAL_PCDEx_LPM_Callback>
 8002642:	e002      	b.n	800264a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f005 fb31 	bl	8007cac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f002 fee2 	bl	8005428 <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800266a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800266e:	d112      	bne.n	8002696 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b01      	cmp	r3, #1
 800267e:	d102      	bne.n	8002686 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f005 faed 	bl	8007c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002694:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f002 fec4 	bl	8005428 <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026aa:	f040 80b7 	bne.w	800281c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2110      	movs	r1, #16
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 ff91 	bl	80045f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d2:	e046      	b.n	8002762 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026e0:	461a      	mov	r2, r3
 80026e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80026e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026f8:	0151      	lsls	r1, r2, #5
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	440a      	add	r2, r1
 80026fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002702:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002706:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002714:	461a      	mov	r2, r3
 8002716:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800271a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800272c:	0151      	lsls	r1, r2, #5
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	440a      	add	r2, r1
 8002732:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002736:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800273a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800273c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800274c:	0151      	lsls	r1, r2, #5
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	440a      	add	r2, r1
 8002752:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002756:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800275a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275e:	3301      	adds	r3, #1
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	791b      	ldrb	r3, [r3, #4]
 8002766:	461a      	mov	r2, r3
 8002768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276a:	4293      	cmp	r3, r2
 800276c:	d3b2      	bcc.n	80026d4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800277c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002780:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7bdb      	ldrb	r3, [r3, #15]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800279a:	f043 030b 	orr.w	r3, r3, #11
 800279e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027b0:	f043 030b 	orr.w	r3, r3, #11
 80027b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b6:	e015      	b.n	80027e4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027ca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80027ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027de:	f043 030b 	orr.w	r3, r3, #11
 80027e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80027f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002806:	461a      	mov	r2, r3
 8002808:	f002 fed2 	bl	80055b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800281a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f002 fe01 	bl	8005428 <USB_ReadInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800282c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002830:	d123      	bne.n	800287a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fe97 	bl	800556a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f001 ff4e 	bl	80046e2 <USB_GetDevSpeed>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681c      	ldr	r4, [r3, #0]
 8002852:	f001 fa09 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8002856:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800285c:	461a      	mov	r2, r3
 800285e:	4620      	mov	r0, r4
 8002860:	f001 fc52 	bl	8004108 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f005 f9d2 	bl	8007c0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002878:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f002 fdd2 	bl	8005428 <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b08      	cmp	r3, #8
 800288c:	d10a      	bne.n	80028a4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f005 f9af 	bl	8007bf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f002 0208 	and.w	r2, r2, #8
 80028a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 fdbd 	bl	8005428 <USB_ReadInterrupts>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b4:	2b80      	cmp	r3, #128	@ 0x80
 80028b6:	d123      	bne.n	8002900 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028c4:	2301      	movs	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c8:	e014      	b.n	80028f4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fb0a 	bl	8002f02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	3301      	adds	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	791b      	ldrb	r3, [r3, #4]
 80028f8:	461a      	mov	r2, r3
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d3e4      	bcc.n	80028ca <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f002 fd8f 	bl	8005428 <USB_ReadInterrupts>
 800290a:	4603      	mov	r3, r0
 800290c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002910:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002914:	d13c      	bne.n	8002990 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002916:	2301      	movs	r3, #1
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
 800291a:	e02b      	b.n	8002974 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3318      	adds	r3, #24
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d115      	bne.n	800296e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002942:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	da12      	bge.n	800296e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3317      	adds	r3, #23
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002964:	b2db      	uxtb	r3, r3
 8002966:	4619      	mov	r1, r3
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 faca 	bl	8002f02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	3301      	adds	r3, #1
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	791b      	ldrb	r3, [r3, #4]
 8002978:	461a      	mov	r2, r3
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	4293      	cmp	r3, r2
 800297e:	d3cd      	bcc.n	800291c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800298e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f002 fd47 	bl	8005428 <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029a4:	d156      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a6:	2301      	movs	r3, #1
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029aa:	e045      	b.n	8002a38 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d12e      	bne.n	8002a32 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da2b      	bge.n	8002a32 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80029e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d121      	bne.n	8002a32 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a2e:	6053      	str	r3, [r2, #4]
            break;
 8002a30:	e008      	b.n	8002a44 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	3301      	adds	r3, #1
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	791b      	ldrb	r3, [r3, #4]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d3b3      	bcc.n	80029ac <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fce5 	bl	8005428 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a68:	d10a      	bne.n	8002a80 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f005 f950 	bl	8007d10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 fccf 	bl	8005428 <USB_ReadInterrupts>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d115      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f005 f940 	bl	8007d2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	e000      	b.n	8002ac0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002abe:	bf00      	nop
    }
  }
}
 8002ac0:	3734      	adds	r7, #52	@ 0x34
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}

08002ac6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_SetAddress+0x1a>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e012      	b.n	8002b06 <HAL_PCD_SetAddress+0x40>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 fc2e 	bl	8005358 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	4608      	mov	r0, r1
 8002b18:	4611      	mov	r1, r2
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	70fb      	strb	r3, [r7, #3]
 8002b20:	460b      	mov	r3, r1
 8002b22:	803b      	strh	r3, [r7, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	da0f      	bge.n	8002b54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 020f 	and.w	r2, r3, #15
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	3310      	adds	r3, #16
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	705a      	strb	r2, [r3, #1]
 8002b52:	e00f      	b.n	8002b74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f003 020f 	and.w	r2, r3, #15
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002b80:	883b      	ldrh	r3, [r7, #0]
 8002b82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	78ba      	ldrb	r2, [r7, #2]
 8002b8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	785b      	ldrb	r3, [r3, #1]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ba2:	78bb      	ldrb	r3, [r7, #2]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d102      	bne.n	8002bae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_PCD_EP_Open+0xae>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e00e      	b.n	8002bda <HAL_PCD_EP_Open+0xcc>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68f9      	ldr	r1, [r7, #12]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fdae 	bl	800472c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	da0f      	bge.n	8002c16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	3310      	adds	r3, #16
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	705a      	strb	r2, [r3, #1]
 8002c14:	e00f      	b.n	8002c36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	f003 020f 	and.w	r2, r3, #15
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_PCD_EP_Close+0x6e>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e00e      	b.n	8002c6e <HAL_PCD_EP_Close+0x8c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fdec 	bl	800483c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	460b      	mov	r3, r1
 8002c84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c86:	7afb      	ldrb	r3, [r7, #11]
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	799b      	ldrb	r3, [r3, #6]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d102      	bne.n	8002cd2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	799b      	ldrb	r3, [r3, #6]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6979      	ldr	r1, [r7, #20]
 8002cde:	f001 fe89 	bl	80049f4 <USB_EPStartXfer>

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 020f 	and.w	r2, r3, #15
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d2c:	7afb      	ldrb	r3, [r7, #11]
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	3310      	adds	r3, #16
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2200      	movs	r2, #0
 8002d54:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	799b      	ldrb	r3, [r3, #6]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d102      	bne.n	8002d76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	799b      	ldrb	r3, [r3, #6]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6979      	ldr	r1, [r7, #20]
 8002d82:	f001 fe37 	bl	80049f4 <USB_EPStartXfer>

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	7912      	ldrb	r2, [r2, #4]
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e04f      	b.n	8002e4e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da0f      	bge.n	8002dd6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	f003 020f 	and.w	r2, r3, #15
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	3310      	adds	r3, #16
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	3304      	adds	r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	705a      	strb	r2, [r3, #1]
 8002dd4:	e00d      	b.n	8002df2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_PCD_EP_SetStall+0x82>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e01d      	b.n	8002e4e <HAL_PCD_EP_SetStall+0xbe>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 f9c5 	bl	80051b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7999      	ldrb	r1, [r3, #6]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f002 fbb6 	bl	80055b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	7912      	ldrb	r2, [r2, #4]
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e042      	b.n	8002efa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	da0f      	bge.n	8002e9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	f003 020f 	and.w	r2, r3, #15
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	3310      	adds	r3, #16
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	705a      	strb	r2, [r3, #1]
 8002e9a:	e00f      	b.n	8002ebc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 020f 	and.w	r2, r3, #15
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_PCD_EP_ClrStall+0x86>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e00e      	b.n	8002efa <HAL_PCD_EP_ClrStall+0xa4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 f9ce 	bl	800528c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0c      	bge.n	8002f30 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3310      	adds	r3, #16
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	e00c      	b.n	8002f4a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 020f 	and.w	r2, r3, #15
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	3304      	adds	r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f001 ffed 	bl	8004f30 <USB_EPStopXfer>
 8002f56:	4603      	mov	r3, r0
 8002f58:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	@ 0x28
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	3310      	adds	r3, #16
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	3304      	adds	r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d901      	bls.n	8002f9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e06b      	b.n	8003074 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d902      	bls.n	8002fb8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	3303      	adds	r3, #3
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fc0:	e02a      	b.n	8003018 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d902      	bls.n	8002fde <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3303      	adds	r3, #3
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	68d9      	ldr	r1, [r3, #12]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f002 f842 	bl	8005084 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	441a      	add	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	441a      	add	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	429a      	cmp	r2, r3
 800302c:	d809      	bhi.n	8003042 <PCD_WriteEmptyTxFifo+0xde>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003036:	429a      	cmp	r2, r3
 8003038:	d203      	bcs.n	8003042 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1bf      	bne.n	8002fc2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	429a      	cmp	r2, r3
 800304c:	d811      	bhi.n	8003072 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	2201      	movs	r2, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	43db      	mvns	r3, r3
 8003068:	6939      	ldr	r1, [r7, #16]
 800306a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800306e:	4013      	ands	r3, r2
 8003070:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	333c      	adds	r3, #60	@ 0x3c
 8003094:	3304      	adds	r3, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	799b      	ldrb	r3, [r3, #6]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d17b      	bne.n	80031aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d015      	beq.n	80030e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	4a61      	ldr	r2, [pc, #388]	@ (8003244 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	f240 80b9 	bls.w	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80b3 	beq.w	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030de:	461a      	mov	r2, r3
 80030e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030e4:	6093      	str	r3, [r2, #8]
 80030e6:	e0a7      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030fe:	461a      	mov	r2, r3
 8003100:	2320      	movs	r3, #32
 8003102:	6093      	str	r3, [r2, #8]
 8003104:	e098      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800310c:	2b00      	cmp	r3, #0
 800310e:	f040 8093 	bne.w	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4a4b      	ldr	r2, [pc, #300]	@ (8003244 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d90f      	bls.n	800313a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003130:	461a      	mov	r2, r3
 8003132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003136:	6093      	str	r3, [r2, #8]
 8003138:	e07e      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	3304      	adds	r3, #4
 800314e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	0159      	lsls	r1, r3, #5
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	440b      	add	r3, r1
 800315c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d114      	bne.n	800319c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003184:	461a      	mov	r2, r3
 8003186:	2101      	movs	r1, #1
 8003188:	f002 fa12 	bl	80055b0 <USB_EP0_OutStart>
 800318c:	e006      	b.n	800319c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	441a      	add	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	4619      	mov	r1, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f004 fcf0 	bl	8007b88 <HAL_PCD_DataOutStageCallback>
 80031a8:	e046      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	4a26      	ldr	r2, [pc, #152]	@ (8003248 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d124      	bne.n	80031fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031c8:	461a      	mov	r2, r3
 80031ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ce:	6093      	str	r3, [r2, #8]
 80031d0:	e032      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031e8:	461a      	mov	r2, r3
 80031ea:	2320      	movs	r3, #32
 80031ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f004 fcc7 	bl	8007b88 <HAL_PCD_DataOutStageCallback>
 80031fa:	e01d      	b.n	8003238 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d114      	bne.n	800322c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003224:	461a      	mov	r2, r3
 8003226:	2100      	movs	r1, #0
 8003228:	f002 f9c2 	bl	80055b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	4619      	mov	r1, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f004 fca8 	bl	8007b88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	4f54300a 	.word	0x4f54300a
 8003248:	4f54310a 	.word	0x4f54310a

0800324c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	333c      	adds	r3, #60	@ 0x3c
 8003264:	3304      	adds	r3, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a15      	ldr	r2, [pc, #84]	@ (80032d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d90e      	bls.n	80032a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003298:	461a      	mov	r2, r3
 800329a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800329e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f004 fc5f 	bl	8007b64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	@ (80032d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d90c      	bls.n	80032c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	799b      	ldrb	r3, [r3, #6]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d108      	bne.n	80032c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032c0:	461a      	mov	r2, r3
 80032c2:	2101      	movs	r1, #1
 80032c4:	f002 f974 	bl	80055b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	4f54300a 	.word	0x4f54300a

080032d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
 80032e4:	4613      	mov	r3, r2
 80032e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d107      	bne.n	8003306 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032f6:	883b      	ldrh	r3, [r7, #0]
 80032f8:	0419      	lsls	r1, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	430a      	orrs	r2, r1
 8003302:	629a      	str	r2, [r3, #40]	@ 0x28
 8003304:	e028      	b.n	8003358 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	4413      	add	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003314:	2300      	movs	r3, #0
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e00d      	b.n	8003336 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	3340      	adds	r3, #64	@ 0x40
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	4413      	add	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	3301      	adds	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	3b01      	subs	r3, #1
 800333c:	429a      	cmp	r2, r3
 800333e:	d3ec      	bcc.n	800331a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003340:	883b      	ldrh	r3, [r7, #0]
 8003342:	0418      	lsls	r0, r3, #16
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	3b01      	subs	r3, #1
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	4302      	orrs	r2, r0
 8003350:	3340      	adds	r3, #64	@ 0x40
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e267      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d075      	beq.n	80034aa <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033be:	4b88      	ldr	r3, [pc, #544]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d00c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033ca:	4b85      	ldr	r3, [pc, #532]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d112      	bne.n	80033fc <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80033d6:	4b82      	ldr	r3, [pc, #520]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033e2:	d10b      	bne.n	80033fc <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e4:	4b7e      	ldr	r3, [pc, #504]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d05b      	beq.n	80034a8 <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d157      	bne.n	80034a8 <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e242      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003404:	d106      	bne.n	8003414 <HAL_RCC_OscConfig+0x74>
 8003406:	4b76      	ldr	r3, [pc, #472]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a75      	ldr	r2, [pc, #468]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e01d      	b.n	8003450 <HAL_RCC_OscConfig+0xb0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x98>
 800341e:	4b70      	ldr	r3, [pc, #448]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a6f      	ldr	r2, [pc, #444]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b6d      	ldr	r3, [pc, #436]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6c      	ldr	r2, [pc, #432]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e00b      	b.n	8003450 <HAL_RCC_OscConfig+0xb0>
 8003438:	4b69      	ldr	r3, [pc, #420]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a68      	ldr	r2, [pc, #416]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 800343e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4b66      	ldr	r3, [pc, #408]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a65      	ldr	r2, [pc, #404]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 800344a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800344e:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003458:	f7fd fc74 	bl	8000d44 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8003460:	f7fd fc70 	bl	8000d44 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	@ 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e207      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8003472:	4b5b      	ldr	r3, [pc, #364]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0xc0>
 800347e:	e014      	b.n	80034aa <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003480:	f7fd fc60 	bl	8000d44 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8003488:	f7fd fc5c 	bl	8000d44 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	@ 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e1f3      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800349a:	4b51      	ldr	r3, [pc, #324]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0xe8>
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a8:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d063      	beq.n	800357e <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034b6:	4b4a      	ldr	r3, [pc, #296]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034c2:	4b47      	ldr	r3, [pc, #284]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d11c      	bne.n	8003508 <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80034ce:	4b44      	ldr	r3, [pc, #272]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d116      	bne.n	8003508 <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b41      	ldr	r3, [pc, #260]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e1c7      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80034f2:	4b3b      	ldr	r3, [pc, #236]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4937      	ldr	r1, [pc, #220]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e03a      	b.n	800357e <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d020      	beq.n	8003552 <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8003510:	4b34      	ldr	r3, [pc, #208]	@ (80035e4 <HAL_RCC_OscConfig+0x244>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003516:	f7fd fc15 	bl	8000d44 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800351e:	f7fd fc11 	bl	8000d44 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e1a8      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8003530:	4b2b      	ldr	r3, [pc, #172]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800353c:	4b28      	ldr	r3, [pc, #160]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4925      	ldr	r1, [pc, #148]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
 8003550:	e015      	b.n	800357e <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8003552:	4b24      	ldr	r3, [pc, #144]	@ (80035e4 <HAL_RCC_OscConfig+0x244>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003558:	f7fd fbf4 	bl	8000d44 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8003560:	f7fd fbf0 	bl	8000d44 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e187      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8003572:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d036      	beq.n	80035f8 <HAL_RCC_OscConfig+0x258>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8003592:	4b15      	ldr	r3, [pc, #84]	@ (80035e8 <HAL_RCC_OscConfig+0x248>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8003598:	f7fd fbd4 	bl	8000d44 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80035a0:	f7fd fbd0 	bl	8000d44 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e167      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 80035b2:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <HAL_RCC_OscConfig+0x240>)
 80035b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x200>
 80035be:	e01b      	b.n	80035f8 <HAL_RCC_OscConfig+0x258>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80035c0:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <HAL_RCC_OscConfig+0x248>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80035c6:	f7fd fbbd 	bl	8000d44 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80035cc:	e00e      	b.n	80035ec <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80035ce:	f7fd fbb9 	bl	8000d44 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d907      	bls.n	80035ec <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e150      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
 80035e0:	40023800 	.word	0x40023800
 80035e4:	42470000 	.word	0x42470000
 80035e8:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80035ec:	4b88      	ldr	r3, [pc, #544]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80035ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ea      	bne.n	80035ce <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8097 	beq.w	8003734 <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 800360a:	4b81      	ldr	r3, [pc, #516]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10f      	bne.n	8003636 <HAL_RCC_OscConfig+0x296>
			__HAL_RCC_PWR_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	4b7d      	ldr	r3, [pc, #500]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	4a7c      	ldr	r2, [pc, #496]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003624:	6413      	str	r3, [r2, #64]	@ 0x40
 8003626:	4b7a      	ldr	r3, [pc, #488]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8003636:	4b77      	ldr	r3, [pc, #476]	@ (8003814 <HAL_RCC_OscConfig+0x474>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d118      	bne.n	8003674 <HAL_RCC_OscConfig+0x2d4>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8003642:	4b74      	ldr	r3, [pc, #464]	@ (8003814 <HAL_RCC_OscConfig+0x474>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a73      	ldr	r2, [pc, #460]	@ (8003814 <HAL_RCC_OscConfig+0x474>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800364c:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 800364e:	f7fd fb79 	bl	8000d44 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x2c8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8003656:	f7fd fb75 	bl	8000d44 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x2c8>
					return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e10c      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8003668:	4b6a      	ldr	r3, [pc, #424]	@ (8003814 <HAL_RCC_OscConfig+0x474>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x2ea>
 800367c:	4b64      	ldr	r3, [pc, #400]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	4a63      	ldr	r2, [pc, #396]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	@ 0x70
 8003688:	e01c      	b.n	80036c4 <HAL_RCC_OscConfig+0x324>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b05      	cmp	r3, #5
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x30c>
 8003692:	4b5f      	ldr	r3, [pc, #380]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	4a5e      	ldr	r2, [pc, #376]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 8003698:	f043 0304 	orr.w	r3, r3, #4
 800369c:	6713      	str	r3, [r2, #112]	@ 0x70
 800369e:	4b5c      	ldr	r3, [pc, #368]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0x324>
 80036ac:	4b58      	ldr	r3, [pc, #352]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	4a57      	ldr	r2, [pc, #348]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b8:	4b55      	ldr	r3, [pc, #340]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036bc:	4a54      	ldr	r2, [pc, #336]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80036be:	f023 0304 	bic.w	r3, r3, #4
 80036c2:	6713      	str	r3, [r2, #112]	@ 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d015      	beq.n	80036f8 <HAL_RCC_OscConfig+0x358>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80036cc:	f7fd fb3a 	bl	8000d44 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x34a>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80036d4:	f7fd fb36 	bl	8000d44 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x34a>
					return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0cb      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80036ea:	4b49      	ldr	r3, [pc, #292]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0ee      	beq.n	80036d4 <HAL_RCC_OscConfig+0x334>
 80036f6:	e014      	b.n	8003722 <HAL_RCC_OscConfig+0x382>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80036f8:	f7fd fb24 	bl	8000d44 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_OscConfig+0x376>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8003700:	f7fd fb20 	bl	8000d44 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x376>
					return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e0b5      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8003716:	4b3e      	ldr	r3, [pc, #248]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ee      	bne.n	8003700 <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_RCC_OscConfig+0x394>
			__HAL_RCC_PWR_CLK_DISABLE();
 8003728:	4b39      	ldr	r3, [pc, #228]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	4a38      	ldr	r2, [pc, #224]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 800372e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003732:	6413      	str	r3, [r2, #64]	@ 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a1 	beq.w	8003880 <HAL_RCC_OscConfig+0x4e0>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 800373e:	4b34      	ldr	r3, [pc, #208]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b08      	cmp	r3, #8
 8003748:	d05c      	beq.n	8003804 <HAL_RCC_OscConfig+0x464>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d141      	bne.n	80037d6 <HAL_RCC_OscConfig+0x436>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8003752:	4b31      	ldr	r3, [pc, #196]	@ (8003818 <HAL_RCC_OscConfig+0x478>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003758:	f7fd faf4 	bl	8000d44 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x3d2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8003760:	f7fd faf0 	bl	8000d44 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x3d2>
						return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e087      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8003772:	4b27      	ldr	r3, [pc, #156]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	019b      	lsls	r3, r3, #6
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	3b01      	subs	r3, #1
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	491b      	ldr	r1, [pc, #108]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HAL_RCC_OscConfig+0x478>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80037ae:	f7fd fac9 	bl	8000d44 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x428>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80037b6:	f7fd fac5 	bl	8000d44 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x428>
						return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e05c      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80037c8:	4b11      	ldr	r3, [pc, #68]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x416>
 80037d4:	e054      	b.n	8003880 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80037d6:	4b10      	ldr	r3, [pc, #64]	@ (8003818 <HAL_RCC_OscConfig+0x478>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80037dc:	f7fd fab2 	bl	8000d44 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x456>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80037e4:	f7fd faae 	bl	8000d44 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x456>
						return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e045      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80037f6:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <HAL_RCC_OscConfig+0x470>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x444>
 8003802:	e03d      	b.n	8003880 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <HAL_RCC_OscConfig+0x47c>
				return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e038      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
 8003810:	40023800 	.word	0x40023800
 8003814:	40007000 	.word	0x40007000
 8003818:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 800381c:	4b1b      	ldr	r3, [pc, #108]	@ (800388c <HAL_RCC_OscConfig+0x4ec>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d028      	beq.n	800387c <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8003834:	429a      	cmp	r2, r3
 8003836:	d121      	bne.n	800387c <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8003842:	429a      	cmp	r2, r3
 8003844:	d11a      	bne.n	800387c <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800384c:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6a52      	ldr	r2, [r2, #36]	@ 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 8003852:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8003854:	4293      	cmp	r3, r2
 8003856:	d111      	bne.n	800387c <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 8003866:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8003868:	429a      	cmp	r2, r3
 800386a:	d107      	bne.n	800387c <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 8003876:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
						{
					return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x4e2>
				}
			}
		}
	}
	return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800

08003890 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0cc      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 80038a4:	4b68      	ldr	r3, [pc, #416]	@ (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d90c      	bls.n	80038cc <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b65      	ldr	r3, [pc, #404]	@ (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80038ba:	4b63      	ldr	r3, [pc, #396]	@ (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0b8      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d020      	beq.n	800391a <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e4:	4b59      	ldr	r3, [pc, #356]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4a58      	ldr	r2, [pc, #352]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038ee:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038fc:	4b53      	ldr	r3, [pc, #332]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a52      	ldr	r2, [pc, #328]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003906:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003908:	4b50      	ldr	r3, [pc, #320]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	494d      	ldr	r1, [pc, #308]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d044      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800392e:	4b47      	ldr	r3, [pc, #284]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d119      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e07f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d003      	beq.n	800394e <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d107      	bne.n	800395e <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800394e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e06f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800395e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e067      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800396e:	4b37      	ldr	r3, [pc, #220]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f023 0203 	bic.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4934      	ldr	r1, [pc, #208]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8003980:	f7fd f9e0 	bl	8000d44 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8003986:	e00a      	b.n	800399e <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8003988:	f7fd f9dc 	bl	8000d44 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e04f      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800399e:	4b2b      	ldr	r3, [pc, #172]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1eb      	bne.n	8003988 <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80039b0:	4b25      	ldr	r3, [pc, #148]	@ (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d20c      	bcs.n	80039d8 <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b22      	ldr	r3, [pc, #136]	@ (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80039c6:	4b20      	ldr	r3, [pc, #128]	@ (8003a48 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e032      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80039e4:	4b19      	ldr	r3, [pc, #100]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4916      	ldr	r1, [pc, #88]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8003a02:	4b12      	ldr	r3, [pc, #72]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	490e      	ldr	r1, [pc, #56]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8003a16:	f000 f821 	bl	8003a5c <HAL_RCC_GetSysClockFreq>
 8003a1a:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	490a      	ldr	r1, [pc, #40]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8003a2e:	4a09      	ldr	r2, [pc, #36]	@ (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 8003a32:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd f940 	bl	8000cbc <HAL_InitTick>

	return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023c00 	.word	0x40023c00
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	080081a4 	.word	0x080081a4
 8003a54:	20000000 	.word	0x20000000
 8003a58:	20000004 	.word	0x20000004

08003a5c <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8003a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a60:	b094      	sub	sp, #80	@ 0x50
 8003a62:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t pllvco = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t pllp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t sysclockfreq = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	64bb      	str	r3, [r7, #72]	@ 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8003a74:	4b79      	ldr	r3, [pc, #484]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 030c 	and.w	r3, r3, #12
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d00d      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x40>
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	f200 80e1 	bhi.w	8003c48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x34>
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a8e:	e0db      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x1ec>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8003a90:	4b73      	ldr	r3, [pc, #460]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a92:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8003a94:	e0db      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 8003a96:	4b73      	ldr	r3, [pc, #460]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a98:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8003a9a:	e0d8      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aa4:	647b      	str	r3, [r7, #68]	@ 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8003aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d063      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x11e>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003ab6:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003abc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ace:	4622      	mov	r2, r4
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	0159      	lsls	r1, r3, #5
 8003adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae0:	0150      	lsls	r0, r2, #5
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	1a51      	subs	r1, r2, r1
 8003aea:	6139      	str	r1, [r7, #16]
 8003aec:	4629      	mov	r1, r5
 8003aee:	eb63 0301 	sbc.w	r3, r3, r1
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b00:	4659      	mov	r1, fp
 8003b02:	018b      	lsls	r3, r1, #6
 8003b04:	4651      	mov	r1, sl
 8003b06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b0a:	4651      	mov	r1, sl
 8003b0c:	018a      	lsls	r2, r1, #6
 8003b0e:	4651      	mov	r1, sl
 8003b10:	ebb2 0801 	subs.w	r8, r2, r1
 8003b14:	4659      	mov	r1, fp
 8003b16:	eb63 0901 	sbc.w	r9, r3, r1
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b2e:	4690      	mov	r8, r2
 8003b30:	4699      	mov	r9, r3
 8003b32:	4623      	mov	r3, r4
 8003b34:	eb18 0303 	adds.w	r3, r8, r3
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	eb49 0303 	adc.w	r3, r9, r3
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b4e:	4629      	mov	r1, r5
 8003b50:	024b      	lsls	r3, r1, #9
 8003b52:	4621      	mov	r1, r4
 8003b54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b58:	4621      	mov	r1, r4
 8003b5a:	024a      	lsls	r2, r1, #9
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b62:	2200      	movs	r2, #0
 8003b64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b6c:	f7fc fb2c 	bl	80001c8 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8003b74:	4613      	mov	r3, r2
 8003b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b78:	e058      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x1d0>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003b7a:	4b38      	ldr	r3, [pc, #224]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003b7e:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003b80:	2200      	movs	r2, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	4611      	mov	r1, r2
 8003b86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b94:	4642      	mov	r2, r8
 8003b96:	464b      	mov	r3, r9
 8003b98:	f04f 0000 	mov.w	r0, #0
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	0159      	lsls	r1, r3, #5
 8003ba2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba6:	0150      	lsls	r0, r2, #5
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4641      	mov	r1, r8
 8003bae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bcc:	ebb2 040a 	subs.w	r4, r2, sl
 8003bd0:	eb63 050b 	sbc.w	r5, r3, fp
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	00eb      	lsls	r3, r5, #3
 8003bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be2:	00e2      	lsls	r2, r4, #3
 8003be4:	4614      	mov	r4, r2
 8003be6:	461d      	mov	r5, r3
 8003be8:	4643      	mov	r3, r8
 8003bea:	18e3      	adds	r3, r4, r3
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	464b      	mov	r3, r9
 8003bf0:	eb45 0303 	adc.w	r3, r5, r3
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c02:	4629      	mov	r1, r5
 8003c04:	028b      	lsls	r3, r1, #10
 8003c06:	4621      	mov	r1, r4
 8003c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	028a      	lsls	r2, r1, #10
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c16:	2200      	movs	r2, #0
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	61fa      	str	r2, [r7, #28]
 8003c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c20:	f7fc fad2 	bl	80001c8 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003c28:	4613      	mov	r3, r2
 8003c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 8003c36:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	643b      	str	r3, [r7, #64]	@ 0x40

		sysclockfreq = pllvco / pllp;
 8003c3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8003c46:	e002      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 8003c48:	4b05      	ldr	r3, [pc, #20]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8003c4c:	bf00      	nop
	}
	}
	return sysclockfreq;
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3750      	adds	r7, #80	@ 0x50
 8003c54:	46bd      	mov	sp, r7
 8003c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	007a1200 	.word	0x007a1200

08003c68 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	@ (8003c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000

08003c80 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8003c84:	f7ff fff0 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0a9b      	lsrs	r3, r3, #10
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	@ (8003ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	080081b4 	.word	0x080081b4

08003ca8 <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg1 = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
			== RCC_PERIPHCLK_I2S)
			|| (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d035      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x94>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8003cd0:	4b62      	ldr	r3, [pc, #392]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8003cd6:	f7fd f835 	bl	8000d44 <HAL_GetTick>
 8003cda:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8003cde:	f7fd f831 	bl	8000d44 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0b0      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8003cf0:	4b5b      	ldr	r3, [pc, #364]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	019a      	lsls	r2, r3, #6
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	071b      	lsls	r3, r3, #28
 8003d08:	4955      	ldr	r1, [pc, #340]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
				PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 8003d10:	4b52      	ldr	r3, [pc, #328]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8003d16:	f7fd f815 	bl	8000d44 <HAL_GetTick>
 8003d1a:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8003d1c:	e008      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x88>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8003d1e:	f7fd f811 	bl	8000d44 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x88>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e090      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8003d30:	4b4b      	ldr	r3, [pc, #300]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x76>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8083 	beq.w	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
			== (RCC_PERIPHCLK_RTC)) {
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b44      	ldr	r3, [pc, #272]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	4a43      	ldr	r2, [pc, #268]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d5a:	4b41      	ldr	r3, [pc, #260]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 8003d66:	4b3f      	ldr	r3, [pc, #252]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d70:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 8003d72:	f7fc ffe7 	bl	8000d44 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8003d7a:	f7fc ffe3 	bl	8000d44 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
				return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e062      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8003d8c:	4b35      	ldr	r3, [pc, #212]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d98:	4b31      	ldr	r3, [pc, #196]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da0:	613b      	str	r3, [r7, #16]
		if ((tmpreg1 != 0x00000000U)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d02f      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>
				&& ((tmpreg1)
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
				&& ((tmpreg1)
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d028      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dbe:	613b      	str	r3, [r7, #16]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8003dc0:	4b29      	ldr	r3, [pc, #164]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 8003dc6:	4b28      	ldr	r3, [pc, #160]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 8003dcc:	4a24      	ldr	r2, [pc, #144]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6713      	str	r3, [r2, #112]	@ 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 8003dd2:	4b23      	ldr	r3, [pc, #140]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d114      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>
				/* Get tick */
				tickstart = HAL_GetTick();
 8003dde:	f7fc ffb1 	bl	8000d44 <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8003de4:	e00a      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8003de6:	f7fc ffad 	bl	8000d44 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
						return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e02a      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8003dfc:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ee      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e14:	d10d      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e16:	4b12      	ldr	r3, [pc, #72]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2a:	490d      	ldr	r1, [pc, #52]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	608b      	str	r3, [r1, #8]
 8003e30:	e005      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e32:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e38:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e3c:	6093      	str	r3, [r2, #8]
 8003e3e:	4b08      	ldr	r3, [pc, #32]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4a:	4905      	ldr	r1, [pc, #20]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	42470068 	.word	0x42470068
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40007000 	.word	0x40007000
 8003e68:	42470e40 	.word	0x42470e40

08003e6c <HAL_RCCEx_GetPeriphCLKFreq>:
 * @param  PeriphClk Peripheral clock identifier
 *         This parameter can be one of the following values:
 *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
 * @retval Frequency in KHz
 */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk) {
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	/* This variable used to store the I2S clock frequency (value in Hz) */
	uint32_t frequency = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
	/* This variable used to store the VCO Input (value in Hz) */
	uint32_t vcoinput = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	613b      	str	r3, [r7, #16]
	uint32_t srcclk = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
	/* This variable used to store the VCO Output (value in Hz) */
	uint32_t vcooutput = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
	switch (PeriphClk) {
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d13f      	bne.n	8003f0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
	case RCC_PERIPHCLK_I2S: {
		/* Get the current I2S source */
		srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e8a:	4b24      	ldr	r3, [pc, #144]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e92:	60fb      	str	r3, [r7, #12]
		switch (srcclk) {
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d006      	beq.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ea0:	d12f      	bne.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
		/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
		case RCC_I2SCLKSOURCE_EXT: {
			/* Set the I2S clock to the external clock  value */
			frequency = EXTERNAL_CLOCK_VALUE;
 8003ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ea4:	617b      	str	r3, [r7, #20]
			break;
 8003ea6:	e02f      	b.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
			/* Configure the PLLI2S division factor */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE) {
 8003ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb4:	d108      	bne.n	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSE_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003eb6:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSE_VALUE
 8003ebe:	4a19      	ldr	r2, [pc, #100]	@ (8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e007      	b.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
			} else {
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSI_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ec8:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSI_VALUE
 8003ed0:	4a15      	ldr	r2, [pc, #84]	@ (8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	613b      	str	r3, [r7, #16]
			}
#endif /* STM32F411xE */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			vcooutput = (uint32_t) (vcoinput
					* (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)
 8003ed8:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ede:	099b      	lsrs	r3, r3, #6
							& (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ee0:	f3c3 0208 	ubfx	r2, r3, #0, #9
			vcooutput = (uint32_t) (vcoinput
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	60bb      	str	r3, [r7, #8]
			/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
			frequency = (uint32_t) (vcooutput
					/ (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U)
 8003eec:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ef2:	0f1b      	lsrs	r3, r3, #28
							& (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ef4:	f003 0307 	and.w	r3, r3, #7
			frequency = (uint32_t) (vcooutput
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	617b      	str	r3, [r7, #20]
			break;
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
		}
			/* Clock not enabled for I2S*/
		default: {
			frequency = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
			break;
 8003f06:	bf00      	nop
		}
		}
		break;
 8003f08:	e000      	b.n	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
	}
	default: {
		break;
 8003f0a:	bf00      	nop
	}
	}
	return frequency;
 8003f0c:	697b      	ldr	r3, [r7, #20]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	00bb8000 	.word	0x00bb8000
 8003f24:	007a1200 	.word	0x007a1200
 8003f28:	00f42400 	.word	0x00f42400

08003f2c <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07b      	b.n	8004036 <HAL_SPI_Init+0x10a>
	assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d108      	bne.n	8003f58 <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f4e:	d009      	beq.n	8003f64 <HAL_SPI_Init+0x38>
			assert_param(
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	61da      	str	r2, [r3, #28]
 8003f56:	e005      	b.n	8003f64 <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fc fdbc 	bl	8000afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f9a:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe8:	ea42 0103 	orr.w	r1, r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]
			((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) | (hspi->Init.Direction & (SPI_CR1_RXONLY | SPI_CR1_BIDIMODE)) | (hspi->Init.DataSize & SPI_CR1_DFF) | (hspi->Init.CLKPolarity & SPI_CR1_CPOL) | (hspi->Init.CLKPhase & SPI_CR1_CPHA) | (hspi->Init.NSS & SPI_CR1_SSM) | (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) | (hspi->Init.FirstBit & SPI_CR1_LSBFIRST) | (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management, TI Mode */
	WRITE_REG(hspi->Instance->CR2,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	f003 0104 	and.w	r1, r3, #4
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	f003 0210 	and.w	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004024:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->State = HAL_SPI_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <USB_CoreInit>:
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 800403e:	b084      	sub	sp, #16
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	f107 001c 	add.w	r0, r7, #28
 800404c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret;
	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8004050:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004054:	2b01      	cmp	r3, #1
 8004056:	d123      	bne.n	80040a0 <USB_CoreInit+0x62>
		USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Init The ULPI Interface */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800406c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	60d3      	str	r3, [r2, #12]
				| USB_OTG_GUSBCFG_PHYSEL);

		/* Select vbus source */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]
				| USB_OTG_GUSBCFG_ULPIEVBUSI);
		if (cfg.use_external_vbus == 1U) {
 8004080:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <USB_CoreInit+0x56>
			USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]
		}

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f001 fae9 	bl	800566c <USB_CoreReset>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	e01b      	b.n	80040d8 <USB_CoreInit+0x9a>
	} else /* FS interface (embedded Phy) */
	{
		/* Select FS Embedded PHY */
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f001 fadd 	bl	800566c <USB_CoreReset>
 80040b2:	4603      	mov	r3, r0
 80040b4:	73fb      	strb	r3, [r7, #15]

		if (cfg.battery_charging_enable == 0U) {
 80040b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <USB_CoreInit+0x8e>
			/* Activate the USB Transceiver */
			USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80040ca:	e005      	b.n	80040d8 <USB_CoreInit+0x9a>
		} else {
			/* Deactivate the USB Transceiver */
			USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (cfg.dma_enable == 1U) {
 80040d8:	7fbb      	ldrb	r3, [r7, #30]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10b      	bne.n	80040f6 <USB_CoreInit+0xb8>
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f043 0206 	orr.w	r2, r3, #6
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f043 0220 	orr.w	r2, r3, #32
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	609a      	str	r2, [r3, #8]
	}

	return ret;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004102:	b004      	add	sp, #16
 8004104:	4770      	bx	lr
	...

08004108 <USB_SetTurnaroundTime>:
 * @param  USBx USB Instance
 * @param  hclk: AHB clock frequency
 * @retval USB turnaround time In PHY Clocks number
 */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
		uint32_t hclk, uint8_t speed) {
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	4613      	mov	r3, r2
 8004114:	71fb      	strb	r3, [r7, #7]

	/* The USBTRD is configured according to the tables below, depending on AHB frequency
	 used by application. In the low AHB frequency range it is used to stretch enough the USB response
	 time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
	 latency to the Data FIFO */
	if (speed == USBD_FS_SPEED) {
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d165      	bne.n	80041e8 <USB_SetTurnaroundTime+0xe0>
		if ((hclk >= 14200000U) && (hclk < 15000000U)) {
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4a41      	ldr	r2, [pc, #260]	@ (8004224 <USB_SetTurnaroundTime+0x11c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d906      	bls.n	8004132 <USB_SetTurnaroundTime+0x2a>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4a40      	ldr	r2, [pc, #256]	@ (8004228 <USB_SetTurnaroundTime+0x120>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d202      	bcs.n	8004132 <USB_SetTurnaroundTime+0x2a>
			/* hclk Clock Range between 14.2-15 MHz */
			UsbTrd = 0xFU;
 800412c:	230f      	movs	r3, #15
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e062      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 15000000U) && (hclk < 16000000U)) {
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4a3c      	ldr	r2, [pc, #240]	@ (8004228 <USB_SetTurnaroundTime+0x120>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d306      	bcc.n	8004148 <USB_SetTurnaroundTime+0x40>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4a3b      	ldr	r2, [pc, #236]	@ (800422c <USB_SetTurnaroundTime+0x124>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d202      	bcs.n	8004148 <USB_SetTurnaroundTime+0x40>
			/* hclk Clock Range between 15-16 MHz */
			UsbTrd = 0xEU;
 8004142:	230e      	movs	r3, #14
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e057      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 16000000U) && (hclk < 17200000U)) {
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a38      	ldr	r2, [pc, #224]	@ (800422c <USB_SetTurnaroundTime+0x124>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d306      	bcc.n	800415e <USB_SetTurnaroundTime+0x56>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4a37      	ldr	r2, [pc, #220]	@ (8004230 <USB_SetTurnaroundTime+0x128>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d202      	bcs.n	800415e <USB_SetTurnaroundTime+0x56>
			/* hclk Clock Range between 16-17.2 MHz */
			UsbTrd = 0xDU;
 8004158:	230d      	movs	r3, #13
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e04c      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 17200000U) && (hclk < 18500000U)) {
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4a33      	ldr	r2, [pc, #204]	@ (8004230 <USB_SetTurnaroundTime+0x128>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d306      	bcc.n	8004174 <USB_SetTurnaroundTime+0x6c>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4a32      	ldr	r2, [pc, #200]	@ (8004234 <USB_SetTurnaroundTime+0x12c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d802      	bhi.n	8004174 <USB_SetTurnaroundTime+0x6c>
			/* hclk Clock Range between 17.2-18.5 MHz */
			UsbTrd = 0xCU;
 800416e:	230c      	movs	r3, #12
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	e041      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 18500000U) && (hclk < 20000000U)) {
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4a2f      	ldr	r2, [pc, #188]	@ (8004234 <USB_SetTurnaroundTime+0x12c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d906      	bls.n	800418a <USB_SetTurnaroundTime+0x82>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4a2e      	ldr	r2, [pc, #184]	@ (8004238 <USB_SetTurnaroundTime+0x130>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d802      	bhi.n	800418a <USB_SetTurnaroundTime+0x82>
			/* hclk Clock Range between 18.5-20 MHz */
			UsbTrd = 0xBU;
 8004184:	230b      	movs	r3, #11
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	e036      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 20000000U) && (hclk < 21800000U)) {
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4a2a      	ldr	r2, [pc, #168]	@ (8004238 <USB_SetTurnaroundTime+0x130>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d906      	bls.n	80041a0 <USB_SetTurnaroundTime+0x98>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4a29      	ldr	r2, [pc, #164]	@ (800423c <USB_SetTurnaroundTime+0x134>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d802      	bhi.n	80041a0 <USB_SetTurnaroundTime+0x98>
			/* hclk Clock Range between 20-21.8 MHz */
			UsbTrd = 0xAU;
 800419a:	230a      	movs	r3, #10
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	e02b      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 21800000U) && (hclk < 24000000U)) {
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4a26      	ldr	r2, [pc, #152]	@ (800423c <USB_SetTurnaroundTime+0x134>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d906      	bls.n	80041b6 <USB_SetTurnaroundTime+0xae>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4a25      	ldr	r2, [pc, #148]	@ (8004240 <USB_SetTurnaroundTime+0x138>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d202      	bcs.n	80041b6 <USB_SetTurnaroundTime+0xae>
			/* hclk Clock Range between 21.8-24 MHz */
			UsbTrd = 0x9U;
 80041b0:	2309      	movs	r3, #9
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e020      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 24000000U) && (hclk < 27700000U)) {
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4a21      	ldr	r2, [pc, #132]	@ (8004240 <USB_SetTurnaroundTime+0x138>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d306      	bcc.n	80041cc <USB_SetTurnaroundTime+0xc4>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4a20      	ldr	r2, [pc, #128]	@ (8004244 <USB_SetTurnaroundTime+0x13c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d802      	bhi.n	80041cc <USB_SetTurnaroundTime+0xc4>
			/* hclk Clock Range between 24-27.7 MHz */
			UsbTrd = 0x8U;
 80041c6:	2308      	movs	r3, #8
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	e015      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 27700000U) && (hclk < 32000000U)) {
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004244 <USB_SetTurnaroundTime+0x13c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d906      	bls.n	80041e2 <USB_SetTurnaroundTime+0xda>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004248 <USB_SetTurnaroundTime+0x140>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d202      	bcs.n	80041e2 <USB_SetTurnaroundTime+0xda>
			/* hclk Clock Range between 27.7-32 MHz */
			UsbTrd = 0x7U;
 80041dc:	2307      	movs	r3, #7
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e00a      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
		} else /* if(hclk >= 32000000) */
		{
			/* hclk Clock Range between 32-200 MHz */
			UsbTrd = 0x6U;
 80041e2:	2306      	movs	r3, #6
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	e007      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
		}
	} else if (speed == USBD_HS_SPEED) {
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <USB_SetTurnaroundTime+0xec>
		UsbTrd = USBD_HS_TRDT_VALUE;
 80041ee:	2309      	movs	r3, #9
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	e001      	b.n	80041f8 <USB_SetTurnaroundTime+0xf0>
	} else {
		UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041f4:	2309      	movs	r3, #9
 80041f6:	617b      	str	r3, [r7, #20]
	}

	USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	60da      	str	r2, [r3, #12]
	USBx->GUSBCFG |= (uint32_t) ((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	60da      	str	r2, [r3, #12]

	return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	00d8acbf 	.word	0x00d8acbf
 8004228:	00e4e1c0 	.word	0x00e4e1c0
 800422c:	00f42400 	.word	0x00f42400
 8004230:	01067380 	.word	0x01067380
 8004234:	011a499f 	.word	0x011a499f
 8004238:	01312cff 	.word	0x01312cff
 800423c:	014ca43f 	.word	0x014ca43f
 8004240:	016e3600 	.word	0x016e3600
 8004244:	01a6ab1f 	.word	0x01a6ab1f
 8004248:	01e84800 	.word	0x01e84800

0800424c <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f043 0201 	orr.w	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f023 0201 	bic.w	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <USB_SetCurrentMode>:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_ModeTypeDef mode) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	70fb      	strb	r3, [r7, #3]
	uint32_t ms = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]

	USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]

	if (mode == USB_HOST_MODE) {
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d115      	bne.n	80042de <USB_SetCurrentMode+0x4e>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 80042be:	200a      	movs	r0, #10
 80042c0:	f7fc fd4c 	bl	8000d5c <HAL_Delay>
			ms += 10U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	330a      	adds	r3, #10
 80042c8:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_HOST_MODE)
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f001 f93f 	bl	800554e <USB_GetMode>
 80042d0:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d01e      	beq.n	8004314 <USB_SetCurrentMode+0x84>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80042da:	d9f0      	bls.n	80042be <USB_SetCurrentMode+0x2e>
 80042dc:	e01a      	b.n	8004314 <USB_SetCurrentMode+0x84>
	} else if (mode == USB_DEVICE_MODE) {
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d115      	bne.n	8004310 <USB_SetCurrentMode+0x80>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 80042f0:	200a      	movs	r0, #10
 80042f2:	f7fc fd33 	bl	8000d5c <HAL_Delay>
			ms += 10U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	330a      	adds	r3, #10
 80042fa:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_DEVICE_MODE)
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 f926 	bl	800554e <USB_GetMode>
 8004302:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <USB_SetCurrentMode+0x84>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2bc7      	cmp	r3, #199	@ 0xc7
 800430c:	d9f0      	bls.n	80042f0 <USB_SetCurrentMode+0x60>
 800430e:	e001      	b.n	8004314 <USB_SetCurrentMode+0x84>
	} else {
		return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e005      	b.n	8004320 <USB_SetCurrentMode+0x90>
	}

	if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS) {
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2bc8      	cmp	r3, #200	@ 0xc8
 8004318:	d101      	bne.n	800431e <USB_SetCurrentMode+0x8e>
		return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <USB_SetCurrentMode+0x90>
	}

	return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <USB_DevInit>:
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 8004328:	b084      	sub	sp, #16
 800432a:	b580      	push	{r7, lr}
 800432c:	b086      	sub	sp, #24
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60fb      	str	r3, [r7, #12]
	uint32_t i;

	for (i = 0U; i < 15U; i++) {
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	e009      	b.n	800435c <USB_DevInit+0x34>
		USBx->DIEPTXF[i] = 0U;
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	3340      	adds	r3, #64	@ 0x40
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	2200      	movs	r2, #0
 8004354:	605a      	str	r2, [r3, #4]
	for (i = 0U; i < 15U; i++) {
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	3301      	adds	r3, #1
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b0e      	cmp	r3, #14
 8004360:	d9f2      	bls.n	8004348 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
	/* VBUS Sensing setup */
	if (cfg.vbus_sensing_enable == 0U) {
 8004362:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004366:	2b00      	cmp	r3, #0
 8004368:	d11c      	bne.n	80043a4 <USB_DevInit+0x7c>
		/*
		 * Disable HW VBUS sensing. VBUS is internally considered to be always
		 * at VBUS-Valid level (5V).
		 */
		USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004378:	f043 0302 	orr.w	r3, r3, #2
 800437c:	6053      	str	r3, [r2, #4]
		USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004382:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	639a      	str	r2, [r3, #56]	@ 0x38
		USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	639a      	str	r2, [r3, #56]	@ 0x38
		USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80043a2:	e00b      	b.n	80043bc <USB_DevInit+0x94>
	} else {
		/* Enable HW VBUS sensing */
		USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	639a      	str	r2, [r3, #56]	@ 0x38
		USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

	/* Restart the Phy Clock */
	USBx_PCGCCTL = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80043c2:	461a      	mov	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	6013      	str	r3, [r2, #0]

	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 80043c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10d      	bne.n	80043ec <USB_DevInit+0xc4>
		if (cfg.speed == USBD_HS_SPEED) {
 80043d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <USB_DevInit+0xba>
			/* Set Core speed to High speed mode */
			(void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043d8:	2100      	movs	r1, #0
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f968 	bl	80046b0 <USB_SetDevSpeed>
 80043e0:	e008      	b.n	80043f4 <USB_DevInit+0xcc>
		} else {
			/* Set Core speed to Full speed mode */
			(void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043e2:	2101      	movs	r1, #1
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f963 	bl	80046b0 <USB_SetDevSpeed>
 80043ea:	e003      	b.n	80043f4 <USB_DevInit+0xcc>
		}
	} else {
		/* Set Core speed to Full speed mode */
		(void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043ec:	2103      	movs	r1, #3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f95e 	bl	80046b0 <USB_SetDevSpeed>
	}

	/* Flush the FIFOs */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043f4:	2110      	movs	r1, #16
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8fa 	bl	80045f0 <USB_FlushTxFifo>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <USB_DevInit+0xde>
	{
		ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	75fb      	strb	r3, [r7, #23]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f924 	bl	8004654 <USB_FlushRxFifo>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <USB_DevInit+0xee>
		ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
	}

	/* Clear all pending Device Interrupts */
	USBx_DEVICE->DIEPMSK = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441c:	461a      	mov	r2, r3
 800441e:	2300      	movs	r3, #0
 8004420:	6113      	str	r3, [r2, #16]
	USBx_DEVICE->DOEPMSK = 0U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004428:	461a      	mov	r2, r3
 800442a:	2300      	movs	r3, #0
 800442c:	6153      	str	r3, [r2, #20]
	USBx_DEVICE->DAINTMSK = 0U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004434:	461a      	mov	r2, r3
 8004436:	2300      	movs	r3, #0
 8004438:	61d3      	str	r3, [r2, #28]

	for (i = 0U; i < cfg.dev_endpoints; i++) {
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e043      	b.n	80044c8 <USB_DevInit+0x1a0>
		if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004452:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004456:	d118      	bne.n	800448a <USB_DevInit+0x162>
				== USB_OTG_DIEPCTL_EPENA) {
			if (i == 0U) {
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <USB_DevInit+0x14c>
				USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800446a:	461a      	mov	r2, r3
 800446c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e013      	b.n	800449c <USB_DevInit+0x174>
			} else {
				USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004480:	461a      	mov	r2, r3
 8004482:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e008      	b.n	800449c <USB_DevInit+0x174>
						| USB_OTG_DIEPCTL_SNAK;
			}
		} else {
			USBx_INEP(i)->DIEPCTL = 0U;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6013      	str	r3, [r2, #0]
		}

		USBx_INEP(i)->DIEPTSIZ = 0U;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a8:	461a      	mov	r2, r3
 80044aa:	2300      	movs	r3, #0
 80044ac:	6113      	str	r3, [r2, #16]
		USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ba:	461a      	mov	r2, r3
 80044bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044c0:	6093      	str	r3, [r2, #8]
	for (i = 0U; i < cfg.dev_endpoints; i++) {
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3301      	adds	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044cc:	461a      	mov	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d3b5      	bcc.n	8004440 <USB_DevInit+0x118>
	}

	for (i = 0U; i < cfg.dev_endpoints; i++) {
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e043      	b.n	8004562 <USB_DevInit+0x23a>
		if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044f0:	d118      	bne.n	8004524 <USB_DevInit+0x1fc>
				== USB_OTG_DOEPCTL_EPENA) {
			if (i == 0U) {
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <USB_DevInit+0x1e6>
				USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	e013      	b.n	8004536 <USB_DevInit+0x20e>
			} else {
				USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451a:	461a      	mov	r2, r3
 800451c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e008      	b.n	8004536 <USB_DevInit+0x20e>
						| USB_OTG_DOEPCTL_SNAK;
			}
		} else {
			USBx_OUTEP(i)->DOEPCTL = 0U;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004530:	461a      	mov	r2, r3
 8004532:	2300      	movs	r3, #0
 8004534:	6013      	str	r3, [r2, #0]
		}

		USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004554:	461a      	mov	r2, r3
 8004556:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800455a:	6093      	str	r3, [r2, #8]
	for (i = 0U; i < cfg.dev_endpoints; i++) {
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	3301      	adds	r3, #1
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004566:	461a      	mov	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4293      	cmp	r3, r2
 800456c:	d3b5      	bcc.n	80044da <USB_DevInit+0x1b2>
	}

	USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800457c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004580:	6113      	str	r3, [r2, #16]

	/* Disable all interrupts. */
	USBx->GINTMSK = 0U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	619a      	str	r2, [r3, #24]

	/* Clear any pending interrupts */
	USBx->GINTSTS = 0xBFFFFFFFU;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800458e:	615a      	str	r2, [r3, #20]

	/* Enable the common interrupts */
	if (cfg.dma_enable == 0U) {
 8004590:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <USB_DevInit+0x27c>
		USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	619a      	str	r2, [r3, #24]
	}

	/* Enable interrupts matching to the Device mode ONLY */
	USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	4b10      	ldr	r3, [pc, #64]	@ (80045ec <USB_DevInit+0x2c4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6193      	str	r3, [r2, #24]
	USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
	USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IISOIXFRM |
	USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

	if (cfg.Sof_enable != 0U) {
 80045b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <USB_DevInit+0x29c>
		USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f043 0208 	orr.w	r2, r3, #8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	619a      	str	r2, [r3, #24]
	}

	if (cfg.vbus_sensing_enable == 1U) {
 80045c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d107      	bne.n	80045dc <USB_DevInit+0x2b4>
		USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045d4:	f043 0304 	orr.w	r3, r3, #4
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6193      	str	r3, [r2, #24]
	}

	return ret;
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045e8:	b004      	add	sp, #16
 80045ea:	4770      	bx	lr
 80045ec:	803c3800 	.word	0x803c3800

080045f0 <USB_FlushTxFifo>:
 * @param  num  FIFO number
 *         This parameter can be a value from 1 to 15
 15 means Flush all Tx FIFOs
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num) {
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3301      	adds	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800460a:	d901      	bls.n	8004610 <USB_FlushTxFifo+0x20>
			return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e01b      	b.n	8004648 <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	daf2      	bge.n	80045fe <USB_FlushTxFifo+0xe>

	/* Flush TX Fifo */
	count = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	019b      	lsls	r3, r3, #6
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3301      	adds	r3, #1
 800462c:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004634:	d901      	bls.n	800463a <USB_FlushTxFifo+0x4a>
			return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e006      	b.n	8004648 <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0320 	and.w	r3, r3, #32
			== USB_OTG_GRSTCTL_TXFFLSH);
 8004642:	2b20      	cmp	r3, #32
 8004644:	d0f0      	beq.n	8004628 <USB_FlushTxFifo+0x38>

	return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx) {
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800466c:	d901      	bls.n	8004672 <USB_FlushRxFifo+0x1e>
			return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e018      	b.n	80046a4 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	daf2      	bge.n	8004660 <USB_FlushRxFifo+0xc>

	/* Flush RX Fifo */
	count = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2210      	movs	r2, #16
 8004682:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004690:	d901      	bls.n	8004696 <USB_FlushRxFifo+0x42>
			return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e006      	b.n	80046a4 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0310 	and.w	r3, r3, #16
			== USB_OTG_GRSTCTL_RXFFLSH);
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d0f0      	beq.n	8004684 <USB_FlushRxFifo+0x30>

	return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <USB_SetDevSpeed>:
 *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
 *            @arg USB_OTG_SPEED_FULL: Full speed mode
 * @retval  Hal status
 */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t speed) {
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60fb      	str	r3, [r7, #12]

	USBx_DEVICE->DCFG |= speed;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]
	return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <USB_GetDevSpeed>:
 * @retval speed  device speed
 *          This parameter can be one of these values:
 *            @arg USBD_HS_SPEED: High speed mode
 *            @arg USBD_FS_SPEED: Full speed mode
 */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx) {
 80046e2:	b480      	push	{r7}
 80046e4:	b087      	sub	sp, #28
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	613b      	str	r3, [r7, #16]
	uint8_t speed;
	uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0306 	and.w	r3, r3, #6
 80046fa:	60fb      	str	r3, [r7, #12]

	if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ) {
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <USB_GetDevSpeed+0x26>
		speed = USBD_HS_SPEED;
 8004702:	2300      	movs	r3, #0
 8004704:	75fb      	strb	r3, [r7, #23]
 8004706:	e00a      	b.n	800471e <USB_GetDevSpeed+0x3c>
	} else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d002      	beq.n	8004714 <USB_GetDevSpeed+0x32>
			|| (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ)) {
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b06      	cmp	r3, #6
 8004712:	d102      	bne.n	800471a <USB_GetDevSpeed+0x38>
		speed = USBD_FS_SPEED;
 8004714:	2302      	movs	r3, #2
 8004716:	75fb      	strb	r3, [r7, #23]
 8004718:	e001      	b.n	800471e <USB_GetDevSpeed+0x3c>
	} else {
		speed = 0xFU;
 800471a:	230f      	movs	r3, #15
 800471c:	75fb      	strb	r3, [r7, #23]
	}

	return speed;
 800471e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004720:	4618      	mov	r0, r3
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_ActivateEndpoint>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	60bb      	str	r3, [r7, #8]

	if (ep->is_in == 1U) {
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d13a      	bne.n	80047be <USB_ActivateEndpoint+0x92>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800474e:	69da      	ldr	r2, [r3, #28]
				& (uint32_t) (1UL << (ep->num & EP_ADDR_MSK));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	2101      	movs	r1, #1
 800475a:	fa01 f303 	lsl.w	r3, r1, r3
 800475e:	b29b      	uxth	r3, r3
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM
 8004760:	68f9      	ldr	r1, [r7, #12]
 8004762:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004766:	4313      	orrs	r3, r2
 8004768:	61cb      	str	r3, [r1, #28]

		if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d155      	bne.n	800482c <USB_ActivateEndpoint+0x100>
			USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f3c3 010a 	ubfx	r1, r3, #0, #11
					| ((uint32_t) ep->type << 18) | (epnum << 22) |
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	791b      	ldrb	r3, [r3, #4]
 800479a:	049b      	lsls	r3, r3, #18
 800479c:	4319      	orrs	r1, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	059b      	lsls	r3, r3, #22
 80047a2:	430b      	orrs	r3, r1
			USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	e036      	b.n	800482c <USB_ActivateEndpoint+0x100>
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DIEPCTL_USBAEP;
		}
	} else {
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c4:	69da      	ldr	r2, [r3, #28]
				& ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	2101      	movs	r1, #1
 80047d0:	fa01 f303 	lsl.w	r3, r1, r3
 80047d4:	041b      	lsls	r3, r3, #16
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047dc:	4313      	orrs	r3, r2
 80047de:	61cb      	str	r3, [r1, #28]

		if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11a      	bne.n	800482c <USB_ActivateEndpoint+0x100>
			USBx_OUTEP(epnum)->DOEPCTL |=
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004802:	681a      	ldr	r2, [r3, #0]
					(ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f3c3 010a 	ubfx	r1, r3, #0, #11
							| ((uint32_t) ep->type << 18) |
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	791b      	ldrb	r3, [r3, #4]
 8004810:	049b      	lsls	r3, r3, #18
 8004812:	430b      	orrs	r3, r1
			USBx_OUTEP(epnum)->DOEPCTL |=
 8004814:	4313      	orrs	r3, r2
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800482a:	6013      	str	r3, [r2, #0]
							USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
							USB_OTG_DOEPCTL_USBAEP;
		}
	}
	return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <USB_DeactivateEndpoint>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	60bb      	str	r3, [r7, #8]

	/* Read DEPCTLn register */
	if (ep->is_in == 1U) {
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	785b      	ldrb	r3, [r3, #1]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d161      	bne.n	800491c <USB_DeactivateEndpoint+0xe0>
		if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800486a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800486e:	d11f      	bne.n	80048b0 <USB_DeactivateEndpoint+0x74>
				== USB_OTG_DIEPCTL_EPENA) {
			USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800488a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800488e:	6013      	str	r3, [r2, #0]
			USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048ae:	6013      	str	r3, [r2, #0]
		}

		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
				& (uint32_t) (1UL << (ep->num & EP_ADDR_MSK)));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	2101      	movs	r1, #1
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	b29b      	uxth	r3, r3
		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM
 80048c8:	43db      	mvns	r3, r3
 80048ca:	68f9      	ldr	r1, [r7, #12]
 80048cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048d0:	4013      	ands	r3, r2
 80048d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048da:	69da      	ldr	r2, [r3, #28]
				& (uint32_t) (1UL << (ep->num & EP_ADDR_MSK)));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	2101      	movs	r1, #1
 80048e6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ea:	b29b      	uxth	r3, r3
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM
 80048ec:	43db      	mvns	r3, r3
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048f4:	4013      	ands	r3, r2
 80048f6:	61cb      	str	r3, [r1, #28]
		USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	0159      	lsls	r1, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	440b      	add	r3, r1
 800490e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004912:	4619      	mov	r1, r3
 8004914:	4b35      	ldr	r3, [pc, #212]	@ (80049ec <USB_DeactivateEndpoint+0x1b0>)
 8004916:	4013      	ands	r3, r2
 8004918:	600b      	str	r3, [r1, #0]
 800491a:	e060      	b.n	80049de <USB_DeactivateEndpoint+0x1a2>
		USB_OTG_DIEPCTL_MPSIZ |
		USB_OTG_DIEPCTL_TXFNUM |
		USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
		USB_OTG_DIEPCTL_EPTYP);
	} else {
		if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800492e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004932:	d11f      	bne.n	8004974 <USB_DeactivateEndpoint+0x138>
				== USB_OTG_DOEPCTL_EPENA) {
			USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800494e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004952:	6013      	str	r3, [r2, #0]
			USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800496e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004972:	6013      	str	r3, [r2, #0]
		}

		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800497a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
				& ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	2101      	movs	r1, #1
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	041b      	lsls	r3, r3, #16
		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM
 800498c:	43db      	mvns	r3, r3
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004994:	4013      	ands	r3, r2
 8004996:	63cb      	str	r3, [r1, #60]	@ 0x3c
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800499e:	69da      	ldr	r2, [r3, #28]
				& ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	2101      	movs	r1, #1
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	041b      	lsls	r3, r3, #16
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM
 80049b0:	43db      	mvns	r3, r3
 80049b2:	68f9      	ldr	r1, [r7, #12]
 80049b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049b8:	4013      	ands	r3, r2
 80049ba:	61cb      	str	r3, [r1, #28]
		USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	0159      	lsls	r1, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	440b      	add	r3, r1
 80049d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d6:	4619      	mov	r1, r3
 80049d8:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <USB_DeactivateEndpoint+0x1b4>)
 80049da:	4013      	ands	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
		USB_OTG_DOEPCTL_MPSIZ |
		USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
		USB_OTG_DOEPCTL_EPTYP);
	}

	return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	ec337800 	.word	0xec337800
 80049f0:	eff37800 	.word	0xeff37800

080049f4 <USB_EPStartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_EPTypeDef *ep, uint8_t dma) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	@ 0x28
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	71fb      	strb	r3, [r7, #7]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	61fb      	str	r3, [r7, #28]
	uint32_t epnum = (uint32_t) ep->num;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	61bb      	str	r3, [r7, #24]
	uint16_t pktcnt;

	/* IN endpoint */
	if (ep->is_in == 1U) {
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	f040 817f 	bne.w	8004d14 <USB_EPStartXfer+0x320>
		/* Zero Length Packet? */
		if (ep->xfer_len == 0U) {
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d132      	bne.n	8004a84 <USB_EPStartXfer+0x90>
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a38:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a3c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a40:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |=
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	0151      	lsls	r1, r2, #5
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	440a      	add	r2, r1
 8004a58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a60:	6113      	str	r3, [r2, #16]
					(USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a7c:	0cdb      	lsrs	r3, r3, #19
 8004a7e:	04db      	lsls	r3, r3, #19
 8004a80:	6113      	str	r3, [r2, #16]
 8004a82:	e097      	b.n	8004bb4 <USB_EPStartXfer+0x1c0>
			/* Program the transfer size and packet count
			 * as follows: xfersize = N * maxpacket +
			 * short_packet pktcnt = N + (short_packet
			 * exist ? 1 : 0)
			 */
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	0151      	lsls	r1, r2, #5
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a9e:	0cdb      	lsrs	r3, r3, #19
 8004aa0:	04db      	lsls	r3, r3, #19
 8004aa2:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004abe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ac2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ac6:	6113      	str	r3, [r2, #16]

			if (epnum == 0U) {
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d11a      	bne.n	8004b04 <USB_EPStartXfer+0x110>
				if (ep->xfer_len > ep->maxpacket) {
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d903      	bls.n	8004ae2 <USB_EPStartXfer+0xee>
					ep->xfer_len = ep->maxpacket;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	611a      	str	r2, [r3, #16]
				}

				USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004afc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b00:	6113      	str	r3, [r2, #16]
 8004b02:	e044      	b.n	8004b8e <USB_EPStartXfer+0x19a>
						& (1U << 19));
			} else {
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	1e5a      	subs	r2, r3, #1
						/ ep->maxpacket);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 8004b18:	82fb      	strh	r3, [r7, #22]
				USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b26:	691a      	ldr	r2, [r3, #16]
						& (pktcnt << 19));
 8004b28:	8afb      	ldrh	r3, [r7, #22]
 8004b2a:	04d9      	lsls	r1, r3, #19
 8004b2c:	4ba4      	ldr	r3, [pc, #656]	@ (8004dc0 <USB_EPStartXfer+0x3cc>)
 8004b2e:	400b      	ands	r3, r1
				USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT
 8004b30:	69b9      	ldr	r1, [r7, #24]
 8004b32:	0148      	lsls	r0, r1, #5
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	4401      	add	r1, r0
 8004b38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	610b      	str	r3, [r1, #16]

				if (ep->type == EP_TYPE_ISOC) {
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d122      	bne.n	8004b8e <USB_EPStartXfer+0x19a>
					USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b62:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004b66:	6113      	str	r3, [r2, #16]
					USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b74:	691a      	ldr	r2, [r3, #16]
							& (pktcnt << 29));
 8004b76:	8afb      	ldrh	r3, [r7, #22]
 8004b78:	075b      	lsls	r3, r3, #29
 8004b7a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
					USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT
 8004b7e:	69b9      	ldr	r1, [r7, #24]
 8004b80:	0148      	lsls	r0, r1, #5
 8004b82:	69f9      	ldr	r1, [r7, #28]
 8004b84:	4401      	add	r1, r0
 8004b86:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	610b      	str	r3, [r1, #16]
				}
			}

			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9a:	691a      	ldr	r2, [r3, #16]
					& ep->xfer_len);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	0148      	lsls	r0, r1, #5
 8004ba8:	69f9      	ldr	r1, [r7, #28]
 8004baa:	4401      	add	r1, r0
 8004bac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	610b      	str	r3, [r1, #16]
		}

		if (dma == 1U) {
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d14b      	bne.n	8004c52 <USB_EPStartXfer+0x25e>
			if ((uint32_t) ep->dma_addr != 0U) {
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <USB_EPStartXfer+0x1e2>
				USBx_INEP(epnum)->DIEPDMA = (uint32_t) (ep->dma_addr);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	6153      	str	r3, [r2, #20]
			}

			if (ep->type == EP_TYPE_ISOC) {
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	791b      	ldrb	r3, [r3, #4]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d128      	bne.n	8004c30 <USB_EPStartXfer+0x23c>
				if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d110      	bne.n	8004c10 <USB_EPStartXfer+0x21c>
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e00f      	b.n	8004c30 <USB_EPStartXfer+0x23c>
				} else {
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c2e:	6013      	str	r3, [r2, #0]
				}
			}

			/* EP enable, IN data in FIFO */
			USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e166      	b.n	8004f20 <USB_EPStartXfer+0x52c>
					| USB_OTG_DIEPCTL_EPENA);
		} else {
			/* EP enable, IN data in FIFO */
			USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c6c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c70:	6013      	str	r3, [r2, #0]
					| USB_OTG_DIEPCTL_EPENA);

			if (ep->type != EP_TYPE_ISOC) {
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	791b      	ldrb	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d015      	beq.n	8004ca6 <USB_EPStartXfer+0x2b2>
				/* Enable the Tx FIFO Empty Interrupt for this EP */
				if (ep->xfer_len > 0U) {
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 814e 	beq.w	8004f20 <USB_EPStartXfer+0x52c>
					USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	69f9      	ldr	r1, [r7, #28]
 8004c9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	634b      	str	r3, [r1, #52]	@ 0x34
 8004ca4:	e13c      	b.n	8004f20 <USB_EPStartXfer+0x52c>
				}
			} else {
				if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d110      	bne.n	8004cd8 <USB_EPStartXfer+0x2e4>
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e00f      	b.n	8004cf8 <USB_EPStartXfer+0x304>
				} else {
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf6:	6013      	str	r3, [r2, #0]
				}

				(void) USB_WritePacket(USBx, ep->xfer_buff, ep->num,
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	68d9      	ldr	r1, [r3, #12]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	781a      	ldrb	r2, [r3, #0]
						(uint16_t) ep->xfer_len, dma);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	691b      	ldr	r3, [r3, #16]
				(void) USB_WritePacket(USBx, ep->xfer_buff, ep->num,
 8004d04:	b298      	uxth	r0, r3
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f9b9 	bl	8005084 <USB_WritePacket>
 8004d12:	e105      	b.n	8004f20 <USB_EPStartXfer+0x52c>
	{
		/* Program the transfer size and packet count as follows:
		 * pktcnt = N
		 * xfersize = N * maxpacket
		 */
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d2e:	0cdb      	lsrs	r3, r3, #19
 8004d30:	04db      	lsls	r3, r3, #19
 8004d32:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d4e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d52:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d56:	6113      	str	r3, [r2, #16]

		if (epnum == 0U) {
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d132      	bne.n	8004dc4 <USB_EPStartXfer+0x3d0>
			if (ep->xfer_len > 0U) {
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <USB_EPStartXfer+0x37a>
				ep->xfer_len = ep->maxpacket;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	611a      	str	r2, [r3, #16]
			}

			/* Store transfer size, for EP0 this is equal to endpoint max packet size */
			ep->xfer_size = ep->maxpacket;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	621a      	str	r2, [r3, #32]

			USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d82:	691a      	ldr	r2, [r3, #16]
					& ep->xfer_size);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
			USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8004d8c:	69b9      	ldr	r1, [r7, #24]
 8004d8e:	0148      	lsls	r0, r1, #5
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	4401      	add	r1, r0
 8004d94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	610b      	str	r3, [r1, #16]
			USBx_OUTEP(epnum)->DOEPTSIZ |=
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	0151      	lsls	r1, r2, #5
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	440a      	add	r2, r1
 8004db2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004db6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dba:	6113      	str	r3, [r2, #16]
 8004dbc:	e062      	b.n	8004e84 <USB_EPStartXfer+0x490>
 8004dbe:	bf00      	nop
 8004dc0:	1ff80000 	.word	0x1ff80000
					(USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
		} else {
			if (ep->xfer_len == 0U) {
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d123      	bne.n	8004e14 <USB_EPStartXfer+0x420>
				USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd8:	691a      	ldr	r2, [r3, #16]
						& ep->maxpacket);
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
				USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8004de2:	69b9      	ldr	r1, [r7, #24]
 8004de4:	0148      	lsls	r0, r1, #5
 8004de6:	69f9      	ldr	r1, [r7, #28]
 8004de8:	4401      	add	r1, r0
 8004dea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004dee:	4313      	orrs	r3, r2
 8004df0:	610b      	str	r3, [r1, #16]
				USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e10:	6113      	str	r3, [r2, #16]
 8004e12:	e037      	b.n	8004e84 <USB_EPStartXfer+0x490>
						& (1U << 19));
			} else {
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	1e5a      	subs	r2, r3, #1
						/ ep->maxpacket);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 8004e28:	82fb      	strh	r3, [r7, #22]
				ep->xfer_size = ep->maxpacket * pktcnt;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	8afa      	ldrh	r2, [r7, #22]
 8004e30:	fb03 f202 	mul.w	r2, r3, r2
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	621a      	str	r2, [r3, #32]

				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e44:	691a      	ldr	r2, [r3, #16]
						& ((uint32_t) pktcnt << 19);
 8004e46:	8afb      	ldrh	r3, [r7, #22]
 8004e48:	04d9      	lsls	r1, r3, #19
 8004e4a:	4b38      	ldr	r3, [pc, #224]	@ (8004f2c <USB_EPStartXfer+0x538>)
 8004e4c:	400b      	ands	r3, r1
				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT
 8004e4e:	69b9      	ldr	r1, [r7, #24]
 8004e50:	0148      	lsls	r0, r1, #5
 8004e52:	69f9      	ldr	r1, [r7, #28]
 8004e54:	4401      	add	r1, r0
 8004e56:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	610b      	str	r3, [r1, #16]
				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6a:	691a      	ldr	r2, [r3, #16]
						& ep->xfer_size;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ
 8004e74:	69b9      	ldr	r1, [r7, #24]
 8004e76:	0148      	lsls	r0, r1, #5
 8004e78:	69f9      	ldr	r1, [r7, #28]
 8004e7a:	4401      	add	r1, r0
 8004e7c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e80:	4313      	orrs	r3, r2
 8004e82:	610b      	str	r3, [r1, #16]
			}
		}

		if (dma == 1U) {
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d10d      	bne.n	8004ea6 <USB_EPStartXfer+0x4b2>
			if ((uint32_t) ep->xfer_buff != 0U) {
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <USB_EPStartXfer+0x4b2>
				USBx_OUTEP(epnum)->DOEPDMA = (uint32_t) (ep->xfer_buff);
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	68d9      	ldr	r1, [r3, #12]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea2:	460a      	mov	r2, r1
 8004ea4:	615a      	str	r2, [r3, #20]
			}
		}

		if (ep->type == EP_TYPE_ISOC) {
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	791b      	ldrb	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d128      	bne.n	8004f00 <USB_EPStartXfer+0x50c>
			if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d110      	bne.n	8004ee0 <USB_EPStartXfer+0x4ec>
				USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ed8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e00f      	b.n	8004f00 <USB_EPStartXfer+0x50c>
			} else {
				USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	6013      	str	r3, [r2, #0]
			}
		}
		/* EP enable */
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	0151      	lsls	r1, r2, #5
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	440a      	add	r2, r1
 8004f16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f1e:	6013      	str	r3, [r2, #0]
				| USB_OTG_DOEPCTL_EPENA);
	}

	return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	1ff80000 	.word	0x1ff80000

08004f30 <USB_EPStopXfer>:
 * @param  USBx  usb device instance
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_EPTypeDef *ep) {
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef ret = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	613b      	str	r3, [r7, #16]

	/* IN endpoint */
	if (ep->is_in == 1U) {
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d14a      	bne.n	8004fe4 <USB_EPStopXfer+0xb4>
		/* EP enable, IN data in FIFO */
		if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f66:	f040 8086 	bne.w	8005076 <USB_EPStopXfer+0x146>
				== USB_OTG_DIEPCTL_EPENA) {
			USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	7812      	ldrb	r2, [r2, #0]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f8c:	6013      	str	r3, [r2, #0]
			USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fb0:	6013      	str	r3, [r2, #0]

			do {
				count++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]

				if (count > 10000U) {
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d902      	bls.n	8004fc8 <USB_EPStopXfer+0x98>
					ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
					break;
 8004fc6:	e056      	b.n	8005076 <USB_EPStopXfer+0x146>
				}
			} while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_DIEPCTL_EPENA);
 8004fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fe0:	d0e7      	beq.n	8004fb2 <USB_EPStopXfer+0x82>
 8004fe2:	e048      	b.n	8005076 <USB_EPStopXfer+0x146>
		}
	} else /* OUT endpoint */
	{
		if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ffc:	d13b      	bne.n	8005076 <USB_EPStopXfer+0x146>
				== USB_OTG_DOEPCTL_EPENA) {
			USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	7812      	ldrb	r2, [r2, #0]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800501c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005020:	6013      	str	r3, [r2, #0]
			USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	7812      	ldrb	r2, [r2, #0]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005040:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005044:	6013      	str	r3, [r2, #0]

			do {
				count++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3301      	adds	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]

				if (count > 10000U) {
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005052:	4293      	cmp	r3, r2
 8005054:	d902      	bls.n	800505c <USB_EPStopXfer+0x12c>
					ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
					break;
 800505a:	e00c      	b.n	8005076 <USB_EPStopXfer+0x146>
				}
			} while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_DOEPCTL_EPENA);
 8005070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005074:	d0e7      	beq.n	8005046 <USB_EPStopXfer+0x116>
		}
	}

	return ret;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USB_WritePacket>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 8005084:	b480      	push	{r7}
 8005086:	b089      	sub	sp, #36	@ 0x24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	460b      	mov	r3, r1
 8005094:	71fb      	strb	r3, [r7, #7]
 8005096:	4613      	mov	r3, r2
 8005098:	80bb      	strh	r3, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	617b      	str	r3, [r7, #20]
	uint8_t *pSrc = src;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	61fb      	str	r3, [r7, #28]
	uint32_t count32b;
	uint32_t i;

	if (dma == 0U) {
 80050a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d123      	bne.n	80050f2 <USB_WritePacket+0x6e>
		count32b = ((uint32_t) len + 3U) / 4U;
 80050aa:	88bb      	ldrh	r3, [r7, #4]
 80050ac:	3303      	adds	r3, #3
 80050ae:	089b      	lsrs	r3, r3, #2
 80050b0:	613b      	str	r3, [r7, #16]
		for (i = 0U; i < count32b; i++) {
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	e018      	b.n	80050ea <USB_WritePacket+0x66>
			USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	031a      	lsls	r2, r3, #12
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050c4:	461a      	mov	r2, r3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6013      	str	r3, [r2, #0]
			pSrc++;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	3301      	adds	r3, #1
 80050d0:	61fb      	str	r3, [r7, #28]
			pSrc++;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
			pSrc++;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3301      	adds	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
			pSrc++;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	3301      	adds	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
		for (i = 0U; i < count32b; i++) {
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	3301      	adds	r3, #1
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d3e2      	bcc.n	80050b8 <USB_WritePacket+0x34>
		}
	}

	return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3724      	adds	r7, #36	@ 0x24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USB_ReadPacket>:
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void* USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest,
		uint16_t len) {
 8005100:	b480      	push	{r7}
 8005102:	b08b      	sub	sp, #44	@ 0x2c
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	61bb      	str	r3, [r7, #24]
	uint8_t *pDest = dest;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t pData;
	uint32_t i;
	uint32_t count32b = (uint32_t) len >> 2U;
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	089b      	lsrs	r3, r3, #2
 800511a:	b29b      	uxth	r3, r3
 800511c:	617b      	str	r3, [r7, #20]
	uint16_t remaining_bytes = len % 4U;
 800511e:	88fb      	ldrh	r3, [r7, #6]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	83fb      	strh	r3, [r7, #30]

	for (i = 0U; i < count32b; i++) {
 8005126:	2300      	movs	r3, #0
 8005128:	623b      	str	r3, [r7, #32]
 800512a:	e014      	b.n	8005156 <USB_ReadPacket+0x56>
		__UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	601a      	str	r2, [r3, #0]
		pDest++;
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	3301      	adds	r3, #1
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	3301      	adds	r3, #1
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	3301      	adds	r3, #1
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	3301      	adds	r3, #1
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0U; i < count32b; i++) {
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	3301      	adds	r3, #1
 8005154:	623b      	str	r3, [r7, #32]
 8005156:	6a3a      	ldr	r2, [r7, #32]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	429a      	cmp	r2, r3
 800515c:	d3e6      	bcc.n	800512c <USB_ReadPacket+0x2c>
	}

	/* When Number of data is not word aligned, read the remaining byte */
	if (remaining_bytes != 0U) {
 800515e:	8bfb      	ldrh	r3, [r7, #30]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01e      	beq.n	80051a2 <USB_ReadPacket+0xa2>
		i = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	623b      	str	r3, [r7, #32]
		__UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800516e:	461a      	mov	r2, r3
 8005170:	f107 0310 	add.w	r3, r7, #16
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	601a      	str	r2, [r3, #0]

		do {
			*(uint8_t*) pDest = (uint8_t) (pData >> (8U * (uint8_t) (i)));
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
 8005184:	b2da      	uxtb	r2, r3
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	701a      	strb	r2, [r3, #0]
			i++;
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	3301      	adds	r3, #1
 800518e:	623b      	str	r3, [r7, #32]
			pDest++;
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	3301      	adds	r3, #1
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
			remaining_bytes--;
 8005196:	8bfb      	ldrh	r3, [r7, #30]
 8005198:	3b01      	subs	r3, #1
 800519a:	83fb      	strh	r3, [r7, #30]
		} while (remaining_bytes != 0U);
 800519c:	8bfb      	ldrh	r3, [r7, #30]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ea      	bne.n	8005178 <USB_ReadPacket+0x78>
	}

	return ((void*) pDest);
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	372c      	adds	r7, #44	@ 0x2c
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <USB_EPSetStall>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	60bb      	str	r3, [r7, #8]

	if (ep->is_in == 1U) {
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d12c      	bne.n	8005226 <USB_EPSetStall+0x76>
		if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	db12      	blt.n	8005204 <USB_EPSetStall+0x54>
				&& (epnum != 0U)) {
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00f      	beq.n	8005204 <USB_EPSetStall+0x54>
			USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005202:	6013      	str	r3, [r2, #0]
		}
		USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800521e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	e02b      	b.n	800527e <USB_EPSetStall+0xce>
	} else {
		if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	db12      	blt.n	800525e <USB_EPSetStall+0xae>
				&& (epnum != 0U)) {
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00f      	beq.n	800525e <USB_EPSetStall+0xae>
			USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	0151      	lsls	r1, r2, #5
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	440a      	add	r2, r1
 8005254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005258:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800525c:	6013      	str	r3, [r2, #0]
		}
		USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005278:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800527c:	6013      	str	r3, [r2, #0]
	}

	return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USB_EPClearStall>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	60bb      	str	r3, [r7, #8]

	if (ep->is_in == 1U) {
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d128      	bne.n	80052fa <USB_EPClearStall+0x6e>
		USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052c6:	6013      	str	r3, [r2, #0]
		if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	791b      	ldrb	r3, [r3, #4]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d003      	beq.n	80052d8 <USB_EPClearStall+0x4c>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d138      	bne.n	800534a <USB_EPClearStall+0xbe>
			USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	e027      	b.n	800534a <USB_EPClearStall+0xbe>
		}
	} else {
		USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005314:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005318:	6013      	str	r3, [r2, #0]
		if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	791b      	ldrb	r3, [r3, #4]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d003      	beq.n	800532a <USB_EPClearStall+0x9e>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	791b      	ldrb	r3, [r3, #4]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d10f      	bne.n	800534a <USB_EPClearStall+0xbe>
			USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005348:	6013      	str	r3, [r2, #0]
		}
	}
	return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_SetDevAddress>:
 * @param  address  new device address to be assigned
 *          This parameter can be a value from 0 to 255
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t address) {
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60fb      	str	r3, [r7, #12]

	USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005376:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800537a:	6013      	str	r3, [r2, #0]
	USBx_DEVICE->DCFG |= ((uint32_t) address << 4) & USB_OTG_DCFG_DAD;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800538c:	68f9      	ldr	r1, [r7, #12]
 800538e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

	return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <USB_DevConnect>:
/**
 * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx) {
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

	/* In case phy is stopped, ensure to ungate and restore the phy CLK */
	USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80053be:	f023 0303 	bic.w	r3, r3, #3
 80053c2:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053d2:	f023 0302 	bic.w	r3, r3, #2
 80053d6:	6053      	str	r3, [r2, #4]

	return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USB_DevDisconnect>:
/**
 * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx) {
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60fb      	str	r3, [r7, #12]

	/* In case phy is stopped, ensure to ungate and restore the phy CLK */
	USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005400:	f023 0303 	bic.w	r3, r3, #3
 8005404:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005414:	f043 0302 	orr.w	r3, r3, #2
 8005418:	6053      	str	r3, [r2, #4]

	return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval USB Global Interrupt status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx) {
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;

	tmpreg = USBx->GINTSTS;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	60fb      	str	r3, [r7, #12]
	tmpreg &= USBx->GINTMSK;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4013      	ands	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

	return tmpreg;
 8005440:	68fb      	ldr	r3, [r7, #12]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <USB_ReadDevAllOutEpInterrupt>:
/**
 * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
 * @param  USBx  Selected device
 * @retval USB Device OUT EP interrupt status
 */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 800544e:	b480      	push	{r7}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_DEVICE->DAINT;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_DEVICE->DAINTMSK;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	4013      	ands	r3, r2
 8005470:	60bb      	str	r3, [r7, #8]

	return ((tmpreg & 0xffff0000U) >> 16);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	0c1b      	lsrs	r3, r3, #16
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <USB_ReadDevAllInEpInterrupt>:
/**
 * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 * @param  USBx  Selected device
 * @retval USB Device IN EP interrupt status
 */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_DEVICE->DAINT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_DEVICE->DAINTMSK;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	4013      	ands	r3, r2
 80054a4:	60bb      	str	r3, [r7, #8]

	return ((tmpreg & 0xFFFFU));
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	b29b      	uxth	r3, r3
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <USB_ReadDevOutEPInterrupt>:
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device OUT EP Interrupt register
 */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t epnum) {
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	460b      	mov	r3, r1
 80054c0:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_DEVICE->DOEPMSK;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	4013      	ands	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 80054e4:	68bb      	ldr	r3, [r7, #8]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <USB_ReadDevInEPInterrupt>:
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device IN EP Interrupt register
 */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t epnum) {
 80054f2:	b480      	push	{r7}
 80054f4:	b087      	sub	sp, #28
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	460b      	mov	r3, r1
 80054fc:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg;
	uint32_t msk;
	uint32_t emp;

	msk = USBx_DEVICE->DIEPMSK;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	613b      	str	r3, [r7, #16]
	emp = USBx_DEVICE->DIEPEMPMSK;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005514:	60fb      	str	r3, [r7, #12]
	msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	f003 030f 	and.w	r3, r3, #15
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	fa22 f303 	lsr.w	r3, r2, r3
 8005522:	01db      	lsls	r3, r3, #7
 8005524:	b2db      	uxtb	r3, r3
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
	tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4013      	ands	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 8005540:	68bb      	ldr	r3, [r7, #8]
}
 8005542:	4618      	mov	r0, r3
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx) {
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
	return ((USBx->GINTSTS) & 0x1U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f003 0301 	and.w	r3, r3, #1
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <USB_ActivateSetup>:
/**
 * @brief  Activate EP0 for Setup transactions
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx) {
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]

	/* Set the MPS of the IN EP0 to 64 bytes */
	USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005584:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005588:	f023 0307 	bic.w	r3, r3, #7
 800558c:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800559c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055a0:	6053      	str	r3, [r2, #4]

	return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_EP0_OutStart>:
 *           1 : DMA feature used
 * @param  psetup  pointer to setup packet
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t dma, const uint8_t *psetup) {
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	460b      	mov	r3, r1
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	72fb      	strb	r3, [r7, #11]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	617b      	str	r3, [r7, #20]
	uint32_t gSNPSiD = *(__IO const uint32_t*) (&USBx->CID + 0x1U);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	333c      	adds	r3, #60	@ 0x3c
 80055c6:	3304      	adds	r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	613b      	str	r3, [r7, #16]

	if (gSNPSiD > USB_OTG_CORE_ID_300A) {
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4a26      	ldr	r2, [pc, #152]	@ (8005668 <USB_EP0_OutStart+0xb8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d90a      	bls.n	80055ea <USB_EP0_OutStart+0x3a>
		if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055e4:	d101      	bne.n	80055ea <USB_EP0_OutStart+0x3a>
				== USB_OTG_DOEPCTL_EPENA) {
			return HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e037      	b.n	800565a <USB_EP0_OutStart+0xaa>
		}
	}

	USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f0:	461a      	mov	r2, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005604:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005608:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005618:	f043 0318 	orr.w	r3, r3, #24
 800561c:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_STUPCNT;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800562c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005630:	6113      	str	r3, [r2, #16]

	if (dma == 1U) {
 8005632:	7afb      	ldrb	r3, [r7, #11]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10f      	bne.n	8005658 <USB_EP0_OutStart+0xa8>
		USBx_OUTEP(0U)->DOEPDMA = (uint32_t) psetup;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563e:	461a      	mov	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6153      	str	r3, [r2, #20]
		/* EP enable */
		USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005652:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005656:	6013      	str	r3, [r2, #0]
				| USB_OTG_DOEPCTL_USBAEP;
	}

	return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	4f54300a 	.word	0x4f54300a

0800566c <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx) {
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005684:	d901      	bls.n	800568a <USB_CoreReset+0x1e>
			return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e01b      	b.n	80056c2 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	daf2      	bge.n	8005678 <USB_CoreReset+0xc>

	/* Core Soft Reset */
	count = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f043 0201 	orr.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	611a      	str	r2, [r3, #16]

	do {
		count++;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3301      	adds	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056ae:	d901      	bls.n	80056b4 <USB_CoreReset+0x48>
			return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e006      	b.n	80056c2 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d0f0      	beq.n	80056a2 <USB_CoreReset+0x36>

	return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80056e0:	f002 fcbc 	bl	800805c <USBD_static_malloc>
 80056e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	32b0      	adds	r2, #176	@ 0xb0
 80056f6:	2100      	movs	r1, #0
 80056f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056fc:	2302      	movs	r3, #2
 80056fe:	e0d4      	b.n	80058aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005700:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005704:	2100      	movs	r1, #0
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f002 fcec 	bl	80080e4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	32b0      	adds	r2, #176	@ 0xb0
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	32b0      	adds	r2, #176	@ 0xb0
 8005726:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7c1b      	ldrb	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d138      	bne.n	80057aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005738:	4b5e      	ldr	r3, [pc, #376]	@ (80058b4 <USBD_CDC_Init+0x1e4>)
 800573a:	7819      	ldrb	r1, [r3, #0]
 800573c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005740:	2202      	movs	r2, #2
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f002 fb67 	bl	8007e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005748:	4b5a      	ldr	r3, [pc, #360]	@ (80058b4 <USBD_CDC_Init+0x1e4>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	3324      	adds	r3, #36	@ 0x24
 800575e:	2201      	movs	r2, #1
 8005760:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005762:	4b55      	ldr	r3, [pc, #340]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 8005764:	7819      	ldrb	r1, [r3, #0]
 8005766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800576a:	2202      	movs	r2, #2
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f002 fb52 	bl	8007e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005772:	4b51      	ldr	r3, [pc, #324]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 020f 	and.w	r2, r3, #15
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800578a:	2201      	movs	r2, #1
 800578c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800578e:	4b4b      	ldr	r3, [pc, #300]	@ (80058bc <USBD_CDC_Init+0x1ec>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	f003 020f 	and.w	r2, r3, #15
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	3326      	adds	r3, #38	@ 0x26
 80057a4:	2210      	movs	r2, #16
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e035      	b.n	8005816 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80057aa:	4b42      	ldr	r3, [pc, #264]	@ (80058b4 <USBD_CDC_Init+0x1e4>)
 80057ac:	7819      	ldrb	r1, [r3, #0]
 80057ae:	2340      	movs	r3, #64	@ 0x40
 80057b0:	2202      	movs	r2, #2
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f002 fb2f 	bl	8007e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057b8:	4b3e      	ldr	r3, [pc, #248]	@ (80058b4 <USBD_CDC_Init+0x1e4>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 020f 	and.w	r2, r3, #15
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	3324      	adds	r3, #36	@ 0x24
 80057ce:	2201      	movs	r2, #1
 80057d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80057d2:	4b39      	ldr	r3, [pc, #228]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 80057d4:	7819      	ldrb	r1, [r3, #0]
 80057d6:	2340      	movs	r3, #64	@ 0x40
 80057d8:	2202      	movs	r2, #2
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f002 fb1b 	bl	8007e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057e0:	4b35      	ldr	r3, [pc, #212]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	f003 020f 	and.w	r2, r3, #15
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80057f8:	2201      	movs	r2, #1
 80057fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057fc:	4b2f      	ldr	r3, [pc, #188]	@ (80058bc <USBD_CDC_Init+0x1ec>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f003 020f 	and.w	r2, r3, #15
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	3326      	adds	r3, #38	@ 0x26
 8005812:	2210      	movs	r2, #16
 8005814:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005816:	4b29      	ldr	r3, [pc, #164]	@ (80058bc <USBD_CDC_Init+0x1ec>)
 8005818:	7819      	ldrb	r1, [r3, #0]
 800581a:	2308      	movs	r3, #8
 800581c:	2203      	movs	r2, #3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f002 faf9 	bl	8007e16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005824:	4b25      	ldr	r3, [pc, #148]	@ (80058bc <USBD_CDC_Init+0x1ec>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f003 020f 	and.w	r2, r3, #15
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	3324      	adds	r3, #36	@ 0x24
 800583a:	2201      	movs	r2, #1
 800583c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	33b0      	adds	r3, #176	@ 0xb0
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005874:	2302      	movs	r3, #2
 8005876:	e018      	b.n	80058aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	7c1b      	ldrb	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005880:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 8005882:	7819      	ldrb	r1, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800588a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f002 fbb0 	bl	8007ff4 <USBD_LL_PrepareReceive>
 8005894:	e008      	b.n	80058a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005896:	4b08      	ldr	r3, [pc, #32]	@ (80058b8 <USBD_CDC_Init+0x1e8>)
 8005898:	7819      	ldrb	r1, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80058a0:	2340      	movs	r3, #64	@ 0x40
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f002 fba6 	bl	8007ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000093 	.word	0x20000093
 80058b8:	20000094 	.word	0x20000094
 80058bc:	20000095 	.word	0x20000095

080058c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80058cc:	4b3a      	ldr	r3, [pc, #232]	@ (80059b8 <USBD_CDC_DeInit+0xf8>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f002 fac5 	bl	8007e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80058d8:	4b37      	ldr	r3, [pc, #220]	@ (80059b8 <USBD_CDC_DeInit+0xf8>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	3324      	adds	r3, #36	@ 0x24
 80058ee:	2200      	movs	r2, #0
 80058f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058f2:	4b32      	ldr	r3, [pc, #200]	@ (80059bc <USBD_CDC_DeInit+0xfc>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f002 fab2 	bl	8007e62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80058fe:	4b2f      	ldr	r3, [pc, #188]	@ (80059bc <USBD_CDC_DeInit+0xfc>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f003 020f 	and.w	r2, r3, #15
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005916:	2200      	movs	r2, #0
 8005918:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800591a:	4b29      	ldr	r3, [pc, #164]	@ (80059c0 <USBD_CDC_DeInit+0x100>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f002 fa9e 	bl	8007e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005926:	4b26      	ldr	r3, [pc, #152]	@ (80059c0 <USBD_CDC_DeInit+0x100>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f003 020f 	and.w	r2, r3, #15
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	3324      	adds	r3, #36	@ 0x24
 800593c:	2200      	movs	r2, #0
 800593e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005940:	4b1f      	ldr	r3, [pc, #124]	@ (80059c0 <USBD_CDC_DeInit+0x100>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f003 020f 	and.w	r2, r3, #15
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	3326      	adds	r3, #38	@ 0x26
 8005956:	2200      	movs	r2, #0
 8005958:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	32b0      	adds	r2, #176	@ 0xb0
 8005964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01f      	beq.n	80059ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	33b0      	adds	r3, #176	@ 0xb0
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	32b0      	adds	r2, #176	@ 0xb0
 800598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598e:	4618      	mov	r0, r3
 8005990:	f002 fb72 	bl	8008078 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	32b0      	adds	r2, #176	@ 0xb0
 800599e:	2100      	movs	r1, #0
 80059a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000093 	.word	0x20000093
 80059bc:	20000094 	.word	0x20000094
 80059c0:	20000095 	.word	0x20000095

080059c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	32b0      	adds	r2, #176	@ 0xb0
 80059d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e0bf      	b.n	8005b74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d050      	beq.n	8005aa2 <USBD_CDC_Setup+0xde>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	f040 80af 	bne.w	8005b64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	88db      	ldrh	r3, [r3, #6]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d03a      	beq.n	8005a84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	b25b      	sxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da1b      	bge.n	8005a50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	33b0      	adds	r3, #176	@ 0xb0
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005a2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	88d2      	ldrh	r2, [r2, #6]
 8005a34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	88db      	ldrh	r3, [r3, #6]
 8005a3a:	2b07      	cmp	r3, #7
 8005a3c:	bf28      	it	cs
 8005a3e:	2307      	movcs	r3, #7
 8005a40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	89fa      	ldrh	r2, [r7, #14]
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 fd93 	bl	8007574 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005a4e:	e090      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	785a      	ldrb	r2, [r3, #1]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	88db      	ldrh	r3, [r3, #6]
 8005a5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a60:	d803      	bhi.n	8005a6a <USBD_CDC_Setup+0xa6>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	88db      	ldrh	r3, [r3, #6]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	e000      	b.n	8005a6c <USBD_CDC_Setup+0xa8>
 8005a6a:	2240      	movs	r2, #64	@ 0x40
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a72:	6939      	ldr	r1, [r7, #16]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 fda5 	bl	80075cc <USBD_CtlPrepareRx>
      break;
 8005a82:	e076      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	33b0      	adds	r3, #176	@ 0xb0
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	7850      	ldrb	r0, [r2, #1]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	4798      	blx	r3
      break;
 8005aa0:	e067      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b0b      	cmp	r3, #11
 8005aa8:	d851      	bhi.n	8005b4e <USBD_CDC_Setup+0x18a>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <USBD_CDC_Setup+0xec>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ae1 	.word	0x08005ae1
 8005ab4:	08005b5d 	.word	0x08005b5d
 8005ab8:	08005b4f 	.word	0x08005b4f
 8005abc:	08005b4f 	.word	0x08005b4f
 8005ac0:	08005b4f 	.word	0x08005b4f
 8005ac4:	08005b4f 	.word	0x08005b4f
 8005ac8:	08005b4f 	.word	0x08005b4f
 8005acc:	08005b4f 	.word	0x08005b4f
 8005ad0:	08005b4f 	.word	0x08005b4f
 8005ad4:	08005b4f 	.word	0x08005b4f
 8005ad8:	08005b0b 	.word	0x08005b0b
 8005adc:	08005b35 	.word	0x08005b35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d107      	bne.n	8005afc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005aec:	f107 030a 	add.w	r3, r7, #10
 8005af0:	2202      	movs	r2, #2
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 fd3d 	bl	8007574 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005afa:	e032      	b.n	8005b62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 fcbb 	bl	800747a <USBD_CtlError>
            ret = USBD_FAIL;
 8005b04:	2303      	movs	r3, #3
 8005b06:	75fb      	strb	r3, [r7, #23]
          break;
 8005b08:	e02b      	b.n	8005b62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d107      	bne.n	8005b26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b16:	f107 030d 	add.w	r3, r7, #13
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 fd28 	bl	8007574 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b24:	e01d      	b.n	8005b62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 fca6 	bl	800747a <USBD_CtlError>
            ret = USBD_FAIL;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	75fb      	strb	r3, [r7, #23]
          break;
 8005b32:	e016      	b.n	8005b62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d00f      	beq.n	8005b60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 fc99 	bl	800747a <USBD_CtlError>
            ret = USBD_FAIL;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b4c:	e008      	b.n	8005b60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 fc92 	bl	800747a <USBD_CtlError>
          ret = USBD_FAIL;
 8005b56:	2303      	movs	r3, #3
 8005b58:	75fb      	strb	r3, [r7, #23]
          break;
 8005b5a:	e002      	b.n	8005b62 <USBD_CDC_Setup+0x19e>
          break;
 8005b5c:	bf00      	nop
 8005b5e:	e008      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>
          break;
 8005b60:	bf00      	nop
      }
      break;
 8005b62:	e006      	b.n	8005b72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 fc87 	bl	800747a <USBD_CtlError>
      ret = USBD_FAIL;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b70:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005b8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	32b0      	adds	r2, #176	@ 0xb0
 8005b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e065      	b.n	8005c72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	32b0      	adds	r2, #176	@ 0xb0
 8005bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	3318      	adds	r3, #24
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d02f      	beq.n	8005c30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	f003 020f 	and.w	r2, r3, #15
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	3318      	adds	r3, #24
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	f003 010f 	and.w	r1, r3, #15
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	440b      	add	r3, r1
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4403      	add	r3, r0
 8005bf8:	331c      	adds	r3, #28
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d112      	bne.n	8005c30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	f003 020f 	and.w	r2, r3, #15
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c22:	78f9      	ldrb	r1, [r7, #3]
 8005c24:	2300      	movs	r3, #0
 8005c26:	2200      	movs	r2, #0
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f002 f9c2 	bl	8007fb2 <USBD_LL_Transmit>
 8005c2e:	e01f      	b.n	8005c70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	33b0      	adds	r3, #176	@ 0xb0
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d010      	beq.n	8005c70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	33b0      	adds	r3, #176	@ 0xb0
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005c6c:	78fa      	ldrb	r2, [r7, #3]
 8005c6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	32b0      	adds	r2, #176	@ 0xb0
 8005c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	32b0      	adds	r2, #176	@ 0xb0
 8005ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e01a      	b.n	8005ce2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f002 f9c0 	bl	8008036 <USBD_LL_GetRxDataSize>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	33b0      	adds	r3, #176	@ 0xb0
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	32b0      	adds	r2, #176	@ 0xb0
 8005cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e024      	b.n	8005d56 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	33b0      	adds	r3, #176	@ 0xb0
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d019      	beq.n	8005d54 <USBD_CDC_EP0_RxReady+0x6a>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005d26:	2bff      	cmp	r3, #255	@ 0xff
 8005d28:	d014      	beq.n	8005d54 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	33b0      	adds	r3, #176	@ 0xb0
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005d42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d4a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	22ff      	movs	r2, #255	@ 0xff
 8005d50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d68:	2182      	movs	r1, #130	@ 0x82
 8005d6a:	4818      	ldr	r0, [pc, #96]	@ (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d6c:	f000 fd4f 	bl	800680e <USBD_GetEpDesc>
 8005d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d72:	2101      	movs	r1, #1
 8005d74:	4815      	ldr	r0, [pc, #84]	@ (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d76:	f000 fd4a 	bl	800680e <USBD_GetEpDesc>
 8005d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d7c:	2181      	movs	r1, #129	@ 0x81
 8005d7e:	4813      	ldr	r0, [pc, #76]	@ (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d80:	f000 fd45 	bl	800680e <USBD_GetEpDesc>
 8005d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2210      	movs	r2, #16
 8005d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005da0:	711a      	strb	r2, [r3, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d006      	beq.n	8005dba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db4:	711a      	strb	r2, [r3, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2243      	movs	r2, #67	@ 0x43
 8005dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005dc0:	4b02      	ldr	r3, [pc, #8]	@ (8005dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000050 	.word	0x20000050

08005dd0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005dd8:	2182      	movs	r1, #130	@ 0x82
 8005dda:	4818      	ldr	r0, [pc, #96]	@ (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ddc:	f000 fd17 	bl	800680e <USBD_GetEpDesc>
 8005de0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005de2:	2101      	movs	r1, #1
 8005de4:	4815      	ldr	r0, [pc, #84]	@ (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005de6:	f000 fd12 	bl	800680e <USBD_GetEpDesc>
 8005dea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dec:	2181      	movs	r1, #129	@ 0x81
 8005dee:	4813      	ldr	r0, [pc, #76]	@ (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005df0:	f000 fd0d 	bl	800680e <USBD_GetEpDesc>
 8005df4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d006      	beq.n	8005e16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	711a      	strb	r2, [r3, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f042 0202 	orr.w	r2, r2, #2
 8005e14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d006      	beq.n	8005e2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	711a      	strb	r2, [r3, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f042 0202 	orr.w	r2, r2, #2
 8005e28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2243      	movs	r2, #67	@ 0x43
 8005e2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e30:	4b02      	ldr	r3, [pc, #8]	@ (8005e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000050 	.word	0x20000050

08005e40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e48:	2182      	movs	r1, #130	@ 0x82
 8005e4a:	4818      	ldr	r0, [pc, #96]	@ (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e4c:	f000 fcdf 	bl	800680e <USBD_GetEpDesc>
 8005e50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e52:	2101      	movs	r1, #1
 8005e54:	4815      	ldr	r0, [pc, #84]	@ (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e56:	f000 fcda 	bl	800680e <USBD_GetEpDesc>
 8005e5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e5c:	2181      	movs	r1, #129	@ 0x81
 8005e5e:	4813      	ldr	r0, [pc, #76]	@ (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e60:	f000 fcd5 	bl	800680e <USBD_GetEpDesc>
 8005e64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2210      	movs	r2, #16
 8005e70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d006      	beq.n	8005e86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e80:	711a      	strb	r2, [r3, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d006      	beq.n	8005e9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e94:	711a      	strb	r2, [r3, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2243      	movs	r2, #67	@ 0x43
 8005e9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ea0:	4b02      	ldr	r3, [pc, #8]	@ (8005eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000050 	.word	0x20000050

08005eb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	220a      	movs	r2, #10
 8005ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ebe:	4b03      	ldr	r3, [pc, #12]	@ (8005ecc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	2000000c 	.word	0x2000000c

08005ed0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e009      	b.n	8005ef8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	33b0      	adds	r3, #176	@ 0xb0
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	32b0      	adds	r2, #176	@ 0xb0
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e008      	b.n	8005f3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	32b0      	adds	r2, #176	@ 0xb0
 8005f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e004      	b.n	8005f76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	32b0      	adds	r2, #176	@ 0xb0
 8005f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e025      	b.n	8005ff6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11f      	bne.n	8005ff4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005fbc:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <USBD_CDC_TransmitPacket+0x7c>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	f003 020f 	and.w	r2, r3, #15
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4403      	add	r3, r0
 8005fd6:	3318      	adds	r3, #24
 8005fd8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005fda:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <USBD_CDC_TransmitPacket+0x7c>)
 8005fdc:	7819      	ldrb	r1, [r3, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 ffe1 	bl	8007fb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000093 	.word	0x20000093

08006004 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	32b0      	adds	r2, #176	@ 0xb0
 8006016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	32b0      	adds	r2, #176	@ 0xb0
 8006026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800602e:	2303      	movs	r3, #3
 8006030:	e018      	b.n	8006064 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	7c1b      	ldrb	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800603a:	4b0c      	ldr	r3, [pc, #48]	@ (800606c <USBD_CDC_ReceivePacket+0x68>)
 800603c:	7819      	ldrb	r1, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 ffd3 	bl	8007ff4 <USBD_LL_PrepareReceive>
 800604e:	e008      	b.n	8006062 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006050:	4b06      	ldr	r3, [pc, #24]	@ (800606c <USBD_CDC_ReceivePacket+0x68>)
 8006052:	7819      	ldrb	r1, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800605a:	2340      	movs	r3, #64	@ 0x40
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 ffc9 	bl	8007ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20000094 	.word	0x20000094

08006070 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006084:	2303      	movs	r3, #3
 8006086:	e01f      	b.n	80060c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	79fa      	ldrb	r2, [r7, #7]
 80060ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f001 fe43 	bl	8007d48 <USBD_LL_Init>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e025      	b.n	8006134 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	32ae      	adds	r2, #174	@ 0xae
 80060fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00f      	beq.n	8006124 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	32ae      	adds	r2, #174	@ 0xae
 800610e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	f107 020e 	add.w	r2, r7, #14
 8006118:	4610      	mov	r0, r2
 800611a:	4798      	blx	r3
 800611c:	4602      	mov	r2, r0
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fe4b 	bl	8007de0 <USBD_LL_Start>
 800614a:	4603      	mov	r3, r0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800615c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800615e:	4618      	mov	r0, r3
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	4611      	mov	r1, r2
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	4611      	mov	r1, r2
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80061c8:	2303      	movs	r3, #3
 80061ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 f90c 	bl	8007406 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80061fc:	461a      	mov	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2b02      	cmp	r3, #2
 8006210:	d01a      	beq.n	8006248 <USBD_LL_SetupStage+0x72>
 8006212:	2b02      	cmp	r3, #2
 8006214:	d822      	bhi.n	800625c <USBD_LL_SetupStage+0x86>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <USBD_LL_SetupStage+0x4a>
 800621a:	2b01      	cmp	r3, #1
 800621c:	d00a      	beq.n	8006234 <USBD_LL_SetupStage+0x5e>
 800621e:	e01d      	b.n	800625c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fb63 	bl	80068f4 <USBD_StdDevReq>
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
      break;
 8006232:	e020      	b.n	8006276 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fbcb 	bl	80069d8 <USBD_StdItfReq>
 8006242:	4603      	mov	r3, r0
 8006244:	73fb      	strb	r3, [r7, #15]
      break;
 8006246:	e016      	b.n	8006276 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fc2d 	bl	8006ab0 <USBD_StdEPReq>
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]
      break;
 800625a:	e00c      	b.n	8006276 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006262:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006266:	b2db      	uxtb	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 fe18 	bl	8007ea0 <USBD_LL_StallEP>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
      break;
 8006274:	bf00      	nop
  }

  return ret;
 8006276:	7bfb      	ldrb	r3, [r7, #15]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	460b      	mov	r3, r1
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006292:	7afb      	ldrb	r3, [r7, #11]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d16e      	bne.n	8006376 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800629e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	f040 8098 	bne.w	80063dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d913      	bls.n	80062e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	1ad2      	subs	r2, r2, r3
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	bf28      	it	cs
 80062d2:	4613      	movcs	r3, r2
 80062d4:	461a      	mov	r2, r3
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f001 f994 	bl	8007606 <USBD_CtlContinueRx>
 80062de:	e07d      	b.n	80063dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d014      	beq.n	8006318 <USBD_LL_DataOutStage+0x98>
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d81d      	bhi.n	800632e <USBD_LL_DataOutStage+0xae>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <USBD_LL_DataOutStage+0x7c>
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d003      	beq.n	8006302 <USBD_LL_DataOutStage+0x82>
 80062fa:	e018      	b.n	800632e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006300:	e018      	b.n	8006334 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006308:	b2db      	uxtb	r3, r3
 800630a:	4619      	mov	r1, r3
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fa64 	bl	80067da <USBD_CoreFindIF>
 8006312:	4603      	mov	r3, r0
 8006314:	75bb      	strb	r3, [r7, #22]
            break;
 8006316:	e00d      	b.n	8006334 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800631e:	b2db      	uxtb	r3, r3
 8006320:	4619      	mov	r1, r3
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fa66 	bl	80067f4 <USBD_CoreFindEP>
 8006328:	4603      	mov	r3, r0
 800632a:	75bb      	strb	r3, [r7, #22]
            break;
 800632c:	e002      	b.n	8006334 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	75bb      	strb	r3, [r7, #22]
            break;
 8006332:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006334:	7dbb      	ldrb	r3, [r7, #22]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d119      	bne.n	800636e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b03      	cmp	r3, #3
 8006344:	d113      	bne.n	800636e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006346:	7dba      	ldrb	r2, [r7, #22]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	32ae      	adds	r2, #174	@ 0xae
 800634c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006356:	7dba      	ldrb	r2, [r7, #22]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800635e:	7dba      	ldrb	r2, [r7, #22]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	32ae      	adds	r2, #174	@ 0xae
 8006364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f001 f95a 	bl	8007628 <USBD_CtlSendStatus>
 8006374:	e032      	b.n	80063dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006376:	7afb      	ldrb	r3, [r7, #11]
 8006378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800637c:	b2db      	uxtb	r3, r3
 800637e:	4619      	mov	r1, r3
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fa37 	bl	80067f4 <USBD_CoreFindEP>
 8006386:	4603      	mov	r3, r0
 8006388:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800638a:	7dbb      	ldrb	r3, [r7, #22]
 800638c:	2bff      	cmp	r3, #255	@ 0xff
 800638e:	d025      	beq.n	80063dc <USBD_LL_DataOutStage+0x15c>
 8006390:	7dbb      	ldrb	r3, [r7, #22]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d122      	bne.n	80063dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d117      	bne.n	80063d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80063a2:	7dba      	ldrb	r2, [r7, #22]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	32ae      	adds	r2, #174	@ 0xae
 80063a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00f      	beq.n	80063d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80063b2:	7dba      	ldrb	r2, [r7, #22]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80063ba:	7dba      	ldrb	r2, [r7, #22]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	32ae      	adds	r2, #174	@ 0xae
 80063c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	7afa      	ldrb	r2, [r7, #11]
 80063c8:	4611      	mov	r1, r2
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	4798      	blx	r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	e000      	b.n	80063de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b086      	sub	sp, #24
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	460b      	mov	r3, r1
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d16f      	bne.n	80064da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3314      	adds	r3, #20
 80063fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006406:	2b02      	cmp	r3, #2
 8006408:	d15a      	bne.n	80064c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	429a      	cmp	r2, r3
 8006414:	d914      	bls.n	8006440 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	461a      	mov	r2, r3
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f001 f8bc 	bl	80075aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006432:	2300      	movs	r3, #0
 8006434:	2200      	movs	r2, #0
 8006436:	2100      	movs	r1, #0
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f001 fddb 	bl	8007ff4 <USBD_LL_PrepareReceive>
 800643e:	e03f      	b.n	80064c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d11c      	bne.n	8006486 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006454:	429a      	cmp	r2, r3
 8006456:	d316      	bcc.n	8006486 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006462:	429a      	cmp	r2, r3
 8006464:	d20f      	bcs.n	8006486 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006466:	2200      	movs	r2, #0
 8006468:	2100      	movs	r1, #0
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f001 f89d 	bl	80075aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006478:	2300      	movs	r3, #0
 800647a:	2200      	movs	r2, #0
 800647c:	2100      	movs	r1, #0
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f001 fdb8 	bl	8007ff4 <USBD_LL_PrepareReceive>
 8006484:	e01c      	b.n	80064c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b03      	cmp	r3, #3
 8006490:	d10f      	bne.n	80064b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064b2:	2180      	movs	r1, #128	@ 0x80
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f001 fcf3 	bl	8007ea0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f001 f8c7 	bl	800764e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d03a      	beq.n	8006540 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff fe42 	bl	8006154 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80064d8:	e032      	b.n	8006540 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80064da:	7afb      	ldrb	r3, [r7, #11]
 80064dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	4619      	mov	r1, r3
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f985 	bl	80067f4 <USBD_CoreFindEP>
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
 80064f0:	2bff      	cmp	r3, #255	@ 0xff
 80064f2:	d025      	beq.n	8006540 <USBD_LL_DataInStage+0x15a>
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d122      	bne.n	8006540 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b03      	cmp	r3, #3
 8006504:	d11c      	bne.n	8006540 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006506:	7dfa      	ldrb	r2, [r7, #23]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	32ae      	adds	r2, #174	@ 0xae
 800650c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d014      	beq.n	8006540 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006516:	7dfa      	ldrb	r2, [r7, #23]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800651e:	7dfa      	ldrb	r2, [r7, #23]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	32ae      	adds	r2, #174	@ 0xae
 8006524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	7afa      	ldrb	r2, [r7, #11]
 800652c:	4611      	mov	r1, r2
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	4798      	blx	r3
 8006532:	4603      	mov	r3, r0
 8006534:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006536:	7dbb      	ldrb	r3, [r7, #22]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800653c:	7dbb      	ldrb	r3, [r7, #22]
 800653e:	e000      	b.n	8006542 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d014      	beq.n	80065b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00e      	beq.n	80065b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6852      	ldr	r2, [r2, #4]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	4611      	mov	r1, r2
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065b0:	2340      	movs	r3, #64	@ 0x40
 80065b2:	2200      	movs	r2, #0
 80065b4:	2100      	movs	r1, #0
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 fc2d 	bl	8007e16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2240      	movs	r2, #64	@ 0x40
 80065c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065cc:	2340      	movs	r3, #64	@ 0x40
 80065ce:	2200      	movs	r2, #0
 80065d0:	2180      	movs	r1, #128	@ 0x80
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fc1f 	bl	8007e16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2240      	movs	r2, #64	@ 0x40
 80065e2:	621a      	str	r2, [r3, #32]

  return ret;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	460b      	mov	r3, r1
 80065f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	78fa      	ldrb	r2, [r7, #3]
 80065fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b04      	cmp	r3, #4
 8006620:	d006      	beq.n	8006630 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006628:	b2da      	uxtb	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2204      	movs	r2, #4
 8006634:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b04      	cmp	r3, #4
 8006658:	d106      	bne.n	8006668 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006660:	b2da      	uxtb	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b03      	cmp	r3, #3
 8006688:	d110      	bne.n	80066ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	32ae      	adds	r2, #174	@ 0xae
 80066cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e01c      	b.n	8006712 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d115      	bne.n	8006710 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	32ae      	adds	r2, #174	@ 0xae
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	32ae      	adds	r2, #174	@ 0xae
 8006702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	78fa      	ldrb	r2, [r7, #3]
 800670a:	4611      	mov	r1, r2
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	32ae      	adds	r2, #174	@ 0xae
 8006730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006738:	2303      	movs	r3, #3
 800673a:	e01c      	b.n	8006776 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b03      	cmp	r3, #3
 8006746:	d115      	bne.n	8006774 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	32ae      	adds	r2, #174	@ 0xae
 8006752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	32ae      	adds	r2, #174	@ 0xae
 8006766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	78fa      	ldrb	r2, [r7, #3]
 800676e:	4611      	mov	r1, r2
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00e      	beq.n	80067d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6852      	ldr	r2, [r2, #4]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	4611      	mov	r1, r2
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	4798      	blx	r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006800:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	885b      	ldrh	r3, [r3, #2]
 800682a:	b29b      	uxth	r3, r3
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	7812      	ldrb	r2, [r2, #0]
 8006830:	4293      	cmp	r3, r2
 8006832:	d91f      	bls.n	8006874 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800683a:	e013      	b.n	8006864 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800683c:	f107 030a 	add.w	r3, r7, #10
 8006840:	4619      	mov	r1, r3
 8006842:	6978      	ldr	r0, [r7, #20]
 8006844:	f000 f81b 	bl	800687e <USBD_GetNextDesc>
 8006848:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	2b05      	cmp	r3, #5
 8006850:	d108      	bne.n	8006864 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	789b      	ldrb	r3, [r3, #2]
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	429a      	cmp	r2, r3
 800685e:	d008      	beq.n	8006872 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	885b      	ldrh	r3, [r3, #2]
 8006868:	b29a      	uxth	r2, r3
 800686a:	897b      	ldrh	r3, [r7, #10]
 800686c:	429a      	cmp	r2, r3
 800686e:	d8e5      	bhi.n	800683c <USBD_GetEpDesc+0x2e>
 8006870:	e000      	b.n	8006874 <USBD_GetEpDesc+0x66>
          break;
 8006872:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006874:	693b      	ldr	r3, [r7, #16]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	7812      	ldrb	r2, [r2, #0]
 8006894:	4413      	add	r3, r2
 8006896:	b29a      	uxth	r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4413      	add	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b087      	sub	sp, #28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	3301      	adds	r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80068d8:	021b      	lsls	r3, r3, #8
 80068da:	b21a      	sxth	r2, r3
 80068dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	b21b      	sxth	r3, r3
 80068e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068e6:	89fb      	ldrh	r3, [r7, #14]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800690a:	2b40      	cmp	r3, #64	@ 0x40
 800690c:	d005      	beq.n	800691a <USBD_StdDevReq+0x26>
 800690e:	2b40      	cmp	r3, #64	@ 0x40
 8006910:	d857      	bhi.n	80069c2 <USBD_StdDevReq+0xce>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00f      	beq.n	8006936 <USBD_StdDevReq+0x42>
 8006916:	2b20      	cmp	r3, #32
 8006918:	d153      	bne.n	80069c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	32ae      	adds	r2, #174	@ 0xae
 8006924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
 8006930:	4603      	mov	r3, r0
 8006932:	73fb      	strb	r3, [r7, #15]
      break;
 8006934:	e04a      	b.n	80069cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	2b09      	cmp	r3, #9
 800693c:	d83b      	bhi.n	80069b6 <USBD_StdDevReq+0xc2>
 800693e:	a201      	add	r2, pc, #4	@ (adr r2, 8006944 <USBD_StdDevReq+0x50>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	08006999 	.word	0x08006999
 8006948:	080069ad 	.word	0x080069ad
 800694c:	080069b7 	.word	0x080069b7
 8006950:	080069a3 	.word	0x080069a3
 8006954:	080069b7 	.word	0x080069b7
 8006958:	08006977 	.word	0x08006977
 800695c:	0800696d 	.word	0x0800696d
 8006960:	080069b7 	.word	0x080069b7
 8006964:	0800698f 	.word	0x0800698f
 8006968:	08006981 	.word	0x08006981
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa3c 	bl	8006dec <USBD_GetDescriptor>
          break;
 8006974:	e024      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fba1 	bl	80070c0 <USBD_SetAddress>
          break;
 800697e:	e01f      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fbe0 	bl	8007148 <USBD_SetConfig>
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]
          break;
 800698c:	e018      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fc83 	bl	800729c <USBD_GetConfig>
          break;
 8006996:	e013      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fcb4 	bl	8007308 <USBD_GetStatus>
          break;
 80069a0:	e00e      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fce3 	bl	8007370 <USBD_SetFeature>
          break;
 80069aa:	e009      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fd07 	bl	80073c2 <USBD_ClrFeature>
          break;
 80069b4:	e004      	b.n	80069c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fd5e 	bl	800747a <USBD_CtlError>
          break;
 80069be:	bf00      	nop
      }
      break;
 80069c0:	e004      	b.n	80069cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fd58 	bl	800747a <USBD_CtlError>
      break;
 80069ca:	bf00      	nop
  }

  return ret;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop

080069d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069ee:	2b40      	cmp	r3, #64	@ 0x40
 80069f0:	d005      	beq.n	80069fe <USBD_StdItfReq+0x26>
 80069f2:	2b40      	cmp	r3, #64	@ 0x40
 80069f4:	d852      	bhi.n	8006a9c <USBD_StdItfReq+0xc4>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <USBD_StdItfReq+0x26>
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d14e      	bne.n	8006a9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d840      	bhi.n	8006a8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	889b      	ldrh	r3, [r3, #4]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d836      	bhi.n	8006a84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	889b      	ldrh	r3, [r3, #4]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fedb 	bl	80067da <USBD_CoreFindIF>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
 8006a2a:	2bff      	cmp	r3, #255	@ 0xff
 8006a2c:	d01d      	beq.n	8006a6a <USBD_StdItfReq+0x92>
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11a      	bne.n	8006a6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a34:	7bba      	ldrb	r2, [r7, #14]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	32ae      	adds	r2, #174	@ 0xae
 8006a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00f      	beq.n	8006a64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a44:	7bba      	ldrb	r2, [r7, #14]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a4c:	7bba      	ldrb	r2, [r7, #14]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	32ae      	adds	r2, #174	@ 0xae
 8006a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a62:	e004      	b.n	8006a6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a68:	e001      	b.n	8006a6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	88db      	ldrh	r3, [r3, #6]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d110      	bne.n	8006a98 <USBD_StdItfReq+0xc0>
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10d      	bne.n	8006a98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fdd3 	bl	8007628 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a82:	e009      	b.n	8006a98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fcf7 	bl	800747a <USBD_CtlError>
          break;
 8006a8c:	e004      	b.n	8006a98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fcf2 	bl	800747a <USBD_CtlError>
          break;
 8006a96:	e000      	b.n	8006a9a <USBD_StdItfReq+0xc2>
          break;
 8006a98:	bf00      	nop
      }
      break;
 8006a9a:	e004      	b.n	8006aa6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fceb 	bl	800747a <USBD_CtlError>
      break;
 8006aa4:	bf00      	nop
  }

  return ret;
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	889b      	ldrh	r3, [r3, #4]
 8006ac2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006acc:	2b40      	cmp	r3, #64	@ 0x40
 8006ace:	d007      	beq.n	8006ae0 <USBD_StdEPReq+0x30>
 8006ad0:	2b40      	cmp	r3, #64	@ 0x40
 8006ad2:	f200 817f 	bhi.w	8006dd4 <USBD_StdEPReq+0x324>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02a      	beq.n	8006b30 <USBD_StdEPReq+0x80>
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	f040 817a 	bne.w	8006dd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ae0:	7bbb      	ldrb	r3, [r7, #14]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fe85 	bl	80067f4 <USBD_CoreFindEP>
 8006aea:	4603      	mov	r3, r0
 8006aec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006aee:	7b7b      	ldrb	r3, [r7, #13]
 8006af0:	2bff      	cmp	r3, #255	@ 0xff
 8006af2:	f000 8174 	beq.w	8006dde <USBD_StdEPReq+0x32e>
 8006af6:	7b7b      	ldrb	r3, [r7, #13]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f040 8170 	bne.w	8006dde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006afe:	7b7a      	ldrb	r2, [r7, #13]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006b06:	7b7a      	ldrb	r2, [r7, #13]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	32ae      	adds	r2, #174	@ 0xae
 8006b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 8163 	beq.w	8006dde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b18:	7b7a      	ldrb	r2, [r7, #13]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	32ae      	adds	r2, #174	@ 0xae
 8006b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	4798      	blx	r3
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b2e:	e156      	b.n	8006dde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d008      	beq.n	8006b4a <USBD_StdEPReq+0x9a>
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	f300 8145 	bgt.w	8006dc8 <USBD_StdEPReq+0x318>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 809b 	beq.w	8006c7a <USBD_StdEPReq+0x1ca>
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d03c      	beq.n	8006bc2 <USBD_StdEPReq+0x112>
 8006b48:	e13e      	b.n	8006dc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d002      	beq.n	8006b5c <USBD_StdEPReq+0xac>
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d016      	beq.n	8006b88 <USBD_StdEPReq+0xd8>
 8006b5a:	e02c      	b.n	8006bb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00d      	beq.n	8006b7e <USBD_StdEPReq+0xce>
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	2b80      	cmp	r3, #128	@ 0x80
 8006b66:	d00a      	beq.n	8006b7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 f997 	bl	8007ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b72:	2180      	movs	r1, #128	@ 0x80
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 f993 	bl	8007ea0 <USBD_LL_StallEP>
 8006b7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b7c:	e020      	b.n	8006bc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fc7a 	bl	800747a <USBD_CtlError>
              break;
 8006b86:	e01b      	b.n	8006bc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	885b      	ldrh	r3, [r3, #2]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10e      	bne.n	8006bae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <USBD_StdEPReq+0xfe>
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b80      	cmp	r3, #128	@ 0x80
 8006b9a:	d008      	beq.n	8006bae <USBD_StdEPReq+0xfe>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	88db      	ldrh	r3, [r3, #6]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ba4:	7bbb      	ldrb	r3, [r7, #14]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 f979 	bl	8007ea0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fd3a 	bl	8007628 <USBD_CtlSendStatus>

              break;
 8006bb4:	e004      	b.n	8006bc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fc5e 	bl	800747a <USBD_CtlError>
              break;
 8006bbe:	bf00      	nop
          }
          break;
 8006bc0:	e107      	b.n	8006dd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d002      	beq.n	8006bd4 <USBD_StdEPReq+0x124>
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d016      	beq.n	8006c00 <USBD_StdEPReq+0x150>
 8006bd2:	e04b      	b.n	8006c6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00d      	beq.n	8006bf6 <USBD_StdEPReq+0x146>
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	2b80      	cmp	r3, #128	@ 0x80
 8006bde:	d00a      	beq.n	8006bf6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 f95b 	bl	8007ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bea:	2180      	movs	r1, #128	@ 0x80
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 f957 	bl	8007ea0 <USBD_LL_StallEP>
 8006bf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bf4:	e040      	b.n	8006c78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fc3e 	bl	800747a <USBD_CtlError>
              break;
 8006bfe:	e03b      	b.n	8006c78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	885b      	ldrh	r3, [r3, #2]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d136      	bne.n	8006c76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 f961 	bl	8007ede <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fd03 	bl	8007628 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff fde4 	bl	80067f4 <USBD_CoreFindEP>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c30:	7b7b      	ldrb	r3, [r7, #13]
 8006c32:	2bff      	cmp	r3, #255	@ 0xff
 8006c34:	d01f      	beq.n	8006c76 <USBD_StdEPReq+0x1c6>
 8006c36:	7b7b      	ldrb	r3, [r7, #13]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d11c      	bne.n	8006c76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c3c:	7b7a      	ldrb	r2, [r7, #13]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c44:	7b7a      	ldrb	r2, [r7, #13]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	32ae      	adds	r2, #174	@ 0xae
 8006c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d010      	beq.n	8006c76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c54:	7b7a      	ldrb	r2, [r7, #13]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	32ae      	adds	r2, #174	@ 0xae
 8006c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c6a:	e004      	b.n	8006c76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fc03 	bl	800747a <USBD_CtlError>
              break;
 8006c74:	e000      	b.n	8006c78 <USBD_StdEPReq+0x1c8>
              break;
 8006c76:	bf00      	nop
          }
          break;
 8006c78:	e0ab      	b.n	8006dd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d002      	beq.n	8006c8c <USBD_StdEPReq+0x1dc>
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d032      	beq.n	8006cf0 <USBD_StdEPReq+0x240>
 8006c8a:	e097      	b.n	8006dbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <USBD_StdEPReq+0x1f2>
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	2b80      	cmp	r3, #128	@ 0x80
 8006c96:	d004      	beq.n	8006ca2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fbed 	bl	800747a <USBD_CtlError>
                break;
 8006ca0:	e091      	b.n	8006dc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da0b      	bge.n	8006cc2 <USBD_StdEPReq+0x212>
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	3310      	adds	r3, #16
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	e00b      	b.n	8006cda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	3304      	adds	r3, #4
 8006cda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fc43 	bl	8007574 <USBD_CtlSendData>
              break;
 8006cee:	e06a      	b.n	8006dc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	da11      	bge.n	8006d1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	f003 020f 	and.w	r2, r3, #15
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	3324      	adds	r3, #36	@ 0x24
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d117      	bne.n	8006d42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fbb0 	bl	800747a <USBD_CtlError>
                  break;
 8006d1a:	e054      	b.n	8006dc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	f003 020f 	and.w	r2, r3, #15
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	440b      	add	r3, r1
 8006d2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fb9d 	bl	800747a <USBD_CtlError>
                  break;
 8006d40:	e041      	b.n	8006dc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	da0b      	bge.n	8006d62 <USBD_StdEPReq+0x2b2>
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	3310      	adds	r3, #16
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3304      	adds	r3, #4
 8006d60:	e00b      	b.n	8006d7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	4413      	add	r3, r2
 8006d78:	3304      	adds	r3, #4
 8006d7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <USBD_StdEPReq+0x2d8>
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b80      	cmp	r3, #128	@ 0x80
 8006d86:	d103      	bne.n	8006d90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e00e      	b.n	8006dae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 f8c1 	bl	8007f1c <USBD_LL_IsStallEP>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2201      	movs	r2, #1
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	e002      	b.n	8006dae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2202      	movs	r2, #2
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fbdd 	bl	8007574 <USBD_CtlSendData>
              break;
 8006dba:	e004      	b.n	8006dc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fb5b 	bl	800747a <USBD_CtlError>
              break;
 8006dc4:	bf00      	nop
          }
          break;
 8006dc6:	e004      	b.n	8006dd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fb55 	bl	800747a <USBD_CtlError>
          break;
 8006dd0:	bf00      	nop
      }
      break;
 8006dd2:	e005      	b.n	8006de0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb4f 	bl	800747a <USBD_CtlError>
      break;
 8006ddc:	e000      	b.n	8006de0 <USBD_StdEPReq+0x330>
      break;
 8006dde:	bf00      	nop
  }

  return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	885b      	ldrh	r3, [r3, #2]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	2b06      	cmp	r3, #6
 8006e0e:	f200 8128 	bhi.w	8007062 <USBD_GetDescriptor+0x276>
 8006e12:	a201      	add	r2, pc, #4	@ (adr r2, 8006e18 <USBD_GetDescriptor+0x2c>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e35 	.word	0x08006e35
 8006e1c:	08006e4d 	.word	0x08006e4d
 8006e20:	08006e8d 	.word	0x08006e8d
 8006e24:	08007063 	.word	0x08007063
 8006e28:	08007063 	.word	0x08007063
 8006e2c:	08007003 	.word	0x08007003
 8006e30:	0800702f 	.word	0x0800702f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	7c12      	ldrb	r2, [r2, #16]
 8006e40:	f107 0108 	add.w	r1, r7, #8
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
 8006e48:	60f8      	str	r0, [r7, #12]
      break;
 8006e4a:	e112      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7c1b      	ldrb	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10d      	bne.n	8006e70 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5c:	f107 0208 	add.w	r2, r7, #8
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e6e:	e100      	b.n	8007072 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e78:	f107 0208 	add.w	r2, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	2202      	movs	r2, #2
 8006e88:	701a      	strb	r2, [r3, #0]
      break;
 8006e8a:	e0f2      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	f200 80ac 	bhi.w	8006ff0 <USBD_GetDescriptor+0x204>
 8006e98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <USBD_GetDescriptor+0xb4>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006eb9 	.word	0x08006eb9
 8006ea4:	08006eed 	.word	0x08006eed
 8006ea8:	08006f21 	.word	0x08006f21
 8006eac:	08006f55 	.word	0x08006f55
 8006eb0:	08006f89 	.word	0x08006f89
 8006eb4:	08006fbd 	.word	0x08006fbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7c12      	ldrb	r2, [r2, #16]
 8006ed0:	f107 0108 	add.w	r1, r7, #8
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eda:	e091      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 facb 	bl	800747a <USBD_CtlError>
            err++;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eea:	e089      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7c12      	ldrb	r2, [r2, #16]
 8006f04:	f107 0108 	add.w	r1, r7, #8
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f0e:	e077      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fab1 	bl	800747a <USBD_CtlError>
            err++;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f1e:	e06f      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00b      	beq.n	8006f44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	7c12      	ldrb	r2, [r2, #16]
 8006f38:	f107 0108 	add.w	r1, r7, #8
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
 8006f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f42:	e05d      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa97 	bl	800747a <USBD_CtlError>
            err++;
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	72fb      	strb	r3, [r7, #11]
          break;
 8006f52:	e055      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	7c12      	ldrb	r2, [r2, #16]
 8006f6c:	f107 0108 	add.w	r1, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f76:	e043      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa7d 	bl	800747a <USBD_CtlError>
            err++;
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	3301      	adds	r3, #1
 8006f84:	72fb      	strb	r3, [r7, #11]
          break;
 8006f86:	e03b      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	7c12      	ldrb	r2, [r2, #16]
 8006fa0:	f107 0108 	add.w	r1, r7, #8
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4798      	blx	r3
 8006fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006faa:	e029      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa63 	bl	800747a <USBD_CtlError>
            err++;
 8006fb4:	7afb      	ldrb	r3, [r7, #11]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fba:	e021      	b.n	8007000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	7c12      	ldrb	r2, [r2, #16]
 8006fd4:	f107 0108 	add.w	r1, r7, #8
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3
 8006fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fde:	e00f      	b.n	8007000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa49 	bl	800747a <USBD_CtlError>
            err++;
 8006fe8:	7afb      	ldrb	r3, [r7, #11]
 8006fea:	3301      	adds	r3, #1
 8006fec:	72fb      	strb	r3, [r7, #11]
          break;
 8006fee:	e007      	b.n	8007000 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa41 	bl	800747a <USBD_CtlError>
          err++;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ffe:	bf00      	nop
      }
      break;
 8007000:	e037      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	7c1b      	ldrb	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007012:	f107 0208 	add.w	r2, r7, #8
 8007016:	4610      	mov	r0, r2
 8007018:	4798      	blx	r3
 800701a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800701c:	e029      	b.n	8007072 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fa2a 	bl	800747a <USBD_CtlError>
        err++;
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	3301      	adds	r3, #1
 800702a:	72fb      	strb	r3, [r7, #11]
      break;
 800702c:	e021      	b.n	8007072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7c1b      	ldrb	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10d      	bne.n	8007052 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800703c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703e:	f107 0208 	add.w	r2, r7, #8
 8007042:	4610      	mov	r0, r2
 8007044:	4798      	blx	r3
 8007046:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	2207      	movs	r2, #7
 800704e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007050:	e00f      	b.n	8007072 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa10 	bl	800747a <USBD_CtlError>
        err++;
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	3301      	adds	r3, #1
 800705e:	72fb      	strb	r3, [r7, #11]
      break;
 8007060:	e007      	b.n	8007072 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa08 	bl	800747a <USBD_CtlError>
      err++;
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	3301      	adds	r3, #1
 800706e:	72fb      	strb	r3, [r7, #11]
      break;
 8007070:	bf00      	nop
  }

  if (err != 0U)
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11e      	bne.n	80070b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	88db      	ldrh	r3, [r3, #6]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d016      	beq.n	80070ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007080:	893b      	ldrh	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	88da      	ldrh	r2, [r3, #6]
 800708a:	893b      	ldrh	r3, [r7, #8]
 800708c:	4293      	cmp	r3, r2
 800708e:	bf28      	it	cs
 8007090:	4613      	movcs	r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007096:	893b      	ldrh	r3, [r7, #8]
 8007098:	461a      	mov	r2, r3
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa69 	bl	8007574 <USBD_CtlSendData>
 80070a2:	e009      	b.n	80070b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f9e7 	bl	800747a <USBD_CtlError>
 80070ac:	e004      	b.n	80070b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 faba 	bl	8007628 <USBD_CtlSendStatus>
 80070b4:	e000      	b.n	80070b8 <USBD_GetDescriptor+0x2cc>
    return;
 80070b6:	bf00      	nop
  }
}
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop

080070c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	889b      	ldrh	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d131      	bne.n	8007136 <USBD_SetAddress+0x76>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	88db      	ldrh	r3, [r3, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d12d      	bne.n	8007136 <USBD_SetAddress+0x76>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	885b      	ldrh	r3, [r3, #2]
 80070de:	2b7f      	cmp	r3, #127	@ 0x7f
 80070e0:	d829      	bhi.n	8007136 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	885b      	ldrh	r3, [r3, #2]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d104      	bne.n	8007104 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f9bc 	bl	800747a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007102:	e01d      	b.n	8007140 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7bfa      	ldrb	r2, [r7, #15]
 8007108:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 ff2f 	bl	8007f74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa86 	bl	8007628 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712a:	e009      	b.n	8007140 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007134:	e004      	b.n	8007140 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f99e 	bl	800747a <USBD_CtlError>
  }
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	885b      	ldrh	r3, [r3, #2]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	4b4e      	ldr	r3, [pc, #312]	@ (8007298 <USBD_SetConfig+0x150>)
 800715e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007160:	4b4d      	ldr	r3, [pc, #308]	@ (8007298 <USBD_SetConfig+0x150>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d905      	bls.n	8007174 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f985 	bl	800747a <USBD_CtlError>
    return USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	e08c      	b.n	800728e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d002      	beq.n	8007186 <USBD_SetConfig+0x3e>
 8007180:	2b03      	cmp	r3, #3
 8007182:	d029      	beq.n	80071d8 <USBD_SetConfig+0x90>
 8007184:	e075      	b.n	8007272 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007186:	4b44      	ldr	r3, [pc, #272]	@ (8007298 <USBD_SetConfig+0x150>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d020      	beq.n	80071d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800718e:	4b42      	ldr	r3, [pc, #264]	@ (8007298 <USBD_SetConfig+0x150>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007198:	4b3f      	ldr	r3, [pc, #252]	@ (8007298 <USBD_SetConfig+0x150>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fe ffe3 	bl	800616a <USBD_SetClassConfig>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d008      	beq.n	80071c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f962 	bl	800747a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071be:	e065      	b.n	800728c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fa31 	bl	8007628 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2203      	movs	r2, #3
 80071ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80071ce:	e05d      	b.n	800728c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fa29 	bl	8007628 <USBD_CtlSendStatus>
      break;
 80071d6:	e059      	b.n	800728c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071d8:	4b2f      	ldr	r3, [pc, #188]	@ (8007298 <USBD_SetConfig+0x150>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d112      	bne.n	8007206 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80071e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007298 <USBD_SetConfig+0x150>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071f2:	4b29      	ldr	r3, [pc, #164]	@ (8007298 <USBD_SetConfig+0x150>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7fe ffd2 	bl	80061a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa12 	bl	8007628 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007204:	e042      	b.n	800728c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007206:	4b24      	ldr	r3, [pc, #144]	@ (8007298 <USBD_SetConfig+0x150>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d02a      	beq.n	800726a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fe ffc0 	bl	80061a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007222:	4b1d      	ldr	r3, [pc, #116]	@ (8007298 <USBD_SetConfig+0x150>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800722c:	4b1a      	ldr	r3, [pc, #104]	@ (8007298 <USBD_SetConfig+0x150>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fe ff99 	bl	800616a <USBD_SetClassConfig>
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00f      	beq.n	8007262 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f918 	bl	800747a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7fe ffa5 	bl	80061a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007260:	e014      	b.n	800728c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f9e0 	bl	8007628 <USBD_CtlSendStatus>
      break;
 8007268:	e010      	b.n	800728c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f9dc 	bl	8007628 <USBD_CtlSendStatus>
      break;
 8007270:	e00c      	b.n	800728c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f900 	bl	800747a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800727a:	4b07      	ldr	r3, [pc, #28]	@ (8007298 <USBD_SetConfig+0x150>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7fe ff8e 	bl	80061a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007286:	2303      	movs	r3, #3
 8007288:	73fb      	strb	r3, [r7, #15]
      break;
 800728a:	bf00      	nop
  }

  return ret;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000210 	.word	0x20000210

0800729c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	88db      	ldrh	r3, [r3, #6]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d004      	beq.n	80072b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f8e2 	bl	800747a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072b6:	e023      	b.n	8007300 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	dc02      	bgt.n	80072ca <USBD_GetConfig+0x2e>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dc03      	bgt.n	80072d0 <USBD_GetConfig+0x34>
 80072c8:	e015      	b.n	80072f6 <USBD_GetConfig+0x5a>
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d00b      	beq.n	80072e6 <USBD_GetConfig+0x4a>
 80072ce:	e012      	b.n	80072f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3308      	adds	r3, #8
 80072da:	2201      	movs	r2, #1
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f948 	bl	8007574 <USBD_CtlSendData>
        break;
 80072e4:	e00c      	b.n	8007300 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3304      	adds	r3, #4
 80072ea:	2201      	movs	r2, #1
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f940 	bl	8007574 <USBD_CtlSendData>
        break;
 80072f4:	e004      	b.n	8007300 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f8be 	bl	800747a <USBD_CtlError>
        break;
 80072fe:	bf00      	nop
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007318:	b2db      	uxtb	r3, r3
 800731a:	3b01      	subs	r3, #1
 800731c:	2b02      	cmp	r3, #2
 800731e:	d81e      	bhi.n	800735e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	88db      	ldrh	r3, [r3, #6]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d004      	beq.n	8007332 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f8a5 	bl	800747a <USBD_CtlError>
        break;
 8007330:	e01a      	b.n	8007368 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f043 0202 	orr.w	r2, r3, #2
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	330c      	adds	r3, #12
 8007352:	2202      	movs	r2, #2
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f90c 	bl	8007574 <USBD_CtlSendData>
      break;
 800735c:	e004      	b.n	8007368 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f88a 	bl	800747a <USBD_CtlError>
      break;
 8007366:	bf00      	nop
  }
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	885b      	ldrh	r3, [r3, #2]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d107      	bne.n	8007392 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f94c 	bl	8007628 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007390:	e013      	b.n	80073ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	885b      	ldrh	r3, [r3, #2]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d10b      	bne.n	80073b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	889b      	ldrh	r3, [r3, #4]
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f93c 	bl	8007628 <USBD_CtlSendStatus>
}
 80073b0:	e003      	b.n	80073ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f860 	bl	800747a <USBD_CtlError>
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d80b      	bhi.n	80073f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	885b      	ldrh	r3, [r3, #2]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d10c      	bne.n	80073fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f91c 	bl	8007628 <USBD_CtlSendStatus>
      }
      break;
 80073f0:	e004      	b.n	80073fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f840 	bl	800747a <USBD_CtlError>
      break;
 80073fa:	e000      	b.n	80073fe <USBD_ClrFeature+0x3c>
      break;
 80073fc:	bf00      	nop
  }
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3301      	adds	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	781a      	ldrb	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3301      	adds	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7ff fa40 	bl	80068b6 <SWAPBYTE>
 8007436:	4603      	mov	r3, r0
 8007438:	461a      	mov	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3301      	adds	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fa33 	bl	80068b6 <SWAPBYTE>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3301      	adds	r3, #1
 800745c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3301      	adds	r3, #1
 8007462:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff fa26 	bl	80068b6 <SWAPBYTE>
 800746a:	4603      	mov	r3, r0
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	80da      	strh	r2, [r3, #6]
}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007484:	2180      	movs	r1, #128	@ 0x80
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fd0a 	bl	8007ea0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800748c:	2100      	movs	r1, #0
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fd06 	bl	8007ea0 <USBD_LL_StallEP>
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d042      	beq.n	8007538 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80074b6:	6938      	ldr	r0, [r7, #16]
 80074b8:	f000 f842 	bl	8007540 <USBD_GetLen>
 80074bc:	4603      	mov	r3, r0
 80074be:	3301      	adds	r3, #1
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c6:	d808      	bhi.n	80074da <USBD_GetString+0x3e>
 80074c8:	6938      	ldr	r0, [r7, #16]
 80074ca:	f000 f839 	bl	8007540 <USBD_GetLen>
 80074ce:	4603      	mov	r3, r0
 80074d0:	3301      	adds	r3, #1
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	e001      	b.n	80074de <USBD_GetString+0x42>
 80074da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	4413      	add	r3, r2
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	7812      	ldrb	r2, [r2, #0]
 80074ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	3301      	adds	r3, #1
 80074f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	4413      	add	r3, r2
 80074fa:	2203      	movs	r2, #3
 80074fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	3301      	adds	r3, #1
 8007502:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007504:	e013      	b.n	800752e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	4413      	add	r3, r2
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	3301      	adds	r3, #1
 8007516:	613b      	str	r3, [r7, #16]
    idx++;
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	3301      	adds	r3, #1
 800751c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	4413      	add	r3, r2
 8007524:	2200      	movs	r2, #0
 8007526:	701a      	strb	r2, [r3, #0]
    idx++;
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	3301      	adds	r3, #1
 800752c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e7      	bne.n	8007506 <USBD_GetString+0x6a>
 8007536:	e000      	b.n	800753a <USBD_GetString+0x9e>
    return;
 8007538:	bf00      	nop
  }
}
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007550:	e005      	b.n	800755e <USBD_GetLen+0x1e>
  {
    len++;
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	3301      	adds	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	3301      	adds	r3, #1
 800755c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1f5      	bne.n	8007552 <USBD_GetLen+0x12>
  }

  return len;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2202      	movs	r2, #2
 8007584:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	2100      	movs	r1, #0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 fd09 	bl	8007fb2 <USBD_LL_Transmit>

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	2100      	movs	r1, #0
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fcf8 	bl	8007fb2 <USBD_LL_Transmit>

  return USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2203      	movs	r2, #3
 80075dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	2100      	movs	r1, #0
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fcfc 	bl	8007ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	2100      	movs	r1, #0
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fceb 	bl	8007ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2204      	movs	r2, #4
 8007634:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007638:	2300      	movs	r3, #0
 800763a:	2200      	movs	r2, #0
 800763c:	2100      	movs	r1, #0
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fcb7 	bl	8007fb2 <USBD_LL_Transmit>

  return USBD_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2205      	movs	r2, #5
 800765a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800765e:	2300      	movs	r3, #0
 8007660:	2200      	movs	r2, #0
 8007662:	2100      	movs	r1, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fcc5 	bl	8007ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007678:	2200      	movs	r2, #0
 800767a:	4912      	ldr	r1, [pc, #72]	@ (80076c4 <MX_USB_DEVICE_Init+0x50>)
 800767c:	4812      	ldr	r0, [pc, #72]	@ (80076c8 <MX_USB_DEVICE_Init+0x54>)
 800767e:	f7fe fcf7 	bl	8006070 <USBD_Init>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007688:	f7f9 f942 	bl	8000910 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800768c:	490f      	ldr	r1, [pc, #60]	@ (80076cc <MX_USB_DEVICE_Init+0x58>)
 800768e:	480e      	ldr	r0, [pc, #56]	@ (80076c8 <MX_USB_DEVICE_Init+0x54>)
 8007690:	f7fe fd1e 	bl	80060d0 <USBD_RegisterClass>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800769a:	f7f9 f939 	bl	8000910 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800769e:	490c      	ldr	r1, [pc, #48]	@ (80076d0 <MX_USB_DEVICE_Init+0x5c>)
 80076a0:	4809      	ldr	r0, [pc, #36]	@ (80076c8 <MX_USB_DEVICE_Init+0x54>)
 80076a2:	f7fe fc15 	bl	8005ed0 <USBD_CDC_RegisterInterface>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076ac:	f7f9 f930 	bl	8000910 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076b0:	4805      	ldr	r0, [pc, #20]	@ (80076c8 <MX_USB_DEVICE_Init+0x54>)
 80076b2:	f7fe fd43 	bl	800613c <USBD_Start>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076bc:	f7f9 f928 	bl	8000910 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076c0:	bf00      	nop
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	200000ac 	.word	0x200000ac
 80076c8:	20000214 	.word	0x20000214
 80076cc:	20000018 	.word	0x20000018
 80076d0:	20000098 	.word	0x20000098

080076d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076d8:	2200      	movs	r2, #0
 80076da:	4905      	ldr	r1, [pc, #20]	@ (80076f0 <CDC_Init_FS+0x1c>)
 80076dc:	4805      	ldr	r0, [pc, #20]	@ (80076f4 <CDC_Init_FS+0x20>)
 80076de:	f7fe fc11 	bl	8005f04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076e2:	4905      	ldr	r1, [pc, #20]	@ (80076f8 <CDC_Init_FS+0x24>)
 80076e4:	4803      	ldr	r0, [pc, #12]	@ (80076f4 <CDC_Init_FS+0x20>)
 80076e6:	f7fe fc2f 	bl	8005f48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	20000cf0 	.word	0x20000cf0
 80076f4:	20000214 	.word	0x20000214
 80076f8:	200004f0 	.word	0x200004f0

080076fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007700:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007702:	4618      	mov	r0, r3
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
 8007718:	4613      	mov	r3, r2
 800771a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	2b23      	cmp	r3, #35	@ 0x23
 8007720:	d84a      	bhi.n	80077b8 <CDC_Control_FS+0xac>
 8007722:	a201      	add	r2, pc, #4	@ (adr r2, 8007728 <CDC_Control_FS+0x1c>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	080077b9 	.word	0x080077b9
 800772c:	080077b9 	.word	0x080077b9
 8007730:	080077b9 	.word	0x080077b9
 8007734:	080077b9 	.word	0x080077b9
 8007738:	080077b9 	.word	0x080077b9
 800773c:	080077b9 	.word	0x080077b9
 8007740:	080077b9 	.word	0x080077b9
 8007744:	080077b9 	.word	0x080077b9
 8007748:	080077b9 	.word	0x080077b9
 800774c:	080077b9 	.word	0x080077b9
 8007750:	080077b9 	.word	0x080077b9
 8007754:	080077b9 	.word	0x080077b9
 8007758:	080077b9 	.word	0x080077b9
 800775c:	080077b9 	.word	0x080077b9
 8007760:	080077b9 	.word	0x080077b9
 8007764:	080077b9 	.word	0x080077b9
 8007768:	080077b9 	.word	0x080077b9
 800776c:	080077b9 	.word	0x080077b9
 8007770:	080077b9 	.word	0x080077b9
 8007774:	080077b9 	.word	0x080077b9
 8007778:	080077b9 	.word	0x080077b9
 800777c:	080077b9 	.word	0x080077b9
 8007780:	080077b9 	.word	0x080077b9
 8007784:	080077b9 	.word	0x080077b9
 8007788:	080077b9 	.word	0x080077b9
 800778c:	080077b9 	.word	0x080077b9
 8007790:	080077b9 	.word	0x080077b9
 8007794:	080077b9 	.word	0x080077b9
 8007798:	080077b9 	.word	0x080077b9
 800779c:	080077b9 	.word	0x080077b9
 80077a0:	080077b9 	.word	0x080077b9
 80077a4:	080077b9 	.word	0x080077b9
 80077a8:	080077b9 	.word	0x080077b9
 80077ac:	080077b9 	.word	0x080077b9
 80077b0:	080077b9 	.word	0x080077b9
 80077b4:	080077b9 	.word	0x080077b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077b8:	bf00      	nop
  }

  return (USBD_OK);
 80077ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077bc:	4618      	mov	r0, r3
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	480c      	ldr	r0, [pc, #48]	@ (8007808 <CDC_Receive_FS+0x40>)
 80077d6:	f7fe fbb7 	bl	8005f48 <USBD_CDC_SetRxBuffer>
   USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077da:	480b      	ldr	r0, [pc, #44]	@ (8007808 <CDC_Receive_FS+0x40>)
 80077dc:	f7fe fc12 	bl	8006004 <USBD_CDC_ReceivePacket>
   //CDC_Transmit_FS(Buf, *Len);
   char p[] = "Hello";
 80077e0:	4a0a      	ldr	r2, [pc, #40]	@ (800780c <CDC_Receive_FS+0x44>)
 80077e2:	f107 0308 	add.w	r3, r7, #8
 80077e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077ea:	6018      	str	r0, [r3, #0]
 80077ec:	3304      	adds	r3, #4
 80077ee:	8019      	strh	r1, [r3, #0]
   CDC_Transmit_FS(p, 5);
 80077f0:	f107 0308 	add.w	r3, r7, #8
 80077f4:	2105      	movs	r1, #5
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 f80a 	bl	8007810 <CDC_Transmit_FS>
   return (USBD_OK);
 80077fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000214 	.word	0x20000214
 800780c:	08008154 	.word	0x08008154

08007810 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007820:	4b0d      	ldr	r3, [pc, #52]	@ (8007858 <CDC_Transmit_FS+0x48>)
 8007822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007826:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007832:	2301      	movs	r3, #1
 8007834:	e00b      	b.n	800784e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007836:	887b      	ldrh	r3, [r7, #2]
 8007838:	461a      	mov	r2, r3
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	4806      	ldr	r0, [pc, #24]	@ (8007858 <CDC_Transmit_FS+0x48>)
 800783e:	f7fe fb61 	bl	8005f04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007842:	4805      	ldr	r0, [pc, #20]	@ (8007858 <CDC_Transmit_FS+0x48>)
 8007844:	f7fe fb9e 	bl	8005f84 <USBD_CDC_TransmitPacket>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000214 	.word	0x20000214

0800785c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800786e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007872:	4618      	mov	r0, r3
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
	...

08007880 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	6039      	str	r1, [r7, #0]
 800788a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2212      	movs	r2, #18
 8007890:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007892:	4b03      	ldr	r3, [pc, #12]	@ (80078a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	200000c8 	.word	0x200000c8

080078a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	6039      	str	r1, [r7, #0]
 80078ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2204      	movs	r2, #4
 80078b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078b6:	4b03      	ldr	r3, [pc, #12]	@ (80078c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	200000dc 	.word	0x200000dc

080078c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	6039      	str	r1, [r7, #0]
 80078d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078d4:	79fb      	ldrb	r3, [r7, #7]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	4907      	ldr	r1, [pc, #28]	@ (80078fc <USBD_FS_ProductStrDescriptor+0x34>)
 80078de:	4808      	ldr	r0, [pc, #32]	@ (8007900 <USBD_FS_ProductStrDescriptor+0x38>)
 80078e0:	f7ff fddc 	bl	800749c <USBD_GetString>
 80078e4:	e004      	b.n	80078f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	4904      	ldr	r1, [pc, #16]	@ (80078fc <USBD_FS_ProductStrDescriptor+0x34>)
 80078ea:	4805      	ldr	r0, [pc, #20]	@ (8007900 <USBD_FS_ProductStrDescriptor+0x38>)
 80078ec:	f7ff fdd6 	bl	800749c <USBD_GetString>
  }
  return USBD_StrDesc;
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	200014f0 	.word	0x200014f0
 8007900:	0800815c 	.word	0x0800815c

08007904 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	4603      	mov	r3, r0
 800790c:	6039      	str	r1, [r7, #0]
 800790e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	4904      	ldr	r1, [pc, #16]	@ (8007924 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007914:	4804      	ldr	r0, [pc, #16]	@ (8007928 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007916:	f7ff fdc1 	bl	800749c <USBD_GetString>
  return USBD_StrDesc;
 800791a:	4b02      	ldr	r3, [pc, #8]	@ (8007924 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	200014f0 	.word	0x200014f0
 8007928:	08008174 	.word	0x08008174

0800792c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	6039      	str	r1, [r7, #0]
 8007936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	221a      	movs	r2, #26
 800793c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800793e:	f000 f843 	bl	80079c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007942:	4b02      	ldr	r3, [pc, #8]	@ (800794c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	200000e0 	.word	0x200000e0

08007950 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	4603      	mov	r3, r0
 8007958:	6039      	str	r1, [r7, #0]
 800795a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800795c:	79fb      	ldrb	r3, [r7, #7]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	4907      	ldr	r1, [pc, #28]	@ (8007984 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007966:	4808      	ldr	r0, [pc, #32]	@ (8007988 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007968:	f7ff fd98 	bl	800749c <USBD_GetString>
 800796c:	e004      	b.n	8007978 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	4904      	ldr	r1, [pc, #16]	@ (8007984 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007972:	4805      	ldr	r0, [pc, #20]	@ (8007988 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007974:	f7ff fd92 	bl	800749c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007978:	4b02      	ldr	r3, [pc, #8]	@ (8007984 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	200014f0 	.word	0x200014f0
 8007988:	08008188 	.word	0x08008188

0800798c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	4907      	ldr	r1, [pc, #28]	@ (80079c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079a2:	4808      	ldr	r0, [pc, #32]	@ (80079c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079a4:	f7ff fd7a 	bl	800749c <USBD_GetString>
 80079a8:	e004      	b.n	80079b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4904      	ldr	r1, [pc, #16]	@ (80079c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ae:	4805      	ldr	r0, [pc, #20]	@ (80079c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079b0:	f7ff fd74 	bl	800749c <USBD_GetString>
  }
  return USBD_StrDesc;
 80079b4:	4b02      	ldr	r3, [pc, #8]	@ (80079c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	200014f0 	.word	0x200014f0
 80079c4:	08008194 	.word	0x08008194

080079c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ce:	4b0f      	ldr	r3, [pc, #60]	@ (8007a0c <Get_SerialNum+0x44>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a10 <Get_SerialNum+0x48>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079da:	4b0e      	ldr	r3, [pc, #56]	@ (8007a14 <Get_SerialNum+0x4c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4413      	add	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079ee:	2208      	movs	r2, #8
 80079f0:	4909      	ldr	r1, [pc, #36]	@ (8007a18 <Get_SerialNum+0x50>)
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f814 	bl	8007a20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079f8:	2204      	movs	r2, #4
 80079fa:	4908      	ldr	r1, [pc, #32]	@ (8007a1c <Get_SerialNum+0x54>)
 80079fc:	68b8      	ldr	r0, [r7, #8]
 80079fe:	f000 f80f 	bl	8007a20 <IntToUnicode>
  }
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	1fff7a10 	.word	0x1fff7a10
 8007a10:	1fff7a14 	.word	0x1fff7a14
 8007a14:	1fff7a18 	.word	0x1fff7a18
 8007a18:	200000e2 	.word	0x200000e2
 8007a1c:	200000f2 	.word	0x200000f2

08007a20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]
 8007a36:	e027      	b.n	8007a88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	0f1b      	lsrs	r3, r3, #28
 8007a3c:	2b09      	cmp	r3, #9
 8007a3e:	d80b      	bhi.n	8007a58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	0f1b      	lsrs	r3, r3, #28
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	440b      	add	r3, r1
 8007a50:	3230      	adds	r2, #48	@ 0x30
 8007a52:	b2d2      	uxtb	r2, r2
 8007a54:	701a      	strb	r2, [r3, #0]
 8007a56:	e00a      	b.n	8007a6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	0f1b      	lsrs	r3, r3, #28
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	4619      	mov	r1, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	440b      	add	r3, r1
 8007a68:	3237      	adds	r2, #55	@ 0x37
 8007a6a:	b2d2      	uxtb	r2, r2
 8007a6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	3301      	adds	r3, #1
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	2200      	movs	r2, #0
 8007a80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
 8007a84:	3301      	adds	r3, #1
 8007a86:	75fb      	strb	r3, [r7, #23]
 8007a88:	7dfa      	ldrb	r2, [r7, #23]
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d3d3      	bcc.n	8007a38 <IntToUnicode+0x18>
  }
}
 8007a90:	bf00      	nop
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
	...

08007aa0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08a      	sub	sp, #40	@ 0x28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa8:	f107 0314 	add.w	r3, r7, #20
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	605a      	str	r2, [r3, #4]
 8007ab2:	609a      	str	r2, [r3, #8]
 8007ab4:	60da      	str	r2, [r3, #12]
 8007ab6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ac0:	d147      	bne.n	8007b52 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	613b      	str	r3, [r7, #16]
 8007ac6:	4b25      	ldr	r3, [pc, #148]	@ (8007b5c <HAL_PCD_MspInit+0xbc>)
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	4a24      	ldr	r2, [pc, #144]	@ (8007b5c <HAL_PCD_MspInit+0xbc>)
 8007acc:	f043 0301 	orr.w	r3, r3, #1
 8007ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ad2:	4b22      	ldr	r3, [pc, #136]	@ (8007b5c <HAL_PCD_MspInit+0xbc>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007ade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007aec:	f107 0314 	add.w	r3, r7, #20
 8007af0:	4619      	mov	r1, r3
 8007af2:	481b      	ldr	r0, [pc, #108]	@ (8007b60 <HAL_PCD_MspInit+0xc0>)
 8007af4:	f7f9 fa68 	bl	8000fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007af8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007afe:	2302      	movs	r3, #2
 8007b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b06:	2300      	movs	r3, #0
 8007b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b0a:	230a      	movs	r3, #10
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b0e:	f107 0314 	add.w	r3, r7, #20
 8007b12:	4619      	mov	r1, r3
 8007b14:	4812      	ldr	r0, [pc, #72]	@ (8007b60 <HAL_PCD_MspInit+0xc0>)
 8007b16:	f7f9 fa57 	bl	8000fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b1a:	4b10      	ldr	r3, [pc, #64]	@ (8007b5c <HAL_PCD_MspInit+0xbc>)
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8007b5c <HAL_PCD_MspInit+0xbc>)
 8007b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b24:	6353      	str	r3, [r2, #52]	@ 0x34
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b5c <HAL_PCD_MspInit+0xbc>)
 8007b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8007b5c <HAL_PCD_MspInit+0xbc>)
 8007b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b36:	4b09      	ldr	r3, [pc, #36]	@ (8007b5c <HAL_PCD_MspInit+0xbc>)
 8007b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b42:	2200      	movs	r2, #0
 8007b44:	2100      	movs	r1, #0
 8007b46:	2043      	movs	r0, #67	@ 0x43
 8007b48:	f7f9 fa07 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b4c:	2043      	movs	r0, #67	@ 0x43
 8007b4e:	f7f9 fa20 	bl	8000f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b52:	bf00      	nop
 8007b54:	3728      	adds	r7, #40	@ 0x28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40023800 	.word	0x40023800
 8007b60:	40020000 	.word	0x40020000

08007b64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	f7fe fb2b 	bl	80061d6 <USBD_LL_SetupStage>
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007b9a:	78fa      	ldrb	r2, [r7, #3]
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	440b      	add	r3, r1
 8007ba8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f7fe fb65 	bl	8006280 <USBD_LL_DataOutStage>
}
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	3320      	adds	r3, #32
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	4619      	mov	r1, r3
 8007be6:	f7fe fbfe 	bl	80063e6 <USBD_LL_DataInStage>
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe fd38 	bl	8006676 <USBD_LL_SOF>
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c16:	2301      	movs	r3, #1
 8007c18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	79db      	ldrb	r3, [r3, #7]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d102      	bne.n	8007c28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
 8007c26:	e008      	b.n	8007c3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	79db      	ldrb	r3, [r3, #7]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d102      	bne.n	8007c36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007c30:	2301      	movs	r3, #1
 8007c32:	73fb      	strb	r3, [r7, #15]
 8007c34:	e001      	b.n	8007c3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c36:	f7f8 fe6b 	bl	8000910 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c40:	7bfa      	ldrb	r2, [r7, #15]
 8007c42:	4611      	mov	r1, r2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe fcd2 	bl	80065ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fe fc7a 	bl	800654a <USBD_LL_Reset>
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fccd 	bl	800660e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c86:	f043 0301 	orr.w	r3, r3, #1
 8007c8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	7adb      	ldrb	r3, [r3, #11]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c94:	4b04      	ldr	r3, [pc, #16]	@ (8007ca8 <HAL_PCD_SuspendCallback+0x48>)
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	4a03      	ldr	r2, [pc, #12]	@ (8007ca8 <HAL_PCD_SuspendCallback+0x48>)
 8007c9a:	f043 0306 	orr.w	r3, r3, #6
 8007c9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	e000ed00 	.word	0xe000ed00

08007cac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe fcc3 	bl	8006646 <USBD_LL_Resume>
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cda:	78fa      	ldrb	r2, [r7, #3]
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe fd1b 	bl	800671a <USBD_LL_IsoOUTIncomplete>
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fcd7 	bl	80066b6 <USBD_LL_IsoINIncomplete>
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fd2d 	bl	800677e <USBD_LL_DevConnected>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fd2a 	bl	8006794 <USBD_LL_DevDisconnected>
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d13c      	bne.n	8007dd2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d58:	4a20      	ldr	r2, [pc, #128]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a1e      	ldr	r2, [pc, #120]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d64:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d68:	4b1c      	ldr	r3, [pc, #112]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007d6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d70:	4b1a      	ldr	r3, [pc, #104]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d72:	2204      	movs	r2, #4
 8007d74:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d76:	4b19      	ldr	r3, [pc, #100]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d78:	2202      	movs	r2, #2
 8007d7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d7c:	4b17      	ldr	r3, [pc, #92]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d82:	4b16      	ldr	r3, [pc, #88]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d84:	2202      	movs	r2, #2
 8007d86:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d88:	4b14      	ldr	r3, [pc, #80]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d8e:	4b13      	ldr	r3, [pc, #76]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d94:	4b11      	ldr	r3, [pc, #68]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d9a:	4b10      	ldr	r3, [pc, #64]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007da0:	4b0e      	ldr	r3, [pc, #56]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007da6:	480d      	ldr	r0, [pc, #52]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007da8:	f7fa f8a8 	bl	8001efc <HAL_PCD_Init>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007db2:	f7f8 fdad 	bl	8000910 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007db6:	2180      	movs	r1, #128	@ 0x80
 8007db8:	4808      	ldr	r0, [pc, #32]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007dba:	f7fb fad4 	bl	8003366 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007dbe:	2240      	movs	r2, #64	@ 0x40
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	4806      	ldr	r0, [pc, #24]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007dc4:	f7fb fa88 	bl	80032d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007dc8:	2280      	movs	r2, #128	@ 0x80
 8007dca:	2101      	movs	r1, #1
 8007dcc:	4803      	ldr	r0, [pc, #12]	@ (8007ddc <USBD_LL_Init+0x94>)
 8007dce:	f7fb fa83 	bl	80032d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	200016f0 	.word	0x200016f0

08007de0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fa f98f 	bl	800211a <HAL_PCD_Start>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f942 	bl	800808c <USBD_Get_USB_Status>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	4608      	mov	r0, r1
 8007e20:	4611      	mov	r1, r2
 8007e22:	461a      	mov	r2, r3
 8007e24:	4603      	mov	r3, r0
 8007e26:	70fb      	strb	r3, [r7, #3]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70bb      	strb	r3, [r7, #2]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e3e:	78bb      	ldrb	r3, [r7, #2]
 8007e40:	883a      	ldrh	r2, [r7, #0]
 8007e42:	78f9      	ldrb	r1, [r7, #3]
 8007e44:	f7fa fe63 	bl	8002b0e <HAL_PCD_EP_Open>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f91c 	bl	800808c <USBD_Get_USB_Status>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fa feae 	bl	8002be2 <HAL_PCD_EP_Close>
 8007e86:	4603      	mov	r3, r0
 8007e88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 f8fd 	bl	800808c <USBD_Get_USB_Status>
 8007e92:	4603      	mov	r3, r0
 8007e94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007eba:	78fa      	ldrb	r2, [r7, #3]
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fa ff66 	bl	8002d90 <HAL_PCD_EP_SetStall>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 f8de 	bl	800808c <USBD_Get_USB_Status>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	4611      	mov	r1, r2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fa ffaa 	bl	8002e56 <HAL_PCD_EP_ClrStall>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 f8bf 	bl	800808c <USBD_Get_USB_Status>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	da0b      	bge.n	8007f50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f38:	78fb      	ldrb	r3, [r7, #3]
 8007f3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f3e:	68f9      	ldr	r1, [r7, #12]
 8007f40:	4613      	mov	r3, r2
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	4413      	add	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	440b      	add	r3, r1
 8007f4a:	3316      	adds	r3, #22
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	e00b      	b.n	8007f68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f56:	68f9      	ldr	r1, [r7, #12]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	440b      	add	r3, r1
 8007f62:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007f66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	4611      	mov	r1, r2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fa fd97 	bl	8002ac6 <HAL_PCD_SetAddress>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f874 	bl	800808c <USBD_Get_USB_Status>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b086      	sub	sp, #24
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	603b      	str	r3, [r7, #0]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007fd0:	7af9      	ldrb	r1, [r7, #11]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	f7fa fea1 	bl	8002d1c <HAL_PCD_EP_Transmit>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 f853 	bl	800808c <USBD_Get_USB_Status>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fea:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	607a      	str	r2, [r7, #4]
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	460b      	mov	r3, r1
 8008002:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008012:	7af9      	ldrb	r1, [r7, #11]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	f7fa fe2d 	bl	8002c76 <HAL_PCD_EP_Receive>
 800801c:	4603      	mov	r3, r0
 800801e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	4618      	mov	r0, r3
 8008024:	f000 f832 	bl	800808c <USBD_Get_USB_Status>
 8008028:	4603      	mov	r3, r0
 800802a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800802c:	7dbb      	ldrb	r3, [r7, #22]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008048:	78fa      	ldrb	r2, [r7, #3]
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f7fa fe4d 	bl	8002cec <HAL_PCD_EP_GetRxCount>
 8008052:	4603      	mov	r3, r0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008064:	4b03      	ldr	r3, [pc, #12]	@ (8008074 <USBD_static_malloc+0x18>)
}
 8008066:	4618      	mov	r0, r3
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20001bd4 	.word	0x20001bd4

08008078 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]

}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	2b03      	cmp	r3, #3
 800809e:	d817      	bhi.n	80080d0 <USBD_Get_USB_Status+0x44>
 80080a0:	a201      	add	r2, pc, #4	@ (adr r2, 80080a8 <USBD_Get_USB_Status+0x1c>)
 80080a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a6:	bf00      	nop
 80080a8:	080080b9 	.word	0x080080b9
 80080ac:	080080bf 	.word	0x080080bf
 80080b0:	080080c5 	.word	0x080080c5
 80080b4:	080080cb 	.word	0x080080cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
    break;
 80080bc:	e00b      	b.n	80080d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080be:	2303      	movs	r3, #3
 80080c0:	73fb      	strb	r3, [r7, #15]
    break;
 80080c2:	e008      	b.n	80080d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73fb      	strb	r3, [r7, #15]
    break;
 80080c8:	e005      	b.n	80080d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080ca:	2303      	movs	r3, #3
 80080cc:	73fb      	strb	r3, [r7, #15]
    break;
 80080ce:	e002      	b.n	80080d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080d0:	2303      	movs	r3, #3
 80080d2:	73fb      	strb	r3, [r7, #15]
    break;
 80080d4:	bf00      	nop
  }
  return usb_status;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <memset>:
 80080e4:	4402      	add	r2, r0
 80080e6:	4603      	mov	r3, r0
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d100      	bne.n	80080ee <memset+0xa>
 80080ec:	4770      	bx	lr
 80080ee:	f803 1b01 	strb.w	r1, [r3], #1
 80080f2:	e7f9      	b.n	80080e8 <memset+0x4>

080080f4 <__libc_init_array>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	4d0d      	ldr	r5, [pc, #52]	@ (800812c <__libc_init_array+0x38>)
 80080f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008130 <__libc_init_array+0x3c>)
 80080fa:	1b64      	subs	r4, r4, r5
 80080fc:	10a4      	asrs	r4, r4, #2
 80080fe:	2600      	movs	r6, #0
 8008100:	42a6      	cmp	r6, r4
 8008102:	d109      	bne.n	8008118 <__libc_init_array+0x24>
 8008104:	4d0b      	ldr	r5, [pc, #44]	@ (8008134 <__libc_init_array+0x40>)
 8008106:	4c0c      	ldr	r4, [pc, #48]	@ (8008138 <__libc_init_array+0x44>)
 8008108:	f000 f818 	bl	800813c <_init>
 800810c:	1b64      	subs	r4, r4, r5
 800810e:	10a4      	asrs	r4, r4, #2
 8008110:	2600      	movs	r6, #0
 8008112:	42a6      	cmp	r6, r4
 8008114:	d105      	bne.n	8008122 <__libc_init_array+0x2e>
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	f855 3b04 	ldr.w	r3, [r5], #4
 800811c:	4798      	blx	r3
 800811e:	3601      	adds	r6, #1
 8008120:	e7ee      	b.n	8008100 <__libc_init_array+0xc>
 8008122:	f855 3b04 	ldr.w	r3, [r5], #4
 8008126:	4798      	blx	r3
 8008128:	3601      	adds	r6, #1
 800812a:	e7f2      	b.n	8008112 <__libc_init_array+0x1e>
 800812c:	080081c4 	.word	0x080081c4
 8008130:	080081c4 	.word	0x080081c4
 8008134:	080081c4 	.word	0x080081c4
 8008138:	080081c8 	.word	0x080081c8

0800813c <_init>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr

08008148 <_fini>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	bf00      	nop
 800814c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814e:	bc08      	pop	{r3}
 8008150:	469e      	mov	lr, r3
 8008152:	4770      	bx	lr
