
Basic_Movement_Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b454  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800b5dc  0800b5dc  0000c5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b63c  0800b63c  0000d100  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b63c  0800b63c  0000c63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b644  0800b644  0000d100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b644  0800b644  0000c644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b648  0800b648  0000c648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800b64c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d100  2**0
                  CONTENTS
 10 .bss          000045b0  20000100  20000100  0000d100  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  200046b0  200046b0  0000d100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d2c6  00000000  00000000  0000d130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004277  00000000  00000000  0002a3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a58  00000000  00000000  0002e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000148f  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002581c  00000000  00000000  00031557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021f93  00000000  00000000  00056d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5b7f  00000000  00000000  00078d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014e885  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071a4  00000000  00000000  0014e8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00155a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b5c4 	.word	0x0800b5c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	0800b5c4 	.word	0x0800b5c4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b988 	b.w	8000cdc <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	468e      	mov	lr, r1
 80009ec:	4604      	mov	r4, r0
 80009ee:	4688      	mov	r8, r1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14a      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d962      	bls.n	8000ac0 <__udivmoddi4+0xdc>
 80009fa:	fab2 f682 	clz	r6, r2
 80009fe:	b14e      	cbz	r6, 8000a14 <__udivmoddi4+0x30>
 8000a00:	f1c6 0320 	rsb	r3, r6, #32
 8000a04:	fa01 f806 	lsl.w	r8, r1, r6
 8000a08:	fa20 f303 	lsr.w	r3, r0, r3
 8000a0c:	40b7      	lsls	r7, r6
 8000a0e:	ea43 0808 	orr.w	r8, r3, r8
 8000a12:	40b4      	lsls	r4, r6
 8000a14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a18:	fa1f fc87 	uxth.w	ip, r7
 8000a1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a20:	0c23      	lsrs	r3, r4, #16
 8000a22:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a2a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d909      	bls.n	8000a46 <__udivmoddi4+0x62>
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a38:	f080 80ea 	bcs.w	8000c10 <__udivmoddi4+0x22c>
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	f240 80e7 	bls.w	8000c10 <__udivmoddi4+0x22c>
 8000a42:	3902      	subs	r1, #2
 8000a44:	443b      	add	r3, r7
 8000a46:	1a9a      	subs	r2, r3, r2
 8000a48:	b2a3      	uxth	r3, r4
 8000a4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a5a:	459c      	cmp	ip, r3
 8000a5c:	d909      	bls.n	8000a72 <__udivmoddi4+0x8e>
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a64:	f080 80d6 	bcs.w	8000c14 <__udivmoddi4+0x230>
 8000a68:	459c      	cmp	ip, r3
 8000a6a:	f240 80d3 	bls.w	8000c14 <__udivmoddi4+0x230>
 8000a6e:	443b      	add	r3, r7
 8000a70:	3802      	subs	r0, #2
 8000a72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a76:	eba3 030c 	sub.w	r3, r3, ip
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	b11d      	cbz	r5, 8000a86 <__udivmoddi4+0xa2>
 8000a7e:	40f3      	lsrs	r3, r6
 8000a80:	2200      	movs	r2, #0
 8000a82:	e9c5 3200 	strd	r3, r2, [r5]
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d905      	bls.n	8000a9a <__udivmoddi4+0xb6>
 8000a8e:	b10d      	cbz	r5, 8000a94 <__udivmoddi4+0xb0>
 8000a90:	e9c5 0100 	strd	r0, r1, [r5]
 8000a94:	2100      	movs	r1, #0
 8000a96:	4608      	mov	r0, r1
 8000a98:	e7f5      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000a9a:	fab3 f183 	clz	r1, r3
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	d146      	bne.n	8000b30 <__udivmoddi4+0x14c>
 8000aa2:	4573      	cmp	r3, lr
 8000aa4:	d302      	bcc.n	8000aac <__udivmoddi4+0xc8>
 8000aa6:	4282      	cmp	r2, r0
 8000aa8:	f200 8105 	bhi.w	8000cb6 <__udivmoddi4+0x2d2>
 8000aac:	1a84      	subs	r4, r0, r2
 8000aae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	4690      	mov	r8, r2
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d0e5      	beq.n	8000a86 <__udivmoddi4+0xa2>
 8000aba:	e9c5 4800 	strd	r4, r8, [r5]
 8000abe:	e7e2      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f000 8090 	beq.w	8000be6 <__udivmoddi4+0x202>
 8000ac6:	fab2 f682 	clz	r6, r2
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	f040 80a4 	bne.w	8000c18 <__udivmoddi4+0x234>
 8000ad0:	1a8a      	subs	r2, r1, r2
 8000ad2:	0c03      	lsrs	r3, r0, #16
 8000ad4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad8:	b280      	uxth	r0, r0
 8000ada:	b2bc      	uxth	r4, r7
 8000adc:	2101      	movs	r1, #1
 8000ade:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ae2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ae6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aea:	fb04 f20c 	mul.w	r2, r4, ip
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d907      	bls.n	8000b02 <__udivmoddi4+0x11e>
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000af8:	d202      	bcs.n	8000b00 <__udivmoddi4+0x11c>
 8000afa:	429a      	cmp	r2, r3
 8000afc:	f200 80e0 	bhi.w	8000cc0 <__udivmoddi4+0x2dc>
 8000b00:	46c4      	mov	ip, r8
 8000b02:	1a9b      	subs	r3, r3, r2
 8000b04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b10:	fb02 f404 	mul.w	r4, r2, r4
 8000b14:	429c      	cmp	r4, r3
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x144>
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x142>
 8000b20:	429c      	cmp	r4, r3
 8000b22:	f200 80ca 	bhi.w	8000cba <__udivmoddi4+0x2d6>
 8000b26:	4602      	mov	r2, r0
 8000b28:	1b1b      	subs	r3, r3, r4
 8000b2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b2e:	e7a5      	b.n	8000a7c <__udivmoddi4+0x98>
 8000b30:	f1c1 0620 	rsb	r6, r1, #32
 8000b34:	408b      	lsls	r3, r1
 8000b36:	fa22 f706 	lsr.w	r7, r2, r6
 8000b3a:	431f      	orrs	r7, r3
 8000b3c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b40:	fa20 f306 	lsr.w	r3, r0, r6
 8000b44:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b4c:	4323      	orrs	r3, r4
 8000b4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b52:	fa1f fc87 	uxth.w	ip, r7
 8000b56:	fbbe f0f9 	udiv	r0, lr, r9
 8000b5a:	0c1c      	lsrs	r4, r3, #16
 8000b5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b64:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b68:	45a6      	cmp	lr, r4
 8000b6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b6e:	d909      	bls.n	8000b84 <__udivmoddi4+0x1a0>
 8000b70:	193c      	adds	r4, r7, r4
 8000b72:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b76:	f080 809c 	bcs.w	8000cb2 <__udivmoddi4+0x2ce>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f240 8099 	bls.w	8000cb2 <__udivmoddi4+0x2ce>
 8000b80:	3802      	subs	r0, #2
 8000b82:	443c      	add	r4, r7
 8000b84:	eba4 040e 	sub.w	r4, r4, lr
 8000b88:	fa1f fe83 	uxth.w	lr, r3
 8000b8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b90:	fb09 4413 	mls	r4, r9, r3, r4
 8000b94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b98:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b9c:	45a4      	cmp	ip, r4
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x1ce>
 8000ba0:	193c      	adds	r4, r7, r4
 8000ba2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ba6:	f080 8082 	bcs.w	8000cae <__udivmoddi4+0x2ca>
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	d97f      	bls.n	8000cae <__udivmoddi4+0x2ca>
 8000bae:	3b02      	subs	r3, #2
 8000bb0:	443c      	add	r4, r7
 8000bb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bb6:	eba4 040c 	sub.w	r4, r4, ip
 8000bba:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bbe:	4564      	cmp	r4, ip
 8000bc0:	4673      	mov	r3, lr
 8000bc2:	46e1      	mov	r9, ip
 8000bc4:	d362      	bcc.n	8000c8c <__udivmoddi4+0x2a8>
 8000bc6:	d05f      	beq.n	8000c88 <__udivmoddi4+0x2a4>
 8000bc8:	b15d      	cbz	r5, 8000be2 <__udivmoddi4+0x1fe>
 8000bca:	ebb8 0203 	subs.w	r2, r8, r3
 8000bce:	eb64 0409 	sbc.w	r4, r4, r9
 8000bd2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bd6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bda:	431e      	orrs	r6, r3
 8000bdc:	40cc      	lsrs	r4, r1
 8000bde:	e9c5 6400 	strd	r6, r4, [r5]
 8000be2:	2100      	movs	r1, #0
 8000be4:	e74f      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000be6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bea:	0c01      	lsrs	r1, r0, #16
 8000bec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	4638      	mov	r0, r7
 8000bfa:	463c      	mov	r4, r7
 8000bfc:	46b8      	mov	r8, r7
 8000bfe:	46be      	mov	lr, r7
 8000c00:	2620      	movs	r6, #32
 8000c02:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c06:	eba2 0208 	sub.w	r2, r2, r8
 8000c0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c0e:	e766      	b.n	8000ade <__udivmoddi4+0xfa>
 8000c10:	4601      	mov	r1, r0
 8000c12:	e718      	b.n	8000a46 <__udivmoddi4+0x62>
 8000c14:	4610      	mov	r0, r2
 8000c16:	e72c      	b.n	8000a72 <__udivmoddi4+0x8e>
 8000c18:	f1c6 0220 	rsb	r2, r6, #32
 8000c1c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	40b1      	lsls	r1, r6
 8000c24:	fa20 f202 	lsr.w	r2, r0, r2
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c32:	b2bc      	uxth	r4, r7
 8000c34:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c38:	0c11      	lsrs	r1, r2, #16
 8000c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3e:	fb08 f904 	mul.w	r9, r8, r4
 8000c42:	40b0      	lsls	r0, r6
 8000c44:	4589      	cmp	r9, r1
 8000c46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c4a:	b280      	uxth	r0, r0
 8000c4c:	d93e      	bls.n	8000ccc <__udivmoddi4+0x2e8>
 8000c4e:	1879      	adds	r1, r7, r1
 8000c50:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c54:	d201      	bcs.n	8000c5a <__udivmoddi4+0x276>
 8000c56:	4589      	cmp	r9, r1
 8000c58:	d81f      	bhi.n	8000c9a <__udivmoddi4+0x2b6>
 8000c5a:	eba1 0109 	sub.w	r1, r1, r9
 8000c5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c62:	fb09 f804 	mul.w	r8, r9, r4
 8000c66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c6a:	b292      	uxth	r2, r2
 8000c6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c70:	4542      	cmp	r2, r8
 8000c72:	d229      	bcs.n	8000cc8 <__udivmoddi4+0x2e4>
 8000c74:	18ba      	adds	r2, r7, r2
 8000c76:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c7a:	d2c4      	bcs.n	8000c06 <__udivmoddi4+0x222>
 8000c7c:	4542      	cmp	r2, r8
 8000c7e:	d2c2      	bcs.n	8000c06 <__udivmoddi4+0x222>
 8000c80:	f1a9 0102 	sub.w	r1, r9, #2
 8000c84:	443a      	add	r2, r7
 8000c86:	e7be      	b.n	8000c06 <__udivmoddi4+0x222>
 8000c88:	45f0      	cmp	r8, lr
 8000c8a:	d29d      	bcs.n	8000bc8 <__udivmoddi4+0x1e4>
 8000c8c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c94:	3801      	subs	r0, #1
 8000c96:	46e1      	mov	r9, ip
 8000c98:	e796      	b.n	8000bc8 <__udivmoddi4+0x1e4>
 8000c9a:	eba7 0909 	sub.w	r9, r7, r9
 8000c9e:	4449      	add	r1, r9
 8000ca0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ca4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca8:	fb09 f804 	mul.w	r8, r9, r4
 8000cac:	e7db      	b.n	8000c66 <__udivmoddi4+0x282>
 8000cae:	4673      	mov	r3, lr
 8000cb0:	e77f      	b.n	8000bb2 <__udivmoddi4+0x1ce>
 8000cb2:	4650      	mov	r0, sl
 8000cb4:	e766      	b.n	8000b84 <__udivmoddi4+0x1a0>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e6fd      	b.n	8000ab6 <__udivmoddi4+0xd2>
 8000cba:	443b      	add	r3, r7
 8000cbc:	3a02      	subs	r2, #2
 8000cbe:	e733      	b.n	8000b28 <__udivmoddi4+0x144>
 8000cc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cc4:	443b      	add	r3, r7
 8000cc6:	e71c      	b.n	8000b02 <__udivmoddi4+0x11e>
 8000cc8:	4649      	mov	r1, r9
 8000cca:	e79c      	b.n	8000c06 <__udivmoddi4+0x222>
 8000ccc:	eba1 0109 	sub.w	r1, r1, r9
 8000cd0:	46c4      	mov	ip, r8
 8000cd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cd6:	fb09 f804 	mul.w	r8, r9, r4
 8000cda:	e7c4      	b.n	8000c66 <__udivmoddi4+0x282>

08000cdc <__aeabi_idiv0>:
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <giveDistSensorFront>:
#define TRIG_PIN_3 GPIO_PIN_12
#define TRIG_PORT_3 GPIOE
#define ECHO_PIN_3 GPIO_PIN_11
#define ECHO_PORT_3 GPIOE

uint32_t giveDistSensorFront(){
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
	uint32_t pMillis;
	uint32_t Value1_Sensor1 = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
	uint32_t Value2_Sensor1 = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
	uint16_t Distance_Sensor1  = 0; // cm
 8000cee:	2300      	movs	r3, #0
 8000cf0:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET);  // pull the TRIG_1 pin HIGH
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cf8:	4833      	ldr	r0, [pc, #204]	@ (8000dc8 <giveDistSensorFront+0xe8>)
 8000cfa:	f001 fe57 	bl	80029ac <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000cfe:	4b33      	ldr	r3, [pc, #204]	@ (8000dcc <giveDistSensorFront+0xec>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 40);  // wait for 40 us
 8000d06:	bf00      	nop
 8000d08:	4b30      	ldr	r3, [pc, #192]	@ (8000dcc <giveDistSensorFront+0xec>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d0e:	2b27      	cmp	r3, #39	@ 0x27
 8000d10:	d9fa      	bls.n	8000d08 <giveDistSensorFront+0x28>
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);  // pull the TRIG_1 pin low
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d18:	482b      	ldr	r0, [pc, #172]	@ (8000dc8 <giveDistSensorFront+0xe8>)
 8000d1a:	f001 fe47 	bl	80029ac <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000d1e:	f001 fabd 	bl	800229c <HAL_GetTick>
 8000d22:	6038      	str	r0, [r7, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT_1, ECHO_PIN_1)) && pMillis + 100 >  HAL_GetTick());
 8000d24:	bf00      	nop
 8000d26:	2180      	movs	r1, #128	@ 0x80
 8000d28:	4827      	ldr	r0, [pc, #156]	@ (8000dc8 <giveDistSensorFront+0xe8>)
 8000d2a:	f001 fe27 	bl	800297c <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d107      	bne.n	8000d44 <giveDistSensorFront+0x64>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8000d3a:	f001 faaf 	bl	800229c <HAL_GetTick>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	429c      	cmp	r4, r3
 8000d42:	d8f0      	bhi.n	8000d26 <giveDistSensorFront+0x46>
	Value1_Sensor1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000d44:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <giveDistSensorFront+0xec>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d4a:	60fb      	str	r3, [r7, #12]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000d4c:	f001 faa6 	bl	800229c <HAL_GetTick>
 8000d50:	6038      	str	r0, [r7, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT_1, ECHO_PIN_1)) && pMillis + 500 > HAL_GetTick());
 8000d52:	bf00      	nop
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	481c      	ldr	r0, [pc, #112]	@ (8000dc8 <giveDistSensorFront+0xe8>)
 8000d58:	f001 fe10 	bl	800297c <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <giveDistSensorFront+0x92>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f503 74fa 	add.w	r4, r3, #500	@ 0x1f4
 8000d68:	f001 fa98 	bl	800229c <HAL_GetTick>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	429c      	cmp	r4, r3
 8000d70:	d8f0      	bhi.n	8000d54 <giveDistSensorFront+0x74>
	Value2_Sensor1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000d72:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <giveDistSensorFront+0xec>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d78:	60bb      	str	r3, [r7, #8]
	Distance_Sensor1 = (Value2_Sensor1 - Value1_Sensor1) * 0.034/2;
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb6b 	bl	800045c <__aeabi_ui2d>
 8000d86:	a30e      	add	r3, pc, #56	@ (adr r3, 8000dc0 <giveDistSensorFront+0xe0>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f7ff fbe0 	bl	8000550 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000da0:	f7ff fd00 	bl	80007a4 <__aeabi_ddiv>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f7ff fde2 	bl	8000974 <__aeabi_d2uiz>
 8000db0:	4603      	mov	r3, r0
 8000db2:	80fb      	strh	r3, [r7, #6]

	return Distance_Sensor1;
 8000db4:	88fb      	ldrh	r3, [r7, #6]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	b020c49c 	.word	0xb020c49c
 8000dc4:	3fa16872 	.word	0x3fa16872
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	20000210 	.word	0x20000210

08000dd0 <giveDistSensorLeft>:
uint32_t giveDistSensorLeft(){
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
	uint32_t pMillis;
	uint32_t Value1_Sensor2 = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
	uint32_t Value2_Sensor2 = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
	uint16_t Distance_Sensor2  = 0;  // cm
 8000dde:	2300      	movs	r3, #0
 8000de0:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_SET);  // pull the TRIG_1 pin HIGH
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de8:	4835      	ldr	r0, [pc, #212]	@ (8000ec0 <giveDistSensorLeft+0xf0>)
 8000dea:	f001 fddf 	bl	80029ac <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dee:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <giveDistSensorLeft+0xf4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 40);  // wait for 40 us
 8000df6:	bf00      	nop
 8000df8:	4b32      	ldr	r3, [pc, #200]	@ (8000ec4 <giveDistSensorLeft+0xf4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfe:	2b27      	cmp	r3, #39	@ 0x27
 8000e00:	d9fa      	bls.n	8000df8 <giveDistSensorLeft+0x28>
	HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET);  // pull the TRIG_1 pin low
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e08:	482d      	ldr	r0, [pc, #180]	@ (8000ec0 <giveDistSensorLeft+0xf0>)
 8000e0a:	f001 fdcf 	bl	80029ac <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000e0e:	f001 fa45 	bl	800229c <HAL_GetTick>
 8000e12:	6038      	str	r0, [r7, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT_2, ECHO_PIN_2)) && pMillis + 50 >  HAL_GetTick());
 8000e14:	bf00      	nop
 8000e16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e1a:	4829      	ldr	r0, [pc, #164]	@ (8000ec0 <giveDistSensorLeft+0xf0>)
 8000e1c:	f001 fdae 	bl	800297c <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d107      	bne.n	8000e36 <giveDistSensorLeft+0x66>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000e2c:	f001 fa36 	bl	800229c <HAL_GetTick>
 8000e30:	4603      	mov	r3, r0
 8000e32:	429c      	cmp	r4, r3
 8000e34:	d8ef      	bhi.n	8000e16 <giveDistSensorLeft+0x46>
	Value1_Sensor2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e36:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <giveDistSensorLeft+0xf4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3c:	60fb      	str	r3, [r7, #12]
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000e3e:	f001 fa2d 	bl	800229c <HAL_GetTick>
 8000e42:	6038      	str	r0, [r7, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT_2, ECHO_PIN_2)) && pMillis + 200 > HAL_GetTick());
 8000e44:	bf00      	nop
 8000e46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e4a:	481d      	ldr	r0, [pc, #116]	@ (8000ec0 <giveDistSensorLeft+0xf0>)
 8000e4c:	f001 fd96 	bl	800297c <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d007      	beq.n	8000e66 <giveDistSensorLeft+0x96>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	f103 04c8 	add.w	r4, r3, #200	@ 0xc8
 8000e5c:	f001 fa1e 	bl	800229c <HAL_GetTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	429c      	cmp	r4, r3
 8000e64:	d8ef      	bhi.n	8000e46 <giveDistSensorLeft+0x76>
	Value2_Sensor2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e66:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <giveDistSensorLeft+0xf4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6c:	60bb      	str	r3, [r7, #8]
	Distance_Sensor2 = (Value2_Sensor2 - Value1_Sensor2) * 0.034/2;
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff faf1 	bl	800045c <__aeabi_ui2d>
 8000e7a:	a30f      	add	r3, pc, #60	@ (adr r3, 8000eb8 <giveDistSensorLeft+0xe8>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff fb66 	bl	8000550 <__aeabi_dmul>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e94:	f7ff fc86 	bl	80007a4 <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f7ff fd68 	bl	8000974 <__aeabi_d2uiz>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	80fb      	strh	r3, [r7, #6]

	return Distance_Sensor2;
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	b020c49c 	.word	0xb020c49c
 8000ebc:	3fa16872 	.word	0x3fa16872
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	20000210 	.word	0x20000210

08000ec8 <giveDistSensorRight>:
uint32_t giveDistSensorRight(){
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
	uint32_t pMillis;
	uint32_t Value1_Sensor3 = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
	uint32_t Value2_Sensor3 = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
	uint16_t Distance_Sensor3  = 0;  // cm
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_SET);  // pull the TRIG_1 pin HIGH
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ee0:	4835      	ldr	r0, [pc, #212]	@ (8000fb8 <giveDistSensorRight+0xf0>)
 8000ee2:	f001 fd63 	bl	80029ac <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ee6:	4b35      	ldr	r3, [pc, #212]	@ (8000fbc <giveDistSensorRight+0xf4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 40);  // wait for 40 us
 8000eee:	bf00      	nop
 8000ef0:	4b32      	ldr	r3, [pc, #200]	@ (8000fbc <giveDistSensorRight+0xf4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef6:	2b27      	cmp	r3, #39	@ 0x27
 8000ef8:	d9fa      	bls.n	8000ef0 <giveDistSensorRight+0x28>
	HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_RESET);  // pull the TRIG_1 pin low
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f00:	482d      	ldr	r0, [pc, #180]	@ (8000fb8 <giveDistSensorRight+0xf0>)
 8000f02:	f001 fd53 	bl	80029ac <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000f06:	f001 f9c9 	bl	800229c <HAL_GetTick>
 8000f0a:	6038      	str	r0, [r7, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT_3, ECHO_PIN_3)) && pMillis + 50 >  HAL_GetTick());
 8000f0c:	bf00      	nop
 8000f0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f12:	4829      	ldr	r0, [pc, #164]	@ (8000fb8 <giveDistSensorRight+0xf0>)
 8000f14:	f001 fd32 	bl	800297c <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d107      	bne.n	8000f2e <giveDistSensorRight+0x66>
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000f24:	f001 f9ba 	bl	800229c <HAL_GetTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	429c      	cmp	r4, r3
 8000f2c:	d8ef      	bhi.n	8000f0e <giveDistSensorRight+0x46>
	Value1_Sensor3 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f2e:	4b23      	ldr	r3, [pc, #140]	@ (8000fbc <giveDistSensorRight+0xf4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f34:	60fb      	str	r3, [r7, #12]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000f36:	f001 f9b1 	bl	800229c <HAL_GetTick>
 8000f3a:	6038      	str	r0, [r7, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT_3, ECHO_PIN_3)) && pMillis + 200 > HAL_GetTick());
 8000f3c:	bf00      	nop
 8000f3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f42:	481d      	ldr	r0, [pc, #116]	@ (8000fb8 <giveDistSensorRight+0xf0>)
 8000f44:	f001 fd1a 	bl	800297c <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <giveDistSensorRight+0x96>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f103 04c8 	add.w	r4, r3, #200	@ 0xc8
 8000f54:	f001 f9a2 	bl	800229c <HAL_GetTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	429c      	cmp	r4, r3
 8000f5c:	d8ef      	bhi.n	8000f3e <giveDistSensorRight+0x76>
	Value2_Sensor3 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <giveDistSensorRight+0xf4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f64:	60bb      	str	r3, [r7, #8]
	Distance_Sensor3 = (Value2_Sensor3 - Value1_Sensor3) * 0.034/2;
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fa75 	bl	800045c <__aeabi_ui2d>
 8000f72:	a30f      	add	r3, pc, #60	@ (adr r3, 8000fb0 <giveDistSensorRight+0xe8>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff faea 	bl	8000550 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f8c:	f7ff fc0a 	bl	80007a4 <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fcec 	bl	8000974 <__aeabi_d2uiz>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	80fb      	strh	r3, [r7, #6]

	return Distance_Sensor3;
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	f3af 8000 	nop.w
 8000fb0:	b020c49c 	.word	0xb020c49c
 8000fb4:	3fa16872 	.word	0x3fa16872
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	20000210 	.word	0x20000210

08000fc0 <printMatrix>:
void printMatrix(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b09c      	sub	sp, #112	@ 0x70
 8000fc4:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(&huart2, (uint8_t *)"Now printing file\r\n", 19, 100);
	uint8_t i, j;
	uint8_t str[labMaxCol + 2];

	for(i = 0; i < labMaxLn; i++){
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000fcc:	e03e      	b.n	800104c <printMatrix+0x8c>
		//HAL_UART_Transmit(&huart2, (uint8_t *)"here\r\n", 6, 100);
		for(j = 0; j < labMaxCol; j++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8000fd4:	e017      	b.n	8001006 <printMatrix+0x46>
			str[j] = labirynthMatrix[i][j] + '0';
 8000fd6:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000fda:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000fde:	4920      	ldr	r1, [pc, #128]	@ (8001060 <printMatrix+0xa0>)
 8000fe0:	2065      	movs	r0, #101	@ 0x65
 8000fe2:	fb00 f202 	mul.w	r2, r0, r2
 8000fe6:	440a      	add	r2, r1
 8000fe8:	4413      	add	r3, r2
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000ff0:	3230      	adds	r2, #48	@ 0x30
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	3370      	adds	r3, #112	@ 0x70
 8000ff6:	443b      	add	r3, r7
 8000ff8:	f803 2c6c 	strb.w	r2, [r3, #-108]
		for(j = 0; j < labMaxCol; j++)
 8000ffc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001000:	3301      	adds	r3, #1
 8001002:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8001006:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800100a:	2b64      	cmp	r3, #100	@ 0x64
 800100c:	d9e3      	bls.n	8000fd6 <printMatrix+0x16>
		str[j] = '\n';
 800100e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001012:	3370      	adds	r3, #112	@ 0x70
 8001014:	443b      	add	r3, r7
 8001016:	220a      	movs	r2, #10
 8001018:	f803 2c6c 	strb.w	r2, [r3, #-108]
		str[j + 1] = '\0';
 800101c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001020:	3301      	adds	r3, #1
 8001022:	3370      	adds	r3, #112	@ 0x70
 8001024:	443b      	add	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	f803 2c6c 	strb.w	r2, [r3, #-108]
		//labirynthMatrix[i][labMaxCol - 1] = '\0';
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f8ca 	bl	80001c8 <strlen>
 8001034:	4603      	mov	r3, r0
 8001036:	b29a      	uxth	r2, r3
 8001038:	1d39      	adds	r1, r7, #4
 800103a:	2364      	movs	r3, #100	@ 0x64
 800103c:	4809      	ldr	r0, [pc, #36]	@ (8001064 <printMatrix+0xa4>)
 800103e:	f005 fab3 	bl	80065a8 <HAL_UART_Transmit>
	for(i = 0; i < labMaxLn; i++){
 8001042:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001046:	3301      	adds	r3, #1
 8001048:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800104c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001050:	2b64      	cmp	r3, #100	@ 0x64
 8001052:	d9bc      	bls.n	8000fce <printMatrix+0xe>
//		}
//		HAL_UART_Transmit(&huart2, (uint8_t *)'\n', 1, 100);
//		fputc('\n', input);
		//HAL_Delay(10);
	}
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3770      	adds	r7, #112	@ 0x70
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200002ec 	.word	0x200002ec
 8001064:	200002a0 	.word	0x200002a0

08001068 <moveForward>:
void moveForward(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	//right motor
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2102      	movs	r1, #2
 8001070:	4815      	ldr	r0, [pc, #84]	@ (80010c8 <moveForward+0x60>)
 8001072:	f001 fc9b 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2104      	movs	r1, #4
 800107a:	4813      	ldr	r0, [pc, #76]	@ (80010c8 <moveForward+0x60>)
 800107c:	f001 fc96 	bl	80029ac <HAL_GPIO_WritePin>

	//left motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001086:	4811      	ldr	r0, [pc, #68]	@ (80010cc <moveForward+0x64>)
 8001088:	f001 fc90 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001092:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <moveForward+0x60>)
 8001094:	f001 fc8a 	bl	80029ac <HAL_GPIO_WritePin>

	//right motor
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 490);
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <moveForward+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 80010a0:	635a      	str	r2, [r3, #52]	@ 0x34
	//left motor
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 540);
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <moveForward+0x68>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80010aa:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80010ac:	2100      	movs	r1, #0
 80010ae:	4808      	ldr	r0, [pc, #32]	@ (80010d0 <moveForward+0x68>)
 80010b0:	f004 fc40 	bl	8005934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80010b4:	2108      	movs	r1, #8
 80010b6:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <moveForward+0x68>)
 80010b8:	f004 fc3c 	bl	8005934 <HAL_TIM_PWM_Start>

	HAL_Delay(550);
 80010bc:	f240 2026 	movw	r0, #550	@ 0x226
 80010c0:	f001 f8f8 	bl	80022b4 <HAL_Delay>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	20000258 	.word	0x20000258

080010d4 <turnLeft>:
void turnLeft(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
		//right motor
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2102      	movs	r1, #2
 80010dc:	4815      	ldr	r0, [pc, #84]	@ (8001134 <turnLeft+0x60>)
 80010de:	f001 fc65 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2104      	movs	r1, #4
 80010e6:	4813      	ldr	r0, [pc, #76]	@ (8001134 <turnLeft+0x60>)
 80010e8:	f001 fc60 	bl	80029ac <HAL_GPIO_WritePin>

		//left motor
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010f2:	4811      	ldr	r0, [pc, #68]	@ (8001138 <turnLeft+0x64>)
 80010f4:	f001 fc5a 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fe:	480d      	ldr	r0, [pc, #52]	@ (8001134 <turnLeft+0x60>)
 8001100:	f001 fc54 	bl	80029ac <HAL_GPIO_WritePin>

		//right motor
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 480);
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <turnLeft+0x68>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800110c:	635a      	str	r2, [r3, #52]	@ 0x34
		//left motor
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 570);
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <turnLeft+0x68>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f240 223a 	movw	r2, #570	@ 0x23a
 8001116:	63da      	str	r2, [r3, #60]	@ 0x3c

		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001118:	2100      	movs	r1, #0
 800111a:	4808      	ldr	r0, [pc, #32]	@ (800113c <turnLeft+0x68>)
 800111c:	f004 fc0a 	bl	8005934 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001120:	2108      	movs	r1, #8
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <turnLeft+0x68>)
 8001124:	f004 fc06 	bl	8005934 <HAL_TIM_PWM_Start>

		HAL_Delay(750);
 8001128:	f240 20ee 	movw	r0, #750	@ 0x2ee
 800112c:	f001 f8c2 	bl	80022b4 <HAL_Delay>
	}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40020800 	.word	0x40020800
 8001138:	40020000 	.word	0x40020000
 800113c:	20000258 	.word	0x20000258

08001140 <turnRight>:
void turnRight(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
		//right motor
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2102      	movs	r1, #2
 8001148:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <turnRight+0x60>)
 800114a:	f001 fc2f 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2104      	movs	r1, #4
 8001152:	4813      	ldr	r0, [pc, #76]	@ (80011a0 <turnRight+0x60>)
 8001154:	f001 fc2a 	bl	80029ac <HAL_GPIO_WritePin>

		//left motor
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800115e:	4811      	ldr	r0, [pc, #68]	@ (80011a4 <turnRight+0x64>)
 8001160:	f001 fc24 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800116a:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <turnRight+0x60>)
 800116c:	f001 fc1e 	bl	80029ac <HAL_GPIO_WritePin>

		//right motor
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 450);
 8001170:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <turnRight+0x68>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001178:	635a      	str	r2, [r3, #52]	@ 0x34
		//left motor
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 570);
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <turnRight+0x68>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f240 223a 	movw	r2, #570	@ 0x23a
 8001182:	63da      	str	r2, [r3, #60]	@ 0x3c

		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001184:	2100      	movs	r1, #0
 8001186:	4808      	ldr	r0, [pc, #32]	@ (80011a8 <turnRight+0x68>)
 8001188:	f004 fbd4 	bl	8005934 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800118c:	2108      	movs	r1, #8
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <turnRight+0x68>)
 8001190:	f004 fbd0 	bl	8005934 <HAL_TIM_PWM_Start>

		HAL_Delay(400);
 8001194:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001198:	f001 f88c 	bl	80022b4 <HAL_Delay>
	}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	20000258 	.word	0x20000258

080011ac <moveStop>:
void moveStop(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2102      	movs	r1, #2
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <moveStop+0x3c>)
 80011b6:	f001 fbf9 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2104      	movs	r1, #4
 80011be:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <moveStop+0x3c>)
 80011c0:	f001 fbf4 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ca:	4808      	ldr	r0, [pc, #32]	@ (80011ec <moveStop+0x40>)
 80011cc:	f001 fbee 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011d6:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <moveStop+0x3c>)
 80011d8:	f001 fbe8 	bl	80029ac <HAL_GPIO_WritePin>

	HAL_Delay(100);
 80011dc:	2064      	movs	r0, #100	@ 0x64
 80011de:	f001 f869 	bl	80022b4 <HAL_Delay>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020000 	.word	0x40020000

080011f0 <moveBack>:
void moveBack(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	//right motor
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2102      	movs	r1, #2
 80011f8:	4815      	ldr	r0, [pc, #84]	@ (8001250 <moveBack+0x60>)
 80011fa:	f001 fbd7 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	2104      	movs	r1, #4
 8001202:	4813      	ldr	r0, [pc, #76]	@ (8001250 <moveBack+0x60>)
 8001204:	f001 fbd2 	bl	80029ac <HAL_GPIO_WritePin>

	//left motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800120e:	4811      	ldr	r0, [pc, #68]	@ (8001254 <moveBack+0x64>)
 8001210:	f001 fbcc 	bl	80029ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800121a:	480d      	ldr	r0, [pc, #52]	@ (8001250 <moveBack+0x60>)
 800121c:	f001 fbc6 	bl	80029ac <HAL_GPIO_WritePin>

	//right motor
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 450);
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <moveBack+0x68>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
	//left motor
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 570);
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <moveBack+0x68>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f240 223a 	movw	r2, #570	@ 0x23a
 8001232:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001234:	2100      	movs	r1, #0
 8001236:	4808      	ldr	r0, [pc, #32]	@ (8001258 <moveBack+0x68>)
 8001238:	f004 fb7c 	bl	8005934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800123c:	2108      	movs	r1, #8
 800123e:	4806      	ldr	r0, [pc, #24]	@ (8001258 <moveBack+0x68>)
 8001240:	f004 fb78 	bl	8005934 <HAL_TIM_PWM_Start>

	HAL_Delay(300);
 8001244:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001248:	f001 f834 	bl	80022b4 <HAL_Delay>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40020800 	.word	0x40020800
 8001254:	40020000 	.word	0x40020000
 8001258:	20000258 	.word	0x20000258

0800125c <labirynthTest>:
void labirynthTest(){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
	uint32_t distFront, distLeft, distRight;

	distFront = giveDistSensorFront();
 8001262:	f7ff fd3d 	bl	8000ce0 <giveDistSensorFront>
 8001266:	60f8      	str	r0, [r7, #12]
	distLeft = giveDistSensorLeft();
 8001268:	f7ff fdb2 	bl	8000dd0 <giveDistSensorLeft>
 800126c:	60b8      	str	r0, [r7, #8]
	distRight = giveDistSensorRight();
 800126e:	f7ff fe2b 	bl	8000ec8 <giveDistSensorRight>
 8001272:	6078      	str	r0, [r7, #4]

	HAL_Delay(250);
 8001274:	20fa      	movs	r0, #250	@ 0xfa
 8001276:	f001 f81d 	bl	80022b4 <HAL_Delay>

	//regula stangii
	if(distFront < 7){
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b06      	cmp	r3, #6
 800127e:	d81a      	bhi.n	80012b6 <labirynthTest+0x5a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001286:	48ba      	ldr	r0, [pc, #744]	@ (8001570 <labirynthTest+0x314>)
 8001288:	f001 fb90 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001292:	48b7      	ldr	r0, [pc, #732]	@ (8001570 <labirynthTest+0x314>)
 8001294:	f001 fb8a 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129e:	48b4      	ldr	r0, [pc, #720]	@ (8001570 <labirynthTest+0x314>)
 80012a0:	f001 fb84 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012aa:	48b1      	ldr	r0, [pc, #708]	@ (8001570 <labirynthTest+0x314>)
 80012ac:	f001 fb7e 	bl	80029ac <HAL_GPIO_WritePin>
		moveBack();
 80012b0:	f7ff ff9e 	bl	80011f0 <moveBack>
 80012b4:	e144      	b.n	8001540 <labirynthTest+0x2e4>
	}
	else if(distRight > 26){ //daca poate, mereu merge la dreapta
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b1a      	cmp	r3, #26
 80012ba:	d96b      	bls.n	8001394 <labirynthTest+0x138>
		//culoar liber - merge acolo
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012c2:	48ab      	ldr	r0, [pc, #684]	@ (8001570 <labirynthTest+0x314>)
 80012c4:	f001 fb72 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ce:	48a8      	ldr	r0, [pc, #672]	@ (8001570 <labirynthTest+0x314>)
 80012d0:	f001 fb6c 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012da:	48a5      	ldr	r0, [pc, #660]	@ (8001570 <labirynthTest+0x314>)
 80012dc:	f001 fb66 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012e6:	48a2      	ldr	r0, [pc, #648]	@ (8001570 <labirynthTest+0x314>)
 80012e8:	f001 fb60 	bl	80029ac <HAL_GPIO_WritePin>
		turnRight();
 80012ec:	f7ff ff28 	bl	8001140 <turnRight>
		switch(currHeading){
 80012f0:	4ba0      	ldr	r3, [pc, #640]	@ (8001574 <labirynthTest+0x318>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	f200 8137 	bhi.w	8001568 <labirynthTest+0x30c>
 80012fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001300 <labirynthTest+0xa4>)
 80012fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001300:	08001311 	.word	0x08001311
 8001304:	08001319 	.word	0x08001319
 8001308:	08001321 	.word	0x08001321
 800130c:	08001329 	.word	0x08001329
			case 0:
				currHeading = 1;
 8001310:	4b98      	ldr	r3, [pc, #608]	@ (8001574 <labirynthTest+0x318>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
				break;
 8001316:	e00b      	b.n	8001330 <labirynthTest+0xd4>
			case 1:
				currHeading = 2;
 8001318:	4b96      	ldr	r3, [pc, #600]	@ (8001574 <labirynthTest+0x318>)
 800131a:	2202      	movs	r2, #2
 800131c:	701a      	strb	r2, [r3, #0]
				break;
 800131e:	e007      	b.n	8001330 <labirynthTest+0xd4>
			case 2:
				currHeading = 3;
 8001320:	4b94      	ldr	r3, [pc, #592]	@ (8001574 <labirynthTest+0x318>)
 8001322:	2203      	movs	r2, #3
 8001324:	701a      	strb	r2, [r3, #0]
				break;
 8001326:	e003      	b.n	8001330 <labirynthTest+0xd4>
			case 3:
				currHeading = 0;
 8001328:	4b92      	ldr	r3, [pc, #584]	@ (8001574 <labirynthTest+0x318>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
				break;
 800132e:	bf00      	nop
			default:
				return;
		}
		HAL_Delay(200);
 8001330:	20c8      	movs	r0, #200	@ 0xc8
 8001332:	f000 ffbf 	bl	80022b4 <HAL_Delay>
		moveForward();
 8001336:	f7ff fe97 	bl	8001068 <moveForward>
		switch(currHeading){
 800133a:	4b8e      	ldr	r3, [pc, #568]	@ (8001574 <labirynthTest+0x318>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b03      	cmp	r3, #3
 8001340:	f200 8114 	bhi.w	800156c <labirynthTest+0x310>
 8001344:	a201      	add	r2, pc, #4	@ (adr r2, 800134c <labirynthTest+0xf0>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	0800135d 	.word	0x0800135d
 8001350:	0800136b 	.word	0x0800136b
 8001354:	08001379 	.word	0x08001379
 8001358:	08001387 	.word	0x08001387
			case 0:
				currX--;
 800135c:	4b86      	ldr	r3, [pc, #536]	@ (8001578 <labirynthTest+0x31c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b84      	ldr	r3, [pc, #528]	@ (8001578 <labirynthTest+0x31c>)
 8001366:	701a      	strb	r2, [r3, #0]
				break;
 8001368:	e0ea      	b.n	8001540 <labirynthTest+0x2e4>
			case 1:
				currY++;
 800136a:	4b84      	ldr	r3, [pc, #528]	@ (800157c <labirynthTest+0x320>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b82      	ldr	r3, [pc, #520]	@ (800157c <labirynthTest+0x320>)
 8001374:	701a      	strb	r2, [r3, #0]
				break;
 8001376:	e0e3      	b.n	8001540 <labirynthTest+0x2e4>
			case 2:
				currX++;
 8001378:	4b7f      	ldr	r3, [pc, #508]	@ (8001578 <labirynthTest+0x31c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b7d      	ldr	r3, [pc, #500]	@ (8001578 <labirynthTest+0x31c>)
 8001382:	701a      	strb	r2, [r3, #0]
				break;
 8001384:	e0dc      	b.n	8001540 <labirynthTest+0x2e4>
			case 3:
				currY--;
 8001386:	4b7d      	ldr	r3, [pc, #500]	@ (800157c <labirynthTest+0x320>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b7b      	ldr	r3, [pc, #492]	@ (800157c <labirynthTest+0x320>)
 8001390:	701a      	strb	r2, [r3, #0]
				break;
 8001392:	e0d5      	b.n	8001540 <labirynthTest+0x2e4>
		//dead end, marcheaza ca 'parcurs' si mergi mai departe
		turnRight();
		moveStop();
		//HAL_Delay(1000);
	}*/
	else if(distFront > 26){
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b1a      	cmp	r3, #26
 8001398:	d946      	bls.n	8001428 <labirynthTest+0x1cc>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013a0:	4873      	ldr	r0, [pc, #460]	@ (8001570 <labirynthTest+0x314>)
 80013a2:	f001 fb03 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //red LED
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013ac:	4870      	ldr	r0, [pc, #448]	@ (8001570 <labirynthTest+0x314>)
 80013ae:	f001 fafd 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b8:	486d      	ldr	r0, [pc, #436]	@ (8001570 <labirynthTest+0x314>)
 80013ba:	f001 faf7 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013c4:	486a      	ldr	r0, [pc, #424]	@ (8001570 <labirynthTest+0x314>)
 80013c6:	f001 faf1 	bl	80029ac <HAL_GPIO_WritePin>
		moveForward();
 80013ca:	f7ff fe4d 	bl	8001068 <moveForward>
		switch(currHeading){
 80013ce:	4b69      	ldr	r3, [pc, #420]	@ (8001574 <labirynthTest+0x318>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	f200 80d6 	bhi.w	8001584 <labirynthTest+0x328>
 80013d8:	a201      	add	r2, pc, #4	@ (adr r2, 80013e0 <labirynthTest+0x184>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	080013f1 	.word	0x080013f1
 80013e4:	080013ff 	.word	0x080013ff
 80013e8:	0800140d 	.word	0x0800140d
 80013ec:	0800141b 	.word	0x0800141b
			case 0:
				currX--;
 80013f0:	4b61      	ldr	r3, [pc, #388]	@ (8001578 <labirynthTest+0x31c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001578 <labirynthTest+0x31c>)
 80013fa:	701a      	strb	r2, [r3, #0]
				break;
 80013fc:	e0a0      	b.n	8001540 <labirynthTest+0x2e4>
			case 1:
				currY++;
 80013fe:	4b5f      	ldr	r3, [pc, #380]	@ (800157c <labirynthTest+0x320>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b5d      	ldr	r3, [pc, #372]	@ (800157c <labirynthTest+0x320>)
 8001408:	701a      	strb	r2, [r3, #0]
				break;
 800140a:	e099      	b.n	8001540 <labirynthTest+0x2e4>
			case 2:
				currX++;
 800140c:	4b5a      	ldr	r3, [pc, #360]	@ (8001578 <labirynthTest+0x31c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b58      	ldr	r3, [pc, #352]	@ (8001578 <labirynthTest+0x31c>)
 8001416:	701a      	strb	r2, [r3, #0]
				break;
 8001418:	e092      	b.n	8001540 <labirynthTest+0x2e4>
			case 3:
				currY--;
 800141a:	4b58      	ldr	r3, [pc, #352]	@ (800157c <labirynthTest+0x320>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3b01      	subs	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b56      	ldr	r3, [pc, #344]	@ (800157c <labirynthTest+0x320>)
 8001424:	701a      	strb	r2, [r3, #0]
				break;
 8001426:	e08b      	b.n	8001540 <labirynthTest+0x2e4>
			default:
				return;
		}
		//nu poate merge la dreapta
	}
	else if(distLeft > 26){
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b1a      	cmp	r3, #26
 800142c:	d96a      	bls.n	8001504 <labirynthTest+0x2a8>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001434:	484e      	ldr	r0, [pc, #312]	@ (8001570 <labirynthTest+0x314>)
 8001436:	f001 fab9 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001440:	484b      	ldr	r0, [pc, #300]	@ (8001570 <labirynthTest+0x314>)
 8001442:	f001 fab3 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800144c:	4848      	ldr	r0, [pc, #288]	@ (8001570 <labirynthTest+0x314>)
 800144e:	f001 faad 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001458:	4845      	ldr	r0, [pc, #276]	@ (8001570 <labirynthTest+0x314>)
 800145a:	f001 faa7 	bl	80029ac <HAL_GPIO_WritePin>
		turnLeft();
 800145e:	f7ff fe39 	bl	80010d4 <turnLeft>
		switch(currHeading){
 8001462:	4b44      	ldr	r3, [pc, #272]	@ (8001574 <labirynthTest+0x318>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b03      	cmp	r3, #3
 8001468:	f200 808e 	bhi.w	8001588 <labirynthTest+0x32c>
 800146c:	a201      	add	r2, pc, #4	@ (adr r2, 8001474 <labirynthTest+0x218>)
 800146e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001472:	bf00      	nop
 8001474:	08001485 	.word	0x08001485
 8001478:	0800148d 	.word	0x0800148d
 800147c:	08001495 	.word	0x08001495
 8001480:	0800149d 	.word	0x0800149d
			case 0:
				currHeading = 3;
 8001484:	4b3b      	ldr	r3, [pc, #236]	@ (8001574 <labirynthTest+0x318>)
 8001486:	2203      	movs	r2, #3
 8001488:	701a      	strb	r2, [r3, #0]
				break;
 800148a:	e00b      	b.n	80014a4 <labirynthTest+0x248>
			case 1:
				currHeading = 0;
 800148c:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <labirynthTest+0x318>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
				break;
 8001492:	e007      	b.n	80014a4 <labirynthTest+0x248>
			case 2:
				currHeading = 1;
 8001494:	4b37      	ldr	r3, [pc, #220]	@ (8001574 <labirynthTest+0x318>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
				break;
 800149a:	e003      	b.n	80014a4 <labirynthTest+0x248>
			case 3:
				currHeading = 2;
 800149c:	4b35      	ldr	r3, [pc, #212]	@ (8001574 <labirynthTest+0x318>)
 800149e:	2202      	movs	r2, #2
 80014a0:	701a      	strb	r2, [r3, #0]
				break;
 80014a2:	bf00      	nop
			default:
				return;
		}
		HAL_Delay(200);
 80014a4:	20c8      	movs	r0, #200	@ 0xc8
 80014a6:	f000 ff05 	bl	80022b4 <HAL_Delay>
		moveForward();
 80014aa:	f7ff fddd 	bl	8001068 <moveForward>
		switch(currHeading){
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <labirynthTest+0x318>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d86a      	bhi.n	800158c <labirynthTest+0x330>
 80014b6:	a201      	add	r2, pc, #4	@ (adr r2, 80014bc <labirynthTest+0x260>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	080014db 	.word	0x080014db
 80014c4:	080014e9 	.word	0x080014e9
 80014c8:	080014f7 	.word	0x080014f7
			case 0:
				currX--;
 80014cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <labirynthTest+0x31c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <labirynthTest+0x31c>)
 80014d6:	701a      	strb	r2, [r3, #0]
				break;
 80014d8:	e032      	b.n	8001540 <labirynthTest+0x2e4>
			case 1:
				currY++;
 80014da:	4b28      	ldr	r3, [pc, #160]	@ (800157c <labirynthTest+0x320>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b26      	ldr	r3, [pc, #152]	@ (800157c <labirynthTest+0x320>)
 80014e4:	701a      	strb	r2, [r3, #0]
				break;
 80014e6:	e02b      	b.n	8001540 <labirynthTest+0x2e4>
			case 2:
				currX++;
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <labirynthTest+0x31c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <labirynthTest+0x31c>)
 80014f2:	701a      	strb	r2, [r3, #0]
				break;
 80014f4:	e024      	b.n	8001540 <labirynthTest+0x2e4>
			case 3:
				currY--;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <labirynthTest+0x320>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <labirynthTest+0x320>)
 8001500:	701a      	strb	r2, [r3, #0]
				break;
 8001502:	e01d      	b.n	8001540 <labirynthTest+0x2e4>
			default:
				return;
		}
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800150a:	4819      	ldr	r0, [pc, #100]	@ (8001570 <labirynthTest+0x314>)
 800150c:	f001 fa4e 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001516:	4816      	ldr	r0, [pc, #88]	@ (8001570 <labirynthTest+0x314>)
 8001518:	f001 fa48 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001522:	4813      	ldr	r0, [pc, #76]	@ (8001570 <labirynthTest+0x314>)
 8001524:	f001 fa42 	bl	80029ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800152e:	4810      	ldr	r0, [pc, #64]	@ (8001570 <labirynthTest+0x314>)
 8001530:	f001 fa3c 	bl	80029ac <HAL_GPIO_WritePin>
		moveBack();
 8001534:	f7ff fe5c 	bl	80011f0 <moveBack>
		HAL_Delay(2000);
 8001538:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800153c:	f000 feba 	bl	80022b4 <HAL_Delay>
	}

	labirynthMatrix[currX][currY] = 1;
 8001540:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <labirynthTest+0x31c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <labirynthTest+0x320>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	4a0c      	ldr	r2, [pc, #48]	@ (8001580 <labirynthTest+0x324>)
 800154e:	2365      	movs	r3, #101	@ 0x65
 8001550:	fb00 f303 	mul.w	r3, r0, r3
 8001554:	4413      	add	r3, r2
 8001556:	440b      	add	r3, r1
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
	moveStop();
 800155c:	f7ff fe26 	bl	80011ac <moveStop>
	//printMatrix();
	HAL_Delay(50);
 8001560:	2032      	movs	r0, #50	@ 0x32
 8001562:	f000 fea7 	bl	80022b4 <HAL_Delay>
 8001566:	e012      	b.n	800158e <labirynthTest+0x332>
				return;
 8001568:	bf00      	nop
 800156a:	e010      	b.n	800158e <labirynthTest+0x332>
				return;
 800156c:	bf00      	nop
 800156e:	e00e      	b.n	800158e <labirynthTest+0x332>
 8001570:	40020c00 	.word	0x40020c00
 8001574:	20002ac5 	.word	0x20002ac5
 8001578:	20000000 	.word	0x20000000
 800157c:	20000001 	.word	0x20000001
 8001580:	200002ec 	.word	0x200002ec
				return;
 8001584:	bf00      	nop
 8001586:	e002      	b.n	800158e <labirynthTest+0x332>
				return;
 8001588:	bf00      	nop
 800158a:	e000      	b.n	800158e <labirynthTest+0x332>
				return;
 800158c:	bf00      	nop
}
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001598:	f000 fe1a 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159c:	f000 f844 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a0:	f000 fa3c 	bl	8001a1c <MX_GPIO_Init>
  MX_I2C1_Init();
 80015a4:	f000 f8aa 	bl	80016fc <MX_I2C1_Init>
  MX_I2S3_Init();
 80015a8:	f000 f8d6 	bl	8001758 <MX_I2S3_Init>
  MX_SPI1_Init();
 80015ac:	f000 f904 	bl	80017b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80015b0:	f000 f938 	bl	8001824 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015b4:	f000 f986 	bl	80018c4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80015b8:	f009 fad6 	bl	800ab68 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80015bc:	f000 fa04 	bl	80019c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80015c0:	4815      	ldr	r0, [pc, #84]	@ (8001618 <main+0x84>)
 80015c2:	f004 f8f5 	bl	80057b0 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin for sensor 1 low
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015cc:	4813      	ldr	r0, [pc, #76]	@ (800161c <main+0x88>)
 80015ce:	f001 f9ed 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET);  // pull the TRIG pin for sensor 2 low
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015d8:	4810      	ldr	r0, [pc, #64]	@ (800161c <main+0x88>)
 80015da:	f001 f9e7 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_RESET);  // pull the TRIG pin for sensor 3 low
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e4:	480d      	ldr	r0, [pc, #52]	@ (800161c <main+0x88>)
 80015e6:	f001 f9e1 	bl	80029ac <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, &rxData, 1); // Enabling interrupt receive for USART2  /* USER CODE END 2 */
 80015ea:	2201      	movs	r2, #1
 80015ec:	490c      	ldr	r1, [pc, #48]	@ (8001620 <main+0x8c>)
 80015ee:	480d      	ldr	r0, [pc, #52]	@ (8001624 <main+0x90>)
 80015f0:	f005 f865 	bl	80066be <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (!rxData)
 80015f4:	e005      	b.n	8001602 <main+0x6e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	HAL_Delay(500);
 80015f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015fa:	f000 fe5b 	bl	80022b4 <HAL_Delay>

    labirynthTest();
 80015fe:	f7ff fe2d 	bl	800125c <labirynthTest>
  while (!rxData)
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <main+0x8c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f5      	beq.n	80015f6 <main+0x62>
//    	//stop robot
//    	moveStop();
//    }
  }

  HAL_Delay(500);
 800160a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800160e:	f000 fe51 	bl	80022b4 <HAL_Delay>
 8001612:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001614:	4618      	mov	r0, r3
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000210 	.word	0x20000210
 800161c:	40021000 	.word	0x40021000
 8001620:	200002e8 	.word	0x200002e8
 8001624:	200002a0 	.word	0x200002a0

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	@ 0x50
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	2230      	movs	r2, #48	@ 0x30
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f009 ff98 	bl	800b56c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <SystemClock_Config+0xcc>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	4a27      	ldr	r2, [pc, #156]	@ (80016f4 <SystemClock_Config+0xcc>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	@ 0x40
 800165c:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <SystemClock_Config+0xcc>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <SystemClock_Config+0xd0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a21      	ldr	r2, [pc, #132]	@ (80016f8 <SystemClock_Config+0xd0>)
 8001672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b1f      	ldr	r3, [pc, #124]	@ (80016f8 <SystemClock_Config+0xd0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168e:	2302      	movs	r3, #2
 8001690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001698:	2308      	movs	r3, #8
 800169a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800169c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016a6:	2307      	movs	r3, #7
 80016a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 f9cc 	bl	8004a4c <HAL_RCC_OscConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016ba:	f000 fb09 	bl	8001cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016be:	230f      	movs	r3, #15
 80016c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c2:	2302      	movs	r3, #2
 80016c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	2105      	movs	r1, #5
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fc2d 	bl	8004f3c <HAL_RCC_ClockConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016e8:	f000 faf2 	bl	8001cd0 <Error_Handler>
  }
}
 80016ec:	bf00      	nop
 80016ee:	3750      	adds	r7, #80	@ 0x50
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40007000 	.word	0x40007000

080016fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <MX_I2C1_Init+0x50>)
 8001702:	4a13      	ldr	r2, [pc, #76]	@ (8001750 <MX_I2C1_Init+0x54>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_I2C1_Init+0x50>)
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <MX_I2C1_Init+0x58>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_I2C1_Init+0x50>)
 800171a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800171e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_I2C1_Init+0x50>)
 800173a:	f001 f951 	bl	80029e0 <HAL_I2C_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001744:	f000 fac4 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000011c 	.word	0x2000011c
 8001750:	40005400 	.word	0x40005400
 8001754:	000186a0 	.word	0x000186a0

08001758 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <MX_I2S3_Init+0x54>)
 800175e:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <MX_I2S3_Init+0x58>)
 8001760:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001768:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <MX_I2S3_Init+0x54>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001770:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001780:	4a0c      	ldr	r2, [pc, #48]	@ (80017b4 <MX_I2S3_Init+0x5c>)
 8001782:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <MX_I2S3_Init+0x54>)
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001798:	f001 fa66 	bl	8002c68 <HAL_I2S_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80017a2:	f000 fa95 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000170 	.word	0x20000170
 80017b0:	40003c00 	.word	0x40003c00
 80017b4:	00017700 	.word	0x00017700

080017b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017bc:	4b17      	ldr	r3, [pc, #92]	@ (800181c <MX_SPI1_Init+0x64>)
 80017be:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <MX_SPI1_Init+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <MX_SPI1_Init+0x64>)
 80017c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <MX_SPI1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <MX_SPI1_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <MX_SPI1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <MX_SPI1_Init+0x64>)
 80017e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_SPI1_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <MX_SPI1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <MX_SPI1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <MX_SPI1_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <MX_SPI1_Init+0x64>)
 8001804:	220a      	movs	r2, #10
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	@ (800181c <MX_SPI1_Init+0x64>)
 800180a:	f003 fef9 	bl	8005600 <HAL_SPI_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001814:	f000 fa5c 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200001b8 	.word	0x200001b8
 8001820:	40013000 	.word	0x40013000

08001824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001840:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <MX_TIM1_Init+0x98>)
 8001842:	4a1f      	ldr	r2, [pc, #124]	@ (80018c0 <MX_TIM1_Init+0x9c>)
 8001844:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <MX_TIM1_Init+0x98>)
 8001848:	2253      	movs	r2, #83	@ 0x53
 800184a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <MX_TIM1_Init+0x98>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001852:	4b1a      	ldr	r3, [pc, #104]	@ (80018bc <MX_TIM1_Init+0x98>)
 8001854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001858:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185a:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <MX_TIM1_Init+0x98>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <MX_TIM1_Init+0x98>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <MX_TIM1_Init+0x98>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800186c:	4813      	ldr	r0, [pc, #76]	@ (80018bc <MX_TIM1_Init+0x98>)
 800186e:	f003 ff50 	bl	8005712 <HAL_TIM_Base_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001878:	f000 fa2a 	bl	8001cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001880:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	4619      	mov	r1, r3
 8001888:	480c      	ldr	r0, [pc, #48]	@ (80018bc <MX_TIM1_Init+0x98>)
 800188a:	f004 f9dd 	bl	8005c48 <HAL_TIM_ConfigClockSource>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001894:	f000 fa1c 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	@ (80018bc <MX_TIM1_Init+0x98>)
 80018a6:	f004 fdb3 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018b0:	f000 fa0e 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000210 	.word	0x20000210
 80018c0:	40010000 	.word	0x40010000

080018c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08e      	sub	sp, #56	@ 0x38
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	f107 0320 	add.w	r3, r7, #32
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018f4:	4b32      	ldr	r3, [pc, #200]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 80018f6:	4a33      	ldr	r2, [pc, #204]	@ (80019c4 <MX_TIM3_Init+0x100>)
 80018f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 30;
 80018fa:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 80018fc:	221e      	movs	r2, #30
 80018fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001900:	4b2f      	ldr	r3, [pc, #188]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001906:	4b2e      	ldr	r3, [pc, #184]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 8001908:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800190c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190e:	4b2c      	ldr	r3, [pc, #176]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b2a      	ldr	r3, [pc, #168]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800191a:	4829      	ldr	r0, [pc, #164]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 800191c:	f003 fef9 	bl	8005712 <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001926:	f000 f9d3 	bl	8001cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001930:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001934:	4619      	mov	r1, r3
 8001936:	4822      	ldr	r0, [pc, #136]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 8001938:	f004 f986 	bl	8005c48 <HAL_TIM_ConfigClockSource>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001942:	f000 f9c5 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001946:	481e      	ldr	r0, [pc, #120]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 8001948:	f003 ff9a 	bl	8005880 <HAL_TIM_PWM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001952:	f000 f9bd 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	4619      	mov	r1, r3
 8001964:	4816      	ldr	r0, [pc, #88]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 8001966:	f004 fd53 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001970:	f000 f9ae 	bl	8001cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001974:	2360      	movs	r3, #96	@ 0x60
 8001976:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	4619      	mov	r1, r3
 800198a:	480d      	ldr	r0, [pc, #52]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 800198c:	f004 f89a 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001996:	f000 f99b 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2208      	movs	r2, #8
 800199e:	4619      	mov	r1, r3
 80019a0:	4807      	ldr	r0, [pc, #28]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 80019a2:	f004 f88f 	bl	8005ac4 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80019ac:	f000 f990 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019b0:	4803      	ldr	r0, [pc, #12]	@ (80019c0 <MX_TIM3_Init+0xfc>)
 80019b2:	f000 fb03 	bl	8001fbc <HAL_TIM_MspPostInit>

}
 80019b6:	bf00      	nop
 80019b8:	3738      	adds	r7, #56	@ 0x38
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000258 	.word	0x20000258
 80019c4:	40000400 	.word	0x40000400

080019c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <MX_USART2_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <MX_USART2_UART_Init+0x4c>)
 8001a00:	f004 fd82 	bl	8006508 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f000 f961 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200002a0 	.word	0x200002a0
 8001a18:	40004400 	.word	0x40004400

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	@ 0x30
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	4b87      	ldr	r3, [pc, #540]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a86      	ldr	r2, [pc, #536]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b84      	ldr	r3, [pc, #528]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	4b80      	ldr	r3, [pc, #512]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a7f      	ldr	r2, [pc, #508]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b79      	ldr	r3, [pc, #484]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a78      	ldr	r2, [pc, #480]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b76      	ldr	r3, [pc, #472]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b72      	ldr	r3, [pc, #456]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a71      	ldr	r2, [pc, #452]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b6f      	ldr	r3, [pc, #444]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b6b      	ldr	r3, [pc, #428]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a6a      	ldr	r2, [pc, #424]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b68      	ldr	r3, [pc, #416]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b64      	ldr	r3, [pc, #400]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a63      	ldr	r2, [pc, #396]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b61      	ldr	r3, [pc, #388]	@ (8001c54 <MX_GPIO_Init+0x238>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f241 5108 	movw	r1, #5384	@ 0x1508
 8001ae0:	485d      	ldr	r0, [pc, #372]	@ (8001c58 <MX_GPIO_Init+0x23c>)
 8001ae2:	f000 ff63 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2101      	movs	r1, #1
 8001aea:	485c      	ldr	r0, [pc, #368]	@ (8001c5c <MX_GPIO_Init+0x240>)
 8001aec:	f000 ff5e 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f240 2106 	movw	r1, #518	@ 0x206
 8001af6:	4859      	ldr	r0, [pc, #356]	@ (8001c5c <MX_GPIO_Init+0x240>)
 8001af8:	f000 ff58 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001afc:	2200      	movs	r2, #0
 8001afe:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001b02:	4857      	ldr	r0, [pc, #348]	@ (8001c60 <MX_GPIO_Init+0x244>)
 8001b04:	f000 ff52 	bl	80029ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b0e:	4855      	ldr	r0, [pc, #340]	@ (8001c64 <MX_GPIO_Init+0x248>)
 8001b10:	f000 ff4c 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE8 PE10 PE12 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8001b14:	f241 5308 	movw	r3, #5384	@ 0x1508
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	484a      	ldr	r0, [pc, #296]	@ (8001c58 <MX_GPIO_Init+0x23c>)
 8001b2e:	f000 fd89 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC1 PC2 PC9 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
 8001b32:	f240 2307 	movw	r3, #519	@ 0x207
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4844      	ldr	r0, [pc, #272]	@ (8001c5c <MX_GPIO_Init+0x240>)
 8001b4c:	f000 fd7a 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001b50:	2308      	movs	r3, #8
 8001b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b60:	2305      	movs	r3, #5
 8001b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	483c      	ldr	r0, [pc, #240]	@ (8001c5c <MX_GPIO_Init+0x240>)
 8001b6c:	f000 fd6a 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b70:	2301      	movs	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b74:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	4837      	ldr	r0, [pc, #220]	@ (8001c64 <MX_GPIO_Init+0x248>)
 8001b86:	f000 fd5d 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4832      	ldr	r0, [pc, #200]	@ (8001c68 <MX_GPIO_Init+0x24c>)
 8001b9e:	f000 fd51 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 8001ba2:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4828      	ldr	r0, [pc, #160]	@ (8001c58 <MX_GPIO_Init+0x23c>)
 8001bb8:	f000 fd44 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bce:	2305      	movs	r3, #5
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4823      	ldr	r0, [pc, #140]	@ (8001c68 <MX_GPIO_Init+0x24c>)
 8001bda:	f000 fd33 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001bde:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001be2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	481a      	ldr	r0, [pc, #104]	@ (8001c60 <MX_GPIO_Init+0x244>)
 8001bf8:	f000 fd24 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 031c 	add.w	r3, r7, #28
 8001c12:	4619      	mov	r1, r3
 8001c14:	4813      	ldr	r0, [pc, #76]	@ (8001c64 <MX_GPIO_Init+0x248>)
 8001c16:	f000 fd15 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480c      	ldr	r0, [pc, #48]	@ (8001c60 <MX_GPIO_Init+0x244>)
 8001c2e:	f000 fd09 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c36:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4804      	ldr	r0, [pc, #16]	@ (8001c58 <MX_GPIO_Init+0x23c>)
 8001c48:	f000 fcfc 	bl	8002644 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	@ 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40020c00 	.word	0x40020c00
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020400 	.word	0x40020400

08001c6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  if(huart->Instance == USART2)  // Changed to check for USART2
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a11      	ldr	r2, [pc, #68]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x54>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d11b      	bne.n	8001cb6 <HAL_UART_RxCpltCallback+0x4a>
  {
    if(rxData == 78) // Ascii value of 'N' is 78 (N for NO)
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x58>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b4e      	cmp	r3, #78	@ 0x4e
 8001c84:	d108      	bne.n	8001c98 <HAL_UART_RxCpltCallback+0x2c>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c8c:	480e      	ldr	r0, [pc, #56]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x5c>)
 8001c8e:	f000 fe8d 	bl	80029ac <HAL_GPIO_WritePin>
        printMatrix();
 8001c92:	f7ff f995 	bl	8000fc0 <printMatrix>
 8001c96:	e009      	b.n	8001cac <HAL_UART_RxCpltCallback+0x40>
    }
    else if (rxData == 89) // Ascii value of 'Y' is 89 (Y for YES)
 8001c98:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x58>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b59      	cmp	r3, #89	@ 0x59
 8001c9e:	d105      	bne.n	8001cac <HAL_UART_RxCpltCallback+0x40>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ca6:	4808      	ldr	r0, [pc, #32]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x5c>)
 8001ca8:	f000 fe80 	bl	80029ac <HAL_GPIO_WritePin>
        //STOP PROGRAM EXECUTION
    }
    HAL_UART_Receive_IT(&huart2, &rxData, 1); // Enabling interrupt receive again for USART2
 8001cac:	2201      	movs	r2, #1
 8001cae:	4905      	ldr	r1, [pc, #20]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x58>)
 8001cb0:	4806      	ldr	r0, [pc, #24]	@ (8001ccc <HAL_UART_RxCpltCallback+0x60>)
 8001cb2:	f004 fd04 	bl	80066be <HAL_UART_Receive_IT>
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40004400 	.word	0x40004400
 8001cc4:	200002e8 	.word	0x200002e8
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	200002a0 	.word	0x200002a0

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <Error_Handler+0x8>

08001cdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	4a0f      	ldr	r2, [pc, #60]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	4a08      	ldr	r2, [pc, #32]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_MspInit+0x4c>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d1a:	2007      	movs	r0, #7
 8001d1c:	f000 fbbe 	bl	800249c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <HAL_I2C_MspInit+0x84>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d12c      	bne.n	8001da8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <HAL_I2C_MspInit+0x88>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a17      	ldr	r2, [pc, #92]	@ (8001db4 <HAL_I2C_MspInit+0x88>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_I2C_MspInit+0x88>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d6a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d70:	2312      	movs	r3, #18
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4619      	mov	r1, r3
 8001d86:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <HAL_I2C_MspInit+0x8c>)
 8001d88:	f000 fc5c 	bl	8002644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HAL_I2C_MspInit+0x88>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	4a07      	ldr	r2, [pc, #28]	@ (8001db4 <HAL_I2C_MspInit+0x88>)
 8001d96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_I2C_MspInit+0x88>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	@ 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40005400 	.word	0x40005400
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020400 	.word	0x40020400

08001dbc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08e      	sub	sp, #56	@ 0x38
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a31      	ldr	r2, [pc, #196]	@ (8001eac <HAL_I2S_MspInit+0xf0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d15a      	bne.n	8001ea2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001dec:	2301      	movs	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001df0:	23c0      	movs	r3, #192	@ 0xc0
 8001df2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fabd 	bl	800537c <HAL_RCCEx_PeriphCLKConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001e08:	f7ff ff62 	bl	8001cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	4b27      	ldr	r3, [pc, #156]	@ (8001eb0 <HAL_I2S_MspInit+0xf4>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	4a26      	ldr	r2, [pc, #152]	@ (8001eb0 <HAL_I2S_MspInit+0xf4>)
 8001e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1c:	4b24      	ldr	r3, [pc, #144]	@ (8001eb0 <HAL_I2S_MspInit+0xf4>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <HAL_I2S_MspInit+0xf4>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb0 <HAL_I2S_MspInit+0xf4>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e38:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_I2S_MspInit+0xf4>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <HAL_I2S_MspInit+0xf4>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4c:	4a18      	ldr	r2, [pc, #96]	@ (8001eb0 <HAL_I2S_MspInit+0xf4>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <HAL_I2S_MspInit+0xf4>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e60:	2310      	movs	r3, #16
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e70:	2306      	movs	r3, #6
 8001e72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480e      	ldr	r0, [pc, #56]	@ (8001eb4 <HAL_I2S_MspInit+0xf8>)
 8001e7c:	f000 fbe2 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e80:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e92:	2306      	movs	r3, #6
 8001e94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4806      	ldr	r0, [pc, #24]	@ (8001eb8 <HAL_I2S_MspInit+0xfc>)
 8001e9e:	f000 fbd1 	bl	8002644 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3738      	adds	r7, #56	@ 0x38
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40003c00 	.word	0x40003c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020800 	.word	0x40020800

08001ebc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	@ 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a19      	ldr	r2, [pc, #100]	@ (8001f40 <HAL_SPI_MspInit+0x84>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d12b      	bne.n	8001f36 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <HAL_SPI_MspInit+0x88>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4a17      	ldr	r2, [pc, #92]	@ (8001f44 <HAL_SPI_MspInit+0x88>)
 8001ee8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_SPI_MspInit+0x88>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_SPI_MspInit+0x88>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a10      	ldr	r2, [pc, #64]	@ (8001f44 <HAL_SPI_MspInit+0x88>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_SPI_MspInit+0x88>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001f16:	23e0      	movs	r3, #224	@ 0xe0
 8001f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f26:	2305      	movs	r3, #5
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <HAL_SPI_MspInit+0x8c>)
 8001f32:	f000 fb87 	bl	8002644 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f36:	bf00      	nop
 8001f38:	3728      	adds	r7, #40	@ 0x28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40013000 	.word	0x40013000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000

08001f4c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a15      	ldr	r2, [pc, #84]	@ (8001fb0 <HAL_TIM_Base_MspInit+0x64>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x68>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	4a13      	ldr	r2, [pc, #76]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x68>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6e:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x68>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f7a:	e012      	b.n	8001fa2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_TIM_Base_MspInit+0x6c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d10d      	bne.n	8001fa2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x68>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a09      	ldr	r2, [pc, #36]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x68>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f96:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <HAL_TIM_Base_MspInit+0x68>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40000400 	.word	0x40000400

08001fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <HAL_TIM_MspPostInit+0x68>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d11e      	bne.n	800201c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_TIM_MspPostInit+0x6c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	4a10      	ldr	r2, [pc, #64]	@ (8002028 <HAL_TIM_MspPostInit+0x6c>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <HAL_TIM_MspPostInit+0x6c>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001ffa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001ffe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800200c:	2302      	movs	r3, #2
 800200e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	4619      	mov	r1, r3
 8002016:	4805      	ldr	r0, [pc, #20]	@ (800202c <HAL_TIM_MspPostInit+0x70>)
 8002018:	f000 fb14 	bl	8002644 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40000400 	.word	0x40000400
 8002028:	40023800 	.word	0x40023800
 800202c:	40020800 	.word	0x40020800

08002030 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	@ 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1d      	ldr	r2, [pc, #116]	@ (80020c4 <HAL_UART_MspInit+0x94>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d133      	bne.n	80020ba <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <HAL_UART_MspInit+0x98>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	4a1b      	ldr	r2, [pc, #108]	@ (80020c8 <HAL_UART_MspInit+0x98>)
 800205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002060:	6413      	str	r3, [r2, #64]	@ 0x40
 8002062:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <HAL_UART_MspInit+0x98>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_UART_MspInit+0x98>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <HAL_UART_MspInit+0x98>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6313      	str	r3, [r2, #48]	@ 0x30
 800207e:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_UART_MspInit+0x98>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800208a:	230c      	movs	r3, #12
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800209a:	2307      	movs	r3, #7
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	4809      	ldr	r0, [pc, #36]	@ (80020cc <HAL_UART_MspInit+0x9c>)
 80020a6:	f000 facd 	bl	8002644 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2026      	movs	r0, #38	@ 0x26
 80020b0:	f000 f9ff 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020b4:	2026      	movs	r0, #38	@ 0x26
 80020b6:	f000 fa18 	bl	80024ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80020ba:	bf00      	nop
 80020bc:	3728      	adds	r7, #40	@ 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40004400 	.word	0x40004400
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000

080020d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <NMI_Handler+0x4>

080020d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <HardFault_Handler+0x4>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <MemManage_Handler+0x4>

080020e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <BusFault_Handler+0x4>

080020f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <UsageFault_Handler+0x4>

080020f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002126:	f000 f8a5 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002134:	4802      	ldr	r0, [pc, #8]	@ (8002140 <USART2_IRQHandler+0x10>)
 8002136:	f004 fae7 	bl	8006708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200002a0 	.word	0x200002a0

08002144 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002148:	4802      	ldr	r0, [pc, #8]	@ (8002154 <OTG_FS_IRQHandler+0x10>)
 800214a:	f001 fb71 	bl	8003830 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20003fac 	.word	0x20003fac

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002180:	f7ff ffea 	bl	8002158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	@ (80021bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	@ (80021c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	@ (80021c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021aa:	f009 f9e7 	bl	800b57c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7ff f9f1 	bl	8001594 <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80021c0:	0800b64c 	.word	0x0800b64c
  ldr r2, =_sbss
 80021c4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80021c8:	200046b0 	.word	0x200046b0

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>
	...

080021d0 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002210 <HAL_Init+0x40>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <HAL_Init+0x40>)
 80021e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <HAL_Init+0x40>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 f94f 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	2000      	movs	r0, #0
 8002200:	f000 f808 	bl	8002214 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8002204:	f7ff fd6a 	bl	8001cdc <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00

08002214 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_InitTick+0x54>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_InitTick+0x58>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f967 	bl	8002506 <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_InitTick+0x2e>
		return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00e      	b.n	8002260 <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d80a      	bhi.n	800225e <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f000 f92f 	bl	80024b2 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8002254:	4a06      	ldr	r2, [pc, #24]	@ (8002270 <HAL_InitTick+0x5c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x4c>
		return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000004 	.word	0x20000004
 800226c:	2000000c 	.word	0x2000000c
 8002270:	20000008 	.word	0x20000008

08002274 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	2000000c 	.word	0x2000000c
 8002298:	20002ac8 	.word	0x20002ac8

0800229c <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
	return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20002ac8 	.word	0x20002ac8

080022b4 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff ffee 	bl	800229c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d005      	beq.n	80022da <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_Delay+0x44>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 80022da:	bf00      	nop
 80022dc:	f7ff ffde 	bl	800229c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8f7      	bhi.n	80022dc <HAL_Delay+0x28>
	}
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000000c 	.word	0x2000000c

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4907      	ldr	r1, [pc, #28]	@ (8002398 <__NVIC_EnableIRQ+0x38>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	@ (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	@ (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	@ 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	@ 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff8e 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff29 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff3e 	bl	8002344 <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff8e 	bl	80023f0 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5d 	bl	800239c <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff31 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffa2 	bl	8002458 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_DMA_Abort>:
 *        while a data transfer is ongoing, the current data will be transferred
 *        and the Stream will be effectively disabled only after the transfer of
 *        this single data is finished.  
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
	/* calculate DMA base and stream number */
	DMA_Base_Registers *regs = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	60fb      	str	r3, [r7, #12]

	uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff feb6 	bl	800229c <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]

	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d008      	beq.n	8002550 <HAL_DMA_Abort+0x32>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2280      	movs	r2, #128	@ 0x80
 8002542:	655a      	str	r2, [r3, #84]	@ 0x54

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e052      	b.n	80025f6 <HAL_DMA_Abort+0xd8>
	} else {
		/* Disable all the transfer interrupts */
		hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0216 	bic.w	r2, r2, #22
 800255e:	601a      	str	r2, [r3, #0]
		hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800256e:	615a      	str	r2, [r3, #20]

		if ((hdma->XferHalfCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <HAL_DMA_Abort+0x62>
				|| (hdma->XferM1HalfCpltCallback != NULL)) {
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_DMA_Abort+0x72>
			hdma->Instance->CR &= ~(DMA_IT_HT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0208 	bic.w	r2, r2, #8
 800258e:	601a      	str	r2, [r3, #0]
		}

		/* Disable the stream */
		__HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

		/* Check if the DMA Stream is effectively disabled */
		while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 80025a0:	e013      	b.n	80025ca <HAL_DMA_Abort+0xac>
			/* Check for the Timeout */
			if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 80025a2:	f7ff fe7b 	bl	800229c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d90c      	bls.n	80025ca <HAL_DMA_Abort+0xac>
				/* Update error code */
				hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Change the DMA state */
				hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

				/* Process Unlocked */
				__HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

				return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e015      	b.n	80025f6 <HAL_DMA_Abort+0xd8>
		while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e4      	bne.n	80025a2 <HAL_DMA_Abort+0x84>
			}
		}

		/* Clear all interrupt flags at correct offset within the register */
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025dc:	223f      	movs	r2, #63	@ 0x3f
 80025de:	409a      	lsls	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	609a      	str	r2, [r3, #8]

		/* Change the DMA state*/
		hdma->State = HAL_DMA_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
	return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_DMA_Abort_IT>:
 * @brief  Aborts the DMA Transfer in Interrupt mode.
 * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d004      	beq.n	800261c <HAL_DMA_Abort_IT+0x1e>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2280      	movs	r2, #128	@ 0x80
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
		return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e00c      	b.n	8002636 <HAL_DMA_Abort_IT+0x38>
	} else {
		/* Set Abort State  */
		hdma->State = HAL_DMA_STATE_ABORT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2205      	movs	r2, #5
 8002620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

		/* Disable the stream */
		__HAL_DMA_DISABLE(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
	}

	return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e16b      	b.n	8002938 <HAL_GPIO_Init+0x2f4>
		/* Get the IO position */
		ioposition = 0x01U << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 815a 	bne.w	8002932 <HAL_GPIO_Init+0x2ee>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d005      	beq.n	8002696 <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d130      	bne.n	80026f8 <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0201 	and.w	r2, r3, #1
						<< position);
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d017      	beq.n	8002734 <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80b4 	beq.w	8002932 <HAL_GPIO_Init+0x2ee>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b60      	ldr	r3, [pc, #384]	@ (8002950 <HAL_GPIO_Init+0x30c>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002950 <HAL_GPIO_Init+0x30c>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027da:	4b5d      	ldr	r3, [pc, #372]	@ (8002950 <HAL_GPIO_Init+0x30c>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 80027e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002954 <HAL_GPIO_Init+0x310>)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a52      	ldr	r2, [pc, #328]	@ (8002958 <HAL_GPIO_Init+0x314>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02b      	beq.n	800286a <HAL_GPIO_Init+0x226>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a51      	ldr	r2, [pc, #324]	@ (800295c <HAL_GPIO_Init+0x318>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d025      	beq.n	8002866 <HAL_GPIO_Init+0x222>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a50      	ldr	r2, [pc, #320]	@ (8002960 <HAL_GPIO_Init+0x31c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01f      	beq.n	8002862 <HAL_GPIO_Init+0x21e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4f      	ldr	r2, [pc, #316]	@ (8002964 <HAL_GPIO_Init+0x320>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d019      	beq.n	800285e <HAL_GPIO_Init+0x21a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4e      	ldr	r2, [pc, #312]	@ (8002968 <HAL_GPIO_Init+0x324>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_GPIO_Init+0x216>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4d      	ldr	r2, [pc, #308]	@ (800296c <HAL_GPIO_Init+0x328>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00d      	beq.n	8002856 <HAL_GPIO_Init+0x212>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4c      	ldr	r2, [pc, #304]	@ (8002970 <HAL_GPIO_Init+0x32c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d007      	beq.n	8002852 <HAL_GPIO_Init+0x20e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4b      	ldr	r2, [pc, #300]	@ (8002974 <HAL_GPIO_Init+0x330>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_GPIO_Init+0x20a>
 800284a:	2307      	movs	r3, #7
 800284c:	e00e      	b.n	800286c <HAL_GPIO_Init+0x228>
 800284e:	2308      	movs	r3, #8
 8002850:	e00c      	b.n	800286c <HAL_GPIO_Init+0x228>
 8002852:	2306      	movs	r3, #6
 8002854:	e00a      	b.n	800286c <HAL_GPIO_Init+0x228>
 8002856:	2305      	movs	r3, #5
 8002858:	e008      	b.n	800286c <HAL_GPIO_Init+0x228>
 800285a:	2304      	movs	r3, #4
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x228>
 800285e:	2303      	movs	r3, #3
 8002860:	e004      	b.n	800286c <HAL_GPIO_Init+0x228>
 8002862:	2302      	movs	r3, #2
 8002864:	e002      	b.n	800286c <HAL_GPIO_Init+0x228>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_GPIO_Init+0x228>
 800286a:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	f002 0203 	and.w	r2, r2, #3
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 800287c:	4935      	ldr	r1, [pc, #212]	@ (8002954 <HAL_GPIO_Init+0x310>)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 800288a:	4b3b      	ldr	r3, [pc, #236]	@ (8002978 <HAL_GPIO_Init+0x334>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x26a>
					temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 80028ae:	4a32      	ldr	r2, [pc, #200]	@ (8002978 <HAL_GPIO_Init+0x334>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 80028b4:	4b30      	ldr	r3, [pc, #192]	@ (8002978 <HAL_GPIO_Init+0x334>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x294>
					temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 80028d8:	4a27      	ldr	r2, [pc, #156]	@ (8002978 <HAL_GPIO_Init+0x334>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 80028de:	4b26      	ldr	r3, [pc, #152]	@ (8002978 <HAL_GPIO_Init+0x334>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x2be>
					temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 8002902:	4a1d      	ldr	r2, [pc, #116]	@ (8002978 <HAL_GPIO_Init+0x334>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8002908:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <HAL_GPIO_Init+0x334>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x2e8>
					temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 800292c:	4a12      	ldr	r2, [pc, #72]	@ (8002978 <HAL_GPIO_Init+0x334>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3301      	adds	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	2b0f      	cmp	r3, #15
 800293c:	f67f ae90 	bls.w	8002660 <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	@ 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40013800 	.word	0x40013800
 8002958:	40020000 	.word	0x40020000
 800295c:	40020400 	.word	0x40020400
 8002960:	40020800 	.word	0x40020800
 8002964:	40020c00 	.word	0x40020c00
 8002968:	40021000 	.word	0x40021000
 800296c:	40021400 	.word	0x40021400
 8002970:	40021800 	.word	0x40021800
 8002974:	40021c00 	.word	0x40021c00
 8002978:	40013c00 	.word	0x40013c00

0800297c <HAL_GPIO_ReadPin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	e001      	b.n	800299e <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e12b      	b.n	8002c4a <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff f990 	bl	8001d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	@ 0x24
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a32:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a42:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a44:	f002 fc72 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 8002a48:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4a81      	ldr	r2, [pc, #516]	@ (8002c54 <HAL_I2C_Init+0x274>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d807      	bhi.n	8002a64 <HAL_I2C_Init+0x84>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a80      	ldr	r2, [pc, #512]	@ (8002c58 <HAL_I2C_Init+0x278>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bf94      	ite	ls
 8002a5c:	2301      	movls	r3, #1
 8002a5e:	2300      	movhi	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e006      	b.n	8002a72 <HAL_I2C_Init+0x92>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a7d      	ldr	r2, [pc, #500]	@ (8002c5c <HAL_I2C_Init+0x27c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	bf94      	ite	ls
 8002a6c:	2301      	movls	r3, #1
 8002a6e:	2300      	movhi	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0e7      	b.n	8002c4a <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a78      	ldr	r2, [pc, #480]	@ (8002c60 <HAL_I2C_Init+0x280>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0c9b      	lsrs	r3, r3, #18
 8002a84:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8002c54 <HAL_I2C_Init+0x274>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d802      	bhi.n	8002ab4 <HAL_I2C_Init+0xd4>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	e009      	b.n	8002ac8 <HAL_I2C_Init+0xe8>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	4a69      	ldr	r2, [pc, #420]	@ (8002c64 <HAL_I2C_Init+0x284>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ada:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	495c      	ldr	r1, [pc, #368]	@ (8002c54 <HAL_I2C_Init+0x274>)
 8002ae4:	428b      	cmp	r3, r1
 8002ae6:	d819      	bhi.n	8002b1c <HAL_I2C_Init+0x13c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e59      	subs	r1, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af6:	1c59      	adds	r1, r3, #1
 8002af8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002afc:	400b      	ands	r3, r1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_I2C_Init+0x138>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1e59      	subs	r1, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	e051      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	e04f      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d111      	bne.n	8002b48 <HAL_I2C_Init+0x168>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e58      	subs	r0, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	440b      	add	r3, r1
 8002b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e012      	b.n	8002b6e <HAL_I2C_Init+0x18e>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	0099      	lsls	r1, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Init+0x196>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e022      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10e      	bne.n	8002b9c <HAL_I2C_Init+0x1bc>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1e58      	subs	r0, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	440b      	add	r3, r1
 8002b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b9a:	e00f      	b.n	8002bbc <HAL_I2C_Init+0x1dc>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1e58      	subs	r0, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	0099      	lsls	r1, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	6809      	ldr	r1, [r1, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6911      	ldr	r1, [r2, #16]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68d2      	ldr	r2, [r2, #12]
 8002bf6:	4311      	orrs	r1, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	000186a0 	.word	0x000186a0
 8002c58:	001e847f 	.word	0x001e847f
 8002c5c:	003d08ff 	.word	0x003d08ff
 8002c60:	431bde83 	.word	0x431bde83
 8002c64:	10624dd3 	.word	0x10624dd3

08002c68 <HAL_I2S_Init>:
 *         in the I2S_InitTypeDef and create the associated handle.
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
	uint16_t tmpreg;
#endif

	/* Check the I2S handle allocation */
	if (hi2s == NULL) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_I2S_Init+0x12>
		return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e128      	b.n	8002ecc <HAL_I2S_Init+0x264>
	assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
	assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
	assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
	assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

	if (hi2s->State == HAL_I2S_STATE_RESET) {
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_I2S_Init+0x32>
		/* Allocate lock resource and initialize it */
		hi2s->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

		/* Initialize Default I2S IrqHandler ISR */
		hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a90      	ldr	r2, [pc, #576]	@ (8002ed4 <HAL_I2S_Init+0x26c>)
 8002c92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
		/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
		HAL_I2S_MspInit(hi2s);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff f891 	bl	8001dbc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}

	hi2s->State = HAL_I2S_STATE_BUSY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	CLEAR_BIT(hi2s->Instance->I2SCFGR,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002cb0:	f023 030f 	bic.w	r3, r3, #15
 8002cb4:	61d3      	str	r3, [r2, #28]
			(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
	hi2s->Instance->I2SPR = 0x0002U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	621a      	str	r2, [r3, #32]

	/*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
	/* If the requested audio frequency is not the default, compute the prescaler */
	if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT) {
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d060      	beq.n	8002d88 <HAL_I2S_Init+0x120>
		/* Check the frame length (For the Prescaler computing) ********************/
		if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B) {
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <HAL_I2S_Init+0x6c>
			/* Packet length is 16 bits */
			packetlength = 16U;
 8002cce:	2310      	movs	r3, #16
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e001      	b.n	8002cd8 <HAL_I2S_Init+0x70>
		} else {
			/* Packet length is 32 bits */
			packetlength = 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	617b      	str	r3, [r7, #20]
		}

		/* I2S standard */
		if (hi2s->Init.Standard <= I2S_STANDARD_LSB) {
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d802      	bhi.n	8002ce6 <HAL_I2S_Init+0x7e>
			/* In I2S standard packet length is multiplied by 2 */
			packetlength = packetlength * 2U;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
		i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f002 fc2a 	bl	8005540 <HAL_RCCEx_GetPeriphCLKFreq>
 8002cec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

		/* Compute the Real divider depending on the MCLK output state, with a floating point */
		if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE) {
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf6:	d125      	bne.n	8002d44 <HAL_I2S_Init+0xdc>
			/* MCLK output is enabled */
			if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_I2S_Init+0xba>
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8002d1c:	3305      	adds	r3, #5
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	e01f      	b.n	8002d62 <HAL_I2S_Init+0xfa>
			} else {
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8002d3e:	3305      	adds	r3, #5
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	e00e      	b.n	8002d62 <HAL_I2S_Init+0xfa>
			}
		} else {
			/* MCLK output is disabled */
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	461a      	mov	r2, r3
					/ hi2s->Init.AudioFreq)) + 5U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 8002d5e:	3305      	adds	r3, #5
 8002d60:	613b      	str	r3, [r7, #16]
		}

		/* Remove the flatting point */
		tmp = tmp / 10U;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4a5c      	ldr	r2, [pc, #368]	@ (8002ed8 <HAL_I2S_Init+0x270>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	08db      	lsrs	r3, r3, #3
 8002d6c:	613b      	str	r3, [r7, #16]

		/* Check the parity of the divider */
		i2sodd = (uint32_t) (tmp & (uint32_t) 1U);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	61bb      	str	r3, [r7, #24]

		/* Compute the i2sdiv prescaler */
		i2sdiv = (uint32_t) ((tmp - i2sodd) / 2U);
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	61fb      	str	r3, [r7, #28]

		/* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
		i2sodd = (uint32_t) (i2sodd << 8U);
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	e003      	b.n	8002d90 <HAL_I2S_Init+0x128>
	} else {
		/* Set the default values */
		i2sdiv = 2U;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	61fb      	str	r3, [r7, #28]
		i2sodd = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
	}

	/* Test if the divider is 1 or 0 or greater than 0xFF */
	if ((i2sdiv < 2U) || (i2sdiv > 0xFFU)) {
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d902      	bls.n	8002d9c <HAL_I2S_Init+0x134>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2bff      	cmp	r3, #255	@ 0xff
 8002d9a:	d907      	bls.n	8002dac <HAL_I2S_Init+0x144>
		/* Set the error code and execute error callback*/
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da0:	f043 0210 	orr.w	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	645a      	str	r2, [r3, #68]	@ 0x44
		return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e08f      	b.n	8002ecc <HAL_I2S_Init+0x264>

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

	/* Write to SPIx I2SPR register the computed value */
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
			| (uint32_t) (i2sodd | (uint32_t) hi2s->Init.MCLKOutput));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	ea42 0103 	orr.w	r1, r2, r3
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	621a      	str	r2, [r3, #32]

	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	/* And configure the I2S with the I2S_InitStruct values                      */
	MODIFY_REG(hi2s->Instance->I2SCFGR,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002dca:	f023 030f 	bic.w	r3, r3, #15
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6851      	ldr	r1, [r2, #4]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6892      	ldr	r2, [r2, #8]
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68d2      	ldr	r2, [r2, #12]
 8002ddc:	4311      	orrs	r1, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6992      	ldr	r2, [r2, #24]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

	/* Configure the I2S extended if the full duplex mode is enabled */
	assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

	if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d161      	bne.n	8002ebc <HAL_I2S_Init+0x254>
		/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
		hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a38      	ldr	r2, [pc, #224]	@ (8002edc <HAL_I2S_Init+0x274>)
 8002dfc:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
		CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a37      	ldr	r2, [pc, #220]	@ (8002ee0 <HAL_I2S_Init+0x278>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_I2S_Init+0x1a4>
 8002e08:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <HAL_I2S_Init+0x27c>)
 8002e0a:	e001      	b.n	8002e10 <HAL_I2S_Init+0x1a8>
 8002e0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	4932      	ldr	r1, [pc, #200]	@ (8002ee0 <HAL_I2S_Init+0x278>)
 8002e18:	428a      	cmp	r2, r1
 8002e1a:	d101      	bne.n	8002e20 <HAL_I2S_Init+0x1b8>
 8002e1c:	4a31      	ldr	r2, [pc, #196]	@ (8002ee4 <HAL_I2S_Init+0x27c>)
 8002e1e:	e001      	b.n	8002e24 <HAL_I2S_Init+0x1bc>
 8002e20:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002e24:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002e28:	f023 030f 	bic.w	r3, r3, #15
 8002e2c:	61d3      	str	r3, [r2, #28]
				(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
		I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee0 <HAL_I2S_Init+0x278>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_I2S_Init+0x1d4>
 8002e38:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee4 <HAL_I2S_Init+0x27c>)
 8002e3a:	e001      	b.n	8002e40 <HAL_I2S_Init+0x1d8>
 8002e3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e40:	2202      	movs	r2, #2
 8002e42:	621a      	str	r2, [r3, #32]

		/* Get the I2SCFGR register value */
		tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a25      	ldr	r2, [pc, #148]	@ (8002ee0 <HAL_I2S_Init+0x278>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2S_Init+0x1ea>
 8002e4e:	4b25      	ldr	r3, [pc, #148]	@ (8002ee4 <HAL_I2S_Init+0x27c>)
 8002e50:	e001      	b.n	8002e56 <HAL_I2S_Init+0x1ee>
 8002e52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	817b      	strh	r3, [r7, #10]

		/* Get the mode to be configured for the extended I2S */
		if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e62:	d003      	beq.n	8002e6c <HAL_I2S_Init+0x204>
				|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <HAL_I2S_Init+0x20c>
			tmp = I2S_MODE_SLAVE_RX;
 8002e6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e001      	b.n	8002e78 <HAL_I2S_Init+0x210>
		} else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
		{
			tmp = I2S_MODE_SLAVE_TX;
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
		}

		/* Configure the I2S Slave with the I2S Master parameter values */
		tmpreg |=
				(uint16_t) ((uint16_t) SPI_I2SCFGR_I2SMOD | (uint16_t) tmp
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.Standard
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	b29b      	uxth	r3, r3
		tmpreg |=
 8002e82:	4313      	orrs	r3, r2
 8002e84:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.DataFormat
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	b29b      	uxth	r3, r3
		tmpreg |=
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.CPOL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	b29b      	uxth	r3, r3
		tmpreg |=
 8002e96:	4313      	orrs	r3, r2
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ea4:	817b      	strh	r3, [r7, #10]

		/* Write to SPIx I2SCFGR */
		WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee0 <HAL_I2S_Init+0x278>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_I2S_Init+0x24c>
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <HAL_I2S_Init+0x27c>)
 8002eb2:	e001      	b.n	8002eb8 <HAL_I2S_Init+0x250>
 8002eb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eb8:	897a      	ldrh	r2, [r7, #10]
 8002eba:	61da      	str	r2, [r3, #28]
	}
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
	hi2s->State = HAL_I2S_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	08002fdf 	.word	0x08002fdf
 8002ed8:	cccccccd 	.word	0xcccccccd
 8002edc:	080030f5 	.word	0x080030f5
 8002ee0:	40003800 	.word	0x40003800
 8002ee4:	40003400 	.word	0x40003400

08002ee8 <HAL_I2S_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_TxCpltCallback could be implemented in the user file
	 */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_I2S_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_I2S_ErrorCallback>:
 * @brief  I2S error callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_ErrorCallback could be implemented in the user file
	 */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <I2S_Transmit_IT>:
 * @brief  Transmit an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	/* Transmit data */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	881a      	ldrh	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60da      	str	r2, [r3, #12]
	hi2s->pTxBuffPtr++;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	1c9a      	adds	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24
	hi2s->TxXferCount--;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10e      	bne.n	8002f78 <I2S_Transmit_IT+0x54>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f68:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
		HAL_I2S_TxCpltCallback(hi2s);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ffb8 	bl	8002ee8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2S_Receive_IT>:
 * @brief  Receive an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	/* Receive data */
	(*hi2s->pRxBuffPtr) = (uint16_t) hi2s->Instance->DR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f92:	b292      	uxth	r2, r2
 8002f94:	801a      	strh	r2, [r3, #0]
	hi2s->pRxBuffPtr++;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hi2s->RxXferCount--;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10e      	bne.n	8002fd6 <I2S_Receive_IT+0x56>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fc6:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
		HAL_I2S_RxCpltCallback(hi2s);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff93 	bl	8002efc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <I2S_IRQHandler>:
 * @brief  This function handles I2S interrupt request.
 * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s) {
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	617b      	str	r3, [r7, #20]

	if (hi2s->State == HAL_I2S_STATE_BUSY_RX) {
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d13a      	bne.n	8003070 <I2S_IRQHandler+0x92>
		/* I2S in mode Receiver ------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d109      	bne.n	8003018 <I2S_IRQHandler+0x3a>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET)) {
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d102      	bne.n	8003018 <I2S_IRQHandler+0x3a>
			I2S_Receive_IT(hi2s);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ffb4 	bl	8002f80 <I2S_Receive_IT>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301e:	2b40      	cmp	r3, #64	@ 0x40
 8003020:	d126      	bne.n	8003070 <I2S_IRQHandler+0x92>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b20      	cmp	r3, #32
 800302e:	d11f      	bne.n	8003070 <I2S_IRQHandler+0x92>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800303e:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f043 0202 	orr.w	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff50 	bl	8002f10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}

	if (hi2s->State == HAL_I2S_STATE_BUSY_TX) {
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b03      	cmp	r3, #3
 800307a:	d136      	bne.n	80030ea <I2S_IRQHandler+0x10c>
		/* I2S in mode Transmitter -----------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d109      	bne.n	800309a <I2S_IRQHandler+0xbc>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET)) {
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003090:	2b80      	cmp	r3, #128	@ 0x80
 8003092:	d102      	bne.n	800309a <I2S_IRQHandler+0xbc>
			I2S_Transmit_IT(hi2s);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff45 	bl	8002f24 <I2S_Transmit_IT>
		}

		/* I2S Underrun error interrupt occurred --------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d122      	bne.n	80030ea <I2S_IRQHandler+0x10c>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d11b      	bne.n	80030ea <I2S_IRQHandler+0x10c>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80030c0:	605a      	str	r2, [r3, #4]

			/* Clear Underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ff13 	bl	8002f10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_I2SEx_FullDuplex_IRQHandler>:
/**
 * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
 * @param  hi2s I2S handle
 * @retval HAL status
 */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a92      	ldr	r2, [pc, #584]	@ (8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800310e:	4b92      	ldr	r3, [pc, #584]	@ (8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003110:	e001      	b.n	8003116 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003112:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	61bb      	str	r3, [r7, #24]
	__IO uint32_t i2scr2 = hi2s->Instance->CR2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]
	__IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a8b      	ldr	r2, [pc, #556]	@ (8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d101      	bne.n	8003130 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800312c:	4b8a      	ldr	r3, [pc, #552]	@ (8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800312e:	e001      	b.n	8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003130:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	613b      	str	r3, [r7, #16]

	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003140:	d004      	beq.n	800314c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
			|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 8099 	bne.w	800327e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
		/* I2S in mode Transmitter -------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d107      	bne.n	8003166 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
				&& ((i2scr2 & I2S_IT_TXE) != RESET)) {
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2S(hi2s);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f925 	bl	80033b0 <I2SEx_TxISR_I2S>
		}

		/* I2Sext in mode Receiver -----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
				&& ((i2sextcr2 & I2S_IT_RXNE) != RESET)) {
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2SExt(hi2s);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9c8 	bl	8003510 <I2SEx_RxISR_I2SExt>
		}

		/* I2Sext Overrun error interrupt occurred --------------------------------*/
		if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003186:	2b40      	cmp	r3, #64	@ 0x40
 8003188:	d13a      	bne.n	8003200 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d035      	beq.n	8003200 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6e      	ldr	r2, [pc, #440]	@ (8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800319e:	4b6e      	ldr	r3, [pc, #440]	@ (8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031a0:	e001      	b.n	80031a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80031a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4969      	ldr	r1, [pc, #420]	@ (8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031ae:	428b      	cmp	r3, r1
 80031b0:	d101      	bne.n	80031b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80031b2:	4b69      	ldr	r3, [pc, #420]	@ (8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031b4:	e001      	b.n	80031ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80031b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031be:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031ce:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f043 0202 	orr.w	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fe88 	bl	8002f10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2S Underrun error interrupt occurred ----------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b08      	cmp	r3, #8
 8003208:	f040 80c3 	bne.w	8003392 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80bd 	beq.w	8003392 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003226:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a49      	ldr	r2, [pc, #292]	@ (8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003232:	4b49      	ldr	r3, [pc, #292]	@ (8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003234:	e001      	b.n	800323a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003236:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4944      	ldr	r1, [pc, #272]	@ (8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003242:	428b      	cmp	r3, r1
 8003244:	d101      	bne.n	800324a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003246:	4b44      	ldr	r3, [pc, #272]	@ (8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003248:	e001      	b.n	800324e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800324a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800324e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003252:	605a      	str	r2, [r3, #4]

			/* Clear underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003254:	2300      	movs	r3, #0
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	f043 0204 	orr.w	r2, r3, #4
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fe4a 	bl	8002f10 <HAL_I2S_ErrorCallback>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 800327c:	e089      	b.n	8003392 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
		}
	}
	/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
	else {
		/* I2Sext in mode Transmitter ----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d107      	bne.n	8003298 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
				&& ((i2sextcr2 & I2S_IT_TXE) != RESET)) {
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2SExt(hi2s);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f8be 	bl	8003414 <I2SEx_TxISR_I2SExt>
		}

		/* I2S in mode Receiver --------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d107      	bne.n	80032b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
				&& ((i2scr2 & I2S_IT_RXNE) != RESET)) {
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2S(hi2s);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f8fd 	bl	80034ac <I2SEx_RxISR_I2S>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	d12f      	bne.n	800331c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02a      	beq.n	800331c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032d4:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1e      	ldr	r2, [pc, #120]	@ (8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80032e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032e2:	e001      	b.n	80032e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80032e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4919      	ldr	r1, [pc, #100]	@ (8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032f0:	428b      	cmp	r3, r1
 80032f2:	d101      	bne.n	80032f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80032f4:	4b18      	ldr	r3, [pc, #96]	@ (8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032f6:	e001      	b.n	80032fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80032f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003300:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	f043 0202 	orr.w	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff fdfa 	bl	8002f10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2Sext Underrun error interrupt occurred -------------------------------*/
		if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b08      	cmp	r3, #8
 8003324:	d136      	bne.n	8003394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d031      	beq.n	8003394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a07      	ldr	r2, [pc, #28]	@ (8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800333a:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800333c:	e001      	b.n	8003342 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800333e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4902      	ldr	r1, [pc, #8]	@ (8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800334a:	428b      	cmp	r3, r1
 800334c:	d106      	bne.n	800335c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800334e:	4b02      	ldr	r3, [pc, #8]	@ (8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003350:	e006      	b.n	8003360 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003352:	bf00      	nop
 8003354:	40003800 	.word	0x40003800
 8003358:	40003400 	.word	0x40003400
 800335c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003360:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003364:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003374:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f043 0204 	orr.w	r2, r3, #4
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fdc0 	bl	8002f10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8003390:	e000      	b.n	8003394 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8003392:	bf00      	nop
}
 8003394:	bf00      	nop
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_I2SEx_TxRxCpltCallback>:
/**
 * @brief  Tx and Rx Transfer completed callback
 * @param  hi2s I2S handle
 * @retval None
 */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
	 */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <I2SEx_TxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	1c99      	adds	r1, r3, #2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6251      	str	r1, [r2, #36]	@ 0x24
 80033c2:	881a      	ldrh	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d113      	bne.n	800340a <I2SEx_TxISR_I2S+0x5a>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033f0:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <I2SEx_TxISR_I2S+0x5a>
			hi2s->State = HAL_I2S_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff ffc9 	bl	800339c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <I2SEx_TxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	1c99      	adds	r1, r3, #2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6251      	str	r1, [r2, #36]	@ 0x24
 8003426:	8819      	ldrh	r1, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <I2SEx_TxISR_I2SExt+0x90>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d101      	bne.n	8003436 <I2SEx_TxISR_I2SExt+0x22>
 8003432:	4b1d      	ldr	r3, [pc, #116]	@ (80034a8 <I2SEx_TxISR_I2SExt+0x94>)
 8003434:	e001      	b.n	800343a <I2SEx_TxISR_I2SExt+0x26>
 8003436:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800343a:	460a      	mov	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d121      	bne.n	800349a <I2SEx_TxISR_I2SExt+0x86>
		/* Disable I2Sext TXE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a12      	ldr	r2, [pc, #72]	@ (80034a4 <I2SEx_TxISR_I2SExt+0x90>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d101      	bne.n	8003464 <I2SEx_TxISR_I2SExt+0x50>
 8003460:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <I2SEx_TxISR_I2SExt+0x94>)
 8003462:	e001      	b.n	8003468 <I2SEx_TxISR_I2SExt+0x54>
 8003464:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	490d      	ldr	r1, [pc, #52]	@ (80034a4 <I2SEx_TxISR_I2SExt+0x90>)
 8003470:	428b      	cmp	r3, r1
 8003472:	d101      	bne.n	8003478 <I2SEx_TxISR_I2SExt+0x64>
 8003474:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <I2SEx_TxISR_I2SExt+0x94>)
 8003476:	e001      	b.n	800347c <I2SEx_TxISR_I2SExt+0x68>
 8003478:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800347c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003480:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <I2SEx_TxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff81 	bl	800339c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40003800 	.word	0x40003800
 80034a8:	40003400 	.word	0x40003400

080034ac <I2SEx_RxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68d8      	ldr	r0, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034be:	1c99      	adds	r1, r3, #2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80034c4:	b282      	uxth	r2, r0
 80034c6:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d113      	bne.n	8003508 <I2SEx_RxISR_I2S+0x5c>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034ee:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <I2SEx_RxISR_I2S+0x5c>
			hi2s->State = HAL_I2S_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ff4a 	bl	800339c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2SEx_RxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a20      	ldr	r2, [pc, #128]	@ (80035a0 <I2SEx_RxISR_I2SExt+0x90>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <I2SEx_RxISR_I2SExt+0x16>
 8003522:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <I2SEx_RxISR_I2SExt+0x94>)
 8003524:	e001      	b.n	800352a <I2SEx_RxISR_I2SExt+0x1a>
 8003526:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800352a:	68d8      	ldr	r0, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	1c99      	adds	r1, r3, #2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003536:	b282      	uxth	r2, r0
 8003538:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d121      	bne.n	8003596 <I2SEx_RxISR_I2SExt+0x86>
		/* Disable I2Sext RXNE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <I2SEx_RxISR_I2SExt+0x90>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <I2SEx_RxISR_I2SExt+0x50>
 800355c:	4b11      	ldr	r3, [pc, #68]	@ (80035a4 <I2SEx_RxISR_I2SExt+0x94>)
 800355e:	e001      	b.n	8003564 <I2SEx_RxISR_I2SExt+0x54>
 8003560:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	490d      	ldr	r1, [pc, #52]	@ (80035a0 <I2SEx_RxISR_I2SExt+0x90>)
 800356c:	428b      	cmp	r3, r1
 800356e:	d101      	bne.n	8003574 <I2SEx_RxISR_I2SExt+0x64>
 8003570:	4b0c      	ldr	r3, [pc, #48]	@ (80035a4 <I2SEx_RxISR_I2SExt+0x94>)
 8003572:	e001      	b.n	8003578 <I2SEx_RxISR_I2SExt+0x68>
 8003574:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003578:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800357c:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <I2SEx_RxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff03 	bl	800339c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40003800 	.word	0x40003800
 80035a4:	40003400 	.word	0x40003400

080035a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e101      	b.n	80037be <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f007 fca7 	bl	800af28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035e8:	d102      	bne.n	80035f0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f004 f8f4 	bl	80077e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7c1a      	ldrb	r2, [r3, #16]
 8003602:	f88d 2000 	strb.w	r2, [sp]
 8003606:	3304      	adds	r3, #4
 8003608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800360a:	f003 ffd3 	bl	80075b4 <USB_CoreInit>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0ce      	b.n	80037be <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f004 f8ec 	bl	8007804 <USB_SetCurrentMode>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0bf      	b.n	80037be <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	e04a      	b.n	80036da <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3315      	adds	r3, #21
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3314      	adds	r3, #20
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800366c:	7bfa      	ldrb	r2, [r7, #15]
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	b298      	uxth	r0, r3
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	332e      	adds	r3, #46	@ 0x2e
 8003680:	4602      	mov	r2, r0
 8003682:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3318      	adds	r3, #24
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	331c      	adds	r3, #28
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	3320      	adds	r3, #32
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	3324      	adds	r3, #36	@ 0x24
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	3301      	adds	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	791b      	ldrb	r3, [r3, #4]
 80036de:	7bfa      	ldrb	r2, [r7, #15]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d3af      	bcc.n	8003644 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	e044      	b.n	8003774 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003716:	7bfa      	ldrb	r2, [r7, #15]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	3301      	adds	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	791b      	ldrb	r3, [r3, #4]
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	429a      	cmp	r2, r3
 800377c:	d3b5      	bcc.n	80036ea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	7c1a      	ldrb	r2, [r3, #16]
 8003786:	f88d 2000 	strb.w	r2, [sp]
 800378a:	3304      	adds	r3, #4
 800378c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378e:	f004 f885 	bl	800789c <USB_DevInit>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e00c      	b.n	80037be <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f005 f8cf 	bl	800895a <USB_DevDisconnect>

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_PCD_Start+0x1c>
 80037de:	2302      	movs	r3, #2
 80037e0:	e022      	b.n	8003828 <HAL_PCD_Start+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d105      	bne.n	800380a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003802:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f003 ffd6 	bl	80077c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f005 f87d 	bl	8008918 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b08d      	sub	sp, #52	@ 0x34
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f005 f93b 	bl	8008ac2 <USB_GetMode>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 848c 	bne.w	800416c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f005 f89f 	bl	800899c <USB_ReadInterrupts>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8482 	beq.w	800416a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f005 f88c 	bl	800899c <USB_ReadInterrupts>
 8003884:	4603      	mov	r3, r0
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b02      	cmp	r3, #2
 800388c:	d107      	bne.n	800389e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f002 0202 	and.w	r2, r2, #2
 800389c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f005 f87a 	bl	800899c <USB_ReadInterrupts>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d161      	bne.n	8003976 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0210 	bic.w	r2, r2, #16
 80038c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f003 020f 	and.w	r2, r3, #15
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	3304      	adds	r3, #4
 80038e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80038e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038ec:	d124      	bne.n	8003938 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d035      	beq.n	8003966 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003908:	b29b      	uxth	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	6a38      	ldr	r0, [r7, #32]
 800390e:	f004 feb1 	bl	8008674 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800391e:	441a      	add	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003930:	441a      	add	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	615a      	str	r2, [r3, #20]
 8003936:	e016      	b.n	8003966 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800393e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003942:	d110      	bne.n	8003966 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800394a:	2208      	movs	r2, #8
 800394c:	4619      	mov	r1, r3
 800394e:	6a38      	ldr	r0, [r7, #32]
 8003950:	f004 fe90 	bl	8008674 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003960:	441a      	add	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0210 	orr.w	r2, r2, #16
 8003974:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f005 f80e 	bl	800899c <USB_ReadInterrupts>
 8003980:	4603      	mov	r3, r0
 8003982:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003986:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800398a:	f040 80a7 	bne.w	8003adc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f005 f813 	bl	80089c2 <USB_ReadDevAllOutEpInterrupt>
 800399c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800399e:	e099      	b.n	8003ad4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 808e 	beq.w	8003ac8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f005 f837 	bl	8008a2a <USB_ReadDevOutEPInterrupt>
 80039bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00c      	beq.n	80039e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d4:	461a      	mov	r2, r3
 80039d6:	2301      	movs	r3, #1
 80039d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fea3 	bl	8004728 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00c      	beq.n	8003a06 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	2308      	movs	r3, #8
 80039fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 ff79 	bl	80048f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2310      	movs	r3, #16
 8003a20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d030      	beq.n	8003a8e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a34:	2b80      	cmp	r3, #128	@ 0x80
 8003a36:	d109      	bne.n	8003a4c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a4a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3304      	adds	r3, #4
 8003a60:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d108      	bne.n	8003a7c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f007 fb6a 	bl	800b150 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2320      	movs	r3, #32
 8003aa8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ac6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	3301      	adds	r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f47f af62 	bne.w	80039a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f004 ff5b 	bl	800899c <USB_ReadInterrupts>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003af0:	f040 80db 	bne.w	8003caa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f004 ff7c 	bl	80089f6 <USB_ReadDevAllInEpInterrupt>
 8003afe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003b04:	e0cd      	b.n	8003ca2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80c2 	beq.w	8003c96 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f004 ffa2 	bl	8008a66 <USB_ReadDevInEPInterrupt>
 8003b22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d057      	beq.n	8003bde <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	2201      	movs	r2, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69f9      	ldr	r1, [r7, #28]
 8003b4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b4e:	4013      	ands	r3, r2
 8003b50:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2301      	movs	r3, #1
 8003b62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	799b      	ldrb	r3, [r3, #6]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d132      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	3320      	adds	r3, #32
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4403      	add	r3, r0
 8003b8c:	331c      	adds	r3, #28
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4419      	add	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4403      	add	r3, r0
 8003ba0:	3320      	adds	r3, #32
 8003ba2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d113      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x3a2>
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	3324      	adds	r3, #36	@ 0x24
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d108      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2101      	movs	r1, #1
 8003bce:	f004 ffa9 	bl	8008b24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f007 fa34 	bl	800b046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c10:	461a      	mov	r2, r3
 8003c12:	2310      	movs	r3, #16
 8003c14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2340      	movs	r3, #64	@ 0x40
 8003c30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d023      	beq.n	8003c84 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c3e:	6a38      	ldr	r0, [r7, #32]
 8003c40:	f003 ff90 	bl	8007b64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	3310      	adds	r3, #16
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	3304      	adds	r3, #4
 8003c56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	78db      	ldrb	r3, [r3, #3]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d108      	bne.n	8003c72 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2200      	movs	r2, #0
 8003c64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f007 fa81 	bl	800b174 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2302      	movs	r3, #2
 8003c82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fcbd 	bl	8004610 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	3301      	adds	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f af2e 	bne.w	8003b06 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f004 fe74 	bl	800899c <USB_ReadInterrupts>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cbe:	d122      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d108      	bne.n	8003cf0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fea3 	bl	8004a34 <HAL_PCDEx_LPM_Callback>
 8003cee:	e002      	b.n	8003cf6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f007 fa1f 	bl	800b134 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f004 fe46 	bl	800899c <USB_ReadInterrupts>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d1a:	d112      	bne.n	8003d42 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d102      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f007 f9db 	bl	800b0e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003d40:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f004 fe28 	bl	800899c <USB_ReadInterrupts>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d56:	f040 80b7 	bne.w	8003ec8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2110      	movs	r1, #16
 8003d74:	4618      	mov	r0, r3
 8003d76:	f003 fef5 	bl	8007b64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d7e:	e046      	b.n	8003e0e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003db2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003dc6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003de2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003de6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	791b      	ldrb	r3, [r3, #4]
 8003e12:	461a      	mov	r2, r3
 8003e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d3b2      	bcc.n	8003d80 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e28:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003e2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7bdb      	ldrb	r3, [r3, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e46:	f043 030b 	orr.w	r3, r3, #11
 8003e4a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e5c:	f043 030b 	orr.w	r3, r3, #11
 8003e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e62:	e015      	b.n	8003e90 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e76:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003e7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e8a:	f043 030b 	orr.w	r3, r3, #11
 8003e8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003ea2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f004 fe36 	bl	8008b24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f004 fd65 	bl	800899c <USB_ReadInterrupts>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003edc:	d123      	bne.n	8003f26 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f004 fdfb 	bl	8008ade <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f003 feb2 	bl	8007c56 <USB_GetDevSpeed>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681c      	ldr	r4, [r3, #0]
 8003efe:	f001 fa09 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8003f02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f003 fbb6 	bl	800767c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f007 f8c0 	bl	800b096 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f004 fd36 	bl	800899c <USB_ReadInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d10a      	bne.n	8003f50 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f007 f89d 	bl	800b07a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f002 0208 	and.w	r2, r2, #8
 8003f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f004 fd21 	bl	800899c <USB_ReadInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f60:	2b80      	cmp	r3, #128	@ 0x80
 8003f62:	d123      	bne.n	8003fac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f70:	2301      	movs	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f74:	e014      	b.n	8003fa0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d105      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fb0a 	bl	80045ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	791b      	ldrb	r3, [r3, #4]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d3e4      	bcc.n	8003f76 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f004 fcf3 	bl	800899c <USB_ReadInterrupts>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fc0:	d13c      	bne.n	800403c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc6:	e02b      	b.n	8004020 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3318      	adds	r3, #24
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d115      	bne.n	800401a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003fee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	da12      	bge.n	800401a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	3317      	adds	r3, #23
 8004004:	2201      	movs	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004010:	b2db      	uxtb	r3, r3
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 faca 	bl	80045ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	3301      	adds	r3, #1
 800401e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	791b      	ldrb	r3, [r3, #4]
 8004024:	461a      	mov	r2, r3
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	4293      	cmp	r3, r2
 800402a:	d3cd      	bcc.n	8003fc8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800403a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f004 fcab 	bl	800899c <USB_ReadInterrupts>
 8004046:	4603      	mov	r3, r0
 8004048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800404c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004050:	d156      	bne.n	8004100 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004052:	2301      	movs	r3, #1
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
 8004056:	e045      	b.n	80040e4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d12e      	bne.n	80040de <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004080:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004082:	2b00      	cmp	r3, #0
 8004084:	da2b      	bge.n	80040de <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004092:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004096:	429a      	cmp	r2, r3
 8004098:	d121      	bne.n	80040de <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040da:	6053      	str	r3, [r2, #4]
            break;
 80040dc:	e008      	b.n	80040f0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	3301      	adds	r3, #1
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	791b      	ldrb	r3, [r3, #4]
 80040e8:	461a      	mov	r2, r3
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d3b3      	bcc.n	8004058 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80040fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f004 fc49 	bl	800899c <USB_ReadInterrupts>
 800410a:	4603      	mov	r3, r0
 800410c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004114:	d10a      	bne.n	800412c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f007 f83e 	bl	800b198 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800412a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f004 fc33 	bl	800899c <USB_ReadInterrupts>
 8004136:	4603      	mov	r3, r0
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b04      	cmp	r3, #4
 800413e:	d115      	bne.n	800416c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f007 f82e 	bl	800b1b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	e000      	b.n	800416c <HAL_PCD_IRQHandler+0x93c>
      return;
 800416a:	bf00      	nop
    }
  }
}
 800416c:	3734      	adds	r7, #52	@ 0x34
 800416e:	46bd      	mov	sp, r7
 8004170:	bd90      	pop	{r4, r7, pc}

08004172 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_PCD_SetAddress+0x1a>
 8004188:	2302      	movs	r3, #2
 800418a:	e012      	b.n	80041b2 <HAL_PCD_SetAddress+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	4611      	mov	r1, r2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f004 fb92 	bl	80088cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	4608      	mov	r0, r1
 80041c4:	4611      	mov	r1, r2
 80041c6:	461a      	mov	r2, r3
 80041c8:	4603      	mov	r3, r0
 80041ca:	70fb      	strb	r3, [r7, #3]
 80041cc:	460b      	mov	r3, r1
 80041ce:	803b      	strh	r3, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	da0f      	bge.n	8004200 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 020f 	and.w	r2, r3, #15
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	3310      	adds	r3, #16
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	3304      	adds	r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	705a      	strb	r2, [r3, #1]
 80041fe:	e00f      	b.n	8004220 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 020f 	and.w	r2, r3, #15
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	3304      	adds	r3, #4
 8004218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800422c:	883b      	ldrh	r3, [r7, #0]
 800422e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	78ba      	ldrb	r2, [r7, #2]
 800423a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800424e:	78bb      	ldrb	r3, [r7, #2]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d102      	bne.n	800425a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_PCD_EP_Open+0xae>
 8004264:	2302      	movs	r3, #2
 8004266:	e00e      	b.n	8004286 <HAL_PCD_EP_Open+0xcc>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68f9      	ldr	r1, [r7, #12]
 8004276:	4618      	mov	r0, r3
 8004278:	f003 fd12 	bl	8007ca0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004284:	7afb      	ldrb	r3, [r7, #11]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800429a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da0f      	bge.n	80042c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	f003 020f 	and.w	r2, r3, #15
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	3310      	adds	r3, #16
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	3304      	adds	r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	705a      	strb	r2, [r3, #1]
 80042c0:	e00f      	b.n	80042e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	f003 020f 	and.w	r2, r3, #15
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	3304      	adds	r3, #4
 80042da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_PCD_EP_Close+0x6e>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e00e      	b.n	800431a <HAL_PCD_EP_Close+0x8c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	4618      	mov	r0, r3
 800430c:	f003 fd50 	bl	8007db0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b086      	sub	sp, #24
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	460b      	mov	r3, r1
 8004330:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004332:	7afb      	ldrb	r3, [r7, #11]
 8004334:	f003 020f 	and.w	r2, r3, #15
 8004338:	4613      	mov	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	3304      	adds	r3, #4
 800434a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2200      	movs	r2, #0
 8004362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004364:	7afb      	ldrb	r3, [r7, #11]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	b2da      	uxtb	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	799b      	ldrb	r3, [r3, #6]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d102      	bne.n	800437e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	799b      	ldrb	r3, [r3, #6]
 8004386:	461a      	mov	r2, r3
 8004388:	6979      	ldr	r1, [r7, #20]
 800438a:	f003 fded 	bl	8007f68 <USB_EPStartXfer>

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	f003 020f 	and.w	r2, r3, #15
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	460b      	mov	r3, r1
 80043d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d8:	7afb      	ldrb	r3, [r7, #11]
 80043da:	f003 020f 	and.w	r2, r3, #15
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	3310      	adds	r3, #16
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	3304      	adds	r3, #4
 80043ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2201      	movs	r2, #1
 8004406:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004408:	7afb      	ldrb	r3, [r7, #11]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	b2da      	uxtb	r2, r3
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	799b      	ldrb	r3, [r3, #6]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d102      	bne.n	8004422 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	799b      	ldrb	r3, [r3, #6]
 800442a:	461a      	mov	r2, r3
 800442c:	6979      	ldr	r1, [r7, #20]
 800442e:	f003 fd9b 	bl	8007f68 <USB_EPStartXfer>

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	7912      	ldrb	r2, [r2, #4]
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e04f      	b.n	80044fa <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800445a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	da0f      	bge.n	8004482 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	f003 020f 	and.w	r2, r3, #15
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	3310      	adds	r3, #16
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	3304      	adds	r3, #4
 8004478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	705a      	strb	r2, [r3, #1]
 8004480:	e00d      	b.n	800449e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_PCD_EP_SetStall+0x82>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e01d      	b.n	80044fa <HAL_PCD_EP_SetStall+0xbe>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f004 f929 	bl	8008724 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d109      	bne.n	80044f0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7999      	ldrb	r1, [r3, #6]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044ea:	461a      	mov	r2, r3
 80044ec:	f004 fb1a 	bl	8008b24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	7912      	ldrb	r2, [r2, #4]
 8004518:	4293      	cmp	r3, r2
 800451a:	d901      	bls.n	8004520 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e042      	b.n	80045a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004524:	2b00      	cmp	r3, #0
 8004526:	da0f      	bge.n	8004548 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	f003 020f 	and.w	r2, r3, #15
 800452e:	4613      	mov	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	3310      	adds	r3, #16
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4413      	add	r3, r2
 800453c:	3304      	adds	r3, #4
 800453e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	705a      	strb	r2, [r3, #1]
 8004546:	e00f      	b.n	8004568 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	4613      	mov	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	3304      	adds	r3, #4
 8004560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_PCD_EP_ClrStall+0x86>
 8004584:	2302      	movs	r3, #2
 8004586:	e00e      	b.n	80045a6 <HAL_PCD_EP_ClrStall+0xa4>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68f9      	ldr	r1, [r7, #12]
 8004596:	4618      	mov	r0, r3
 8004598:	f004 f932 	bl	8008800 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80045ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	da0c      	bge.n	80045dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	f003 020f 	and.w	r2, r3, #15
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	3310      	adds	r3, #16
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	3304      	adds	r3, #4
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e00c      	b.n	80045f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	f003 020f 	and.w	r2, r3, #15
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4413      	add	r3, r2
 80045f2:	3304      	adds	r3, #4
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f003 ff51 	bl	80084a4 <USB_EPStopXfer>
 8004602:	4603      	mov	r3, r0
 8004604:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004606:	7afb      	ldrb	r3, [r7, #11]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	@ 0x28
 8004614:	af02      	add	r7, sp, #8
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	3310      	adds	r3, #16
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4413      	add	r3, r2
 8004634:	3304      	adds	r3, #4
 8004636:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	429a      	cmp	r2, r3
 8004642:	d901      	bls.n	8004648 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e06b      	b.n	8004720 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	69fa      	ldr	r2, [r7, #28]
 800465a:	429a      	cmp	r2, r3
 800465c:	d902      	bls.n	8004664 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	3303      	adds	r3, #3
 8004668:	089b      	lsrs	r3, r3, #2
 800466a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800466c:	e02a      	b.n	80046c4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	429a      	cmp	r2, r3
 8004682:	d902      	bls.n	800468a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3303      	adds	r3, #3
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	68d9      	ldr	r1, [r3, #12]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	4603      	mov	r3, r0
 80046a6:	6978      	ldr	r0, [r7, #20]
 80046a8:	f003 ffa6 	bl	80085f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	441a      	add	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	441a      	add	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d809      	bhi.n	80046ee <PCD_WriteEmptyTxFifo+0xde>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d203      	bcs.n	80046ee <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1bf      	bne.n	800466e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d811      	bhi.n	800471e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	2201      	movs	r2, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800470e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	43db      	mvns	r3, r3
 8004714:	6939      	ldr	r1, [r7, #16]
 8004716:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800471a:	4013      	ands	r3, r2
 800471c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	333c      	adds	r3, #60	@ 0x3c
 8004740:	3304      	adds	r3, #4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	799b      	ldrb	r3, [r3, #6]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d17b      	bne.n	8004856 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d015      	beq.n	8004794 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	4a61      	ldr	r2, [pc, #388]	@ (80048f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	f240 80b9 	bls.w	80048e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80b3 	beq.w	80048e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478a:	461a      	mov	r2, r3
 800478c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004790:	6093      	str	r3, [r2, #8]
 8004792:	e0a7      	b.n	80048e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047aa:	461a      	mov	r2, r3
 80047ac:	2320      	movs	r3, #32
 80047ae:	6093      	str	r3, [r2, #8]
 80047b0:	e098      	b.n	80048e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f040 8093 	bne.w	80048e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	4a4b      	ldr	r2, [pc, #300]	@ (80048f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d90f      	bls.n	80047e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047dc:	461a      	mov	r2, r3
 80047de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047e2:	6093      	str	r3, [r2, #8]
 80047e4:	e07e      	b.n	80048e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	3304      	adds	r3, #4
 80047fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	0159      	lsls	r1, r3, #5
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	440b      	add	r3, r1
 8004808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d114      	bne.n	8004848 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004830:	461a      	mov	r2, r3
 8004832:	2101      	movs	r1, #1
 8004834:	f004 f976 	bl	8008b24 <USB_EP0_OutStart>
 8004838:	e006      	b.n	8004848 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	441a      	add	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f006 fbde 	bl	800b010 <HAL_PCD_DataOutStageCallback>
 8004854:	e046      	b.n	80048e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4a26      	ldr	r2, [pc, #152]	@ (80048f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d124      	bne.n	80048a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004874:	461a      	mov	r2, r3
 8004876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800487a:	6093      	str	r3, [r2, #8]
 800487c:	e032      	b.n	80048e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004894:	461a      	mov	r2, r3
 8004896:	2320      	movs	r3, #32
 8004898:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	4619      	mov	r1, r3
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f006 fbb5 	bl	800b010 <HAL_PCD_DataOutStageCallback>
 80048a6:	e01d      	b.n	80048e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d114      	bne.n	80048d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	4613      	mov	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d108      	bne.n	80048d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048d0:	461a      	mov	r2, r3
 80048d2:	2100      	movs	r1, #0
 80048d4:	f004 f926 	bl	8008b24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f006 fb96 	bl	800b010 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	4f54300a 	.word	0x4f54300a
 80048f4:	4f54310a 	.word	0x4f54310a

080048f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	333c      	adds	r3, #60	@ 0x3c
 8004910:	3304      	adds	r3, #4
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a15      	ldr	r2, [pc, #84]	@ (8004980 <PCD_EP_OutSetupPacket_int+0x88>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d90e      	bls.n	800494c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004934:	2b00      	cmp	r3, #0
 8004936:	d009      	beq.n	800494c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004944:	461a      	mov	r2, r3
 8004946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800494a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f006 fb4d 	bl	800afec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a0a      	ldr	r2, [pc, #40]	@ (8004980 <PCD_EP_OutSetupPacket_int+0x88>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d90c      	bls.n	8004974 <PCD_EP_OutSetupPacket_int+0x7c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	799b      	ldrb	r3, [r3, #6]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d108      	bne.n	8004974 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800496c:	461a      	mov	r2, r3
 800496e:	2101      	movs	r1, #1
 8004970:	f004 f8d8 	bl	8008b24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	4f54300a 	.word	0x4f54300a

08004984 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
 8004990:	4613      	mov	r3, r2
 8004992:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049a2:	883b      	ldrh	r3, [r7, #0]
 80049a4:	0419      	lsls	r1, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80049b0:	e028      	b.n	8004a04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049c0:	2300      	movs	r3, #0
 80049c2:	73fb      	strb	r3, [r7, #15]
 80049c4:	e00d      	b.n	80049e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	3340      	adds	r3, #64	@ 0x40
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	4413      	add	r3, r2
 80049da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	3301      	adds	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
 80049e2:	7bfa      	ldrb	r2, [r7, #15]
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d3ec      	bcc.n	80049c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049ec:	883b      	ldrh	r3, [r7, #0]
 80049ee:	0418      	lsls	r0, r3, #16
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	4302      	orrs	r2, r0
 80049fc:	3340      	adds	r3, #64	@ 0x40
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	887a      	ldrh	r2, [r7, #2]
 8004a24:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e267      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d075      	beq.n	8004b56 <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a6a:	4b88      	ldr	r3, [pc, #544]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d00c      	beq.n	8004a90 <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a76:	4b85      	ldr	r3, [pc, #532]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 030c 	and.w	r3, r3, #12
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d112      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8004a82:	4b82      	ldr	r3, [pc, #520]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a8e:	d10b      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a90:	4b7e      	ldr	r3, [pc, #504]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d05b      	beq.n	8004b54 <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d157      	bne.n	8004b54 <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e242      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab0:	d106      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x74>
 8004ab2:	4b76      	ldr	r3, [pc, #472]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a75      	ldr	r2, [pc, #468]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e01d      	b.n	8004afc <HAL_RCC_OscConfig+0xb0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x98>
 8004aca:	4b70      	ldr	r3, [pc, #448]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a6f      	ldr	r2, [pc, #444]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a6c      	ldr	r2, [pc, #432]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e00b      	b.n	8004afc <HAL_RCC_OscConfig+0xb0>
 8004ae4:	4b69      	ldr	r3, [pc, #420]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a68      	ldr	r2, [pc, #416]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	4b66      	ldr	r3, [pc, #408]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a65      	ldr	r2, [pc, #404]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004afa:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d013      	beq.n	8004b2c <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004b04:	f7fd fbca 	bl	800229c <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004b0c:	f7fd fbc6 	bl	800229c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	@ 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e207      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0xc0>
 8004b2a:	e014      	b.n	8004b56 <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004b2c:	f7fd fbb6 	bl	800229c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004b34:	f7fd fbb2 	bl	800229c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	@ 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e1f3      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8004b46:	4b51      	ldr	r3, [pc, #324]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0xe8>
 8004b52:	e000      	b.n	8004b56 <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b54:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d063      	beq.n	8004c2a <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b62:	4b4a      	ldr	r3, [pc, #296]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b6e:	4b47      	ldr	r3, [pc, #284]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d11c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8004b7a:	4b44      	ldr	r3, [pc, #272]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d116      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	4b41      	ldr	r3, [pc, #260]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d001      	beq.n	8004b9e <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e1c7      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4937      	ldr	r1, [pc, #220]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb2:	e03a      	b.n	8004c2a <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d020      	beq.n	8004bfe <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8004bbc:	4b34      	ldr	r3, [pc, #208]	@ (8004c90 <HAL_RCC_OscConfig+0x244>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004bc2:	f7fd fb6b 	bl	800229c <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004bca:	f7fd fb67 	bl	800229c <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e1a8      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004be8:	4b28      	ldr	r3, [pc, #160]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4925      	ldr	r1, [pc, #148]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	600b      	str	r3, [r1, #0]
 8004bfc:	e015      	b.n	8004c2a <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8004bfe:	4b24      	ldr	r3, [pc, #144]	@ (8004c90 <HAL_RCC_OscConfig+0x244>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004c04:	f7fd fb4a 	bl	800229c <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004c0c:	f7fd fb46 	bl	800229c <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e187      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8004c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d036      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x258>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8004c3e:	4b15      	ldr	r3, [pc, #84]	@ (8004c94 <HAL_RCC_OscConfig+0x248>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004c44:	f7fd fb2a 	bl	800229c <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004c4c:	f7fd fb26 	bl	800229c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e167      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <HAL_RCC_OscConfig+0x240>)
 8004c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x200>
 8004c6a:	e01b      	b.n	8004ca4 <HAL_RCC_OscConfig+0x258>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8004c6c:	4b09      	ldr	r3, [pc, #36]	@ (8004c94 <HAL_RCC_OscConfig+0x248>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8004c72:	f7fd fb13 	bl	800229c <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8004c78:	e00e      	b.n	8004c98 <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004c7a:	f7fd fb0f 	bl	800229c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d907      	bls.n	8004c98 <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e150      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	42470000 	.word	0x42470000
 8004c94:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8004c98:	4b88      	ldr	r3, [pc, #544]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ea      	bne.n	8004c7a <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8097 	beq.w	8004de0 <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8004cb6:	4b81      	ldr	r3, [pc, #516]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10f      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x296>
			__HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	4b7d      	ldr	r3, [pc, #500]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	4a7c      	ldr	r2, [pc, #496]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cd2:	4b7a      	ldr	r3, [pc, #488]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8004ce2:	4b77      	ldr	r3, [pc, #476]	@ (8004ec0 <HAL_RCC_OscConfig+0x474>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d118      	bne.n	8004d20 <HAL_RCC_OscConfig+0x2d4>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cee:	4b74      	ldr	r3, [pc, #464]	@ (8004ec0 <HAL_RCC_OscConfig+0x474>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a73      	ldr	r2, [pc, #460]	@ (8004ec0 <HAL_RCC_OscConfig+0x474>)
 8004cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf8:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8004cfa:	f7fd facf 	bl	800229c <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x2c8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8004d02:	f7fd facb 	bl	800229c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x2c8>
					return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e10c      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8004d14:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec0 <HAL_RCC_OscConfig+0x474>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d106      	bne.n	8004d36 <HAL_RCC_OscConfig+0x2ea>
 8004d28:	4b64      	ldr	r3, [pc, #400]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2c:	4a63      	ldr	r2, [pc, #396]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d34:	e01c      	b.n	8004d70 <HAL_RCC_OscConfig+0x324>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x30c>
 8004d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d42:	4a5e      	ldr	r2, [pc, #376]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d44:	f043 0304 	orr.w	r3, r3, #4
 8004d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d56:	e00b      	b.n	8004d70 <HAL_RCC_OscConfig+0x324>
 8004d58:	4b58      	ldr	r3, [pc, #352]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5c:	4a57      	ldr	r2, [pc, #348]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d64:	4b55      	ldr	r3, [pc, #340]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d68:	4a54      	ldr	r2, [pc, #336]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d6a:	f023 0304 	bic.w	r3, r3, #4
 8004d6e:	6713      	str	r3, [r2, #112]	@ 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d015      	beq.n	8004da4 <HAL_RCC_OscConfig+0x358>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004d78:	f7fd fa90 	bl	800229c <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_OscConfig+0x34a>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004d80:	f7fd fa8c 	bl	800229c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x34a>
					return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0cb      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004d96:	4b49      	ldr	r3, [pc, #292]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0ee      	beq.n	8004d80 <HAL_RCC_OscConfig+0x334>
 8004da2:	e014      	b.n	8004dce <HAL_RCC_OscConfig+0x382>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8004da4:	f7fd fa7a 	bl	800229c <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x376>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004dac:	f7fd fa76 	bl	800229c <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x376>
					return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0b5      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8004dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1ee      	bne.n	8004dac <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d105      	bne.n	8004de0 <HAL_RCC_OscConfig+0x394>
			__HAL_RCC_PWR_CLK_DISABLE();
 8004dd4:	4b39      	ldr	r3, [pc, #228]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	4a38      	ldr	r2, [pc, #224]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004dda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dde:	6413      	str	r3, [r2, #64]	@ 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80a1 	beq.w	8004f2c <HAL_RCC_OscConfig+0x4e0>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8004dea:	4b34      	ldr	r3, [pc, #208]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 030c 	and.w	r3, r3, #12
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d05c      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x464>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d141      	bne.n	8004e82 <HAL_RCC_OscConfig+0x436>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8004dfe:	4b31      	ldr	r3, [pc, #196]	@ (8004ec4 <HAL_RCC_OscConfig+0x478>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004e04:	f7fd fa4a 	bl	800229c <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x3d2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004e0c:	f7fd fa46 	bl	800229c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x3d2>
						return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e087      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004e1e:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	019b      	lsls	r3, r3, #6
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	085b      	lsrs	r3, r3, #1
 8004e42:	3b01      	subs	r3, #1
 8004e44:	041b      	lsls	r3, r3, #16
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	491b      	ldr	r1, [pc, #108]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8004e54:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec4 <HAL_RCC_OscConfig+0x478>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004e5a:	f7fd fa1f 	bl	800229c <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x428>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004e62:	f7fd fa1b 	bl	800229c <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x428>
						return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e05c      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004e74:	4b11      	ldr	r3, [pc, #68]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x416>
 8004e80:	e054      	b.n	8004f2c <HAL_RCC_OscConfig+0x4e0>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <HAL_RCC_OscConfig+0x478>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004e88:	f7fd fa08 	bl	800229c <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x456>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004e90:	f7fd fa04 	bl	800229c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x456>
						return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e045      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004ea2:	4b06      	ldr	r3, [pc, #24]	@ (8004ebc <HAL_RCC_OscConfig+0x470>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x444>
 8004eae:	e03d      	b.n	8004f2c <HAL_RCC_OscConfig+0x4e0>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x47c>
				return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e038      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 8004ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f38 <HAL_RCC_OscConfig+0x4ec>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d028      	beq.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d121      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d11a      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ef8:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 8004efe:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d111      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 8004f12:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 8004f22:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
						{
					return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <HAL_RCC_OscConfig+0x4e2>
				}
			}
		}
	}
	return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40023800 	.word	0x40023800

08004f3c <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0cc      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8004f50:	4b68      	ldr	r3, [pc, #416]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d90c      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b65      	ldr	r3, [pc, #404]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8004f66:	4b63      	ldr	r3, [pc, #396]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0b8      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f90:	4b59      	ldr	r3, [pc, #356]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4a58      	ldr	r2, [pc, #352]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f9a:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa8:	4b53      	ldr	r3, [pc, #332]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4a52      	ldr	r2, [pc, #328]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fb2:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb4:	4b50      	ldr	r3, [pc, #320]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	494d      	ldr	r1, [pc, #308]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d044      	beq.n	800505c <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d107      	bne.n	8004fea <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004fda:	4b47      	ldr	r3, [pc, #284]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d119      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e07f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d003      	beq.n	8004ffa <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e06f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800500a:	4b3b      	ldr	r3, [pc, #236]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e067      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800501a:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f023 0203 	bic.w	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4934      	ldr	r1, [pc, #208]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 800502c:	f7fd f936 	bl	800229c <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8005032:	e00a      	b.n	800504a <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8005034:	f7fd f932 	bl	800229c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e04f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800504a:	4b2b      	ldr	r3, [pc, #172]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	429a      	cmp	r2, r3
 800505a:	d1eb      	bne.n	8005034 <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 800505c:	4b25      	ldr	r3, [pc, #148]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d20c      	bcs.n	8005084 <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b22      	ldr	r3, [pc, #136]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8005072:	4b20      	ldr	r3, [pc, #128]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e032      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8005090:	4b19      	ldr	r3, [pc, #100]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4916      	ldr	r1, [pc, #88]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80050ae:	4b12      	ldr	r3, [pc, #72]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	490e      	ldr	r1, [pc, #56]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80050c2:	f000 f821 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 80050c6:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050c8:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	490a      	ldr	r1, [pc, #40]	@ (80050fc <HAL_RCC_ClockConfig+0x1c0>)
 80050d4:	5ccb      	ldrb	r3, [r1, r3]
 80050d6:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80050da:	4a09      	ldr	r2, [pc, #36]	@ (8005100 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 80050de:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <HAL_RCC_ClockConfig+0x1c8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fd f896 	bl	8002214 <HAL_InitTick>

	return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023c00 	.word	0x40023c00
 80050f8:	40023800 	.word	0x40023800
 80050fc:	0800b624 	.word	0x0800b624
 8005100:	20000004 	.word	0x20000004
 8005104:	20000008 	.word	0x20000008

08005108 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8005108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800510c:	b094      	sub	sp, #80	@ 0x50
 800510e:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t pllvco = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t pllp = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t sysclockfreq = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	64bb      	str	r3, [r7, #72]	@ 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8005120:	4b79      	ldr	r3, [pc, #484]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b08      	cmp	r3, #8
 800512a:	d00d      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0x40>
 800512c:	2b08      	cmp	r3, #8
 800512e:	f200 80e1 	bhi.w	80052f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x34>
 8005136:	2b04      	cmp	r3, #4
 8005138:	d003      	beq.n	8005142 <HAL_RCC_GetSysClockFreq+0x3a>
 800513a:	e0db      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x1ec>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 800513c:	4b73      	ldr	r3, [pc, #460]	@ (800530c <HAL_RCC_GetSysClockFreq+0x204>)
 800513e:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8005140:	e0db      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 8005142:	4b73      	ldr	r3, [pc, #460]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x208>)
 8005144:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8005146:	e0d8      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005148:	4b6f      	ldr	r3, [pc, #444]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005150:	647b      	str	r3, [r7, #68]	@ 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8005152:	4b6d      	ldr	r3, [pc, #436]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d063      	beq.n	8005226 <HAL_RCC_GetSysClockFreq+0x11e>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800515e:	4b6a      	ldr	r3, [pc, #424]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005160:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8005162:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8005164:	2200      	movs	r2, #0
 8005166:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005168:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800516a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005170:	633b      	str	r3, [r7, #48]	@ 0x30
 8005172:	2300      	movs	r3, #0
 8005174:	637b      	str	r3, [r7, #52]	@ 0x34
 8005176:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800517a:	4622      	mov	r2, r4
 800517c:	462b      	mov	r3, r5
 800517e:	f04f 0000 	mov.w	r0, #0
 8005182:	f04f 0100 	mov.w	r1, #0
 8005186:	0159      	lsls	r1, r3, #5
 8005188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800518c:	0150      	lsls	r0, r2, #5
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4621      	mov	r1, r4
 8005194:	1a51      	subs	r1, r2, r1
 8005196:	6139      	str	r1, [r7, #16]
 8005198:	4629      	mov	r1, r5
 800519a:	eb63 0301 	sbc.w	r3, r3, r1
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051ac:	4659      	mov	r1, fp
 80051ae:	018b      	lsls	r3, r1, #6
 80051b0:	4651      	mov	r1, sl
 80051b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051b6:	4651      	mov	r1, sl
 80051b8:	018a      	lsls	r2, r1, #6
 80051ba:	4651      	mov	r1, sl
 80051bc:	ebb2 0801 	subs.w	r8, r2, r1
 80051c0:	4659      	mov	r1, fp
 80051c2:	eb63 0901 	sbc.w	r9, r3, r1
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051da:	4690      	mov	r8, r2
 80051dc:	4699      	mov	r9, r3
 80051de:	4623      	mov	r3, r4
 80051e0:	eb18 0303 	adds.w	r3, r8, r3
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	462b      	mov	r3, r5
 80051e8:	eb49 0303 	adc.w	r3, r9, r3
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051fa:	4629      	mov	r1, r5
 80051fc:	024b      	lsls	r3, r1, #9
 80051fe:	4621      	mov	r1, r4
 8005200:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005204:	4621      	mov	r1, r4
 8005206:	024a      	lsls	r2, r1, #9
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800520c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800520e:	2200      	movs	r2, #0
 8005210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005218:	f7fb fbcc 	bl	80009b4 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8005220:	4613      	mov	r3, r2
 8005222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005224:	e058      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0x1d0>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8005226:	4b38      	ldr	r3, [pc, #224]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005228:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800522a:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800522c:	2200      	movs	r2, #0
 800522e:	4618      	mov	r0, r3
 8005230:	4611      	mov	r1, r2
 8005232:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005236:	623b      	str	r3, [r7, #32]
 8005238:	2300      	movs	r3, #0
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
 800523c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005240:	4642      	mov	r2, r8
 8005242:	464b      	mov	r3, r9
 8005244:	f04f 0000 	mov.w	r0, #0
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	0159      	lsls	r1, r3, #5
 800524e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005252:	0150      	lsls	r0, r2, #5
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4641      	mov	r1, r8
 800525a:	ebb2 0a01 	subs.w	sl, r2, r1
 800525e:	4649      	mov	r1, r9
 8005260:	eb63 0b01 	sbc.w	fp, r3, r1
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005270:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005274:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005278:	ebb2 040a 	subs.w	r4, r2, sl
 800527c:	eb63 050b 	sbc.w	r5, r3, fp
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	00eb      	lsls	r3, r5, #3
 800528a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800528e:	00e2      	lsls	r2, r4, #3
 8005290:	4614      	mov	r4, r2
 8005292:	461d      	mov	r5, r3
 8005294:	4643      	mov	r3, r8
 8005296:	18e3      	adds	r3, r4, r3
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	464b      	mov	r3, r9
 800529c:	eb45 0303 	adc.w	r3, r5, r3
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ae:	4629      	mov	r1, r5
 80052b0:	028b      	lsls	r3, r1, #10
 80052b2:	4621      	mov	r1, r4
 80052b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052b8:	4621      	mov	r1, r4
 80052ba:	028a      	lsls	r2, r1, #10
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80052c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c2:	2200      	movs	r2, #0
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	61fa      	str	r2, [r7, #28]
 80052c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052cc:	f7fb fb72 	bl	80009b4 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 80052d4:	4613      	mov	r3, r2
 80052d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80052d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 80052e2:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	643b      	str	r3, [r7, #64]	@ 0x40

		sysclockfreq = pllvco / pllp;
 80052e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 80052f2:	e002      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <HAL_RCC_GetSysClockFreq+0x204>)
 80052f6:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 80052f8:	bf00      	nop
	}
	}
	return sysclockfreq;
 80052fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3750      	adds	r7, #80	@ 0x50
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800
 800530c:	00f42400 	.word	0x00f42400
 8005310:	007a1200 	.word	0x007a1200

08005314 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8005318:	4b03      	ldr	r3, [pc, #12]	@ (8005328 <HAL_RCC_GetHCLKFreq+0x14>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000004 	.word	0x20000004

0800532c <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8005330:	f7ff fff0 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005336:	4b05      	ldr	r3, [pc, #20]	@ (800534c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0a9b      	lsrs	r3, r3, #10
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4903      	ldr	r1, [pc, #12]	@ (8005350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800
 8005350:	0800b634 	.word	0x0800b634

08005354 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8005358:	f7ff ffdc 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800535e:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0b5b      	lsrs	r3, r3, #13
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	@ (8005378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	0800b634 	.word	0x0800b634

0800537c <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg1 = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
			== RCC_PERIPHCLK_I2S)
			|| (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d035      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x94>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 80053a4:	4b62      	ldr	r3, [pc, #392]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 80053aa:	f7fc ff77 	bl	800229c <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 80053b0:	e008      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 80053b2:	f7fc ff73 	bl	800229c <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e0b0      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 80053c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f0      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	019a      	lsls	r2, r3, #6
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	071b      	lsls	r3, r3, #28
 80053dc:	4955      	ldr	r1, [pc, #340]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
				PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 80053e4:	4b52      	ldr	r3, [pc, #328]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 80053ea:	f7fc ff57 	bl	800229c <HAL_GetTick>
 80053ee:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 80053f0:	e008      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x88>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 80053f2:	f7fc ff53 	bl	800229c <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x88>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e090      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8005404:	4b4b      	ldr	r3, [pc, #300]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0f0      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8083 	beq.w	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
			== (RCC_PERIPHCLK_RTC)) {
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4b44      	ldr	r3, [pc, #272]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005426:	4a43      	ldr	r2, [pc, #268]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800542c:	6413      	str	r3, [r2, #64]	@ 0x40
 800542e:	4b41      	ldr	r3, [pc, #260]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 800543a:	4b3f      	ldr	r3, [pc, #252]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a3e      	ldr	r2, [pc, #248]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005444:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 8005446:	f7fc ff29 	bl	800229c <HAL_GetTick>
 800544a:	6178      	str	r0, [r7, #20]

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 800544c:	e008      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xe4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800544e:	f7fc ff25 	bl	800229c <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xe4>
				return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e062      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8005460:	4b35      	ldr	r3, [pc, #212]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xd2>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800546c:	4b31      	ldr	r3, [pc, #196]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005470:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005474:	613b      	str	r3, [r7, #16]
		if ((tmpreg1 != 0x00000000U)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d02f      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x160>
				&& ((tmpreg1)
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
				&& ((tmpreg1)
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	429a      	cmp	r2, r3
 8005488:	d028      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x160>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800548a:	4b2a      	ldr	r3, [pc, #168]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800548c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005492:	613b      	str	r3, [r7, #16]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8005494:	4b29      	ldr	r3, [pc, #164]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 800549a:	4b28      	ldr	r3, [pc, #160]	@ (800553c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 80054a0:	4a24      	ldr	r2, [pc, #144]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	6713      	str	r3, [r2, #112]	@ 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 80054a6:	4b23      	ldr	r3, [pc, #140]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d114      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x160>
				/* Get tick */
				tickstart = HAL_GetTick();
 80054b2:	f7fc fef3 	bl	800229c <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80054b8:	e00a      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80054ba:	f7fc feef 	bl	800229c <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
						return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e02a      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80054d0:	4b18      	ldr	r3, [pc, #96]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0ee      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054e8:	d10d      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80054ea:	4b12      	ldr	r3, [pc, #72]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054fe:	490d      	ldr	r1, [pc, #52]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005500:	4313      	orrs	r3, r2
 8005502:	608b      	str	r3, [r1, #8]
 8005504:	e005      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005506:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	4a0a      	ldr	r2, [pc, #40]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800550c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005510:	6093      	str	r3, [r2, #8]
 8005512:	4b08      	ldr	r3, [pc, #32]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005514:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800551e:	4905      	ldr	r1, [pc, #20]	@ (8005534 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005520:	4313      	orrs	r3, r2
 8005522:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	42470068 	.word	0x42470068
 8005534:	40023800 	.word	0x40023800
 8005538:	40007000 	.word	0x40007000
 800553c:	42470e40 	.word	0x42470e40

08005540 <HAL_RCCEx_GetPeriphCLKFreq>:
 * @param  PeriphClk Peripheral clock identifier
 *         This parameter can be one of the following values:
 *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
 * @retval Frequency in KHz
 */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk) {
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	/* This variable used to store the I2S clock frequency (value in Hz) */
	uint32_t frequency = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
	/* This variable used to store the VCO Input (value in Hz) */
	uint32_t vcoinput = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]
	uint32_t srcclk = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
	/* This variable used to store the VCO Output (value in Hz) */
	uint32_t vcooutput = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	60bb      	str	r3, [r7, #8]
	switch (PeriphClk) {
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d13f      	bne.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
	case RCC_PERIPHCLK_I2S: {
		/* Get the current I2S source */
		srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800555e:	4b24      	ldr	r3, [pc, #144]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005566:	60fb      	str	r3, [r7, #12]
		switch (srcclk) {
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d006      	beq.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005574:	d12f      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
		/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
		case RCC_I2SCLKSOURCE_EXT: {
			/* Set the I2S clock to the external clock  value */
			frequency = EXTERNAL_CLOCK_VALUE;
 8005576:	4b1f      	ldr	r3, [pc, #124]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005578:	617b      	str	r3, [r7, #20]
			break;
 800557a:	e02f      	b.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
			/* Configure the PLLI2S division factor */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE) {
 800557c:	4b1c      	ldr	r3, [pc, #112]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005584:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005588:	d108      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSE_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800558a:	4b19      	ldr	r3, [pc, #100]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSE_VALUE
 8005592:	4a19      	ldr	r2, [pc, #100]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005594:	fbb2 f3f3 	udiv	r3, r2, r3
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	e007      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
			} else {
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSI_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800559c:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSI_VALUE
 80055a4:	4a15      	ldr	r2, [pc, #84]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	613b      	str	r3, [r7, #16]
			}
#endif /* STM32F411xE */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			vcooutput = (uint32_t) (vcoinput
					* (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)
 80055ac:	4b10      	ldr	r3, [pc, #64]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055b2:	099b      	lsrs	r3, r3, #6
							& (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80055b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
			vcooutput = (uint32_t) (vcoinput
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
 80055be:	60bb      	str	r3, [r7, #8]
			/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
			frequency = (uint32_t) (vcooutput
					/ (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U)
 80055c0:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055c6:	0f1b      	lsrs	r3, r3, #28
							& (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80055c8:	f003 0307 	and.w	r3, r3, #7
			frequency = (uint32_t) (vcooutput
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	617b      	str	r3, [r7, #20]
			break;
 80055d4:	e002      	b.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
		}
			/* Clock not enabled for I2S*/
		default: {
			frequency = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
			break;
 80055da:	bf00      	nop
		}
		}
		break;
 80055dc:	e000      	b.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
	}
	default: {
		break;
 80055de:	bf00      	nop
	}
	}
	return frequency;
 80055e0:	697b      	ldr	r3, [r7, #20]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40023800 	.word	0x40023800
 80055f4:	00bb8000 	.word	0x00bb8000
 80055f8:	007a1200 	.word	0x007a1200
 80055fc:	00f42400 	.word	0x00f42400

08005600 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e07b      	b.n	800570a <HAL_SPI_Init+0x10a>
	assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d108      	bne.n	800562c <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005622:	d009      	beq.n	8005638 <HAL_SPI_Init+0x38>
			assert_param(
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	61da      	str	r2, [r3, #28]
 800562a:	e005      	b.n	8005638 <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fc fc32 	bl	8001ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800566e:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056bc:	ea42 0103 	orr.w	r1, r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]
			((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) | (hspi->Init.Direction & (SPI_CR1_RXONLY | SPI_CR1_BIDIMODE)) | (hspi->Init.DataSize & SPI_CR1_DFF) | (hspi->Init.CLKPolarity & SPI_CR1_CPOL) | (hspi->Init.CLKPhase & SPI_CR1_CPHA) | (hspi->Init.NSS & SPI_CR1_SSM) | (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) | (hspi->Init.FirstBit & SPI_CR1_LSBFIRST) | (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management, TI Mode */
	WRITE_REG(hspi->Instance->CR2,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	f003 0104 	and.w	r1, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	f003 0210 	and.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->State = HAL_SPI_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e041      	b.n	80057a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fc fc07 	bl	8001f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3304      	adds	r3, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f000 fb41 	bl	8005dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d001      	beq.n	80057c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e046      	b.n	8005856 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a23      	ldr	r2, [pc, #140]	@ (8005864 <HAL_TIM_Base_Start+0xb4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d022      	beq.n	8005820 <HAL_TIM_Base_Start+0x70>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e2:	d01d      	beq.n	8005820 <HAL_TIM_Base_Start+0x70>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005868 <HAL_TIM_Base_Start+0xb8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d018      	beq.n	8005820 <HAL_TIM_Base_Start+0x70>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a1e      	ldr	r2, [pc, #120]	@ (800586c <HAL_TIM_Base_Start+0xbc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d013      	beq.n	8005820 <HAL_TIM_Base_Start+0x70>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005870 <HAL_TIM_Base_Start+0xc0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00e      	beq.n	8005820 <HAL_TIM_Base_Start+0x70>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1b      	ldr	r2, [pc, #108]	@ (8005874 <HAL_TIM_Base_Start+0xc4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_TIM_Base_Start+0x70>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a19      	ldr	r2, [pc, #100]	@ (8005878 <HAL_TIM_Base_Start+0xc8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_TIM_Base_Start+0x70>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a18      	ldr	r2, [pc, #96]	@ (800587c <HAL_TIM_Base_Start+0xcc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d111      	bne.n	8005844 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b06      	cmp	r3, #6
 8005830:	d010      	beq.n	8005854 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0201 	orr.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	e007      	b.n	8005854 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40010000 	.word	0x40010000
 8005868:	40000400 	.word	0x40000400
 800586c:	40000800 	.word	0x40000800
 8005870:	40000c00 	.word	0x40000c00
 8005874:	40010400 	.word	0x40010400
 8005878:	40014000 	.word	0x40014000
 800587c:	40001800 	.word	0x40001800

08005880 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e041      	b.n	8005916 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f839 	bl	800591e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f000 fa8a 	bl	8005dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
	...

08005934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_TIM_PWM_Start+0x24>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e022      	b.n	800599e <HAL_TIM_PWM_Start+0x6a>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b04      	cmp	r3, #4
 800595c:	d109      	bne.n	8005972 <HAL_TIM_PWM_Start+0x3e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	bf14      	ite	ne
 800596a:	2301      	movne	r3, #1
 800596c:	2300      	moveq	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	e015      	b.n	800599e <HAL_TIM_PWM_Start+0x6a>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d109      	bne.n	800598c <HAL_TIM_PWM_Start+0x58>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	bf14      	ite	ne
 8005984:	2301      	movne	r3, #1
 8005986:	2300      	moveq	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e008      	b.n	800599e <HAL_TIM_PWM_Start+0x6a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e07c      	b.n	8005aa0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <HAL_TIM_PWM_Start+0x82>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059b4:	e013      	b.n	80059de <HAL_TIM_PWM_Start+0xaa>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d104      	bne.n	80059c6 <HAL_TIM_PWM_Start+0x92>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059c4:	e00b      	b.n	80059de <HAL_TIM_PWM_Start+0xaa>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d104      	bne.n	80059d6 <HAL_TIM_PWM_Start+0xa2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059d4:	e003      	b.n	80059de <HAL_TIM_PWM_Start+0xaa>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2201      	movs	r2, #1
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fcec 	bl	80063c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa8 <HAL_TIM_PWM_Start+0x174>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_TIM_PWM_Start+0xcc>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2c      	ldr	r2, [pc, #176]	@ (8005aac <HAL_TIM_PWM_Start+0x178>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d101      	bne.n	8005a04 <HAL_TIM_PWM_Start+0xd0>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <HAL_TIM_PWM_Start+0xd2>
 8005a04:	2300      	movs	r3, #0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a22      	ldr	r2, [pc, #136]	@ (8005aa8 <HAL_TIM_PWM_Start+0x174>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d022      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x136>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2c:	d01d      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x136>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab0 <HAL_TIM_PWM_Start+0x17c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d018      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x136>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab4 <HAL_TIM_PWM_Start+0x180>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x136>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <HAL_TIM_PWM_Start+0x184>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00e      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x136>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a16      	ldr	r2, [pc, #88]	@ (8005aac <HAL_TIM_PWM_Start+0x178>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d009      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x136>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a18      	ldr	r2, [pc, #96]	@ (8005abc <HAL_TIM_PWM_Start+0x188>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d004      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x136>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a16      	ldr	r2, [pc, #88]	@ (8005ac0 <HAL_TIM_PWM_Start+0x18c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d111      	bne.n	8005a8e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b06      	cmp	r3, #6
 8005a7a:	d010      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8c:	e007      	b.n	8005a9e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40010400 	.word	0x40010400
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40000c00 	.word	0x40000c00
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40001800 	.word	0x40001800

08005ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e0ae      	b.n	8005c40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	f200 809f 	bhi.w	8005c30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005af2:	a201      	add	r2, pc, #4	@ (adr r2, 8005af8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b2d 	.word	0x08005b2d
 8005afc:	08005c31 	.word	0x08005c31
 8005b00:	08005c31 	.word	0x08005c31
 8005b04:	08005c31 	.word	0x08005c31
 8005b08:	08005b6d 	.word	0x08005b6d
 8005b0c:	08005c31 	.word	0x08005c31
 8005b10:	08005c31 	.word	0x08005c31
 8005b14:	08005c31 	.word	0x08005c31
 8005b18:	08005baf 	.word	0x08005baf
 8005b1c:	08005c31 	.word	0x08005c31
 8005b20:	08005c31 	.word	0x08005c31
 8005b24:	08005c31 	.word	0x08005c31
 8005b28:	08005bef 	.word	0x08005bef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f9fc 	bl	8005f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0208 	orr.w	r2, r2, #8
 8005b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0204 	bic.w	r2, r2, #4
 8005b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6999      	ldr	r1, [r3, #24]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	619a      	str	r2, [r3, #24]
      break;
 8005b6a:	e064      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fa4c 	bl	8006010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6999      	ldr	r1, [r3, #24]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	021a      	lsls	r2, r3, #8
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	619a      	str	r2, [r3, #24]
      break;
 8005bac:	e043      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 faa1 	bl	80060fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0208 	orr.w	r2, r2, #8
 8005bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0204 	bic.w	r2, r2, #4
 8005bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69d9      	ldr	r1, [r3, #28]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	61da      	str	r2, [r3, #28]
      break;
 8005bec:	e023      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 faf5 	bl	80061e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69d9      	ldr	r1, [r3, #28]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	021a      	lsls	r2, r3, #8
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	61da      	str	r2, [r3, #28]
      break;
 8005c2e:	e002      	b.n	8005c36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	75fb      	strb	r3, [r7, #23]
      break;
 8005c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIM_ConfigClockSource+0x1c>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e0b4      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x186>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c9c:	d03e      	beq.n	8005d1c <HAL_TIM_ConfigClockSource+0xd4>
 8005c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca2:	f200 8087 	bhi.w	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005caa:	f000 8086 	beq.w	8005dba <HAL_TIM_ConfigClockSource+0x172>
 8005cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb2:	d87f      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb4:	2b70      	cmp	r3, #112	@ 0x70
 8005cb6:	d01a      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0xa6>
 8005cb8:	2b70      	cmp	r3, #112	@ 0x70
 8005cba:	d87b      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cbc:	2b60      	cmp	r3, #96	@ 0x60
 8005cbe:	d050      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x11a>
 8005cc0:	2b60      	cmp	r3, #96	@ 0x60
 8005cc2:	d877      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc4:	2b50      	cmp	r3, #80	@ 0x50
 8005cc6:	d03c      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0xfa>
 8005cc8:	2b50      	cmp	r3, #80	@ 0x50
 8005cca:	d873      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ccc:	2b40      	cmp	r3, #64	@ 0x40
 8005cce:	d058      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0x13a>
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	d86f      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd4:	2b30      	cmp	r3, #48	@ 0x30
 8005cd6:	d064      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005cd8:	2b30      	cmp	r3, #48	@ 0x30
 8005cda:	d86b      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d060      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d867      	bhi.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d05c      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d05a      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0x15a>
 8005cec:	e062      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cfe:	f000 fb41 	bl	8006384 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	609a      	str	r2, [r3, #8]
      break;
 8005d1a:	e04f      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d2c:	f000 fb2a 	bl	8006384 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d3e:	609a      	str	r2, [r3, #8]
      break;
 8005d40:	e03c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f000 fa9e 	bl	8006290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2150      	movs	r1, #80	@ 0x50
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 faf7 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005d60:	e02c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f000 fabd 	bl	80062ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2160      	movs	r1, #96	@ 0x60
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fae7 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005d80:	e01c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f000 fa7e 	bl	8006290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2140      	movs	r1, #64	@ 0x40
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fad7 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005da0:	e00c      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f000 face 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005db2:	e003      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	73fb      	strb	r3, [r7, #15]
      break;
 8005db8:	e000      	b.n	8005dbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a46      	ldr	r2, [pc, #280]	@ (8005f04 <TIM_Base_SetConfig+0x12c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df6:	d00f      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a43      	ldr	r2, [pc, #268]	@ (8005f08 <TIM_Base_SetConfig+0x130>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00b      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a42      	ldr	r2, [pc, #264]	@ (8005f0c <TIM_Base_SetConfig+0x134>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a41      	ldr	r2, [pc, #260]	@ (8005f10 <TIM_Base_SetConfig+0x138>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a40      	ldr	r2, [pc, #256]	@ (8005f14 <TIM_Base_SetConfig+0x13c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d108      	bne.n	8005e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a35      	ldr	r2, [pc, #212]	@ (8005f04 <TIM_Base_SetConfig+0x12c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d02b      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e38:	d027      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a32      	ldr	r2, [pc, #200]	@ (8005f08 <TIM_Base_SetConfig+0x130>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d023      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a31      	ldr	r2, [pc, #196]	@ (8005f0c <TIM_Base_SetConfig+0x134>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01f      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a30      	ldr	r2, [pc, #192]	@ (8005f10 <TIM_Base_SetConfig+0x138>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01b      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2f      	ldr	r2, [pc, #188]	@ (8005f14 <TIM_Base_SetConfig+0x13c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d017      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8005f18 <TIM_Base_SetConfig+0x140>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a2d      	ldr	r2, [pc, #180]	@ (8005f1c <TIM_Base_SetConfig+0x144>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00f      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005f20 <TIM_Base_SetConfig+0x148>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00b      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a2b      	ldr	r2, [pc, #172]	@ (8005f24 <TIM_Base_SetConfig+0x14c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d007      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8005f28 <TIM_Base_SetConfig+0x150>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a29      	ldr	r2, [pc, #164]	@ (8005f2c <TIM_Base_SetConfig+0x154>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d108      	bne.n	8005e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a10      	ldr	r2, [pc, #64]	@ (8005f04 <TIM_Base_SetConfig+0x12c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_Base_SetConfig+0xf8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a12      	ldr	r2, [pc, #72]	@ (8005f14 <TIM_Base_SetConfig+0x13c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d103      	bne.n	8005ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d105      	bne.n	8005ef6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f023 0201 	bic.w	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	611a      	str	r2, [r3, #16]
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800
 8005f10:	40000c00 	.word	0x40000c00
 8005f14:	40010400 	.word	0x40010400
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40014400 	.word	0x40014400
 8005f20:	40014800 	.word	0x40014800
 8005f24:	40001800 	.word	0x40001800
 8005f28:	40001c00 	.word	0x40001c00
 8005f2c:	40002000 	.word	0x40002000

08005f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f023 0201 	bic.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f023 0302 	bic.w	r3, r3, #2
 8005f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a20      	ldr	r2, [pc, #128]	@ (8006008 <TIM_OC1_SetConfig+0xd8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_OC1_SetConfig+0x64>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800600c <TIM_OC1_SetConfig+0xdc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d10c      	bne.n	8005fae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0308 	bic.w	r3, r3, #8
 8005f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 0304 	bic.w	r3, r3, #4
 8005fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a15      	ldr	r2, [pc, #84]	@ (8006008 <TIM_OC1_SetConfig+0xd8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d003      	beq.n	8005fbe <TIM_OC1_SetConfig+0x8e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a14      	ldr	r2, [pc, #80]	@ (800600c <TIM_OC1_SetConfig+0xdc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d111      	bne.n	8005fe2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	621a      	str	r2, [r3, #32]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40010000 	.word	0x40010000
 800600c:	40010400 	.word	0x40010400

08006010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f023 0210 	bic.w	r2, r3, #16
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0320 	bic.w	r3, r3, #32
 800605a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a22      	ldr	r2, [pc, #136]	@ (80060f4 <TIM_OC2_SetConfig+0xe4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC2_SetConfig+0x68>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a21      	ldr	r2, [pc, #132]	@ (80060f8 <TIM_OC2_SetConfig+0xe8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d10d      	bne.n	8006094 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800607e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006092:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a17      	ldr	r2, [pc, #92]	@ (80060f4 <TIM_OC2_SetConfig+0xe4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_OC2_SetConfig+0x94>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a16      	ldr	r2, [pc, #88]	@ (80060f8 <TIM_OC2_SetConfig+0xe8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d113      	bne.n	80060cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40010400 	.word	0x40010400

080060fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a21      	ldr	r2, [pc, #132]	@ (80061dc <TIM_OC3_SetConfig+0xe0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_OC3_SetConfig+0x66>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a20      	ldr	r2, [pc, #128]	@ (80061e0 <TIM_OC3_SetConfig+0xe4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d10d      	bne.n	800617e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800617c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a16      	ldr	r2, [pc, #88]	@ (80061dc <TIM_OC3_SetConfig+0xe0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d003      	beq.n	800618e <TIM_OC3_SetConfig+0x92>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a15      	ldr	r2, [pc, #84]	@ (80061e0 <TIM_OC3_SetConfig+0xe4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d113      	bne.n	80061b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800619c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	40010000 	.word	0x40010000
 80061e0:	40010400 	.word	0x40010400

080061e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800622e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	031b      	lsls	r3, r3, #12
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a12      	ldr	r2, [pc, #72]	@ (8006288 <TIM_OC4_SetConfig+0xa4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_OC4_SetConfig+0x68>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a11      	ldr	r2, [pc, #68]	@ (800628c <TIM_OC4_SetConfig+0xa8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d109      	bne.n	8006260 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	019b      	lsls	r3, r3, #6
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400

08006290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f023 0201 	bic.w	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f023 030a 	bic.w	r3, r3, #10
 80062cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b087      	sub	sp, #28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	f023 0210 	bic.w	r2, r3, #16
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	031b      	lsls	r3, r3, #12
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800632a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	f043 0307 	orr.w	r3, r3, #7
 8006370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	609a      	str	r2, [r3, #8]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800639e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	021a      	lsls	r2, r3, #8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	609a      	str	r2, [r3, #8]
}
 80063b8:	bf00      	nop
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2201      	movs	r2, #1
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1a      	ldr	r2, [r3, #32]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	43db      	mvns	r3, r3
 80063e6:	401a      	ands	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1a      	ldr	r2, [r3, #32]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	431a      	orrs	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006424:	2302      	movs	r3, #2
 8006426:	e05a      	b.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a21      	ldr	r2, [pc, #132]	@ (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d022      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006474:	d01d      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1d      	ldr	r2, [pc, #116]	@ (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d018      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1b      	ldr	r2, [pc, #108]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1a      	ldr	r2, [pc, #104]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00e      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a18      	ldr	r2, [pc, #96]	@ (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d009      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a17      	ldr	r2, [pc, #92]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d004      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a15      	ldr	r2, [pc, #84]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10c      	bne.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40000400 	.word	0x40000400
 80064f4:	40000800 	.word	0x40000800
 80064f8:	40000c00 	.word	0x40000c00
 80064fc:	40010400 	.word	0x40010400
 8006500:	40014000 	.word	0x40014000
 8006504:	40001800 	.word	0x40001800

08006508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e042      	b.n	80065a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fb fd7e 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2224      	movs	r2, #36	@ 0x24
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800654a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fdbd 	bl	80070cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695a      	ldr	r2, [r3, #20]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	@ 0x28
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b20      	cmp	r3, #32
 80065c6:	d175      	bne.n	80066b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_UART_Transmit+0x2c>
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e06e      	b.n	80066b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2221      	movs	r2, #33	@ 0x21
 80065e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065e6:	f7fb fe59 	bl	800229c <HAL_GetTick>
 80065ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	88fa      	ldrh	r2, [r7, #6]
 80065f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	88fa      	ldrh	r2, [r7, #6]
 80065f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006600:	d108      	bne.n	8006614 <HAL_UART_Transmit+0x6c>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	e003      	b.n	800661c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800661c:	e02e      	b.n	800667c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2200      	movs	r2, #0
 8006626:	2180      	movs	r1, #128	@ 0x80
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 fb1f 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e03a      	b.n	80066b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006654:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	3302      	adds	r3, #2
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	e007      	b.n	800666e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	781a      	ldrb	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	3301      	adds	r3, #1
 800666c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1cb      	bne.n	800661e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2200      	movs	r2, #0
 800668e:	2140      	movs	r1, #64	@ 0x40
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 faeb 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e006      	b.n	80066b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	4613      	mov	r3, r2
 80066ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d112      	bne.n	80066fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_UART_Receive_IT+0x26>
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e00b      	b.n	8006700 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	461a      	mov	r2, r3
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fb12 	bl	8006d1e <UART_Start_Receive_IT>
 80066fa:	4603      	mov	r3, r0
 80066fc:	e000      	b.n	8006700 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80066fe:	2302      	movs	r3, #2
  }
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b0ba      	sub	sp, #232	@ 0xe8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800672e:	2300      	movs	r3, #0
 8006730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10f      	bne.n	800676e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d009      	beq.n	800676e <HAL_UART_IRQHandler+0x66>
 800675a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fbf2 	bl	8006f50 <UART_Receive_IT>
      return;
 800676c:	e25b      	b.n	8006c26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800676e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 80de 	beq.w	8006934 <HAL_UART_IRQHandler+0x22c>
 8006778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d106      	bne.n	8006792 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006788:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80d1 	beq.w	8006934 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <HAL_UART_IRQHandler+0xae>
 800679e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ae:	f043 0201 	orr.w	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00b      	beq.n	80067da <HAL_UART_IRQHandler+0xd2>
 80067c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d2:	f043 0202 	orr.w	r2, r3, #2
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00b      	beq.n	80067fe <HAL_UART_IRQHandler+0xf6>
 80067e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f6:	f043 0204 	orr.w	r2, r3, #4
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d011      	beq.n	800682e <HAL_UART_IRQHandler+0x126>
 800680a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d105      	bne.n	8006822 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006826:	f043 0208 	orr.w	r2, r3, #8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 81f2 	beq.w	8006c1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_UART_IRQHandler+0x14e>
 8006844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fb7d 	bl	8006f50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006860:	2b40      	cmp	r3, #64	@ 0x40
 8006862:	bf0c      	ite	eq
 8006864:	2301      	moveq	r3, #1
 8006866:	2300      	movne	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d103      	bne.n	8006882 <HAL_UART_IRQHandler+0x17a>
 800687a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d04f      	beq.n	8006922 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa85 	bl	8006d92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006892:	2b40      	cmp	r3, #64	@ 0x40
 8006894:	d141      	bne.n	800691a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3314      	adds	r3, #20
 800689c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3314      	adds	r3, #20
 80068be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1d9      	bne.n	8006896 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d013      	beq.n	8006912 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ee:	4a7e      	ldr	r2, [pc, #504]	@ (8006ae8 <HAL_UART_IRQHandler+0x3e0>)
 80068f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fb fe81 	bl	80025fe <HAL_DMA_Abort_IT>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d016      	beq.n	8006930 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006910:	e00e      	b.n	8006930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f994 	bl	8006c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006918:	e00a      	b.n	8006930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f990 	bl	8006c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006920:	e006      	b.n	8006930 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f98c 	bl	8006c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800692e:	e175      	b.n	8006c1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	bf00      	nop
    return;
 8006932:	e173      	b.n	8006c1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006938:	2b01      	cmp	r3, #1
 800693a:	f040 814f 	bne.w	8006bdc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006942:	f003 0310 	and.w	r3, r3, #16
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8148 	beq.w	8006bdc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800694c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8141 	beq.w	8006bdc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800695a:	2300      	movs	r3, #0
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697a:	2b40      	cmp	r3, #64	@ 0x40
 800697c:	f040 80b6 	bne.w	8006aec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800698c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8145 	beq.w	8006c20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800699a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800699e:	429a      	cmp	r2, r3
 80069a0:	f080 813e 	bcs.w	8006c20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069b6:	f000 8088 	beq.w	8006aca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	330c      	adds	r3, #12
 80069c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80069d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	330c      	adds	r3, #12
 80069e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80069e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1d9      	bne.n	80069ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3314      	adds	r3, #20
 8006a0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3314      	adds	r3, #20
 8006a26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e1      	bne.n	8006a06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3314      	adds	r3, #20
 8006a48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3314      	adds	r3, #20
 8006a62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e3      	bne.n	8006a42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a9a:	f023 0310 	bic.w	r3, r3, #16
 8006a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006aac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006aae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ab2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006aba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e3      	bne.n	8006a88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fb fd2a 	bl	800251e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2202      	movs	r2, #2
 8006ace:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f8b7 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ae6:	e09b      	b.n	8006c20 <HAL_UART_IRQHandler+0x518>
 8006ae8:	08006e59 	.word	0x08006e59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 808e 	beq.w	8006c24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8089 	beq.w	8006c24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	330c      	adds	r3, #12
 8006b32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b36:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e3      	bne.n	8006b12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3314      	adds	r3, #20
 8006b50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	623b      	str	r3, [r7, #32]
   return(result);
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	f023 0301 	bic.w	r3, r3, #1
 8006b60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3314      	adds	r3, #20
 8006b6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e3      	bne.n	8006b4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0310 	bic.w	r3, r3, #16
 8006ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	330c      	adds	r3, #12
 8006bb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006bb4:	61fa      	str	r2, [r7, #28]
 8006bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	69b9      	ldr	r1, [r7, #24]
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e3      	bne.n	8006b90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f83d 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bda:	e023      	b.n	8006c24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <HAL_UART_IRQHandler+0x4f4>
 8006be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f943 	bl	8006e80 <UART_Transmit_IT>
    return;
 8006bfa:	e014      	b.n	8006c26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00e      	beq.n	8006c26 <HAL_UART_IRQHandler+0x51e>
 8006c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f983 	bl	8006f20 <UART_EndTransmit_IT>
    return;
 8006c1a:	e004      	b.n	8006c26 <HAL_UART_IRQHandler+0x51e>
    return;
 8006c1c:	bf00      	nop
 8006c1e:	e002      	b.n	8006c26 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c20:	bf00      	nop
 8006c22:	e000      	b.n	8006c26 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c24:	bf00      	nop
  }
}
 8006c26:	37e8      	adds	r7, #232	@ 0xe8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7c:	e03b      	b.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c84:	d037      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c86:	f7fb fb09 	bl	800229c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	6a3a      	ldr	r2, [r7, #32]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d302      	bcc.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e03a      	b.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d023      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b80      	cmp	r3, #128	@ 0x80
 8006cb2:	d020      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b40      	cmp	r3, #64	@ 0x40
 8006cb8:	d01d      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d116      	bne.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 f857 	bl	8006d92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2208      	movs	r2, #8
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e00f      	b.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	bf0c      	ite	eq
 8006d06:	2301      	moveq	r3, #1
 8006d08:	2300      	movne	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d0b4      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	88fa      	ldrh	r2, [r7, #6]
 8006d36:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2222      	movs	r2, #34	@ 0x22
 8006d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d007      	beq.n	8006d64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695a      	ldr	r2, [r3, #20]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0220 	orr.w	r2, r2, #32
 8006d82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b095      	sub	sp, #84	@ 0x54
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	330c      	adds	r3, #12
 8006da0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dba:	643a      	str	r2, [r7, #64]	@ 0x40
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e5      	bne.n	8006d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3314      	adds	r3, #20
 8006dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3314      	adds	r3, #20
 8006dec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006df0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e5      	bne.n	8006dce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d119      	bne.n	8006e3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f023 0310 	bic.w	r3, r3, #16
 8006e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e2a:	61ba      	str	r2, [r7, #24]
 8006e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6979      	ldr	r1, [r7, #20]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	613b      	str	r3, [r7, #16]
   return(result);
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e5      	bne.n	8006e0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e4c:	bf00      	nop
 8006e4e:	3754      	adds	r7, #84	@ 0x54
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7ff fee4 	bl	8006c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e78:	bf00      	nop
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b21      	cmp	r3, #33	@ 0x21
 8006e92:	d13e      	bne.n	8006f12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e9c:	d114      	bne.n	8006ec8 <UART_Transmit_IT+0x48>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d110      	bne.n	8006ec8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	1c9a      	adds	r2, r3, #2
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]
 8006ec6:	e008      	b.n	8006eda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	1c59      	adds	r1, r3, #1
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6211      	str	r1, [r2, #32]
 8006ed2:	781a      	ldrb	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10f      	bne.n	8006f0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006efc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e000      	b.n	8006f14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f12:	2302      	movs	r3, #2
  }
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff fe73 	bl	8006c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08c      	sub	sp, #48	@ 0x30
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b22      	cmp	r3, #34	@ 0x22
 8006f62:	f040 80ae 	bne.w	80070c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f6e:	d117      	bne.n	8006fa0 <UART_Receive_IT+0x50>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d113      	bne.n	8006fa0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f98:	1c9a      	adds	r2, r3, #2
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f9e:	e026      	b.n	8006fee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb2:	d007      	beq.n	8006fc4 <UART_Receive_IT+0x74>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <UART_Receive_IT+0x82>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d106      	bne.n	8006fd2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	e008      	b.n	8006fe4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d15d      	bne.n	80070be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0220 	bic.w	r2, r2, #32
 8007010:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007020:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	695a      	ldr	r2, [r3, #20]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0201 	bic.w	r2, r2, #1
 8007030:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007044:	2b01      	cmp	r3, #1
 8007046:	d135      	bne.n	80070b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	613b      	str	r3, [r7, #16]
   return(result);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f023 0310 	bic.w	r3, r3, #16
 8007064:	627b      	str	r3, [r7, #36]	@ 0x24
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800706e:	623a      	str	r2, [r7, #32]
 8007070:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	69f9      	ldr	r1, [r7, #28]
 8007074:	6a3a      	ldr	r2, [r7, #32]
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	61bb      	str	r3, [r7, #24]
   return(result);
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e5      	bne.n	800704e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b10      	cmp	r3, #16
 800708e:	d10a      	bne.n	80070a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007090:	2300      	movs	r3, #0
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff fdd1 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
 80070b2:	e002      	b.n	80070ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fa fdd9 	bl	8001c6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	e002      	b.n	80070c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	e000      	b.n	80070c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80070c2:	2302      	movs	r3, #2
  }
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3730      	adds	r7, #48	@ 0x30
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070d0:	b0c0      	sub	sp, #256	@ 0x100
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e8:	68d9      	ldr	r1, [r3, #12]
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	ea40 0301 	orr.w	r3, r0, r1
 80070f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	431a      	orrs	r2, r3
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	431a      	orrs	r2, r3
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007124:	f021 010c 	bic.w	r1, r1, #12
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007132:	430b      	orrs	r3, r1
 8007134:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007146:	6999      	ldr	r1, [r3, #24]
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	ea40 0301 	orr.w	r3, r0, r1
 8007152:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	4b8f      	ldr	r3, [pc, #572]	@ (8007398 <UART_SetConfig+0x2cc>)
 800715c:	429a      	cmp	r2, r3
 800715e:	d005      	beq.n	800716c <UART_SetConfig+0xa0>
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	4b8d      	ldr	r3, [pc, #564]	@ (800739c <UART_SetConfig+0x2d0>)
 8007168:	429a      	cmp	r2, r3
 800716a:	d104      	bne.n	8007176 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800716c:	f7fe f8f2 	bl	8005354 <HAL_RCC_GetPCLK2Freq>
 8007170:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007174:	e003      	b.n	800717e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007176:	f7fe f8d9 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 800717a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007188:	f040 810c 	bne.w	80073a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800718c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007190:	2200      	movs	r2, #0
 8007192:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007196:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800719a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800719e:	4622      	mov	r2, r4
 80071a0:	462b      	mov	r3, r5
 80071a2:	1891      	adds	r1, r2, r2
 80071a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80071a6:	415b      	adcs	r3, r3
 80071a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80071ae:	4621      	mov	r1, r4
 80071b0:	eb12 0801 	adds.w	r8, r2, r1
 80071b4:	4629      	mov	r1, r5
 80071b6:	eb43 0901 	adc.w	r9, r3, r1
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	f04f 0300 	mov.w	r3, #0
 80071c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071ce:	4690      	mov	r8, r2
 80071d0:	4699      	mov	r9, r3
 80071d2:	4623      	mov	r3, r4
 80071d4:	eb18 0303 	adds.w	r3, r8, r3
 80071d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071dc:	462b      	mov	r3, r5
 80071de:	eb49 0303 	adc.w	r3, r9, r3
 80071e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071fa:	460b      	mov	r3, r1
 80071fc:	18db      	adds	r3, r3, r3
 80071fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007200:	4613      	mov	r3, r2
 8007202:	eb42 0303 	adc.w	r3, r2, r3
 8007206:	657b      	str	r3, [r7, #84]	@ 0x54
 8007208:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800720c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007210:	f7f9 fbd0 	bl	80009b4 <__aeabi_uldivmod>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4b61      	ldr	r3, [pc, #388]	@ (80073a0 <UART_SetConfig+0x2d4>)
 800721a:	fba3 2302 	umull	r2, r3, r3, r2
 800721e:	095b      	lsrs	r3, r3, #5
 8007220:	011c      	lsls	r4, r3, #4
 8007222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007226:	2200      	movs	r2, #0
 8007228:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800722c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007230:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007234:	4642      	mov	r2, r8
 8007236:	464b      	mov	r3, r9
 8007238:	1891      	adds	r1, r2, r2
 800723a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800723c:	415b      	adcs	r3, r3
 800723e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007240:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007244:	4641      	mov	r1, r8
 8007246:	eb12 0a01 	adds.w	sl, r2, r1
 800724a:	4649      	mov	r1, r9
 800724c:	eb43 0b01 	adc.w	fp, r3, r1
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	f04f 0300 	mov.w	r3, #0
 8007258:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800725c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007264:	4692      	mov	sl, r2
 8007266:	469b      	mov	fp, r3
 8007268:	4643      	mov	r3, r8
 800726a:	eb1a 0303 	adds.w	r3, sl, r3
 800726e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007272:	464b      	mov	r3, r9
 8007274:	eb4b 0303 	adc.w	r3, fp, r3
 8007278:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007288:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800728c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007290:	460b      	mov	r3, r1
 8007292:	18db      	adds	r3, r3, r3
 8007294:	643b      	str	r3, [r7, #64]	@ 0x40
 8007296:	4613      	mov	r3, r2
 8007298:	eb42 0303 	adc.w	r3, r2, r3
 800729c:	647b      	str	r3, [r7, #68]	@ 0x44
 800729e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80072a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80072a6:	f7f9 fb85 	bl	80009b4 <__aeabi_uldivmod>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4611      	mov	r1, r2
 80072b0:	4b3b      	ldr	r3, [pc, #236]	@ (80073a0 <UART_SetConfig+0x2d4>)
 80072b2:	fba3 2301 	umull	r2, r3, r3, r1
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	2264      	movs	r2, #100	@ 0x64
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	1acb      	subs	r3, r1, r3
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072c6:	4b36      	ldr	r3, [pc, #216]	@ (80073a0 <UART_SetConfig+0x2d4>)
 80072c8:	fba3 2302 	umull	r2, r3, r3, r2
 80072cc:	095b      	lsrs	r3, r3, #5
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072d4:	441c      	add	r4, r3
 80072d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072e8:	4642      	mov	r2, r8
 80072ea:	464b      	mov	r3, r9
 80072ec:	1891      	adds	r1, r2, r2
 80072ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072f0:	415b      	adcs	r3, r3
 80072f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072f8:	4641      	mov	r1, r8
 80072fa:	1851      	adds	r1, r2, r1
 80072fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80072fe:	4649      	mov	r1, r9
 8007300:	414b      	adcs	r3, r1
 8007302:	637b      	str	r3, [r7, #52]	@ 0x34
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007310:	4659      	mov	r1, fp
 8007312:	00cb      	lsls	r3, r1, #3
 8007314:	4651      	mov	r1, sl
 8007316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800731a:	4651      	mov	r1, sl
 800731c:	00ca      	lsls	r2, r1, #3
 800731e:	4610      	mov	r0, r2
 8007320:	4619      	mov	r1, r3
 8007322:	4603      	mov	r3, r0
 8007324:	4642      	mov	r2, r8
 8007326:	189b      	adds	r3, r3, r2
 8007328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800732c:	464b      	mov	r3, r9
 800732e:	460a      	mov	r2, r1
 8007330:	eb42 0303 	adc.w	r3, r2, r3
 8007334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007344:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007348:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800734c:	460b      	mov	r3, r1
 800734e:	18db      	adds	r3, r3, r3
 8007350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007352:	4613      	mov	r3, r2
 8007354:	eb42 0303 	adc.w	r3, r2, r3
 8007358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800735a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800735e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007362:	f7f9 fb27 	bl	80009b4 <__aeabi_uldivmod>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4b0d      	ldr	r3, [pc, #52]	@ (80073a0 <UART_SetConfig+0x2d4>)
 800736c:	fba3 1302 	umull	r1, r3, r3, r2
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	2164      	movs	r1, #100	@ 0x64
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	3332      	adds	r3, #50	@ 0x32
 800737e:	4a08      	ldr	r2, [pc, #32]	@ (80073a0 <UART_SetConfig+0x2d4>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	f003 0207 	and.w	r2, r3, #7
 800738a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4422      	add	r2, r4
 8007392:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007394:	e106      	b.n	80075a4 <UART_SetConfig+0x4d8>
 8007396:	bf00      	nop
 8007398:	40011000 	.word	0x40011000
 800739c:	40011400 	.word	0x40011400
 80073a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073a8:	2200      	movs	r2, #0
 80073aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80073b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80073b6:	4642      	mov	r2, r8
 80073b8:	464b      	mov	r3, r9
 80073ba:	1891      	adds	r1, r2, r2
 80073bc:	6239      	str	r1, [r7, #32]
 80073be:	415b      	adcs	r3, r3
 80073c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073c6:	4641      	mov	r1, r8
 80073c8:	1854      	adds	r4, r2, r1
 80073ca:	4649      	mov	r1, r9
 80073cc:	eb43 0501 	adc.w	r5, r3, r1
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	00eb      	lsls	r3, r5, #3
 80073da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073de:	00e2      	lsls	r2, r4, #3
 80073e0:	4614      	mov	r4, r2
 80073e2:	461d      	mov	r5, r3
 80073e4:	4643      	mov	r3, r8
 80073e6:	18e3      	adds	r3, r4, r3
 80073e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073ec:	464b      	mov	r3, r9
 80073ee:	eb45 0303 	adc.w	r3, r5, r3
 80073f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007402:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	f04f 0300 	mov.w	r3, #0
 800740e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007412:	4629      	mov	r1, r5
 8007414:	008b      	lsls	r3, r1, #2
 8007416:	4621      	mov	r1, r4
 8007418:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800741c:	4621      	mov	r1, r4
 800741e:	008a      	lsls	r2, r1, #2
 8007420:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007424:	f7f9 fac6 	bl	80009b4 <__aeabi_uldivmod>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4b60      	ldr	r3, [pc, #384]	@ (80075b0 <UART_SetConfig+0x4e4>)
 800742e:	fba3 2302 	umull	r2, r3, r3, r2
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	011c      	lsls	r4, r3, #4
 8007436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800743a:	2200      	movs	r2, #0
 800743c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007440:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007444:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007448:	4642      	mov	r2, r8
 800744a:	464b      	mov	r3, r9
 800744c:	1891      	adds	r1, r2, r2
 800744e:	61b9      	str	r1, [r7, #24]
 8007450:	415b      	adcs	r3, r3
 8007452:	61fb      	str	r3, [r7, #28]
 8007454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007458:	4641      	mov	r1, r8
 800745a:	1851      	adds	r1, r2, r1
 800745c:	6139      	str	r1, [r7, #16]
 800745e:	4649      	mov	r1, r9
 8007460:	414b      	adcs	r3, r1
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007470:	4659      	mov	r1, fp
 8007472:	00cb      	lsls	r3, r1, #3
 8007474:	4651      	mov	r1, sl
 8007476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800747a:	4651      	mov	r1, sl
 800747c:	00ca      	lsls	r2, r1, #3
 800747e:	4610      	mov	r0, r2
 8007480:	4619      	mov	r1, r3
 8007482:	4603      	mov	r3, r0
 8007484:	4642      	mov	r2, r8
 8007486:	189b      	adds	r3, r3, r2
 8007488:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800748c:	464b      	mov	r3, r9
 800748e:	460a      	mov	r2, r1
 8007490:	eb42 0303 	adc.w	r3, r2, r3
 8007494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	f04f 0300 	mov.w	r3, #0
 80074ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80074b0:	4649      	mov	r1, r9
 80074b2:	008b      	lsls	r3, r1, #2
 80074b4:	4641      	mov	r1, r8
 80074b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ba:	4641      	mov	r1, r8
 80074bc:	008a      	lsls	r2, r1, #2
 80074be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80074c2:	f7f9 fa77 	bl	80009b4 <__aeabi_uldivmod>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4611      	mov	r1, r2
 80074cc:	4b38      	ldr	r3, [pc, #224]	@ (80075b0 <UART_SetConfig+0x4e4>)
 80074ce:	fba3 2301 	umull	r2, r3, r3, r1
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	2264      	movs	r2, #100	@ 0x64
 80074d6:	fb02 f303 	mul.w	r3, r2, r3
 80074da:	1acb      	subs	r3, r1, r3
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	3332      	adds	r3, #50	@ 0x32
 80074e0:	4a33      	ldr	r2, [pc, #204]	@ (80075b0 <UART_SetConfig+0x4e4>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074ec:	441c      	add	r4, r3
 80074ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f2:	2200      	movs	r2, #0
 80074f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80074f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80074f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074fc:	4642      	mov	r2, r8
 80074fe:	464b      	mov	r3, r9
 8007500:	1891      	adds	r1, r2, r2
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	415b      	adcs	r3, r3
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800750c:	4641      	mov	r1, r8
 800750e:	1851      	adds	r1, r2, r1
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	4649      	mov	r1, r9
 8007514:	414b      	adcs	r3, r1
 8007516:	607b      	str	r3, [r7, #4]
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	f04f 0300 	mov.w	r3, #0
 8007520:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007524:	4659      	mov	r1, fp
 8007526:	00cb      	lsls	r3, r1, #3
 8007528:	4651      	mov	r1, sl
 800752a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800752e:	4651      	mov	r1, sl
 8007530:	00ca      	lsls	r2, r1, #3
 8007532:	4610      	mov	r0, r2
 8007534:	4619      	mov	r1, r3
 8007536:	4603      	mov	r3, r0
 8007538:	4642      	mov	r2, r8
 800753a:	189b      	adds	r3, r3, r2
 800753c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800753e:	464b      	mov	r3, r9
 8007540:	460a      	mov	r2, r1
 8007542:	eb42 0303 	adc.w	r3, r2, r3
 8007546:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	663b      	str	r3, [r7, #96]	@ 0x60
 8007552:	667a      	str	r2, [r7, #100]	@ 0x64
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007560:	4649      	mov	r1, r9
 8007562:	008b      	lsls	r3, r1, #2
 8007564:	4641      	mov	r1, r8
 8007566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800756a:	4641      	mov	r1, r8
 800756c:	008a      	lsls	r2, r1, #2
 800756e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007572:	f7f9 fa1f 	bl	80009b4 <__aeabi_uldivmod>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4b0d      	ldr	r3, [pc, #52]	@ (80075b0 <UART_SetConfig+0x4e4>)
 800757c:	fba3 1302 	umull	r1, r3, r3, r2
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	2164      	movs	r1, #100	@ 0x64
 8007584:	fb01 f303 	mul.w	r3, r1, r3
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	3332      	adds	r3, #50	@ 0x32
 800758e:	4a08      	ldr	r2, [pc, #32]	@ (80075b0 <UART_SetConfig+0x4e4>)
 8007590:	fba2 2303 	umull	r2, r3, r2, r3
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	f003 020f 	and.w	r2, r3, #15
 800759a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4422      	add	r2, r4
 80075a2:	609a      	str	r2, [r3, #8]
}
 80075a4:	bf00      	nop
 80075a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80075aa:	46bd      	mov	sp, r7
 80075ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075b0:	51eb851f 	.word	0x51eb851f

080075b4 <USB_CoreInit>:
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 80075b4:	b084      	sub	sp, #16
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	f107 001c 	add.w	r0, r7, #28
 80075c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret;
	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 80075c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d123      	bne.n	8007616 <USB_CoreInit+0x62>
		USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Init The ULPI Interface */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80075e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	60d3      	str	r3, [r2, #12]
				| USB_OTG_GUSBCFG_PHYSEL);

		/* Select vbus source */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60da      	str	r2, [r3, #12]
				| USB_OTG_GUSBCFG_ULPIEVBUSI);
		if (cfg.use_external_vbus == 1U) {
 80075f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d105      	bne.n	800760a <USB_CoreInit+0x56>
			USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60da      	str	r2, [r3, #12]
		}

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 fae8 	bl	8008be0 <USB_CoreReset>
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]
 8007614:	e01b      	b.n	800764e <USB_CoreInit+0x9a>
	} else /* FS interface (embedded Phy) */
	{
		/* Select FS Embedded PHY */
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60da      	str	r2, [r3, #12]

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 fadc 	bl	8008be0 <USB_CoreReset>
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]

		if (cfg.battery_charging_enable == 0U) {
 800762c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <USB_CoreInit+0x8e>
			/* Activate the USB Transceiver */
			USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007638:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007640:	e005      	b.n	800764e <USB_CoreInit+0x9a>
		} else {
			/* Deactivate the USB Transceiver */
			USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (cfg.dma_enable == 1U) {
 800764e:	7fbb      	ldrb	r3, [r7, #30]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d10b      	bne.n	800766c <USB_CoreInit+0xb8>
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f043 0206 	orr.w	r2, r3, #6
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	609a      	str	r2, [r3, #8]
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f043 0220 	orr.w	r2, r3, #32
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	609a      	str	r2, [r3, #8]
	}

	return ret;
 800766c:	7bfb      	ldrb	r3, [r7, #15]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007678:	b004      	add	sp, #16
 800767a:	4770      	bx	lr

0800767c <USB_SetTurnaroundTime>:
 * @param  USBx USB Instance
 * @param  hclk: AHB clock frequency
 * @retval USB turnaround time In PHY Clocks number
 */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
		uint32_t hclk, uint8_t speed) {
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	4613      	mov	r3, r2
 8007688:	71fb      	strb	r3, [r7, #7]

	/* The USBTRD is configured according to the tables below, depending on AHB frequency
	 used by application. In the low AHB frequency range it is used to stretch enough the USB response
	 time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
	 latency to the Data FIFO */
	if (speed == USBD_FS_SPEED) {
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	2b02      	cmp	r3, #2
 800768e:	d165      	bne.n	800775c <USB_SetTurnaroundTime+0xe0>
		if ((hclk >= 14200000U) && (hclk < 15000000U)) {
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	4a41      	ldr	r2, [pc, #260]	@ (8007798 <USB_SetTurnaroundTime+0x11c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d906      	bls.n	80076a6 <USB_SetTurnaroundTime+0x2a>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4a40      	ldr	r2, [pc, #256]	@ (800779c <USB_SetTurnaroundTime+0x120>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d202      	bcs.n	80076a6 <USB_SetTurnaroundTime+0x2a>
			/* hclk Clock Range between 14.2-15 MHz */
			UsbTrd = 0xFU;
 80076a0:	230f      	movs	r3, #15
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	e062      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 15000000U) && (hclk < 16000000U)) {
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4a3c      	ldr	r2, [pc, #240]	@ (800779c <USB_SetTurnaroundTime+0x120>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d306      	bcc.n	80076bc <USB_SetTurnaroundTime+0x40>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	4a3b      	ldr	r2, [pc, #236]	@ (80077a0 <USB_SetTurnaroundTime+0x124>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d202      	bcs.n	80076bc <USB_SetTurnaroundTime+0x40>
			/* hclk Clock Range between 15-16 MHz */
			UsbTrd = 0xEU;
 80076b6:	230e      	movs	r3, #14
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	e057      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 16000000U) && (hclk < 17200000U)) {
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4a38      	ldr	r2, [pc, #224]	@ (80077a0 <USB_SetTurnaroundTime+0x124>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d306      	bcc.n	80076d2 <USB_SetTurnaroundTime+0x56>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4a37      	ldr	r2, [pc, #220]	@ (80077a4 <USB_SetTurnaroundTime+0x128>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d202      	bcs.n	80076d2 <USB_SetTurnaroundTime+0x56>
			/* hclk Clock Range between 16-17.2 MHz */
			UsbTrd = 0xDU;
 80076cc:	230d      	movs	r3, #13
 80076ce:	617b      	str	r3, [r7, #20]
 80076d0:	e04c      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 17200000U) && (hclk < 18500000U)) {
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	4a33      	ldr	r2, [pc, #204]	@ (80077a4 <USB_SetTurnaroundTime+0x128>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d306      	bcc.n	80076e8 <USB_SetTurnaroundTime+0x6c>
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	4a32      	ldr	r2, [pc, #200]	@ (80077a8 <USB_SetTurnaroundTime+0x12c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d802      	bhi.n	80076e8 <USB_SetTurnaroundTime+0x6c>
			/* hclk Clock Range between 17.2-18.5 MHz */
			UsbTrd = 0xCU;
 80076e2:	230c      	movs	r3, #12
 80076e4:	617b      	str	r3, [r7, #20]
 80076e6:	e041      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 18500000U) && (hclk < 20000000U)) {
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4a2f      	ldr	r2, [pc, #188]	@ (80077a8 <USB_SetTurnaroundTime+0x12c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d906      	bls.n	80076fe <USB_SetTurnaroundTime+0x82>
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	4a2e      	ldr	r2, [pc, #184]	@ (80077ac <USB_SetTurnaroundTime+0x130>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d802      	bhi.n	80076fe <USB_SetTurnaroundTime+0x82>
			/* hclk Clock Range between 18.5-20 MHz */
			UsbTrd = 0xBU;
 80076f8:	230b      	movs	r3, #11
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	e036      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 20000000U) && (hclk < 21800000U)) {
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	4a2a      	ldr	r2, [pc, #168]	@ (80077ac <USB_SetTurnaroundTime+0x130>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d906      	bls.n	8007714 <USB_SetTurnaroundTime+0x98>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	4a29      	ldr	r2, [pc, #164]	@ (80077b0 <USB_SetTurnaroundTime+0x134>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d802      	bhi.n	8007714 <USB_SetTurnaroundTime+0x98>
			/* hclk Clock Range between 20-21.8 MHz */
			UsbTrd = 0xAU;
 800770e:	230a      	movs	r3, #10
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	e02b      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 21800000U) && (hclk < 24000000U)) {
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	4a26      	ldr	r2, [pc, #152]	@ (80077b0 <USB_SetTurnaroundTime+0x134>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d906      	bls.n	800772a <USB_SetTurnaroundTime+0xae>
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4a25      	ldr	r2, [pc, #148]	@ (80077b4 <USB_SetTurnaroundTime+0x138>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d202      	bcs.n	800772a <USB_SetTurnaroundTime+0xae>
			/* hclk Clock Range between 21.8-24 MHz */
			UsbTrd = 0x9U;
 8007724:	2309      	movs	r3, #9
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	e020      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 24000000U) && (hclk < 27700000U)) {
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4a21      	ldr	r2, [pc, #132]	@ (80077b4 <USB_SetTurnaroundTime+0x138>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d306      	bcc.n	8007740 <USB_SetTurnaroundTime+0xc4>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	4a20      	ldr	r2, [pc, #128]	@ (80077b8 <USB_SetTurnaroundTime+0x13c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d802      	bhi.n	8007740 <USB_SetTurnaroundTime+0xc4>
			/* hclk Clock Range between 24-27.7 MHz */
			UsbTrd = 0x8U;
 800773a:	2308      	movs	r3, #8
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	e015      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 27700000U) && (hclk < 32000000U)) {
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4a1d      	ldr	r2, [pc, #116]	@ (80077b8 <USB_SetTurnaroundTime+0x13c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d906      	bls.n	8007756 <USB_SetTurnaroundTime+0xda>
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4a1c      	ldr	r2, [pc, #112]	@ (80077bc <USB_SetTurnaroundTime+0x140>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d202      	bcs.n	8007756 <USB_SetTurnaroundTime+0xda>
			/* hclk Clock Range between 27.7-32 MHz */
			UsbTrd = 0x7U;
 8007750:	2307      	movs	r3, #7
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	e00a      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
		} else /* if(hclk >= 32000000) */
		{
			/* hclk Clock Range between 32-200 MHz */
			UsbTrd = 0x6U;
 8007756:	2306      	movs	r3, #6
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e007      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
		}
	} else if (speed == USBD_HS_SPEED) {
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <USB_SetTurnaroundTime+0xec>
		UsbTrd = USBD_HS_TRDT_VALUE;
 8007762:	2309      	movs	r3, #9
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	e001      	b.n	800776c <USB_SetTurnaroundTime+0xf0>
	} else {
		UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007768:	2309      	movs	r3, #9
 800776a:	617b      	str	r3, [r7, #20]
	}

	USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	60da      	str	r2, [r3, #12]
	USBx->GUSBCFG |= (uint32_t) ((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	029b      	lsls	r3, r3, #10
 8007780:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007784:	431a      	orrs	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	60da      	str	r2, [r3, #12]

	return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	00d8acbf 	.word	0x00d8acbf
 800779c:	00e4e1c0 	.word	0x00e4e1c0
 80077a0:	00f42400 	.word	0x00f42400
 80077a4:	01067380 	.word	0x01067380
 80077a8:	011a499f 	.word	0x011a499f
 80077ac:	01312cff 	.word	0x01312cff
 80077b0:	014ca43f 	.word	0x014ca43f
 80077b4:	016e3600 	.word	0x016e3600
 80077b8:	01a6ab1f 	.word	0x01a6ab1f
 80077bc:	01e84800 	.word	0x01e84800

080077c0 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f043 0201 	orr.w	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f023 0201 	bic.w	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USB_SetCurrentMode>:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_ModeTypeDef mode) {
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
	uint32_t ms = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]

	USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]

	if (mode == USB_HOST_MODE) {
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d115      	bne.n	8007852 <USB_SetCurrentMode+0x4e>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 8007832:	200a      	movs	r0, #10
 8007834:	f7fa fd3e 	bl	80022b4 <HAL_Delay>
			ms += 10U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	330a      	adds	r3, #10
 800783c:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_HOST_MODE)
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 f93f 	bl	8008ac2 <USB_GetMode>
 8007844:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007846:	2b01      	cmp	r3, #1
 8007848:	d01e      	beq.n	8007888 <USB_SetCurrentMode+0x84>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2bc7      	cmp	r3, #199	@ 0xc7
 800784e:	d9f0      	bls.n	8007832 <USB_SetCurrentMode+0x2e>
 8007850:	e01a      	b.n	8007888 <USB_SetCurrentMode+0x84>
	} else if (mode == USB_DEVICE_MODE) {
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d115      	bne.n	8007884 <USB_SetCurrentMode+0x80>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 8007864:	200a      	movs	r0, #10
 8007866:	f7fa fd25 	bl	80022b4 <HAL_Delay>
			ms += 10U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	330a      	adds	r3, #10
 800786e:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_DEVICE_MODE)
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 f926 	bl	8008ac2 <USB_GetMode>
 8007876:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <USB_SetCurrentMode+0x84>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007880:	d9f0      	bls.n	8007864 <USB_SetCurrentMode+0x60>
 8007882:	e001      	b.n	8007888 <USB_SetCurrentMode+0x84>
	} else {
		return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e005      	b.n	8007894 <USB_SetCurrentMode+0x90>
	}

	if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS) {
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2bc8      	cmp	r3, #200	@ 0xc8
 800788c:	d101      	bne.n	8007892 <USB_SetCurrentMode+0x8e>
		return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <USB_SetCurrentMode+0x90>
	}

	return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USB_DevInit>:
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 800789c:	b084      	sub	sp, #16
 800789e:	b580      	push	{r7, lr}
 80078a0:	b086      	sub	sp, #24
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80078aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret = HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60fb      	str	r3, [r7, #12]
	uint32_t i;

	for (i = 0U; i < 15U; i++) {
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	e009      	b.n	80078d0 <USB_DevInit+0x34>
		USBx->DIEPTXF[i] = 0U;
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	3340      	adds	r3, #64	@ 0x40
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	605a      	str	r2, [r3, #4]
	for (i = 0U; i < 15U; i++) {
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	3301      	adds	r3, #1
 80078ce:	613b      	str	r3, [r7, #16]
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b0e      	cmp	r3, #14
 80078d4:	d9f2      	bls.n	80078bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
	/* VBUS Sensing setup */
	if (cfg.vbus_sensing_enable == 0U) {
 80078d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d11c      	bne.n	8007918 <USB_DevInit+0x7c>
		/*
		 * Disable HW VBUS sensing. VBUS is internally considered to be always
		 * at VBUS-Valid level (5V).
		 */
		USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078ec:	f043 0302 	orr.w	r3, r3, #2
 80078f0:	6053      	str	r3, [r2, #4]
		USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	639a      	str	r2, [r3, #56]	@ 0x38
		USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007902:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	639a      	str	r2, [r3, #56]	@ 0x38
		USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	639a      	str	r2, [r3, #56]	@ 0x38
 8007916:	e00b      	b.n	8007930 <USB_DevInit+0x94>
	} else {
		/* Enable HW VBUS sensing */
		USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	639a      	str	r2, [r3, #56]	@ 0x38
		USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007928:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

	/* Restart the Phy Clock */
	USBx_PCGCCTL = 0U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007936:	461a      	mov	r2, r3
 8007938:	2300      	movs	r3, #0
 800793a:	6013      	str	r3, [r2, #0]

	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 800793c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007940:	2b01      	cmp	r3, #1
 8007942:	d10d      	bne.n	8007960 <USB_DevInit+0xc4>
		if (cfg.speed == USBD_HS_SPEED) {
 8007944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <USB_DevInit+0xba>
			/* Set Core speed to High speed mode */
			(void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800794c:	2100      	movs	r1, #0
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f968 	bl	8007c24 <USB_SetDevSpeed>
 8007954:	e008      	b.n	8007968 <USB_DevInit+0xcc>
		} else {
			/* Set Core speed to Full speed mode */
			(void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007956:	2101      	movs	r1, #1
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f963 	bl	8007c24 <USB_SetDevSpeed>
 800795e:	e003      	b.n	8007968 <USB_DevInit+0xcc>
		}
	} else {
		/* Set Core speed to Full speed mode */
		(void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007960:	2103      	movs	r1, #3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f95e 	bl	8007c24 <USB_SetDevSpeed>
	}

	/* Flush the FIFOs */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007968:	2110      	movs	r1, #16
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f8fa 	bl	8007b64 <USB_FlushTxFifo>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <USB_DevInit+0xde>
	{
		ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	75fb      	strb	r3, [r7, #23]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f924 	bl	8007bc8 <USB_FlushRxFifo>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <USB_DevInit+0xee>
		ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]
	}

	/* Clear all pending Device Interrupts */
	USBx_DEVICE->DIEPMSK = 0U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007990:	461a      	mov	r2, r3
 8007992:	2300      	movs	r3, #0
 8007994:	6113      	str	r3, [r2, #16]
	USBx_DEVICE->DOEPMSK = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800799c:	461a      	mov	r2, r3
 800799e:	2300      	movs	r3, #0
 80079a0:	6153      	str	r3, [r2, #20]
	USBx_DEVICE->DAINTMSK = 0U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a8:	461a      	mov	r2, r3
 80079aa:	2300      	movs	r3, #0
 80079ac:	61d3      	str	r3, [r2, #28]

	for (i = 0U; i < cfg.dev_endpoints; i++) {
 80079ae:	2300      	movs	r3, #0
 80079b0:	613b      	str	r3, [r7, #16]
 80079b2:	e043      	b.n	8007a3c <USB_DevInit+0x1a0>
		if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079ca:	d118      	bne.n	80079fe <USB_DevInit+0x162>
				== USB_OTG_DIEPCTL_EPENA) {
			if (i == 0U) {
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <USB_DevInit+0x14c>
				USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079de:	461a      	mov	r2, r3
 80079e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	e013      	b.n	8007a10 <USB_DevInit+0x174>
			} else {
				USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f4:	461a      	mov	r2, r3
 80079f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	e008      	b.n	8007a10 <USB_DevInit+0x174>
						| USB_OTG_DIEPCTL_SNAK;
			}
		} else {
			USBx_INEP(i)->DIEPCTL = 0U;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	6013      	str	r3, [r2, #0]
		}

		USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2300      	movs	r3, #0
 8007a20:	6113      	str	r3, [r2, #16]
		USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a34:	6093      	str	r3, [r2, #8]
	for (i = 0U; i < cfg.dev_endpoints; i++) {
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a40:	461a      	mov	r2, r3
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d3b5      	bcc.n	80079b4 <USB_DevInit+0x118>
	}

	for (i = 0U; i < cfg.dev_endpoints; i++) {
 8007a48:	2300      	movs	r3, #0
 8007a4a:	613b      	str	r3, [r7, #16]
 8007a4c:	e043      	b.n	8007ad6 <USB_DevInit+0x23a>
		if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a64:	d118      	bne.n	8007a98 <USB_DevInit+0x1fc>
				== USB_OTG_DOEPCTL_EPENA) {
			if (i == 0U) {
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10a      	bne.n	8007a82 <USB_DevInit+0x1e6>
				USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	e013      	b.n	8007aaa <USB_DevInit+0x20e>
			} else {
				USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	e008      	b.n	8007aaa <USB_DevInit+0x20e>
						| USB_OTG_DOEPCTL_SNAK;
			}
		} else {
			USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6013      	str	r3, [r2, #0]
		}

		USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	2300      	movs	r3, #0
 8007aba:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ace:	6093      	str	r3, [r2, #8]
	for (i = 0U; i < cfg.dev_endpoints; i++) {
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	613b      	str	r3, [r7, #16]
 8007ad6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ada:	461a      	mov	r2, r3
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d3b5      	bcc.n	8007a4e <USB_DevInit+0x1b2>
	}

	USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af4:	6113      	str	r3, [r2, #16]

	/* Disable all interrupts. */
	USBx->GINTMSK = 0U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	619a      	str	r2, [r3, #24]

	/* Clear any pending interrupts */
	USBx->GINTSTS = 0xBFFFFFFFU;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b02:	615a      	str	r2, [r3, #20]

	/* Enable the common interrupts */
	if (cfg.dma_enable == 0U) {
 8007b04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d105      	bne.n	8007b18 <USB_DevInit+0x27c>
		USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	f043 0210 	orr.w	r2, r3, #16
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	619a      	str	r2, [r3, #24]
	}

	/* Enable interrupts matching to the Device mode ONLY */
	USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	4b10      	ldr	r3, [pc, #64]	@ (8007b60 <USB_DevInit+0x2c4>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6193      	str	r3, [r2, #24]
	USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
	USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IISOIXFRM |
	USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

	if (cfg.Sof_enable != 0U) {
 8007b24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <USB_DevInit+0x29c>
		USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	f043 0208 	orr.w	r2, r3, #8
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	619a      	str	r2, [r3, #24]
	}

	if (cfg.vbus_sensing_enable == 1U) {
 8007b38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d107      	bne.n	8007b50 <USB_DevInit+0x2b4>
		USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b48:	f043 0304 	orr.w	r3, r3, #4
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6193      	str	r3, [r2, #24]
	}

	return ret;
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b5c:	b004      	add	sp, #16
 8007b5e:	4770      	bx	lr
 8007b60:	803c3800 	.word	0x803c3800

08007b64 <USB_FlushTxFifo>:
 * @param  num  FIFO number
 *         This parameter can be a value from 1 to 15
 15 means Flush all Tx FIFOs
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num) {
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3301      	adds	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b7e:	d901      	bls.n	8007b84 <USB_FlushTxFifo+0x20>
			return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e01b      	b.n	8007bbc <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	daf2      	bge.n	8007b72 <USB_FlushTxFifo+0xe>

	/* Flush TX Fifo */
	count = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	019b      	lsls	r3, r3, #6
 8007b94:	f043 0220 	orr.w	r2, r3, #32
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ba8:	d901      	bls.n	8007bae <USB_FlushTxFifo+0x4a>
			return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e006      	b.n	8007bbc <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f003 0320 	and.w	r3, r3, #32
			== USB_OTG_GRSTCTL_TXFFLSH);
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	d0f0      	beq.n	8007b9c <USB_FlushTxFifo+0x38>

	return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx) {
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007be0:	d901      	bls.n	8007be6 <USB_FlushRxFifo+0x1e>
			return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e018      	b.n	8007c18 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	daf2      	bge.n	8007bd4 <USB_FlushRxFifo+0xc>

	/* Flush RX Fifo */
	count = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2210      	movs	r2, #16
 8007bf6:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c04:	d901      	bls.n	8007c0a <USB_FlushRxFifo+0x42>
			return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e006      	b.n	8007c18 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f003 0310 	and.w	r3, r3, #16
			== USB_OTG_GRSTCTL_RXFFLSH);
 8007c12:	2b10      	cmp	r3, #16
 8007c14:	d0f0      	beq.n	8007bf8 <USB_FlushRxFifo+0x30>

	return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USB_SetDevSpeed>:
 *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
 *            @arg USB_OTG_SPEED_FULL: Full speed mode
 * @retval  Hal status
 */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t speed) {
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60fb      	str	r3, [r7, #12]

	USBx_DEVICE->DCFG |= speed;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	68f9      	ldr	r1, [r7, #12]
 8007c40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c44:	4313      	orrs	r3, r2
 8007c46:	600b      	str	r3, [r1, #0]
	return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <USB_GetDevSpeed>:
 * @retval speed  device speed
 *          This parameter can be one of these values:
 *            @arg USBD_HS_SPEED: High speed mode
 *            @arg USBD_FS_SPEED: Full speed mode
 */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx) {
 8007c56:	b480      	push	{r7}
 8007c58:	b087      	sub	sp, #28
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	613b      	str	r3, [r7, #16]
	uint8_t speed;
	uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 0306 	and.w	r3, r3, #6
 8007c6e:	60fb      	str	r3, [r7, #12]

	if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ) {
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <USB_GetDevSpeed+0x26>
		speed = USBD_HS_SPEED;
 8007c76:	2300      	movs	r3, #0
 8007c78:	75fb      	strb	r3, [r7, #23]
 8007c7a:	e00a      	b.n	8007c92 <USB_GetDevSpeed+0x3c>
	} else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d002      	beq.n	8007c88 <USB_GetDevSpeed+0x32>
			|| (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ)) {
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b06      	cmp	r3, #6
 8007c86:	d102      	bne.n	8007c8e <USB_GetDevSpeed+0x38>
		speed = USBD_FS_SPEED;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	75fb      	strb	r3, [r7, #23]
 8007c8c:	e001      	b.n	8007c92 <USB_GetDevSpeed+0x3c>
	} else {
		speed = 0xFU;
 8007c8e:	230f      	movs	r3, #15
 8007c90:	75fb      	strb	r3, [r7, #23]
	}

	return speed;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USB_ActivateEndpoint>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	60bb      	str	r3, [r7, #8]

	if (ep->is_in == 1U) {
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	785b      	ldrb	r3, [r3, #1]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d13a      	bne.n	8007d32 <USB_ActivateEndpoint+0x92>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cc2:	69da      	ldr	r2, [r3, #28]
				& (uint32_t) (1UL << (ep->num & EP_ADDR_MSK));
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	2101      	movs	r1, #1
 8007cce:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd2:	b29b      	uxth	r3, r3
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM
 8007cd4:	68f9      	ldr	r1, [r7, #12]
 8007cd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	61cb      	str	r3, [r1, #28]

		if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d155      	bne.n	8007da0 <USB_ActivateEndpoint+0x100>
			USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f3c3 010a 	ubfx	r1, r3, #0, #11
					| ((uint32_t) ep->type << 18) | (epnum << 22) |
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	791b      	ldrb	r3, [r3, #4]
 8007d0e:	049b      	lsls	r3, r3, #18
 8007d10:	4319      	orrs	r1, r3
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	059b      	lsls	r3, r3, #22
 8007d16:	430b      	orrs	r3, r1
			USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	e036      	b.n	8007da0 <USB_ActivateEndpoint+0x100>
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DIEPCTL_USBAEP;
		}
	} else {
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d38:	69da      	ldr	r2, [r3, #28]
				& ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	2101      	movs	r1, #1
 8007d44:	fa01 f303 	lsl.w	r3, r1, r3
 8007d48:	041b      	lsls	r3, r3, #16
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d50:	4313      	orrs	r3, r2
 8007d52:	61cb      	str	r3, [r1, #28]

		if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d11a      	bne.n	8007da0 <USB_ActivateEndpoint+0x100>
			USBx_OUTEP(epnum)->DOEPCTL |=
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d76:	681a      	ldr	r2, [r3, #0]
					(ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
							| ((uint32_t) ep->type << 18) |
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	791b      	ldrb	r3, [r3, #4]
 8007d84:	049b      	lsls	r3, r3, #18
 8007d86:	430b      	orrs	r3, r1
			USBx_OUTEP(epnum)->DOEPCTL |=
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	0151      	lsls	r1, r2, #5
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	440a      	add	r2, r1
 8007d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d9e:	6013      	str	r3, [r2, #0]
							USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
							USB_OTG_DOEPCTL_USBAEP;
		}
	}
	return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
	...

08007db0 <USB_DeactivateEndpoint>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	60bb      	str	r3, [r7, #8]

	/* Read DEPCTLn register */
	if (ep->is_in == 1U) {
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d161      	bne.n	8007e90 <USB_DeactivateEndpoint+0xe0>
		if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007de2:	d11f      	bne.n	8007e24 <USB_DeactivateEndpoint+0x74>
				== USB_OTG_DIEPCTL_EPENA) {
			USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dfe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e02:	6013      	str	r3, [r2, #0]
			USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e22:	6013      	str	r3, [r2, #0]
		}

		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
				& (uint32_t) (1UL << (ep->num & EP_ADDR_MSK)));
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	2101      	movs	r1, #1
 8007e36:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3a:	b29b      	uxth	r3, r3
		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e44:	4013      	ands	r3, r2
 8007e46:	63cb      	str	r3, [r1, #60]	@ 0x3c
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4e:	69da      	ldr	r2, [r3, #28]
				& (uint32_t) (1UL << (ep->num & EP_ADDR_MSK)));
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	2101      	movs	r1, #1
 8007e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e5e:	b29b      	uxth	r3, r3
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM
 8007e60:	43db      	mvns	r3, r3
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e68:	4013      	ands	r3, r2
 8007e6a:	61cb      	str	r3, [r1, #28]
		USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	0159      	lsls	r1, r3, #5
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	440b      	add	r3, r1
 8007e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e86:	4619      	mov	r1, r3
 8007e88:	4b35      	ldr	r3, [pc, #212]	@ (8007f60 <USB_DeactivateEndpoint+0x1b0>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]
 8007e8e:	e060      	b.n	8007f52 <USB_DeactivateEndpoint+0x1a2>
		USB_OTG_DIEPCTL_MPSIZ |
		USB_OTG_DIEPCTL_TXFNUM |
		USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
		USB_OTG_DIEPCTL_EPTYP);
	} else {
		if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ea6:	d11f      	bne.n	8007ee8 <USB_DeactivateEndpoint+0x138>
				== USB_OTG_DOEPCTL_EPENA) {
			USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ec2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ec6:	6013      	str	r3, [r2, #0]
			USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	0151      	lsls	r1, r2, #5
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	440a      	add	r2, r1
 8007ede:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ee2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ee6:	6013      	str	r3, [r2, #0]
		}

		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
				& ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	2101      	movs	r1, #1
 8007efa:	fa01 f303 	lsl.w	r3, r1, r3
 8007efe:	041b      	lsls	r3, r3, #16
		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM
 8007f00:	43db      	mvns	r3, r3
 8007f02:	68f9      	ldr	r1, [r7, #12]
 8007f04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f08:	4013      	ands	r3, r2
 8007f0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f12:	69da      	ldr	r2, [r3, #28]
				& ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f22:	041b      	lsls	r3, r3, #16
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM
 8007f24:	43db      	mvns	r3, r3
 8007f26:	68f9      	ldr	r1, [r7, #12]
 8007f28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	61cb      	str	r3, [r1, #28]
		USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	0159      	lsls	r1, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	440b      	add	r3, r1
 8007f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4b05      	ldr	r3, [pc, #20]	@ (8007f64 <USB_DeactivateEndpoint+0x1b4>)
 8007f4e:	4013      	ands	r3, r2
 8007f50:	600b      	str	r3, [r1, #0]
		USB_OTG_DOEPCTL_MPSIZ |
		USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
		USB_OTG_DOEPCTL_EPTYP);
	}

	return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	ec337800 	.word	0xec337800
 8007f64:	eff37800 	.word	0xeff37800

08007f68 <USB_EPStartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_EPTypeDef *ep, uint8_t dma) {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08a      	sub	sp, #40	@ 0x28
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4613      	mov	r3, r2
 8007f74:	71fb      	strb	r3, [r7, #7]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	61fb      	str	r3, [r7, #28]
	uint32_t epnum = (uint32_t) ep->num;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	61bb      	str	r3, [r7, #24]
	uint16_t pktcnt;

	/* IN endpoint */
	if (ep->is_in == 1U) {
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	785b      	ldrb	r3, [r3, #1]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	f040 817f 	bne.w	8008288 <USB_EPStartXfer+0x320>
		/* Zero Length Packet? */
		if (ep->xfer_len == 0U) {
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d132      	bne.n	8007ff8 <USB_EPStartXfer+0x90>
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	0151      	lsls	r1, r2, #5
 8007fa4:	69fa      	ldr	r2, [r7, #28]
 8007fa6:	440a      	add	r2, r1
 8007fa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007fb0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007fb4:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |=
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fd4:	6113      	str	r3, [r2, #16]
					(USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ff0:	0cdb      	lsrs	r3, r3, #19
 8007ff2:	04db      	lsls	r3, r3, #19
 8007ff4:	6113      	str	r3, [r2, #16]
 8007ff6:	e097      	b.n	8008128 <USB_EPStartXfer+0x1c0>
			/* Program the transfer size and packet count
			 * as follows: xfersize = N * maxpacket +
			 * short_packet pktcnt = N + (short_packet
			 * exist ? 1 : 0)
			 */
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008012:	0cdb      	lsrs	r3, r3, #19
 8008014:	04db      	lsls	r3, r3, #19
 8008016:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008032:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008036:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800803a:	6113      	str	r3, [r2, #16]

			if (epnum == 0U) {
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d11a      	bne.n	8008078 <USB_EPStartXfer+0x110>
				if (ep->xfer_len > ep->maxpacket) {
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	691a      	ldr	r2, [r3, #16]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	429a      	cmp	r2, r3
 800804c:	d903      	bls.n	8008056 <USB_EPStartXfer+0xee>
					ep->xfer_len = ep->maxpacket;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	611a      	str	r2, [r3, #16]
				}

				USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	0151      	lsls	r1, r2, #5
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	440a      	add	r2, r1
 800806c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008070:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008074:	6113      	str	r3, [r2, #16]
 8008076:	e044      	b.n	8008102 <USB_EPStartXfer+0x19a>
						& (1U << 19));
			} else {
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	4413      	add	r3, r2
 8008082:	1e5a      	subs	r2, r3, #1
						/ ep->maxpacket);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	fbb2 f3f3 	udiv	r3, r2, r3
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 800808c:	82fb      	strh	r3, [r7, #22]
				USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	4413      	add	r3, r2
 8008096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800809a:	691a      	ldr	r2, [r3, #16]
						& (pktcnt << 19));
 800809c:	8afb      	ldrh	r3, [r7, #22]
 800809e:	04d9      	lsls	r1, r3, #19
 80080a0:	4ba4      	ldr	r3, [pc, #656]	@ (8008334 <USB_EPStartXfer+0x3cc>)
 80080a2:	400b      	ands	r3, r1
				USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT
 80080a4:	69b9      	ldr	r1, [r7, #24]
 80080a6:	0148      	lsls	r0, r1, #5
 80080a8:	69f9      	ldr	r1, [r7, #28]
 80080aa:	4401      	add	r1, r0
 80080ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80080b0:	4313      	orrs	r3, r2
 80080b2:	610b      	str	r3, [r1, #16]

				if (ep->type == EP_TYPE_ISOC) {
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	791b      	ldrb	r3, [r3, #4]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d122      	bne.n	8008102 <USB_EPStartXfer+0x19a>
					USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	0151      	lsls	r1, r2, #5
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	440a      	add	r2, r1
 80080d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080d6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80080da:	6113      	str	r3, [r2, #16]
					USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080e8:	691a      	ldr	r2, [r3, #16]
							& (pktcnt << 29));
 80080ea:	8afb      	ldrh	r3, [r7, #22]
 80080ec:	075b      	lsls	r3, r3, #29
 80080ee:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
					USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT
 80080f2:	69b9      	ldr	r1, [r7, #24]
 80080f4:	0148      	lsls	r0, r1, #5
 80080f6:	69f9      	ldr	r1, [r7, #28]
 80080f8:	4401      	add	r1, r0
 80080fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80080fe:	4313      	orrs	r3, r2
 8008100:	610b      	str	r3, [r1, #16]
				}
			}

			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800810e:	691a      	ldr	r2, [r3, #16]
					& ep->xfer_len);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f3c3 0312 	ubfx	r3, r3, #0, #19
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ
 8008118:	69b9      	ldr	r1, [r7, #24]
 800811a:	0148      	lsls	r0, r1, #5
 800811c:	69f9      	ldr	r1, [r7, #28]
 800811e:	4401      	add	r1, r0
 8008120:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008124:	4313      	orrs	r3, r2
 8008126:	610b      	str	r3, [r1, #16]
		}

		if (dma == 1U) {
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d14b      	bne.n	80081c6 <USB_EPStartXfer+0x25e>
			if ((uint32_t) ep->dma_addr != 0U) {
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <USB_EPStartXfer+0x1e2>
				USBx_INEP(epnum)->DIEPDMA = (uint32_t) (ep->dma_addr);
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008142:	461a      	mov	r2, r3
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	6153      	str	r3, [r2, #20]
			}

			if (ep->type == EP_TYPE_ISOC) {
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	791b      	ldrb	r3, [r3, #4]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d128      	bne.n	80081a4 <USB_EPStartXfer+0x23c>
				if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800815e:	2b00      	cmp	r3, #0
 8008160:	d110      	bne.n	8008184 <USB_EPStartXfer+0x21c>
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	0151      	lsls	r1, r2, #5
 8008174:	69fa      	ldr	r2, [r7, #28]
 8008176:	440a      	add	r2, r1
 8008178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800817c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	e00f      	b.n	80081a4 <USB_EPStartXfer+0x23c>
				} else {
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	0151      	lsls	r1, r2, #5
 8008196:	69fa      	ldr	r2, [r7, #28]
 8008198:	440a      	add	r2, r1
 800819a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800819e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081a2:	6013      	str	r3, [r2, #0]
				}
			}

			/* EP enable, IN data in FIFO */
			USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	e166      	b.n	8008494 <USB_EPStartXfer+0x52c>
					| USB_OTG_DIEPCTL_EPENA);
		} else {
			/* EP enable, IN data in FIFO */
			USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	0151      	lsls	r1, r2, #5
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	440a      	add	r2, r1
 80081dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80081e4:	6013      	str	r3, [r2, #0]
					| USB_OTG_DIEPCTL_EPENA);

			if (ep->type != EP_TYPE_ISOC) {
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	791b      	ldrb	r3, [r3, #4]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d015      	beq.n	800821a <USB_EPStartXfer+0x2b2>
				/* Enable the Tx FIFO Empty Interrupt for this EP */
				if (ep->xfer_len > 0U) {
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 814e 	beq.w	8008494 <USB_EPStartXfer+0x52c>
					USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	f003 030f 	and.w	r3, r3, #15
 8008208:	2101      	movs	r1, #1
 800820a:	fa01 f303 	lsl.w	r3, r1, r3
 800820e:	69f9      	ldr	r1, [r7, #28]
 8008210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008214:	4313      	orrs	r3, r2
 8008216:	634b      	str	r3, [r1, #52]	@ 0x34
 8008218:	e13c      	b.n	8008494 <USB_EPStartXfer+0x52c>
				}
			} else {
				if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008226:	2b00      	cmp	r3, #0
 8008228:	d110      	bne.n	800824c <USB_EPStartXfer+0x2e4>
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	0151      	lsls	r1, r2, #5
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	440a      	add	r2, r1
 8008240:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008244:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	e00f      	b.n	800826c <USB_EPStartXfer+0x304>
				} else {
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	0151      	lsls	r1, r2, #5
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	440a      	add	r2, r1
 8008262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800826a:	6013      	str	r3, [r2, #0]
				}

				(void) USB_WritePacket(USBx, ep->xfer_buff, ep->num,
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	68d9      	ldr	r1, [r3, #12]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	781a      	ldrb	r2, [r3, #0]
						(uint16_t) ep->xfer_len, dma);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	691b      	ldr	r3, [r3, #16]
				(void) USB_WritePacket(USBx, ep->xfer_buff, ep->num,
 8008278:	b298      	uxth	r0, r3
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	4603      	mov	r3, r0
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 f9b9 	bl	80085f8 <USB_WritePacket>
 8008286:	e105      	b.n	8008494 <USB_EPStartXfer+0x52c>
	{
		/* Program the transfer size and packet count as follows:
		 * pktcnt = N
		 * xfersize = N * maxpacket
		 */
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	440a      	add	r2, r1
 800829e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082a2:	0cdb      	lsrs	r3, r3, #19
 80082a4:	04db      	lsls	r3, r3, #19
 80082a6:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	0151      	lsls	r1, r2, #5
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	440a      	add	r2, r1
 80082be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80082c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80082ca:	6113      	str	r3, [r2, #16]

		if (epnum == 0U) {
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d132      	bne.n	8008338 <USB_EPStartXfer+0x3d0>
			if (ep->xfer_len > 0U) {
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <USB_EPStartXfer+0x37a>
				ep->xfer_len = ep->maxpacket;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	611a      	str	r2, [r3, #16]
			}

			/* Store transfer size, for EP0 this is equal to endpoint max packet size */
			ep->xfer_size = ep->maxpacket;
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	621a      	str	r2, [r3, #32]

			USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f6:	691a      	ldr	r2, [r3, #16]
					& ep->xfer_size);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
			USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8008300:	69b9      	ldr	r1, [r7, #24]
 8008302:	0148      	lsls	r0, r1, #5
 8008304:	69f9      	ldr	r1, [r7, #28]
 8008306:	4401      	add	r1, r0
 8008308:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800830c:	4313      	orrs	r3, r2
 800830e:	610b      	str	r3, [r1, #16]
			USBx_OUTEP(epnum)->DOEPTSIZ |=
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	0151      	lsls	r1, r2, #5
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	440a      	add	r2, r1
 8008326:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800832a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800832e:	6113      	str	r3, [r2, #16]
 8008330:	e062      	b.n	80083f8 <USB_EPStartXfer+0x490>
 8008332:	bf00      	nop
 8008334:	1ff80000 	.word	0x1ff80000
					(USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
		} else {
			if (ep->xfer_len == 0U) {
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d123      	bne.n	8008388 <USB_EPStartXfer+0x420>
				USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800834c:	691a      	ldr	r2, [r3, #16]
						& ep->maxpacket);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f3c3 0312 	ubfx	r3, r3, #0, #19
				USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8008356:	69b9      	ldr	r1, [r7, #24]
 8008358:	0148      	lsls	r0, r1, #5
 800835a:	69f9      	ldr	r1, [r7, #28]
 800835c:	4401      	add	r1, r0
 800835e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008362:	4313      	orrs	r3, r2
 8008364:	610b      	str	r3, [r1, #16]
				USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	0151      	lsls	r1, r2, #5
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	440a      	add	r2, r1
 800837c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008380:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008384:	6113      	str	r3, [r2, #16]
 8008386:	e037      	b.n	80083f8 <USB_EPStartXfer+0x490>
						& (1U << 19));
			} else {
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	4413      	add	r3, r2
 8008392:	1e5a      	subs	r2, r3, #1
						/ ep->maxpacket);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	fbb2 f3f3 	udiv	r3, r2, r3
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 800839c:	82fb      	strh	r3, [r7, #22]
				ep->xfer_size = ep->maxpacket * pktcnt;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	8afa      	ldrh	r2, [r7, #22]
 80083a4:	fb03 f202 	mul.w	r2, r3, r2
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	621a      	str	r2, [r3, #32]

				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b8:	691a      	ldr	r2, [r3, #16]
						& ((uint32_t) pktcnt << 19);
 80083ba:	8afb      	ldrh	r3, [r7, #22]
 80083bc:	04d9      	lsls	r1, r3, #19
 80083be:	4b38      	ldr	r3, [pc, #224]	@ (80084a0 <USB_EPStartXfer+0x538>)
 80083c0:	400b      	ands	r3, r1
				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT
 80083c2:	69b9      	ldr	r1, [r7, #24]
 80083c4:	0148      	lsls	r0, r1, #5
 80083c6:	69f9      	ldr	r1, [r7, #28]
 80083c8:	4401      	add	r1, r0
 80083ca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083ce:	4313      	orrs	r3, r2
 80083d0:	610b      	str	r3, [r1, #16]
				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083de:	691a      	ldr	r2, [r3, #16]
						& ep->xfer_size;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ
 80083e8:	69b9      	ldr	r1, [r7, #24]
 80083ea:	0148      	lsls	r0, r1, #5
 80083ec:	69f9      	ldr	r1, [r7, #28]
 80083ee:	4401      	add	r1, r0
 80083f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083f4:	4313      	orrs	r3, r2
 80083f6:	610b      	str	r3, [r1, #16]
			}
		}

		if (dma == 1U) {
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d10d      	bne.n	800841a <USB_EPStartXfer+0x4b2>
			if ((uint32_t) ep->xfer_buff != 0U) {
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d009      	beq.n	800841a <USB_EPStartXfer+0x4b2>
				USBx_OUTEP(epnum)->DOEPDMA = (uint32_t) (ep->xfer_buff);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	68d9      	ldr	r1, [r3, #12]
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	4413      	add	r3, r2
 8008412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008416:	460a      	mov	r2, r1
 8008418:	615a      	str	r2, [r3, #20]
			}
		}

		if (ep->type == EP_TYPE_ISOC) {
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	791b      	ldrb	r3, [r3, #4]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d128      	bne.n	8008474 <USB_EPStartXfer+0x50c>
			if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800842e:	2b00      	cmp	r3, #0
 8008430:	d110      	bne.n	8008454 <USB_EPStartXfer+0x4ec>
				USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	0151      	lsls	r1, r2, #5
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	440a      	add	r2, r1
 8008448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800844c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e00f      	b.n	8008474 <USB_EPStartXfer+0x50c>
			} else {
				USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	0151      	lsls	r1, r2, #5
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	440a      	add	r2, r1
 800846a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800846e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008472:	6013      	str	r3, [r2, #0]
			}
		}
		/* EP enable */
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	0151      	lsls	r1, r2, #5
 8008486:	69fa      	ldr	r2, [r7, #28]
 8008488:	440a      	add	r2, r1
 800848a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800848e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008492:	6013      	str	r3, [r2, #0]
				| USB_OTG_DOEPCTL_EPENA);
	}

	return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3720      	adds	r7, #32
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	1ff80000 	.word	0x1ff80000

080084a4 <USB_EPStopXfer>:
 * @param  USBx  usb device instance
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_EPTypeDef *ep) {
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef ret = HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	613b      	str	r3, [r7, #16]

	/* IN endpoint */
	if (ep->is_in == 1U) {
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d14a      	bne.n	8008558 <USB_EPStopXfer+0xb4>
		/* EP enable, IN data in FIFO */
		if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084da:	f040 8086 	bne.w	80085ea <USB_EPStopXfer+0x146>
				== USB_OTG_DIEPCTL_EPENA) {
			USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	7812      	ldrb	r2, [r2, #0]
 80084f2:	0151      	lsls	r1, r2, #5
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	440a      	add	r2, r1
 80084f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008500:	6013      	str	r3, [r2, #0]
			USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	7812      	ldrb	r2, [r2, #0]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008520:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008524:	6013      	str	r3, [r2, #0]

			do {
				count++;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3301      	adds	r3, #1
 800852a:	60fb      	str	r3, [r7, #12]

				if (count > 10000U) {
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008532:	4293      	cmp	r3, r2
 8008534:	d902      	bls.n	800853c <USB_EPStopXfer+0x98>
					ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	75fb      	strb	r3, [r7, #23]
					break;
 800853a:	e056      	b.n	80085ea <USB_EPStopXfer+0x146>
				}
			} while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_DIEPCTL_EPENA);
 8008550:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008554:	d0e7      	beq.n	8008526 <USB_EPStopXfer+0x82>
 8008556:	e048      	b.n	80085ea <USB_EPStopXfer+0x146>
		}
	} else /* OUT endpoint */
	{
		if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800856c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008570:	d13b      	bne.n	80085ea <USB_EPStopXfer+0x146>
				== USB_OTG_DOEPCTL_EPENA) {
			USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	7812      	ldrb	r2, [r2, #0]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008590:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008594:	6013      	str	r3, [r2, #0]
			USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	7812      	ldrb	r2, [r2, #0]
 80085aa:	0151      	lsls	r1, r2, #5
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	440a      	add	r2, r1
 80085b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085b8:	6013      	str	r3, [r2, #0]

			do {
				count++;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3301      	adds	r3, #1
 80085be:	60fb      	str	r3, [r7, #12]

				if (count > 10000U) {
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d902      	bls.n	80085d0 <USB_EPStopXfer+0x12c>
					ret = HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	75fb      	strb	r3, [r7, #23]
					break;
 80085ce:	e00c      	b.n	80085ea <USB_EPStopXfer+0x146>
				}
			} while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_DOEPCTL_EPENA);
 80085e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085e8:	d0e7      	beq.n	80085ba <USB_EPStopXfer+0x116>
		}
	}

	return ret;
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	371c      	adds	r7, #28
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <USB_WritePacket>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 80085f8:	b480      	push	{r7}
 80085fa:	b089      	sub	sp, #36	@ 0x24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4611      	mov	r1, r2
 8008604:	461a      	mov	r2, r3
 8008606:	460b      	mov	r3, r1
 8008608:	71fb      	strb	r3, [r7, #7]
 800860a:	4613      	mov	r3, r2
 800860c:	80bb      	strh	r3, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	617b      	str	r3, [r7, #20]
	uint8_t *pSrc = src;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	61fb      	str	r3, [r7, #28]
	uint32_t count32b;
	uint32_t i;

	if (dma == 0U) {
 8008616:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800861a:	2b00      	cmp	r3, #0
 800861c:	d123      	bne.n	8008666 <USB_WritePacket+0x6e>
		count32b = ((uint32_t) len + 3U) / 4U;
 800861e:	88bb      	ldrh	r3, [r7, #4]
 8008620:	3303      	adds	r3, #3
 8008622:	089b      	lsrs	r3, r3, #2
 8008624:	613b      	str	r3, [r7, #16]
		for (i = 0U; i < count32b; i++) {
 8008626:	2300      	movs	r3, #0
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	e018      	b.n	800865e <USB_WritePacket+0x66>
			USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	031a      	lsls	r2, r3, #12
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	4413      	add	r3, r2
 8008634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008638:	461a      	mov	r2, r3
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6013      	str	r3, [r2, #0]
			pSrc++;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	3301      	adds	r3, #1
 8008644:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	3301      	adds	r3, #1
 800864a:	61fb      	str	r3, [r7, #28]
			pSrc++;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	3301      	adds	r3, #1
 8008650:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	3301      	adds	r3, #1
 8008656:	61fb      	str	r3, [r7, #28]
		for (i = 0U; i < count32b; i++) {
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	3301      	adds	r3, #1
 800865c:	61bb      	str	r3, [r7, #24]
 800865e:	69ba      	ldr	r2, [r7, #24]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	429a      	cmp	r2, r3
 8008664:	d3e2      	bcc.n	800862c <USB_WritePacket+0x34>
		}
	}

	return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3724      	adds	r7, #36	@ 0x24
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USB_ReadPacket>:
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void* USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest,
		uint16_t len) {
 8008674:	b480      	push	{r7}
 8008676:	b08b      	sub	sp, #44	@ 0x2c
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	80fb      	strh	r3, [r7, #6]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	61bb      	str	r3, [r7, #24]
	uint8_t *pDest = dest;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t pData;
	uint32_t i;
	uint32_t count32b = (uint32_t) len >> 2U;
 800868a:	88fb      	ldrh	r3, [r7, #6]
 800868c:	089b      	lsrs	r3, r3, #2
 800868e:	b29b      	uxth	r3, r3
 8008690:	617b      	str	r3, [r7, #20]
	uint16_t remaining_bytes = len % 4U;
 8008692:	88fb      	ldrh	r3, [r7, #6]
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	83fb      	strh	r3, [r7, #30]

	for (i = 0U; i < count32b; i++) {
 800869a:	2300      	movs	r3, #0
 800869c:	623b      	str	r3, [r7, #32]
 800869e:	e014      	b.n	80086ca <USB_ReadPacket+0x56>
		__UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086aa:	601a      	str	r2, [r3, #0]
		pDest++;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	3301      	adds	r3, #1
 80086b0:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 80086b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b4:	3301      	adds	r3, #1
 80086b6:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 80086b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ba:	3301      	adds	r3, #1
 80086bc:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	3301      	adds	r3, #1
 80086c2:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0U; i < count32b; i++) {
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	3301      	adds	r3, #1
 80086c8:	623b      	str	r3, [r7, #32]
 80086ca:	6a3a      	ldr	r2, [r7, #32]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d3e6      	bcc.n	80086a0 <USB_ReadPacket+0x2c>
	}

	/* When Number of data is not word aligned, read the remaining byte */
	if (remaining_bytes != 0U) {
 80086d2:	8bfb      	ldrh	r3, [r7, #30]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01e      	beq.n	8008716 <USB_ReadPacket+0xa2>
		i = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	623b      	str	r3, [r7, #32]
		__UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086e2:	461a      	mov	r2, r3
 80086e4:	f107 0310 	add.w	r3, r7, #16
 80086e8:	6812      	ldr	r2, [r2, #0]
 80086ea:	601a      	str	r2, [r3, #0]

		do {
			*(uint8_t*) pDest = (uint8_t) (pData >> (8U * (uint8_t) (i)));
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	fa22 f303 	lsr.w	r3, r2, r3
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fc:	701a      	strb	r2, [r3, #0]
			i++;
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	3301      	adds	r3, #1
 8008702:	623b      	str	r3, [r7, #32]
			pDest++;
 8008704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008706:	3301      	adds	r3, #1
 8008708:	627b      	str	r3, [r7, #36]	@ 0x24
			remaining_bytes--;
 800870a:	8bfb      	ldrh	r3, [r7, #30]
 800870c:	3b01      	subs	r3, #1
 800870e:	83fb      	strh	r3, [r7, #30]
		} while (remaining_bytes != 0U);
 8008710:	8bfb      	ldrh	r3, [r7, #30]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1ea      	bne.n	80086ec <USB_ReadPacket+0x78>
	}

	return ((void*) pDest);
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008718:	4618      	mov	r0, r3
 800871a:	372c      	adds	r7, #44	@ 0x2c
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USB_EPSetStall>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	60bb      	str	r3, [r7, #8]

	if (ep->is_in == 1U) {
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d12c      	bne.n	800879a <USB_EPSetStall+0x76>
		if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U)
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	db12      	blt.n	8008778 <USB_EPSetStall+0x54>
				&& (epnum != 0U)) {
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00f      	beq.n	8008778 <USB_EPSetStall+0x54>
			USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	015a      	lsls	r2, r3, #5
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4413      	add	r3, r2
 8008760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	0151      	lsls	r1, r2, #5
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	440a      	add	r2, r1
 800876e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008772:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008776:	6013      	str	r3, [r2, #0]
		}
		USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	0151      	lsls	r1, r2, #5
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	440a      	add	r2, r1
 800878e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008792:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	e02b      	b.n	80087f2 <USB_EPSetStall+0xce>
	} else {
		if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	db12      	blt.n	80087d2 <USB_EPSetStall+0xae>
				&& (epnum != 0U)) {
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00f      	beq.n	80087d2 <USB_EPSetStall+0xae>
			USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	0151      	lsls	r1, r2, #5
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	440a      	add	r2, r1
 80087c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087d0:	6013      	str	r3, [r2, #0]
		}
		USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	0151      	lsls	r1, r2, #5
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	440a      	add	r2, r1
 80087e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087f0:	6013      	str	r3, [r2, #0]
	}

	return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USB_EPClearStall>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	60bb      	str	r3, [r7, #8]

	if (ep->is_in == 1U) {
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d128      	bne.n	800886e <USB_EPClearStall+0x6e>
		USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	440a      	add	r2, r1
 8008832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800883a:	6013      	str	r3, [r2, #0]
		if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	791b      	ldrb	r3, [r3, #4]
 8008840:	2b03      	cmp	r3, #3
 8008842:	d003      	beq.n	800884c <USB_EPClearStall+0x4c>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	791b      	ldrb	r3, [r3, #4]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d138      	bne.n	80088be <USB_EPClearStall+0xbe>
			USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	440a      	add	r2, r1
 8008862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	e027      	b.n	80088be <USB_EPClearStall+0xbe>
		}
	} else {
		USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	0151      	lsls	r1, r2, #5
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	440a      	add	r2, r1
 8008884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008888:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800888c:	6013      	str	r3, [r2, #0]
		if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	791b      	ldrb	r3, [r3, #4]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d003      	beq.n	800889e <USB_EPClearStall+0x9e>
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	791b      	ldrb	r3, [r3, #4]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d10f      	bne.n	80088be <USB_EPClearStall+0xbe>
			USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	0151      	lsls	r1, r2, #5
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	440a      	add	r2, r1
 80088b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088bc:	6013      	str	r3, [r2, #0]
		}
	}
	return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <USB_SetDevAddress>:
 * @param  address  new device address to be assigned
 *          This parameter can be a value from 0 to 255
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t address) {
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	60fb      	str	r3, [r7, #12]

	USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80088ee:	6013      	str	r3, [r2, #0]
	USBx_DEVICE->DCFG |= ((uint32_t) address << 4) & USB_OTG_DCFG_DAD;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008900:	68f9      	ldr	r1, [r7, #12]
 8008902:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008906:	4313      	orrs	r3, r2
 8008908:	600b      	str	r3, [r1, #0]

	return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USB_DevConnect>:
/**
 * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx) {
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	60fb      	str	r3, [r7, #12]

	/* In case phy is stopped, ensure to ungate and restore the phy CLK */
	USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008946:	f023 0302 	bic.w	r3, r3, #2
 800894a:	6053      	str	r3, [r2, #4]

	return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <USB_DevDisconnect>:
/**
 * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx) {
 800895a:	b480      	push	{r7}
 800895c:	b085      	sub	sp, #20
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	60fb      	str	r3, [r7, #12]

	/* In case phy is stopped, ensure to ungate and restore the phy CLK */
	USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008974:	f023 0303 	bic.w	r3, r3, #3
 8008978:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008988:	f043 0302 	orr.w	r3, r3, #2
 800898c:	6053      	str	r3, [r2, #4]

	return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval USB Global Interrupt status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx) {
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;

	tmpreg = USBx->GINTSTS;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	60fb      	str	r3, [r7, #12]
	tmpreg &= USBx->GINTMSK;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	4013      	ands	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]

	return tmpreg;
 80089b4:	68fb      	ldr	r3, [r7, #12]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <USB_ReadDevAllOutEpInterrupt>:
/**
 * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
 * @param  USBx  Selected device
 * @retval USB Device OUT EP interrupt status
 */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 80089c2:	b480      	push	{r7}
 80089c4:	b085      	sub	sp, #20
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_DEVICE->DAINT;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_DEVICE->DAINTMSK;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	4013      	ands	r3, r2
 80089e4:	60bb      	str	r3, [r7, #8]

	return ((tmpreg & 0xffff0000U) >> 16);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	0c1b      	lsrs	r3, r3, #16
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USB_ReadDevAllInEpInterrupt>:
/**
 * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 * @param  USBx  Selected device
 * @retval USB Device IN EP interrupt status
 */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_DEVICE->DAINT;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	4013      	ands	r3, r2
 8008a18:	60bb      	str	r3, [r7, #8]

	return ((tmpreg & 0xFFFFU));
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	b29b      	uxth	r3, r3
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <USB_ReadDevOutEPInterrupt>:
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device OUT EP Interrupt register
 */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t epnum) {
 8008a2a:	b480      	push	{r7}
 8008a2c:	b085      	sub	sp, #20
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	4013      	ands	r3, r2
 8008a56:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 8008a58:	68bb      	ldr	r3, [r7, #8]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USB_ReadDevInEPInterrupt>:
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device IN EP Interrupt register
 */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t epnum) {
 8008a66:	b480      	push	{r7}
 8008a68:	b087      	sub	sp, #28
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg;
	uint32_t msk;
	uint32_t emp;

	msk = USBx_DEVICE->DIEPMSK;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	613b      	str	r3, [r7, #16]
	emp = USBx_DEVICE->DIEPEMPMSK;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a88:	60fb      	str	r3, [r7, #12]
	msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	fa22 f303 	lsr.w	r3, r2, r3
 8008a96:	01db      	lsls	r3, r3, #7
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
	tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	371c      	adds	r7, #28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx) {
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
	return ((USBx->GINTSTS) & 0x1U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	f003 0301 	and.w	r3, r3, #1
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <USB_ActivateSetup>:
/**
 * @brief  Activate EP0 for Setup transactions
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx) {
 8008ade:	b480      	push	{r7}
 8008ae0:	b085      	sub	sp, #20
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60fb      	str	r3, [r7, #12]

	/* Set the MPS of the IN EP0 to 64 bytes */
	USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008af8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008afc:	f023 0307 	bic.w	r3, r3, #7
 8008b00:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b14:	6053      	str	r3, [r2, #4]

	return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USB_EP0_OutStart>:
 *           1 : DMA feature used
 * @param  psetup  pointer to setup packet
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t dma, const uint8_t *psetup) {
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	72fb      	strb	r3, [r7, #11]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	617b      	str	r3, [r7, #20]
	uint32_t gSNPSiD = *(__IO const uint32_t*) (&USBx->CID + 0x1U);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	333c      	adds	r3, #60	@ 0x3c
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	613b      	str	r3, [r7, #16]

	if (gSNPSiD > USB_OTG_CORE_ID_300A) {
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	4a26      	ldr	r2, [pc, #152]	@ (8008bdc <USB_EP0_OutStart+0xb8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d90a      	bls.n	8008b5e <USB_EP0_OutStart+0x3a>
		if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b58:	d101      	bne.n	8008b5e <USB_EP0_OutStart+0x3a>
				== USB_OTG_DOEPCTL_EPENA) {
			return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e037      	b.n	8008bce <USB_EP0_OutStart+0xaa>
		}
	}

	USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b64:	461a      	mov	r2, r3
 8008b66:	2300      	movs	r3, #0
 8008b68:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b7c:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b8c:	f043 0318 	orr.w	r3, r3, #24
 8008b90:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_STUPCNT;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ba0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008ba4:	6113      	str	r3, [r2, #16]

	if (dma == 1U) {
 8008ba6:	7afb      	ldrb	r3, [r7, #11]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d10f      	bne.n	8008bcc <USB_EP0_OutStart+0xa8>
		USBx_OUTEP(0U)->DOEPDMA = (uint32_t) psetup;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6153      	str	r3, [r2, #20]
		/* EP enable */
		USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bc6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008bca:	6013      	str	r3, [r2, #0]
				| USB_OTG_DOEPCTL_USBAEP;
	}

	return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	4f54300a 	.word	0x4f54300a

08008be0 <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx) {
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bf8:	d901      	bls.n	8008bfe <USB_CoreReset+0x1e>
			return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e01b      	b.n	8008c36 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	daf2      	bge.n	8008bec <USB_CoreReset+0xc>

	/* Core Soft Reset */
	count = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f043 0201 	orr.w	r2, r3, #1
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c22:	d901      	bls.n	8008c28 <USB_CoreReset+0x48>
			return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e006      	b.n	8008c36 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d0f0      	beq.n	8008c16 <USB_CoreReset+0x36>

	return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
	...

08008c44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c50:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008c54:	f002 fc46 	bl	800b4e4 <USBD_static_malloc>
 8008c58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d109      	bne.n	8008c74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	32b0      	adds	r2, #176	@ 0xb0
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008c70:	2302      	movs	r3, #2
 8008c72:	e0d4      	b.n	8008e1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008c74:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008c78:	2100      	movs	r1, #0
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f002 fc76 	bl	800b56c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	32b0      	adds	r2, #176	@ 0xb0
 8008c8a:	68f9      	ldr	r1, [r7, #12]
 8008c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	32b0      	adds	r2, #176	@ 0xb0
 8008c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	7c1b      	ldrb	r3, [r3, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d138      	bne.n	8008d1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008cac:	4b5e      	ldr	r3, [pc, #376]	@ (8008e28 <USBD_CDC_Init+0x1e4>)
 8008cae:	7819      	ldrb	r1, [r3, #0]
 8008cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f002 faf1 	bl	800b29e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8008e28 <USBD_CDC_Init+0x1e4>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	f003 020f 	and.w	r2, r3, #15
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	3324      	adds	r3, #36	@ 0x24
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008cd6:	4b55      	ldr	r3, [pc, #340]	@ (8008e2c <USBD_CDC_Init+0x1e8>)
 8008cd8:	7819      	ldrb	r1, [r3, #0]
 8008cda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cde:	2202      	movs	r2, #2
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f002 fadc 	bl	800b29e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ce6:	4b51      	ldr	r3, [pc, #324]	@ (8008e2c <USBD_CDC_Init+0x1e8>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	f003 020f 	and.w	r2, r3, #15
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	440b      	add	r3, r1
 8008cfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008cfe:	2201      	movs	r2, #1
 8008d00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d02:	4b4b      	ldr	r3, [pc, #300]	@ (8008e30 <USBD_CDC_Init+0x1ec>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	f003 020f 	and.w	r2, r3, #15
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	3326      	adds	r3, #38	@ 0x26
 8008d18:	2210      	movs	r2, #16
 8008d1a:	801a      	strh	r2, [r3, #0]
 8008d1c:	e035      	b.n	8008d8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d1e:	4b42      	ldr	r3, [pc, #264]	@ (8008e28 <USBD_CDC_Init+0x1e4>)
 8008d20:	7819      	ldrb	r1, [r3, #0]
 8008d22:	2340      	movs	r3, #64	@ 0x40
 8008d24:	2202      	movs	r2, #2
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f002 fab9 	bl	800b29e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8008e28 <USBD_CDC_Init+0x1e4>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	f003 020f 	and.w	r2, r3, #15
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	440b      	add	r3, r1
 8008d40:	3324      	adds	r3, #36	@ 0x24
 8008d42:	2201      	movs	r2, #1
 8008d44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d46:	4b39      	ldr	r3, [pc, #228]	@ (8008e2c <USBD_CDC_Init+0x1e8>)
 8008d48:	7819      	ldrb	r1, [r3, #0]
 8008d4a:	2340      	movs	r3, #64	@ 0x40
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f002 faa5 	bl	800b29e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d54:	4b35      	ldr	r3, [pc, #212]	@ (8008e2c <USBD_CDC_Init+0x1e8>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008d70:	4b2f      	ldr	r3, [pc, #188]	@ (8008e30 <USBD_CDC_Init+0x1ec>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	f003 020f 	and.w	r2, r3, #15
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	3326      	adds	r3, #38	@ 0x26
 8008d86:	2210      	movs	r2, #16
 8008d88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d8a:	4b29      	ldr	r3, [pc, #164]	@ (8008e30 <USBD_CDC_Init+0x1ec>)
 8008d8c:	7819      	ldrb	r1, [r3, #0]
 8008d8e:	2308      	movs	r3, #8
 8008d90:	2203      	movs	r2, #3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f002 fa83 	bl	800b29e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008d98:	4b25      	ldr	r3, [pc, #148]	@ (8008e30 <USBD_CDC_Init+0x1ec>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f003 020f 	and.w	r2, r3, #15
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	440b      	add	r3, r1
 8008dac:	3324      	adds	r3, #36	@ 0x24
 8008dae:	2201      	movs	r2, #1
 8008db0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	33b0      	adds	r3, #176	@ 0xb0
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008de8:	2302      	movs	r3, #2
 8008dea:	e018      	b.n	8008e1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7c1b      	ldrb	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10a      	bne.n	8008e0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008df4:	4b0d      	ldr	r3, [pc, #52]	@ (8008e2c <USBD_CDC_Init+0x1e8>)
 8008df6:	7819      	ldrb	r1, [r3, #0]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f002 fb3a 	bl	800b47c <USBD_LL_PrepareReceive>
 8008e08:	e008      	b.n	8008e1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e0a:	4b08      	ldr	r3, [pc, #32]	@ (8008e2c <USBD_CDC_Init+0x1e8>)
 8008e0c:	7819      	ldrb	r1, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e14:	2340      	movs	r3, #64	@ 0x40
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f002 fb30 	bl	800b47c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000097 	.word	0x20000097
 8008e2c:	20000098 	.word	0x20000098
 8008e30:	20000099 	.word	0x20000099

08008e34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008e40:	4b3a      	ldr	r3, [pc, #232]	@ (8008f2c <USBD_CDC_DeInit+0xf8>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f002 fa4f 	bl	800b2ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008e4c:	4b37      	ldr	r3, [pc, #220]	@ (8008f2c <USBD_CDC_DeInit+0xf8>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	f003 020f 	and.w	r2, r3, #15
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	440b      	add	r3, r1
 8008e60:	3324      	adds	r3, #36	@ 0x24
 8008e62:	2200      	movs	r2, #0
 8008e64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008e66:	4b32      	ldr	r3, [pc, #200]	@ (8008f30 <USBD_CDC_DeInit+0xfc>)
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f002 fa3c 	bl	800b2ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008e72:	4b2f      	ldr	r3, [pc, #188]	@ (8008f30 <USBD_CDC_DeInit+0xfc>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	f003 020f 	and.w	r2, r3, #15
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	440b      	add	r3, r1
 8008e86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008e8e:	4b29      	ldr	r3, [pc, #164]	@ (8008f34 <USBD_CDC_DeInit+0x100>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f002 fa28 	bl	800b2ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008e9a:	4b26      	ldr	r3, [pc, #152]	@ (8008f34 <USBD_CDC_DeInit+0x100>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	f003 020f 	and.w	r2, r3, #15
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	440b      	add	r3, r1
 8008eae:	3324      	adds	r3, #36	@ 0x24
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8008f34 <USBD_CDC_DeInit+0x100>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	f003 020f 	and.w	r2, r3, #15
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	440b      	add	r3, r1
 8008ec8:	3326      	adds	r3, #38	@ 0x26
 8008eca:	2200      	movs	r2, #0
 8008ecc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	32b0      	adds	r2, #176	@ 0xb0
 8008ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01f      	beq.n	8008f20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	33b0      	adds	r3, #176	@ 0xb0
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	32b0      	adds	r2, #176	@ 0xb0
 8008efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f002 fafc 	bl	800b500 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	32b0      	adds	r2, #176	@ 0xb0
 8008f12:	2100      	movs	r1, #0
 8008f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000097 	.word	0x20000097
 8008f30:	20000098 	.word	0x20000098
 8008f34:	20000099 	.word	0x20000099

08008f38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	32b0      	adds	r2, #176	@ 0xb0
 8008f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e0bf      	b.n	80090e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d050      	beq.n	8009016 <USBD_CDC_Setup+0xde>
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	f040 80af 	bne.w	80090d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	88db      	ldrh	r3, [r3, #6]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d03a      	beq.n	8008ff8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	b25b      	sxtb	r3, r3
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	da1b      	bge.n	8008fc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	33b0      	adds	r3, #176	@ 0xb0
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008fa2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	88d2      	ldrh	r2, [r2, #6]
 8008fa8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	88db      	ldrh	r3, [r3, #6]
 8008fae:	2b07      	cmp	r3, #7
 8008fb0:	bf28      	it	cs
 8008fb2:	2307      	movcs	r3, #7
 8008fb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	89fa      	ldrh	r2, [r7, #14]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 fd53 	bl	800aa68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008fc2:	e090      	b.n	80090e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	785a      	ldrb	r2, [r3, #1]
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	88db      	ldrh	r3, [r3, #6]
 8008fd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008fd4:	d803      	bhi.n	8008fde <USBD_CDC_Setup+0xa6>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	88db      	ldrh	r3, [r3, #6]
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	e000      	b.n	8008fe0 <USBD_CDC_Setup+0xa8>
 8008fde:	2240      	movs	r2, #64	@ 0x40
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008fe6:	6939      	ldr	r1, [r7, #16]
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 fd65 	bl	800aac0 <USBD_CtlPrepareRx>
      break;
 8008ff6:	e076      	b.n	80090e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	33b0      	adds	r3, #176	@ 0xb0
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	7850      	ldrb	r0, [r2, #1]
 800900e:	2200      	movs	r2, #0
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	4798      	blx	r3
      break;
 8009014:	e067      	b.n	80090e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	785b      	ldrb	r3, [r3, #1]
 800901a:	2b0b      	cmp	r3, #11
 800901c:	d851      	bhi.n	80090c2 <USBD_CDC_Setup+0x18a>
 800901e:	a201      	add	r2, pc, #4	@ (adr r2, 8009024 <USBD_CDC_Setup+0xec>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	08009055 	.word	0x08009055
 8009028:	080090d1 	.word	0x080090d1
 800902c:	080090c3 	.word	0x080090c3
 8009030:	080090c3 	.word	0x080090c3
 8009034:	080090c3 	.word	0x080090c3
 8009038:	080090c3 	.word	0x080090c3
 800903c:	080090c3 	.word	0x080090c3
 8009040:	080090c3 	.word	0x080090c3
 8009044:	080090c3 	.word	0x080090c3
 8009048:	080090c3 	.word	0x080090c3
 800904c:	0800907f 	.word	0x0800907f
 8009050:	080090a9 	.word	0x080090a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b03      	cmp	r3, #3
 800905e:	d107      	bne.n	8009070 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009060:	f107 030a 	add.w	r3, r7, #10
 8009064:	2202      	movs	r2, #2
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 fcfd 	bl	800aa68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800906e:	e032      	b.n	80090d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f001 fc7b 	bl	800a96e <USBD_CtlError>
            ret = USBD_FAIL;
 8009078:	2303      	movs	r3, #3
 800907a:	75fb      	strb	r3, [r7, #23]
          break;
 800907c:	e02b      	b.n	80090d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b03      	cmp	r3, #3
 8009088:	d107      	bne.n	800909a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800908a:	f107 030d 	add.w	r3, r7, #13
 800908e:	2201      	movs	r2, #1
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 fce8 	bl	800aa68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009098:	e01d      	b.n	80090d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 fc66 	bl	800a96e <USBD_CtlError>
            ret = USBD_FAIL;
 80090a2:	2303      	movs	r3, #3
 80090a4:	75fb      	strb	r3, [r7, #23]
          break;
 80090a6:	e016      	b.n	80090d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d00f      	beq.n	80090d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 fc59 	bl	800a96e <USBD_CtlError>
            ret = USBD_FAIL;
 80090bc:	2303      	movs	r3, #3
 80090be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80090c0:	e008      	b.n	80090d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 fc52 	bl	800a96e <USBD_CtlError>
          ret = USBD_FAIL;
 80090ca:	2303      	movs	r3, #3
 80090cc:	75fb      	strb	r3, [r7, #23]
          break;
 80090ce:	e002      	b.n	80090d6 <USBD_CDC_Setup+0x19e>
          break;
 80090d0:	bf00      	nop
 80090d2:	e008      	b.n	80090e6 <USBD_CDC_Setup+0x1ae>
          break;
 80090d4:	bf00      	nop
      }
      break;
 80090d6:	e006      	b.n	80090e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 fc47 	bl	800a96e <USBD_CtlError>
      ret = USBD_FAIL;
 80090e0:	2303      	movs	r3, #3
 80090e2:	75fb      	strb	r3, [r7, #23]
      break;
 80090e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009102:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	32b0      	adds	r2, #176	@ 0xb0
 800910e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009116:	2303      	movs	r3, #3
 8009118:	e065      	b.n	80091e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	32b0      	adds	r2, #176	@ 0xb0
 8009124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009128:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800912a:	78fb      	ldrb	r3, [r7, #3]
 800912c:	f003 020f 	and.w	r2, r3, #15
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	4613      	mov	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	440b      	add	r3, r1
 800913c:	3318      	adds	r3, #24
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d02f      	beq.n	80091a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	f003 020f 	and.w	r2, r3, #15
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	440b      	add	r3, r1
 8009156:	3318      	adds	r3, #24
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	f003 010f 	and.w	r1, r3, #15
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	460b      	mov	r3, r1
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	440b      	add	r3, r1
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4403      	add	r3, r0
 800916c:	331c      	adds	r3, #28
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	fbb2 f1f3 	udiv	r1, r2, r3
 8009174:	fb01 f303 	mul.w	r3, r1, r3
 8009178:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800917a:	2b00      	cmp	r3, #0
 800917c:	d112      	bne.n	80091a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800917e:	78fb      	ldrb	r3, [r7, #3]
 8009180:	f003 020f 	and.w	r2, r3, #15
 8009184:	6879      	ldr	r1, [r7, #4]
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	440b      	add	r3, r1
 8009190:	3318      	adds	r3, #24
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009196:	78f9      	ldrb	r1, [r7, #3]
 8009198:	2300      	movs	r3, #0
 800919a:	2200      	movs	r2, #0
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f002 f94c 	bl	800b43a <USBD_LL_Transmit>
 80091a2:	e01f      	b.n	80091e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	33b0      	adds	r3, #176	@ 0xb0
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d010      	beq.n	80091e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	33b0      	adds	r3, #176	@ 0xb0
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80091e0:	78fa      	ldrb	r2, [r7, #3]
 80091e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	460b      	mov	r3, r1
 80091f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	32b0      	adds	r2, #176	@ 0xb0
 8009204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	32b0      	adds	r2, #176	@ 0xb0
 8009214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800921c:	2303      	movs	r3, #3
 800921e:	e01a      	b.n	8009256 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f002 f94a 	bl	800b4be <USBD_LL_GetRxDataSize>
 800922a:	4602      	mov	r2, r0
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	33b0      	adds	r3, #176	@ 0xb0
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009250:	4611      	mov	r1, r2
 8009252:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	32b0      	adds	r2, #176	@ 0xb0
 8009270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009274:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	e024      	b.n	80092ca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	33b0      	adds	r3, #176	@ 0xb0
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d019      	beq.n	80092c8 <USBD_CDC_EP0_RxReady+0x6a>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800929a:	2bff      	cmp	r3, #255	@ 0xff
 800929c:	d014      	beq.n	80092c8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	33b0      	adds	r3, #176	@ 0xb0
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80092b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80092be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	22ff      	movs	r2, #255	@ 0xff
 80092c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092dc:	2182      	movs	r1, #130	@ 0x82
 80092de:	4818      	ldr	r0, [pc, #96]	@ (8009340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092e0:	f000 fd0f 	bl	8009d02 <USBD_GetEpDesc>
 80092e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092e6:	2101      	movs	r1, #1
 80092e8:	4815      	ldr	r0, [pc, #84]	@ (8009340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092ea:	f000 fd0a 	bl	8009d02 <USBD_GetEpDesc>
 80092ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80092f0:	2181      	movs	r1, #129	@ 0x81
 80092f2:	4813      	ldr	r0, [pc, #76]	@ (8009340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092f4:	f000 fd05 	bl	8009d02 <USBD_GetEpDesc>
 80092f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	2210      	movs	r2, #16
 8009304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d006      	beq.n	800931a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	2200      	movs	r2, #0
 8009310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009314:	711a      	strb	r2, [r3, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d006      	beq.n	800932e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009328:	711a      	strb	r2, [r3, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2243      	movs	r2, #67	@ 0x43
 8009332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009334:	4b02      	ldr	r3, [pc, #8]	@ (8009340 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000054 	.word	0x20000054

08009344 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800934c:	2182      	movs	r1, #130	@ 0x82
 800934e:	4818      	ldr	r0, [pc, #96]	@ (80093b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009350:	f000 fcd7 	bl	8009d02 <USBD_GetEpDesc>
 8009354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009356:	2101      	movs	r1, #1
 8009358:	4815      	ldr	r0, [pc, #84]	@ (80093b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800935a:	f000 fcd2 	bl	8009d02 <USBD_GetEpDesc>
 800935e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009360:	2181      	movs	r1, #129	@ 0x81
 8009362:	4813      	ldr	r0, [pc, #76]	@ (80093b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009364:	f000 fccd 	bl	8009d02 <USBD_GetEpDesc>
 8009368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2210      	movs	r2, #16
 8009374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d006      	beq.n	800938a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2200      	movs	r2, #0
 8009380:	711a      	strb	r2, [r3, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f042 0202 	orr.w	r2, r2, #2
 8009388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d006      	beq.n	800939e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	711a      	strb	r2, [r3, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f042 0202 	orr.w	r2, r2, #2
 800939c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2243      	movs	r2, #67	@ 0x43
 80093a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80093a4:	4b02      	ldr	r3, [pc, #8]	@ (80093b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000054 	.word	0x20000054

080093b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093bc:	2182      	movs	r1, #130	@ 0x82
 80093be:	4818      	ldr	r0, [pc, #96]	@ (8009420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093c0:	f000 fc9f 	bl	8009d02 <USBD_GetEpDesc>
 80093c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093c6:	2101      	movs	r1, #1
 80093c8:	4815      	ldr	r0, [pc, #84]	@ (8009420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093ca:	f000 fc9a 	bl	8009d02 <USBD_GetEpDesc>
 80093ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093d0:	2181      	movs	r1, #129	@ 0x81
 80093d2:	4813      	ldr	r0, [pc, #76]	@ (8009420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093d4:	f000 fc95 	bl	8009d02 <USBD_GetEpDesc>
 80093d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	2210      	movs	r2, #16
 80093e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d006      	beq.n	80093fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093f4:	711a      	strb	r2, [r3, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d006      	beq.n	800940e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009408:	711a      	strb	r2, [r3, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2243      	movs	r2, #67	@ 0x43
 8009412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009414:	4b02      	ldr	r3, [pc, #8]	@ (8009420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20000054 	.word	0x20000054

08009424 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	220a      	movs	r2, #10
 8009430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009432:	4b03      	ldr	r3, [pc, #12]	@ (8009440 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	20000010 	.word	0x20000010

08009444 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009454:	2303      	movs	r3, #3
 8009456:	e009      	b.n	800946c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	33b0      	adds	r3, #176	@ 0xb0
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	32b0      	adds	r2, #176	@ 0xb0
 800948e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009492:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800949a:	2303      	movs	r3, #3
 800949c:	e008      	b.n	80094b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	371c      	adds	r7, #28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	32b0      	adds	r2, #176	@ 0xb0
 80094d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80094dc:	2303      	movs	r3, #3
 80094de:	e004      	b.n	80094ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
	...

080094f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	32b0      	adds	r2, #176	@ 0xb0
 800950a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	32b0      	adds	r2, #176	@ 0xb0
 800951a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009522:	2303      	movs	r3, #3
 8009524:	e018      	b.n	8009558 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	7c1b      	ldrb	r3, [r3, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10a      	bne.n	8009544 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800952e:	4b0c      	ldr	r3, [pc, #48]	@ (8009560 <USBD_CDC_ReceivePacket+0x68>)
 8009530:	7819      	ldrb	r1, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f001 ff9d 	bl	800b47c <USBD_LL_PrepareReceive>
 8009542:	e008      	b.n	8009556 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009544:	4b06      	ldr	r3, [pc, #24]	@ (8009560 <USBD_CDC_ReceivePacket+0x68>)
 8009546:	7819      	ldrb	r1, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800954e:	2340      	movs	r3, #64	@ 0x40
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 ff93 	bl	800b47c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20000098 	.word	0x20000098

08009564 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	4613      	mov	r3, r2
 8009570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009578:	2303      	movs	r3, #3
 800957a:	e01f      	b.n	80095bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	79fa      	ldrb	r2, [r7, #7]
 80095ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f001 fe0d 	bl	800b1d0 <USBD_LL_Init>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80095d8:	2303      	movs	r3, #3
 80095da:	e025      	b.n	8009628 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	32ae      	adds	r2, #174	@ 0xae
 80095ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00f      	beq.n	8009618 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	32ae      	adds	r2, #174	@ 0xae
 8009602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009608:	f107 020e 	add.w	r2, r7, #14
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
 8009610:	4602      	mov	r2, r0
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f001 fe15 	bl	800b268 <USBD_LL_Start>
 800963e:	4603      	mov	r3, r0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009650:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009652:	4618      	mov	r0, r3
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009674:	2b00      	cmp	r3, #0
 8009676:	d009      	beq.n	800968c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	78fa      	ldrb	r2, [r7, #3]
 8009682:	4611      	mov	r1, r2
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	4798      	blx	r3
 8009688:	4603      	mov	r3, r0
 800968a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800968c:	7bfb      	ldrb	r3, [r7, #15]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	460b      	mov	r3, r1
 80096a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	78fa      	ldrb	r2, [r7, #3]
 80096b0:	4611      	mov	r1, r2
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80096bc:	2303      	movs	r3, #3
 80096be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	4618      	mov	r0, r3
 80096de:	f001 f90c 	bl	800a8fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80096f0:	461a      	mov	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80096fe:	f003 031f 	and.w	r3, r3, #31
 8009702:	2b02      	cmp	r3, #2
 8009704:	d01a      	beq.n	800973c <USBD_LL_SetupStage+0x72>
 8009706:	2b02      	cmp	r3, #2
 8009708:	d822      	bhi.n	8009750 <USBD_LL_SetupStage+0x86>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d002      	beq.n	8009714 <USBD_LL_SetupStage+0x4a>
 800970e:	2b01      	cmp	r3, #1
 8009710:	d00a      	beq.n	8009728 <USBD_LL_SetupStage+0x5e>
 8009712:	e01d      	b.n	8009750 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fb63 	bl	8009de8 <USBD_StdDevReq>
 8009722:	4603      	mov	r3, r0
 8009724:	73fb      	strb	r3, [r7, #15]
      break;
 8009726:	e020      	b.n	800976a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fbcb 	bl	8009ecc <USBD_StdItfReq>
 8009736:	4603      	mov	r3, r0
 8009738:	73fb      	strb	r3, [r7, #15]
      break;
 800973a:	e016      	b.n	800976a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fc2d 	bl	8009fa4 <USBD_StdEPReq>
 800974a:	4603      	mov	r3, r0
 800974c:	73fb      	strb	r3, [r7, #15]
      break;
 800974e:	e00c      	b.n	800976a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009756:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800975a:	b2db      	uxtb	r3, r3
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f001 fde2 	bl	800b328 <USBD_LL_StallEP>
 8009764:	4603      	mov	r3, r0
 8009766:	73fb      	strb	r3, [r7, #15]
      break;
 8009768:	bf00      	nop
  }

  return ret;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	460b      	mov	r3, r1
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009786:	7afb      	ldrb	r3, [r7, #11]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d16e      	bne.n	800986a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009792:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800979a:	2b03      	cmp	r3, #3
 800979c:	f040 8098 	bne.w	80098d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d913      	bls.n	80097d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	689a      	ldr	r2, [r3, #8]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	1ad2      	subs	r2, r2, r3
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	4293      	cmp	r3, r2
 80097c4:	bf28      	it	cs
 80097c6:	4613      	movcs	r3, r2
 80097c8:	461a      	mov	r2, r3
 80097ca:	6879      	ldr	r1, [r7, #4]
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f001 f994 	bl	800aafa <USBD_CtlContinueRx>
 80097d2:	e07d      	b.n	80098d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097da:	f003 031f 	and.w	r3, r3, #31
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d014      	beq.n	800980c <USBD_LL_DataOutStage+0x98>
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d81d      	bhi.n	8009822 <USBD_LL_DataOutStage+0xae>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <USBD_LL_DataOutStage+0x7c>
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d003      	beq.n	80097f6 <USBD_LL_DataOutStage+0x82>
 80097ee:	e018      	b.n	8009822 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	75bb      	strb	r3, [r7, #22]
            break;
 80097f4:	e018      	b.n	8009828 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	4619      	mov	r1, r3
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 fa64 	bl	8009cce <USBD_CoreFindIF>
 8009806:	4603      	mov	r3, r0
 8009808:	75bb      	strb	r3, [r7, #22]
            break;
 800980a:	e00d      	b.n	8009828 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009812:	b2db      	uxtb	r3, r3
 8009814:	4619      	mov	r1, r3
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fa66 	bl	8009ce8 <USBD_CoreFindEP>
 800981c:	4603      	mov	r3, r0
 800981e:	75bb      	strb	r3, [r7, #22]
            break;
 8009820:	e002      	b.n	8009828 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	75bb      	strb	r3, [r7, #22]
            break;
 8009826:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009828:	7dbb      	ldrb	r3, [r7, #22]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d119      	bne.n	8009862 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b03      	cmp	r3, #3
 8009838:	d113      	bne.n	8009862 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800983a:	7dba      	ldrb	r2, [r7, #22]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	32ae      	adds	r2, #174	@ 0xae
 8009840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00b      	beq.n	8009862 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800984a:	7dba      	ldrb	r2, [r7, #22]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009852:	7dba      	ldrb	r2, [r7, #22]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	32ae      	adds	r2, #174	@ 0xae
 8009858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f001 f95a 	bl	800ab1c <USBD_CtlSendStatus>
 8009868:	e032      	b.n	80098d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800986a:	7afb      	ldrb	r3, [r7, #11]
 800986c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009870:	b2db      	uxtb	r3, r3
 8009872:	4619      	mov	r1, r3
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f000 fa37 	bl	8009ce8 <USBD_CoreFindEP>
 800987a:	4603      	mov	r3, r0
 800987c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800987e:	7dbb      	ldrb	r3, [r7, #22]
 8009880:	2bff      	cmp	r3, #255	@ 0xff
 8009882:	d025      	beq.n	80098d0 <USBD_LL_DataOutStage+0x15c>
 8009884:	7dbb      	ldrb	r3, [r7, #22]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d122      	bne.n	80098d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b03      	cmp	r3, #3
 8009894:	d117      	bne.n	80098c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009896:	7dba      	ldrb	r2, [r7, #22]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	32ae      	adds	r2, #174	@ 0xae
 800989c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00f      	beq.n	80098c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80098a6:	7dba      	ldrb	r2, [r7, #22]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80098ae:	7dba      	ldrb	r2, [r7, #22]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	32ae      	adds	r2, #174	@ 0xae
 80098b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	7afa      	ldrb	r2, [r7, #11]
 80098bc:	4611      	mov	r1, r2
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	4798      	blx	r3
 80098c2:	4603      	mov	r3, r0
 80098c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
 80098ce:	e000      	b.n	80098d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b086      	sub	sp, #24
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	460b      	mov	r3, r1
 80098e4:	607a      	str	r2, [r7, #4]
 80098e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80098e8:	7afb      	ldrb	r3, [r7, #11]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d16f      	bne.n	80099ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3314      	adds	r3, #20
 80098f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d15a      	bne.n	80099b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	689a      	ldr	r2, [r3, #8]
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	429a      	cmp	r2, r3
 8009908:	d914      	bls.n	8009934 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	689a      	ldr	r2, [r3, #8]
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	1ad2      	subs	r2, r2, r3
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	461a      	mov	r2, r3
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f001 f8bc 	bl	800aa9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009926:	2300      	movs	r3, #0
 8009928:	2200      	movs	r2, #0
 800992a:	2100      	movs	r1, #0
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f001 fda5 	bl	800b47c <USBD_LL_PrepareReceive>
 8009932:	e03f      	b.n	80099b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	429a      	cmp	r2, r3
 800993e:	d11c      	bne.n	800997a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	685a      	ldr	r2, [r3, #4]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009948:	429a      	cmp	r2, r3
 800994a:	d316      	bcc.n	800997a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009956:	429a      	cmp	r2, r3
 8009958:	d20f      	bcs.n	800997a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800995a:	2200      	movs	r2, #0
 800995c:	2100      	movs	r1, #0
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f001 f89d 	bl	800aa9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800996c:	2300      	movs	r3, #0
 800996e:	2200      	movs	r2, #0
 8009970:	2100      	movs	r1, #0
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f001 fd82 	bl	800b47c <USBD_LL_PrepareReceive>
 8009978:	e01c      	b.n	80099b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b03      	cmp	r3, #3
 8009984:	d10f      	bne.n	80099a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d009      	beq.n	80099a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80099a6:	2180      	movs	r1, #128	@ 0x80
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f001 fcbd 	bl	800b328 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f001 f8c7 	bl	800ab42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d03a      	beq.n	8009a34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f7ff fe42 	bl	8009648 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80099cc:	e032      	b.n	8009a34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80099ce:	7afb      	ldrb	r3, [r7, #11]
 80099d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	4619      	mov	r1, r3
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 f985 	bl	8009ce8 <USBD_CoreFindEP>
 80099de:	4603      	mov	r3, r0
 80099e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	2bff      	cmp	r3, #255	@ 0xff
 80099e6:	d025      	beq.n	8009a34 <USBD_LL_DataInStage+0x15a>
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d122      	bne.n	8009a34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b03      	cmp	r3, #3
 80099f8:	d11c      	bne.n	8009a34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80099fa:	7dfa      	ldrb	r2, [r7, #23]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	32ae      	adds	r2, #174	@ 0xae
 8009a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d014      	beq.n	8009a34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009a0a:	7dfa      	ldrb	r2, [r7, #23]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009a12:	7dfa      	ldrb	r2, [r7, #23]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	32ae      	adds	r2, #174	@ 0xae
 8009a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	7afa      	ldrb	r2, [r7, #11]
 8009a20:	4611      	mov	r1, r2
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	4798      	blx	r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009a2a:	7dbb      	ldrb	r3, [r7, #22]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009a30:	7dbb      	ldrb	r3, [r7, #22]
 8009a32:	e000      	b.n	8009a36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d014      	beq.n	8009aa4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00e      	beq.n	8009aa4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	6852      	ldr	r2, [r2, #4]
 8009a92:	b2d2      	uxtb	r2, r2
 8009a94:	4611      	mov	r1, r2
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	4798      	blx	r3
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009aa4:	2340      	movs	r3, #64	@ 0x40
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 fbf7 	bl	800b29e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2240      	movs	r2, #64	@ 0x40
 8009abc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ac0:	2340      	movs	r3, #64	@ 0x40
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2180      	movs	r1, #128	@ 0x80
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f001 fbe9 	bl	800b29e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2240      	movs	r2, #64	@ 0x40
 8009ad6:	621a      	str	r2, [r3, #32]

  return ret;
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	460b      	mov	r3, r1
 8009aec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	78fa      	ldrb	r2, [r7, #3]
 8009af2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b083      	sub	sp, #12
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d006      	beq.n	8009b24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2204      	movs	r2, #4
 8009b28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b083      	sub	sp, #12
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	d106      	bne.n	8009b5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d110      	bne.n	8009ba0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00b      	beq.n	8009ba0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d005      	beq.n	8009ba0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	32ae      	adds	r2, #174	@ 0xae
 8009bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e01c      	b.n	8009c06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d115      	bne.n	8009c04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	32ae      	adds	r2, #174	@ 0xae
 8009be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be6:	6a1b      	ldr	r3, [r3, #32]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	32ae      	adds	r2, #174	@ 0xae
 8009bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	78fa      	ldrb	r2, [r7, #3]
 8009bfe:	4611      	mov	r1, r2
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	32ae      	adds	r2, #174	@ 0xae
 8009c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e01c      	b.n	8009c6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d115      	bne.n	8009c68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	32ae      	adds	r2, #174	@ 0xae
 8009c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	32ae      	adds	r2, #174	@ 0xae
 8009c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c60:	78fa      	ldrb	r2, [r7, #3]
 8009c62:	4611      	mov	r1, r2
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b083      	sub	sp, #12
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00e      	beq.n	8009cc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	6852      	ldr	r2, [r2, #4]
 8009cb2:	b2d2      	uxtb	r2, r2
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	4798      	blx	r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009cda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009cf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b086      	sub	sp, #24
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	885b      	ldrh	r3, [r3, #2]
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	7812      	ldrb	r2, [r2, #0]
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d91f      	bls.n	8009d68 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009d2e:	e013      	b.n	8009d58 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009d30:	f107 030a 	add.w	r3, r7, #10
 8009d34:	4619      	mov	r1, r3
 8009d36:	6978      	ldr	r0, [r7, #20]
 8009d38:	f000 f81b 	bl	8009d72 <USBD_GetNextDesc>
 8009d3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	785b      	ldrb	r3, [r3, #1]
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	d108      	bne.n	8009d58 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	789b      	ldrb	r3, [r3, #2]
 8009d4e:	78fa      	ldrb	r2, [r7, #3]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d008      	beq.n	8009d66 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009d54:	2300      	movs	r3, #0
 8009d56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	885b      	ldrh	r3, [r3, #2]
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	897b      	ldrh	r3, [r7, #10]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d8e5      	bhi.n	8009d30 <USBD_GetEpDesc+0x2e>
 8009d64:	e000      	b.n	8009d68 <USBD_GetEpDesc+0x66>
          break;
 8009d66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d68:	693b      	ldr	r3, [r7, #16]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b085      	sub	sp, #20
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	7812      	ldrb	r2, [r2, #0]
 8009d88:	4413      	add	r3, r2
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	461a      	mov	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4413      	add	r3, r2
 8009d9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b087      	sub	sp, #28
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009dc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009dcc:	021b      	lsls	r3, r3, #8
 8009dce:	b21a      	sxth	r2, r3
 8009dd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	b21b      	sxth	r3, r3
 8009dd8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009dda:	89fb      	ldrh	r3, [r7, #14]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	371c      	adds	r7, #28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dfe:	2b40      	cmp	r3, #64	@ 0x40
 8009e00:	d005      	beq.n	8009e0e <USBD_StdDevReq+0x26>
 8009e02:	2b40      	cmp	r3, #64	@ 0x40
 8009e04:	d857      	bhi.n	8009eb6 <USBD_StdDevReq+0xce>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00f      	beq.n	8009e2a <USBD_StdDevReq+0x42>
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	d153      	bne.n	8009eb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	32ae      	adds	r2, #174	@ 0xae
 8009e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	4798      	blx	r3
 8009e24:	4603      	mov	r3, r0
 8009e26:	73fb      	strb	r3, [r7, #15]
      break;
 8009e28:	e04a      	b.n	8009ec0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	2b09      	cmp	r3, #9
 8009e30:	d83b      	bhi.n	8009eaa <USBD_StdDevReq+0xc2>
 8009e32:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <USBD_StdDevReq+0x50>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e8d 	.word	0x08009e8d
 8009e3c:	08009ea1 	.word	0x08009ea1
 8009e40:	08009eab 	.word	0x08009eab
 8009e44:	08009e97 	.word	0x08009e97
 8009e48:	08009eab 	.word	0x08009eab
 8009e4c:	08009e6b 	.word	0x08009e6b
 8009e50:	08009e61 	.word	0x08009e61
 8009e54:	08009eab 	.word	0x08009eab
 8009e58:	08009e83 	.word	0x08009e83
 8009e5c:	08009e75 	.word	0x08009e75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fa3c 	bl	800a2e0 <USBD_GetDescriptor>
          break;
 8009e68:	e024      	b.n	8009eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fba1 	bl	800a5b4 <USBD_SetAddress>
          break;
 8009e72:	e01f      	b.n	8009eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fbe0 	bl	800a63c <USBD_SetConfig>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
          break;
 8009e80:	e018      	b.n	8009eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fc83 	bl	800a790 <USBD_GetConfig>
          break;
 8009e8a:	e013      	b.n	8009eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fcb4 	bl	800a7fc <USBD_GetStatus>
          break;
 8009e94:	e00e      	b.n	8009eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fce3 	bl	800a864 <USBD_SetFeature>
          break;
 8009e9e:	e009      	b.n	8009eb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fd07 	bl	800a8b6 <USBD_ClrFeature>
          break;
 8009ea8:	e004      	b.n	8009eb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fd5e 	bl	800a96e <USBD_CtlError>
          break;
 8009eb2:	bf00      	nop
      }
      break;
 8009eb4:	e004      	b.n	8009ec0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fd58 	bl	800a96e <USBD_CtlError>
      break;
 8009ebe:	bf00      	nop
  }

  return ret;
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop

08009ecc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ee2:	2b40      	cmp	r3, #64	@ 0x40
 8009ee4:	d005      	beq.n	8009ef2 <USBD_StdItfReq+0x26>
 8009ee6:	2b40      	cmp	r3, #64	@ 0x40
 8009ee8:	d852      	bhi.n	8009f90 <USBD_StdItfReq+0xc4>
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <USBD_StdItfReq+0x26>
 8009eee:	2b20      	cmp	r3, #32
 8009ef0:	d14e      	bne.n	8009f90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	3b01      	subs	r3, #1
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d840      	bhi.n	8009f82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	889b      	ldrh	r3, [r3, #4]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d836      	bhi.n	8009f78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	889b      	ldrh	r3, [r3, #4]
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7ff fedb 	bl	8009cce <USBD_CoreFindIF>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	2bff      	cmp	r3, #255	@ 0xff
 8009f20:	d01d      	beq.n	8009f5e <USBD_StdItfReq+0x92>
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d11a      	bne.n	8009f5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009f28:	7bba      	ldrb	r2, [r7, #14]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	32ae      	adds	r2, #174	@ 0xae
 8009f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00f      	beq.n	8009f58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009f38:	7bba      	ldrb	r2, [r7, #14]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f40:	7bba      	ldrb	r2, [r7, #14]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	32ae      	adds	r2, #174	@ 0xae
 8009f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	4798      	blx	r3
 8009f52:	4603      	mov	r3, r0
 8009f54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f56:	e004      	b.n	8009f62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f5c:	e001      	b.n	8009f62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	88db      	ldrh	r3, [r3, #6]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d110      	bne.n	8009f8c <USBD_StdItfReq+0xc0>
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10d      	bne.n	8009f8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fdd3 	bl	800ab1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f76:	e009      	b.n	8009f8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fcf7 	bl	800a96e <USBD_CtlError>
          break;
 8009f80:	e004      	b.n	8009f8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fcf2 	bl	800a96e <USBD_CtlError>
          break;
 8009f8a:	e000      	b.n	8009f8e <USBD_StdItfReq+0xc2>
          break;
 8009f8c:	bf00      	nop
      }
      break;
 8009f8e:	e004      	b.n	8009f9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fceb 	bl	800a96e <USBD_CtlError>
      break;
 8009f98:	bf00      	nop
  }

  return ret;
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	889b      	ldrh	r3, [r3, #4]
 8009fb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fc0:	2b40      	cmp	r3, #64	@ 0x40
 8009fc2:	d007      	beq.n	8009fd4 <USBD_StdEPReq+0x30>
 8009fc4:	2b40      	cmp	r3, #64	@ 0x40
 8009fc6:	f200 817f 	bhi.w	800a2c8 <USBD_StdEPReq+0x324>
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d02a      	beq.n	800a024 <USBD_StdEPReq+0x80>
 8009fce:	2b20      	cmp	r3, #32
 8009fd0:	f040 817a 	bne.w	800a2c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff fe85 	bl	8009ce8 <USBD_CoreFindEP>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fe2:	7b7b      	ldrb	r3, [r7, #13]
 8009fe4:	2bff      	cmp	r3, #255	@ 0xff
 8009fe6:	f000 8174 	beq.w	800a2d2 <USBD_StdEPReq+0x32e>
 8009fea:	7b7b      	ldrb	r3, [r7, #13]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f040 8170 	bne.w	800a2d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009ff2:	7b7a      	ldrb	r2, [r7, #13]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009ffa:	7b7a      	ldrb	r2, [r7, #13]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	32ae      	adds	r2, #174	@ 0xae
 800a000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	f000 8163 	beq.w	800a2d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a00c:	7b7a      	ldrb	r2, [r7, #13]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	32ae      	adds	r2, #174	@ 0xae
 800a012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	4798      	blx	r3
 800a01e:	4603      	mov	r3, r0
 800a020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a022:	e156      	b.n	800a2d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d008      	beq.n	800a03e <USBD_StdEPReq+0x9a>
 800a02c:	2b03      	cmp	r3, #3
 800a02e:	f300 8145 	bgt.w	800a2bc <USBD_StdEPReq+0x318>
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 809b 	beq.w	800a16e <USBD_StdEPReq+0x1ca>
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d03c      	beq.n	800a0b6 <USBD_StdEPReq+0x112>
 800a03c:	e13e      	b.n	800a2bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b02      	cmp	r3, #2
 800a048:	d002      	beq.n	800a050 <USBD_StdEPReq+0xac>
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d016      	beq.n	800a07c <USBD_StdEPReq+0xd8>
 800a04e:	e02c      	b.n	800a0aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a050:	7bbb      	ldrb	r3, [r7, #14]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00d      	beq.n	800a072 <USBD_StdEPReq+0xce>
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	2b80      	cmp	r3, #128	@ 0x80
 800a05a:	d00a      	beq.n	800a072 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 f961 	bl	800b328 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a066:	2180      	movs	r1, #128	@ 0x80
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 f95d 	bl	800b328 <USBD_LL_StallEP>
 800a06e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a070:	e020      	b.n	800a0b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fc7a 	bl	800a96e <USBD_CtlError>
              break;
 800a07a:	e01b      	b.n	800a0b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	885b      	ldrh	r3, [r3, #2]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10e      	bne.n	800a0a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00b      	beq.n	800a0a2 <USBD_StdEPReq+0xfe>
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
 800a08c:	2b80      	cmp	r3, #128	@ 0x80
 800a08e:	d008      	beq.n	800a0a2 <USBD_StdEPReq+0xfe>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	88db      	ldrh	r3, [r3, #6]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d104      	bne.n	800a0a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 f943 	bl	800b328 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fd3a 	bl	800ab1c <USBD_CtlSendStatus>

              break;
 800a0a8:	e004      	b.n	800a0b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fc5e 	bl	800a96e <USBD_CtlError>
              break;
 800a0b2:	bf00      	nop
          }
          break;
 800a0b4:	e107      	b.n	800a2c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d002      	beq.n	800a0c8 <USBD_StdEPReq+0x124>
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d016      	beq.n	800a0f4 <USBD_StdEPReq+0x150>
 800a0c6:	e04b      	b.n	800a160 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00d      	beq.n	800a0ea <USBD_StdEPReq+0x146>
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	2b80      	cmp	r3, #128	@ 0x80
 800a0d2:	d00a      	beq.n	800a0ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0d4:	7bbb      	ldrb	r3, [r7, #14]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 f925 	bl	800b328 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0de:	2180      	movs	r1, #128	@ 0x80
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f001 f921 	bl	800b328 <USBD_LL_StallEP>
 800a0e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0e8:	e040      	b.n	800a16c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fc3e 	bl	800a96e <USBD_CtlError>
              break;
 800a0f2:	e03b      	b.n	800a16c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	885b      	ldrh	r3, [r3, #2]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d136      	bne.n	800a16a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a102:	2b00      	cmp	r3, #0
 800a104:	d004      	beq.n	800a110 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a106:	7bbb      	ldrb	r3, [r7, #14]
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f001 f92b 	bl	800b366 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fd03 	bl	800ab1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff fde4 	bl	8009ce8 <USBD_CoreFindEP>
 800a120:	4603      	mov	r3, r0
 800a122:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a124:	7b7b      	ldrb	r3, [r7, #13]
 800a126:	2bff      	cmp	r3, #255	@ 0xff
 800a128:	d01f      	beq.n	800a16a <USBD_StdEPReq+0x1c6>
 800a12a:	7b7b      	ldrb	r3, [r7, #13]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d11c      	bne.n	800a16a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a130:	7b7a      	ldrb	r2, [r7, #13]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a138:	7b7a      	ldrb	r2, [r7, #13]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	32ae      	adds	r2, #174	@ 0xae
 800a13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d010      	beq.n	800a16a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a148:	7b7a      	ldrb	r2, [r7, #13]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	32ae      	adds	r2, #174	@ 0xae
 800a14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	4798      	blx	r3
 800a15a:	4603      	mov	r3, r0
 800a15c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a15e:	e004      	b.n	800a16a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fc03 	bl	800a96e <USBD_CtlError>
              break;
 800a168:	e000      	b.n	800a16c <USBD_StdEPReq+0x1c8>
              break;
 800a16a:	bf00      	nop
          }
          break;
 800a16c:	e0ab      	b.n	800a2c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b02      	cmp	r3, #2
 800a178:	d002      	beq.n	800a180 <USBD_StdEPReq+0x1dc>
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d032      	beq.n	800a1e4 <USBD_StdEPReq+0x240>
 800a17e:	e097      	b.n	800a2b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a180:	7bbb      	ldrb	r3, [r7, #14]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d007      	beq.n	800a196 <USBD_StdEPReq+0x1f2>
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	2b80      	cmp	r3, #128	@ 0x80
 800a18a:	d004      	beq.n	800a196 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fbed 	bl	800a96e <USBD_CtlError>
                break;
 800a194:	e091      	b.n	800a2ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	da0b      	bge.n	800a1b6 <USBD_StdEPReq+0x212>
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	3310      	adds	r3, #16
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	e00b      	b.n	800a1ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1b6:	7bbb      	ldrb	r3, [r7, #14]
 800a1b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1bc:	4613      	mov	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	2202      	movs	r2, #2
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fc43 	bl	800aa68 <USBD_CtlSendData>
              break;
 800a1e2:	e06a      	b.n	800a2ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	da11      	bge.n	800a210 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
 800a1ee:	f003 020f 	and.w	r2, r3, #15
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	440b      	add	r3, r1
 800a1fe:	3324      	adds	r3, #36	@ 0x24
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d117      	bne.n	800a236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fbb0 	bl	800a96e <USBD_CtlError>
                  break;
 800a20e:	e054      	b.n	800a2ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	f003 020f 	and.w	r2, r3, #15
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	4613      	mov	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	440b      	add	r3, r1
 800a222:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a226:	881b      	ldrh	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d104      	bne.n	800a236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fb9d 	bl	800a96e <USBD_CtlError>
                  break;
 800a234:	e041      	b.n	800a2ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	da0b      	bge.n	800a256 <USBD_StdEPReq+0x2b2>
 800a23e:	7bbb      	ldrb	r3, [r7, #14]
 800a240:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	3310      	adds	r3, #16
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	4413      	add	r3, r2
 800a252:	3304      	adds	r3, #4
 800a254:	e00b      	b.n	800a26e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a256:	7bbb      	ldrb	r3, [r7, #14]
 800a258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a25c:	4613      	mov	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4413      	add	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	4413      	add	r3, r2
 800a26c:	3304      	adds	r3, #4
 800a26e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a270:	7bbb      	ldrb	r3, [r7, #14]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d002      	beq.n	800a27c <USBD_StdEPReq+0x2d8>
 800a276:	7bbb      	ldrb	r3, [r7, #14]
 800a278:	2b80      	cmp	r3, #128	@ 0x80
 800a27a:	d103      	bne.n	800a284 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2200      	movs	r2, #0
 800a280:	601a      	str	r2, [r3, #0]
 800a282:	e00e      	b.n	800a2a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 f88b 	bl	800b3a4 <USBD_LL_IsStallEP>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d003      	beq.n	800a29c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2201      	movs	r2, #1
 800a298:	601a      	str	r2, [r3, #0]
 800a29a:	e002      	b.n	800a2a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fbdd 	bl	800aa68 <USBD_CtlSendData>
              break;
 800a2ae:	e004      	b.n	800a2ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fb5b 	bl	800a96e <USBD_CtlError>
              break;
 800a2b8:	bf00      	nop
          }
          break;
 800a2ba:	e004      	b.n	800a2c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fb55 	bl	800a96e <USBD_CtlError>
          break;
 800a2c4:	bf00      	nop
      }
      break;
 800a2c6:	e005      	b.n	800a2d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fb4f 	bl	800a96e <USBD_CtlError>
      break;
 800a2d0:	e000      	b.n	800a2d4 <USBD_StdEPReq+0x330>
      break;
 800a2d2:	bf00      	nop
  }

  return ret;
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
	...

0800a2e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	885b      	ldrh	r3, [r3, #2]
 800a2fa:	0a1b      	lsrs	r3, r3, #8
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	3b01      	subs	r3, #1
 800a300:	2b06      	cmp	r3, #6
 800a302:	f200 8128 	bhi.w	800a556 <USBD_GetDescriptor+0x276>
 800a306:	a201      	add	r2, pc, #4	@ (adr r2, 800a30c <USBD_GetDescriptor+0x2c>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a329 	.word	0x0800a329
 800a310:	0800a341 	.word	0x0800a341
 800a314:	0800a381 	.word	0x0800a381
 800a318:	0800a557 	.word	0x0800a557
 800a31c:	0800a557 	.word	0x0800a557
 800a320:	0800a4f7 	.word	0x0800a4f7
 800a324:	0800a523 	.word	0x0800a523
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	7c12      	ldrb	r2, [r2, #16]
 800a334:	f107 0108 	add.w	r1, r7, #8
 800a338:	4610      	mov	r0, r2
 800a33a:	4798      	blx	r3
 800a33c:	60f8      	str	r0, [r7, #12]
      break;
 800a33e:	e112      	b.n	800a566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7c1b      	ldrb	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10d      	bne.n	800a364 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a34e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a350:	f107 0208 	add.w	r2, r7, #8
 800a354:	4610      	mov	r0, r2
 800a356:	4798      	blx	r3
 800a358:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3301      	adds	r3, #1
 800a35e:	2202      	movs	r2, #2
 800a360:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a362:	e100      	b.n	800a566 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36c:	f107 0208 	add.w	r2, r7, #8
 800a370:	4610      	mov	r0, r2
 800a372:	4798      	blx	r3
 800a374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3301      	adds	r3, #1
 800a37a:	2202      	movs	r2, #2
 800a37c:	701a      	strb	r2, [r3, #0]
      break;
 800a37e:	e0f2      	b.n	800a566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	885b      	ldrh	r3, [r3, #2]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b05      	cmp	r3, #5
 800a388:	f200 80ac 	bhi.w	800a4e4 <USBD_GetDescriptor+0x204>
 800a38c:	a201      	add	r2, pc, #4	@ (adr r2, 800a394 <USBD_GetDescriptor+0xb4>)
 800a38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a392:	bf00      	nop
 800a394:	0800a3ad 	.word	0x0800a3ad
 800a398:	0800a3e1 	.word	0x0800a3e1
 800a39c:	0800a415 	.word	0x0800a415
 800a3a0:	0800a449 	.word	0x0800a449
 800a3a4:	0800a47d 	.word	0x0800a47d
 800a3a8:	0800a4b1 	.word	0x0800a4b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00b      	beq.n	800a3d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	7c12      	ldrb	r2, [r2, #16]
 800a3c4:	f107 0108 	add.w	r1, r7, #8
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	4798      	blx	r3
 800a3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ce:	e091      	b.n	800a4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 facb 	bl	800a96e <USBD_CtlError>
            err++;
 800a3d8:	7afb      	ldrb	r3, [r7, #11]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a3de:	e089      	b.n	800a4f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00b      	beq.n	800a404 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	7c12      	ldrb	r2, [r2, #16]
 800a3f8:	f107 0108 	add.w	r1, r7, #8
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	4798      	blx	r3
 800a400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a402:	e077      	b.n	800a4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fab1 	bl	800a96e <USBD_CtlError>
            err++;
 800a40c:	7afb      	ldrb	r3, [r7, #11]
 800a40e:	3301      	adds	r3, #1
 800a410:	72fb      	strb	r3, [r7, #11]
          break;
 800a412:	e06f      	b.n	800a4f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00b      	beq.n	800a438 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	7c12      	ldrb	r2, [r2, #16]
 800a42c:	f107 0108 	add.w	r1, r7, #8
 800a430:	4610      	mov	r0, r2
 800a432:	4798      	blx	r3
 800a434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a436:	e05d      	b.n	800a4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fa97 	bl	800a96e <USBD_CtlError>
            err++;
 800a440:	7afb      	ldrb	r3, [r7, #11]
 800a442:	3301      	adds	r3, #1
 800a444:	72fb      	strb	r3, [r7, #11]
          break;
 800a446:	e055      	b.n	800a4f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00b      	beq.n	800a46c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	7c12      	ldrb	r2, [r2, #16]
 800a460:	f107 0108 	add.w	r1, r7, #8
 800a464:	4610      	mov	r0, r2
 800a466:	4798      	blx	r3
 800a468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a46a:	e043      	b.n	800a4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fa7d 	bl	800a96e <USBD_CtlError>
            err++;
 800a474:	7afb      	ldrb	r3, [r7, #11]
 800a476:	3301      	adds	r3, #1
 800a478:	72fb      	strb	r3, [r7, #11]
          break;
 800a47a:	e03b      	b.n	800a4f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00b      	beq.n	800a4a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	7c12      	ldrb	r2, [r2, #16]
 800a494:	f107 0108 	add.w	r1, r7, #8
 800a498:	4610      	mov	r0, r2
 800a49a:	4798      	blx	r3
 800a49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a49e:	e029      	b.n	800a4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fa63 	bl	800a96e <USBD_CtlError>
            err++;
 800a4a8:	7afb      	ldrb	r3, [r7, #11]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ae:	e021      	b.n	800a4f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	7c12      	ldrb	r2, [r2, #16]
 800a4c8:	f107 0108 	add.w	r1, r7, #8
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	4798      	blx	r3
 800a4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4d2:	e00f      	b.n	800a4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fa49 	bl	800a96e <USBD_CtlError>
            err++;
 800a4dc:	7afb      	ldrb	r3, [r7, #11]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a4e2:	e007      	b.n	800a4f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fa41 	bl	800a96e <USBD_CtlError>
          err++;
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a4f2:	bf00      	nop
      }
      break;
 800a4f4:	e037      	b.n	800a566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	7c1b      	ldrb	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d109      	bne.n	800a512 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a506:	f107 0208 	add.w	r2, r7, #8
 800a50a:	4610      	mov	r0, r2
 800a50c:	4798      	blx	r3
 800a50e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a510:	e029      	b.n	800a566 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fa2a 	bl	800a96e <USBD_CtlError>
        err++;
 800a51a:	7afb      	ldrb	r3, [r7, #11]
 800a51c:	3301      	adds	r3, #1
 800a51e:	72fb      	strb	r3, [r7, #11]
      break;
 800a520:	e021      	b.n	800a566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	7c1b      	ldrb	r3, [r3, #16]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10d      	bne.n	800a546 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a532:	f107 0208 	add.w	r2, r7, #8
 800a536:	4610      	mov	r0, r2
 800a538:	4798      	blx	r3
 800a53a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3301      	adds	r3, #1
 800a540:	2207      	movs	r2, #7
 800a542:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a544:	e00f      	b.n	800a566 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fa10 	bl	800a96e <USBD_CtlError>
        err++;
 800a54e:	7afb      	ldrb	r3, [r7, #11]
 800a550:	3301      	adds	r3, #1
 800a552:	72fb      	strb	r3, [r7, #11]
      break;
 800a554:	e007      	b.n	800a566 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fa08 	bl	800a96e <USBD_CtlError>
      err++;
 800a55e:	7afb      	ldrb	r3, [r7, #11]
 800a560:	3301      	adds	r3, #1
 800a562:	72fb      	strb	r3, [r7, #11]
      break;
 800a564:	bf00      	nop
  }

  if (err != 0U)
 800a566:	7afb      	ldrb	r3, [r7, #11]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d11e      	bne.n	800a5aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	88db      	ldrh	r3, [r3, #6]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d016      	beq.n	800a5a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a574:	893b      	ldrh	r3, [r7, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00e      	beq.n	800a598 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	88da      	ldrh	r2, [r3, #6]
 800a57e:	893b      	ldrh	r3, [r7, #8]
 800a580:	4293      	cmp	r3, r2
 800a582:	bf28      	it	cs
 800a584:	4613      	movcs	r3, r2
 800a586:	b29b      	uxth	r3, r3
 800a588:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a58a:	893b      	ldrh	r3, [r7, #8]
 800a58c:	461a      	mov	r2, r3
 800a58e:	68f9      	ldr	r1, [r7, #12]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fa69 	bl	800aa68 <USBD_CtlSendData>
 800a596:	e009      	b.n	800a5ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f9e7 	bl	800a96e <USBD_CtlError>
 800a5a0:	e004      	b.n	800a5ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 faba 	bl	800ab1c <USBD_CtlSendStatus>
 800a5a8:	e000      	b.n	800a5ac <USBD_GetDescriptor+0x2cc>
    return;
 800a5aa:	bf00      	nop
  }
}
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop

0800a5b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	889b      	ldrh	r3, [r3, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d131      	bne.n	800a62a <USBD_SetAddress+0x76>
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	88db      	ldrh	r3, [r3, #6]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d12d      	bne.n	800a62a <USBD_SetAddress+0x76>
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	885b      	ldrh	r3, [r3, #2]
 800a5d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5d4:	d829      	bhi.n	800a62a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	885b      	ldrh	r3, [r3, #2]
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	d104      	bne.n	800a5f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f9bc 	bl	800a96e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f6:	e01d      	b.n	800a634 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7bfa      	ldrb	r2, [r7, #15]
 800a5fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fef9 	bl	800b3fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fa86 	bl	800ab1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d004      	beq.n	800a620 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2202      	movs	r2, #2
 800a61a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a61e:	e009      	b.n	800a634 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a628:	e004      	b.n	800a634 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a62a:	6839      	ldr	r1, [r7, #0]
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f99e 	bl	800a96e <USBD_CtlError>
  }
}
 800a632:	bf00      	nop
 800a634:	bf00      	nop
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	885b      	ldrh	r3, [r3, #2]
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	4b4e      	ldr	r3, [pc, #312]	@ (800a78c <USBD_SetConfig+0x150>)
 800a652:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a654:	4b4d      	ldr	r3, [pc, #308]	@ (800a78c <USBD_SetConfig+0x150>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d905      	bls.n	800a668 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f985 	bl	800a96e <USBD_CtlError>
    return USBD_FAIL;
 800a664:	2303      	movs	r3, #3
 800a666:	e08c      	b.n	800a782 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2b02      	cmp	r3, #2
 800a672:	d002      	beq.n	800a67a <USBD_SetConfig+0x3e>
 800a674:	2b03      	cmp	r3, #3
 800a676:	d029      	beq.n	800a6cc <USBD_SetConfig+0x90>
 800a678:	e075      	b.n	800a766 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a67a:	4b44      	ldr	r3, [pc, #272]	@ (800a78c <USBD_SetConfig+0x150>)
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d020      	beq.n	800a6c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a682:	4b42      	ldr	r3, [pc, #264]	@ (800a78c <USBD_SetConfig+0x150>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	461a      	mov	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a68c:	4b3f      	ldr	r3, [pc, #252]	@ (800a78c <USBD_SetConfig+0x150>)
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7fe ffe3 	bl	800965e <USBD_SetClassConfig>
 800a698:	4603      	mov	r3, r0
 800a69a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d008      	beq.n	800a6b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f962 	bl	800a96e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a6b2:	e065      	b.n	800a780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fa31 	bl	800ab1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2203      	movs	r2, #3
 800a6be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a6c2:	e05d      	b.n	800a780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fa29 	bl	800ab1c <USBD_CtlSendStatus>
      break;
 800a6ca:	e059      	b.n	800a780 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a6cc:	4b2f      	ldr	r3, [pc, #188]	@ (800a78c <USBD_SetConfig+0x150>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d112      	bne.n	800a6fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a6dc:	4b2b      	ldr	r3, [pc, #172]	@ (800a78c <USBD_SetConfig+0x150>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a6e6:	4b29      	ldr	r3, [pc, #164]	@ (800a78c <USBD_SetConfig+0x150>)
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7fe ffd2 	bl	8009696 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fa12 	bl	800ab1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a6f8:	e042      	b.n	800a780 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a6fa:	4b24      	ldr	r3, [pc, #144]	@ (800a78c <USBD_SetConfig+0x150>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	429a      	cmp	r2, r3
 800a706:	d02a      	beq.n	800a75e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7fe ffc0 	bl	8009696 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a716:	4b1d      	ldr	r3, [pc, #116]	@ (800a78c <USBD_SetConfig+0x150>)
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	461a      	mov	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a720:	4b1a      	ldr	r3, [pc, #104]	@ (800a78c <USBD_SetConfig+0x150>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7fe ff99 	bl	800965e <USBD_SetClassConfig>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00f      	beq.n	800a756 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f918 	bl	800a96e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	b2db      	uxtb	r3, r3
 800a744:	4619      	mov	r1, r3
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7fe ffa5 	bl	8009696 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2202      	movs	r2, #2
 800a750:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a754:	e014      	b.n	800a780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f9e0 	bl	800ab1c <USBD_CtlSendStatus>
      break;
 800a75c:	e010      	b.n	800a780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f9dc 	bl	800ab1c <USBD_CtlSendStatus>
      break;
 800a764:	e00c      	b.n	800a780 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a766:	6839      	ldr	r1, [r7, #0]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f900 	bl	800a96e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a76e:	4b07      	ldr	r3, [pc, #28]	@ (800a78c <USBD_SetConfig+0x150>)
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7fe ff8e 	bl	8009696 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a77a:	2303      	movs	r3, #3
 800a77c:	73fb      	strb	r3, [r7, #15]
      break;
 800a77e:	bf00      	nop
  }

  return ret;
 800a780:	7bfb      	ldrb	r3, [r7, #15]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	20002acc 	.word	0x20002acc

0800a790 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	88db      	ldrh	r3, [r3, #6]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d004      	beq.n	800a7ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f8e2 	bl	800a96e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a7aa:	e023      	b.n	800a7f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	dc02      	bgt.n	800a7be <USBD_GetConfig+0x2e>
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dc03      	bgt.n	800a7c4 <USBD_GetConfig+0x34>
 800a7bc:	e015      	b.n	800a7ea <USBD_GetConfig+0x5a>
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	d00b      	beq.n	800a7da <USBD_GetConfig+0x4a>
 800a7c2:	e012      	b.n	800a7ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f948 	bl	800aa68 <USBD_CtlSendData>
        break;
 800a7d8:	e00c      	b.n	800a7f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	3304      	adds	r3, #4
 800a7de:	2201      	movs	r2, #1
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 f940 	bl	800aa68 <USBD_CtlSendData>
        break;
 800a7e8:	e004      	b.n	800a7f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f8be 	bl	800a96e <USBD_CtlError>
        break;
 800a7f2:	bf00      	nop
}
 800a7f4:	bf00      	nop
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	3b01      	subs	r3, #1
 800a810:	2b02      	cmp	r3, #2
 800a812:	d81e      	bhi.n	800a852 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	88db      	ldrh	r3, [r3, #6]
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d004      	beq.n	800a826 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f8a5 	bl	800a96e <USBD_CtlError>
        break;
 800a824:	e01a      	b.n	800a85c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2201      	movs	r2, #1
 800a82a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a832:	2b00      	cmp	r3, #0
 800a834:	d005      	beq.n	800a842 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f043 0202 	orr.w	r2, r3, #2
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	330c      	adds	r3, #12
 800a846:	2202      	movs	r2, #2
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f90c 	bl	800aa68 <USBD_CtlSendData>
      break;
 800a850:	e004      	b.n	800a85c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f88a 	bl	800a96e <USBD_CtlError>
      break;
 800a85a:	bf00      	nop
  }
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	885b      	ldrh	r3, [r3, #2]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d107      	bne.n	800a886 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f94c 	bl	800ab1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a884:	e013      	b.n	800a8ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	885b      	ldrh	r3, [r3, #2]
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d10b      	bne.n	800a8a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	889b      	ldrh	r3, [r3, #4]
 800a892:	0a1b      	lsrs	r3, r3, #8
 800a894:	b29b      	uxth	r3, r3
 800a896:	b2da      	uxtb	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f93c 	bl	800ab1c <USBD_CtlSendStatus>
}
 800a8a4:	e003      	b.n	800a8ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f860 	bl	800a96e <USBD_CtlError>
}
 800a8ae:	bf00      	nop
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d80b      	bhi.n	800a8e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	885b      	ldrh	r3, [r3, #2]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d10c      	bne.n	800a8f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f91c 	bl	800ab1c <USBD_CtlSendStatus>
      }
      break;
 800a8e4:	e004      	b.n	800a8f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f840 	bl	800a96e <USBD_CtlError>
      break;
 800a8ee:	e000      	b.n	800a8f2 <USBD_ClrFeature+0x3c>
      break;
 800a8f0:	bf00      	nop
  }
}
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	781a      	ldrb	r2, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	3301      	adds	r3, #1
 800a914:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	781a      	ldrb	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3301      	adds	r3, #1
 800a922:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f7ff fa40 	bl	8009daa <SWAPBYTE>
 800a92a:	4603      	mov	r3, r0
 800a92c:	461a      	mov	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	3301      	adds	r3, #1
 800a936:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	3301      	adds	r3, #1
 800a93c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f7ff fa33 	bl	8009daa <SWAPBYTE>
 800a944:	4603      	mov	r3, r0
 800a946:	461a      	mov	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3301      	adds	r3, #1
 800a950:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3301      	adds	r3, #1
 800a956:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7ff fa26 	bl	8009daa <SWAPBYTE>
 800a95e:	4603      	mov	r3, r0
 800a960:	461a      	mov	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	80da      	strh	r2, [r3, #6]
}
 800a966:	bf00      	nop
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a978:	2180      	movs	r1, #128	@ 0x80
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fcd4 	bl	800b328 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a980:	2100      	movs	r1, #0
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fcd0 	bl	800b328 <USBD_LL_StallEP>
}
 800a988:	bf00      	nop
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a99c:	2300      	movs	r3, #0
 800a99e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d042      	beq.n	800aa2c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a9aa:	6938      	ldr	r0, [r7, #16]
 800a9ac:	f000 f842 	bl	800aa34 <USBD_GetLen>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9ba:	d808      	bhi.n	800a9ce <USBD_GetString+0x3e>
 800a9bc:	6938      	ldr	r0, [r7, #16]
 800a9be:	f000 f839 	bl	800aa34 <USBD_GetLen>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	e001      	b.n	800a9d2 <USBD_GetString+0x42>
 800a9ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	4413      	add	r3, r2
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	7812      	ldrb	r2, [r2, #0]
 800a9e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9e2:	7dfb      	ldrb	r3, [r7, #23]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a9e8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	2203      	movs	r2, #3
 800a9f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9f2:	7dfb      	ldrb	r3, [r7, #23]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a9f8:	e013      	b.n	800aa22 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	4413      	add	r3, r2
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	7812      	ldrb	r2, [r2, #0]
 800aa04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	613b      	str	r3, [r7, #16]
    idx++;
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	68ba      	ldr	r2, [r7, #8]
 800aa16:	4413      	add	r3, r2
 800aa18:	2200      	movs	r2, #0
 800aa1a:	701a      	strb	r2, [r3, #0]
    idx++;
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1e7      	bne.n	800a9fa <USBD_GetString+0x6a>
 800aa2a:	e000      	b.n	800aa2e <USBD_GetString+0x9e>
    return;
 800aa2c:	bf00      	nop
  }
}
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aa44:	e005      	b.n	800aa52 <USBD_GetLen+0x1e>
  {
    len++;
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1f5      	bne.n	800aa46 <USBD_GetLen+0x12>
  }

  return len;
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 fcd3 	bl	800b43a <USBD_LL_Transmit>

  return USBD_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	2100      	movs	r1, #0
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 fcc2 	bl	800b43a <USBD_LL_Transmit>

  return USBD_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2203      	movs	r2, #3
 800aad0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	2100      	movs	r1, #0
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f000 fcc6 	bl	800b47c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	60f8      	str	r0, [r7, #12]
 800ab02:	60b9      	str	r1, [r7, #8]
 800ab04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 fcb5 	bl	800b47c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2204      	movs	r2, #4
 800ab28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	2200      	movs	r2, #0
 800ab30:	2100      	movs	r1, #0
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fc81 	bl	800b43a <USBD_LL_Transmit>

  return USBD_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2205      	movs	r2, #5
 800ab4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab52:	2300      	movs	r3, #0
 800ab54:	2200      	movs	r2, #0
 800ab56:	2100      	movs	r1, #0
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fc8f 	bl	800b47c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	4912      	ldr	r1, [pc, #72]	@ (800abb8 <MX_USB_DEVICE_Init+0x50>)
 800ab70:	4812      	ldr	r0, [pc, #72]	@ (800abbc <MX_USB_DEVICE_Init+0x54>)
 800ab72:	f7fe fcf7 	bl	8009564 <USBD_Init>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab7c:	f7f7 f8a8 	bl	8001cd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ab80:	490f      	ldr	r1, [pc, #60]	@ (800abc0 <MX_USB_DEVICE_Init+0x58>)
 800ab82:	480e      	ldr	r0, [pc, #56]	@ (800abbc <MX_USB_DEVICE_Init+0x54>)
 800ab84:	f7fe fd1e 	bl	80095c4 <USBD_RegisterClass>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab8e:	f7f7 f89f 	bl	8001cd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ab92:	490c      	ldr	r1, [pc, #48]	@ (800abc4 <MX_USB_DEVICE_Init+0x5c>)
 800ab94:	4809      	ldr	r0, [pc, #36]	@ (800abbc <MX_USB_DEVICE_Init+0x54>)
 800ab96:	f7fe fc55 	bl	8009444 <USBD_CDC_RegisterInterface>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aba0:	f7f7 f896 	bl	8001cd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aba4:	4805      	ldr	r0, [pc, #20]	@ (800abbc <MX_USB_DEVICE_Init+0x54>)
 800aba6:	f7fe fd43 	bl	8009630 <USBD_Start>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800abb0:	f7f7 f88e 	bl	8001cd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800abb4:	bf00      	nop
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	200000b0 	.word	0x200000b0
 800abbc:	20002ad0 	.word	0x20002ad0
 800abc0:	2000001c 	.word	0x2000001c
 800abc4:	2000009c 	.word	0x2000009c

0800abc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800abcc:	2200      	movs	r2, #0
 800abce:	4905      	ldr	r1, [pc, #20]	@ (800abe4 <CDC_Init_FS+0x1c>)
 800abd0:	4805      	ldr	r0, [pc, #20]	@ (800abe8 <CDC_Init_FS+0x20>)
 800abd2:	f7fe fc51 	bl	8009478 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800abd6:	4905      	ldr	r1, [pc, #20]	@ (800abec <CDC_Init_FS+0x24>)
 800abd8:	4803      	ldr	r0, [pc, #12]	@ (800abe8 <CDC_Init_FS+0x20>)
 800abda:	f7fe fc6f 	bl	80094bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800abde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	200035ac 	.word	0x200035ac
 800abe8:	20002ad0 	.word	0x20002ad0
 800abec:	20002dac 	.word	0x20002dac

0800abf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800abf0:	b480      	push	{r7}
 800abf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800abf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	4603      	mov	r3, r0
 800ac08:	6039      	str	r1, [r7, #0]
 800ac0a:	71fb      	strb	r3, [r7, #7]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	2b23      	cmp	r3, #35	@ 0x23
 800ac14:	d84a      	bhi.n	800acac <CDC_Control_FS+0xac>
 800ac16:	a201      	add	r2, pc, #4	@ (adr r2, 800ac1c <CDC_Control_FS+0x1c>)
 800ac18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1c:	0800acad 	.word	0x0800acad
 800ac20:	0800acad 	.word	0x0800acad
 800ac24:	0800acad 	.word	0x0800acad
 800ac28:	0800acad 	.word	0x0800acad
 800ac2c:	0800acad 	.word	0x0800acad
 800ac30:	0800acad 	.word	0x0800acad
 800ac34:	0800acad 	.word	0x0800acad
 800ac38:	0800acad 	.word	0x0800acad
 800ac3c:	0800acad 	.word	0x0800acad
 800ac40:	0800acad 	.word	0x0800acad
 800ac44:	0800acad 	.word	0x0800acad
 800ac48:	0800acad 	.word	0x0800acad
 800ac4c:	0800acad 	.word	0x0800acad
 800ac50:	0800acad 	.word	0x0800acad
 800ac54:	0800acad 	.word	0x0800acad
 800ac58:	0800acad 	.word	0x0800acad
 800ac5c:	0800acad 	.word	0x0800acad
 800ac60:	0800acad 	.word	0x0800acad
 800ac64:	0800acad 	.word	0x0800acad
 800ac68:	0800acad 	.word	0x0800acad
 800ac6c:	0800acad 	.word	0x0800acad
 800ac70:	0800acad 	.word	0x0800acad
 800ac74:	0800acad 	.word	0x0800acad
 800ac78:	0800acad 	.word	0x0800acad
 800ac7c:	0800acad 	.word	0x0800acad
 800ac80:	0800acad 	.word	0x0800acad
 800ac84:	0800acad 	.word	0x0800acad
 800ac88:	0800acad 	.word	0x0800acad
 800ac8c:	0800acad 	.word	0x0800acad
 800ac90:	0800acad 	.word	0x0800acad
 800ac94:	0800acad 	.word	0x0800acad
 800ac98:	0800acad 	.word	0x0800acad
 800ac9c:	0800acad 	.word	0x0800acad
 800aca0:	0800acad 	.word	0x0800acad
 800aca4:	0800acad 	.word	0x0800acad
 800aca8:	0800acad 	.word	0x0800acad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800acac:	bf00      	nop
  }

  return (USBD_OK);
 800acae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800acc6:	6879      	ldr	r1, [r7, #4]
 800acc8:	4805      	ldr	r0, [pc, #20]	@ (800ace0 <CDC_Receive_FS+0x24>)
 800acca:	f7fe fbf7 	bl	80094bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800acce:	4804      	ldr	r0, [pc, #16]	@ (800ace0 <CDC_Receive_FS+0x24>)
 800acd0:	f7fe fc12 	bl	80094f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800acd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20002ad0 	.word	0x20002ad0

0800ace4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	4613      	mov	r3, r2
 800acf0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800acf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	371c      	adds	r7, #28
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	6039      	str	r1, [r7, #0]
 800ad12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2212      	movs	r2, #18
 800ad18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ad1a:	4b03      	ldr	r3, [pc, #12]	@ (800ad28 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	200000cc 	.word	0x200000cc

0800ad2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	4603      	mov	r3, r0
 800ad34:	6039      	str	r1, [r7, #0]
 800ad36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	2204      	movs	r2, #4
 800ad3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad3e:	4b03      	ldr	r3, [pc, #12]	@ (800ad4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	200000e0 	.word	0x200000e0

0800ad50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	6039      	str	r1, [r7, #0]
 800ad5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad5c:	79fb      	ldrb	r3, [r7, #7]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d105      	bne.n	800ad6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	4907      	ldr	r1, [pc, #28]	@ (800ad84 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad66:	4808      	ldr	r0, [pc, #32]	@ (800ad88 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad68:	f7ff fe12 	bl	800a990 <USBD_GetString>
 800ad6c:	e004      	b.n	800ad78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	4904      	ldr	r1, [pc, #16]	@ (800ad84 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad72:	4805      	ldr	r0, [pc, #20]	@ (800ad88 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad74:	f7ff fe0c 	bl	800a990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad78:	4b02      	ldr	r3, [pc, #8]	@ (800ad84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20003dac 	.word	0x20003dac
 800ad88:	0800b5dc 	.word	0x0800b5dc

0800ad8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	4603      	mov	r3, r0
 800ad94:	6039      	str	r1, [r7, #0]
 800ad96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	4904      	ldr	r1, [pc, #16]	@ (800adac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ad9c:	4804      	ldr	r0, [pc, #16]	@ (800adb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ad9e:	f7ff fdf7 	bl	800a990 <USBD_GetString>
  return USBD_StrDesc;
 800ada2:	4b02      	ldr	r3, [pc, #8]	@ (800adac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	20003dac 	.word	0x20003dac
 800adb0:	0800b5f4 	.word	0x0800b5f4

0800adb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4603      	mov	r3, r0
 800adbc:	6039      	str	r1, [r7, #0]
 800adbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	221a      	movs	r2, #26
 800adc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800adc6:	f000 f843 	bl	800ae50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800adca:	4b02      	ldr	r3, [pc, #8]	@ (800add4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	200000e4 	.word	0x200000e4

0800add8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	4603      	mov	r3, r0
 800ade0:	6039      	str	r1, [r7, #0]
 800ade2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d105      	bne.n	800adf6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	4907      	ldr	r1, [pc, #28]	@ (800ae0c <USBD_FS_ConfigStrDescriptor+0x34>)
 800adee:	4808      	ldr	r0, [pc, #32]	@ (800ae10 <USBD_FS_ConfigStrDescriptor+0x38>)
 800adf0:	f7ff fdce 	bl	800a990 <USBD_GetString>
 800adf4:	e004      	b.n	800ae00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	4904      	ldr	r1, [pc, #16]	@ (800ae0c <USBD_FS_ConfigStrDescriptor+0x34>)
 800adfa:	4805      	ldr	r0, [pc, #20]	@ (800ae10 <USBD_FS_ConfigStrDescriptor+0x38>)
 800adfc:	f7ff fdc8 	bl	800a990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae00:	4b02      	ldr	r3, [pc, #8]	@ (800ae0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20003dac 	.word	0x20003dac
 800ae10:	0800b608 	.word	0x0800b608

0800ae14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	6039      	str	r1, [r7, #0]
 800ae1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae20:	79fb      	ldrb	r3, [r7, #7]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d105      	bne.n	800ae32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	4907      	ldr	r1, [pc, #28]	@ (800ae48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae2a:	4808      	ldr	r0, [pc, #32]	@ (800ae4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae2c:	f7ff fdb0 	bl	800a990 <USBD_GetString>
 800ae30:	e004      	b.n	800ae3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	4904      	ldr	r1, [pc, #16]	@ (800ae48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae36:	4805      	ldr	r0, [pc, #20]	@ (800ae4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae38:	f7ff fdaa 	bl	800a990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae3c:	4b02      	ldr	r3, [pc, #8]	@ (800ae48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	20003dac 	.word	0x20003dac
 800ae4c:	0800b614 	.word	0x0800b614

0800ae50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae56:	4b0f      	ldr	r3, [pc, #60]	@ (800ae94 <Get_SerialNum+0x44>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae5c:	4b0e      	ldr	r3, [pc, #56]	@ (800ae98 <Get_SerialNum+0x48>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae62:	4b0e      	ldr	r3, [pc, #56]	@ (800ae9c <Get_SerialNum+0x4c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d009      	beq.n	800ae8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae76:	2208      	movs	r2, #8
 800ae78:	4909      	ldr	r1, [pc, #36]	@ (800aea0 <Get_SerialNum+0x50>)
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f000 f814 	bl	800aea8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae80:	2204      	movs	r2, #4
 800ae82:	4908      	ldr	r1, [pc, #32]	@ (800aea4 <Get_SerialNum+0x54>)
 800ae84:	68b8      	ldr	r0, [r7, #8]
 800ae86:	f000 f80f 	bl	800aea8 <IntToUnicode>
  }
}
 800ae8a:	bf00      	nop
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	1fff7a10 	.word	0x1fff7a10
 800ae98:	1fff7a14 	.word	0x1fff7a14
 800ae9c:	1fff7a18 	.word	0x1fff7a18
 800aea0:	200000e6 	.word	0x200000e6
 800aea4:	200000f6 	.word	0x200000f6

0800aea8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aeba:	2300      	movs	r3, #0
 800aebc:	75fb      	strb	r3, [r7, #23]
 800aebe:	e027      	b.n	800af10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	0f1b      	lsrs	r3, r3, #28
 800aec4:	2b09      	cmp	r3, #9
 800aec6:	d80b      	bhi.n	800aee0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	0f1b      	lsrs	r3, r3, #28
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	005b      	lsls	r3, r3, #1
 800aed2:	4619      	mov	r1, r3
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	440b      	add	r3, r1
 800aed8:	3230      	adds	r2, #48	@ 0x30
 800aeda:	b2d2      	uxtb	r2, r2
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	e00a      	b.n	800aef6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	0f1b      	lsrs	r3, r3, #28
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	4619      	mov	r1, r3
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	440b      	add	r3, r1
 800aef0:	3237      	adds	r2, #55	@ 0x37
 800aef2:	b2d2      	uxtb	r2, r2
 800aef4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	011b      	lsls	r3, r3, #4
 800aefa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	3301      	adds	r3, #1
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	4413      	add	r3, r2
 800af06:	2200      	movs	r2, #0
 800af08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800af0a:	7dfb      	ldrb	r3, [r7, #23]
 800af0c:	3301      	adds	r3, #1
 800af0e:	75fb      	strb	r3, [r7, #23]
 800af10:	7dfa      	ldrb	r2, [r7, #23]
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	429a      	cmp	r2, r3
 800af16:	d3d3      	bcc.n	800aec0 <IntToUnicode+0x18>
  }
}
 800af18:	bf00      	nop
 800af1a:	bf00      	nop
 800af1c:	371c      	adds	r7, #28
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
	...

0800af28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08a      	sub	sp, #40	@ 0x28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af30:	f107 0314 	add.w	r3, r7, #20
 800af34:	2200      	movs	r2, #0
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	605a      	str	r2, [r3, #4]
 800af3a:	609a      	str	r2, [r3, #8]
 800af3c:	60da      	str	r2, [r3, #12]
 800af3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af48:	d147      	bne.n	800afda <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af4a:	2300      	movs	r3, #0
 800af4c:	613b      	str	r3, [r7, #16]
 800af4e:	4b25      	ldr	r3, [pc, #148]	@ (800afe4 <HAL_PCD_MspInit+0xbc>)
 800af50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af52:	4a24      	ldr	r2, [pc, #144]	@ (800afe4 <HAL_PCD_MspInit+0xbc>)
 800af54:	f043 0301 	orr.w	r3, r3, #1
 800af58:	6313      	str	r3, [r2, #48]	@ 0x30
 800af5a:	4b22      	ldr	r3, [pc, #136]	@ (800afe4 <HAL_PCD_MspInit+0xbc>)
 800af5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	613b      	str	r3, [r7, #16]
 800af64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800af66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af6c:	2300      	movs	r3, #0
 800af6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af70:	2300      	movs	r3, #0
 800af72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800af74:	f107 0314 	add.w	r3, r7, #20
 800af78:	4619      	mov	r1, r3
 800af7a:	481b      	ldr	r0, [pc, #108]	@ (800afe8 <HAL_PCD_MspInit+0xc0>)
 800af7c:	f7f7 fb62 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800af80:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800af84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af86:	2302      	movs	r3, #2
 800af88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af8e:	2300      	movs	r3, #0
 800af90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af92:	230a      	movs	r3, #10
 800af94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af96:	f107 0314 	add.w	r3, r7, #20
 800af9a:	4619      	mov	r1, r3
 800af9c:	4812      	ldr	r0, [pc, #72]	@ (800afe8 <HAL_PCD_MspInit+0xc0>)
 800af9e:	f7f7 fb51 	bl	8002644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800afa2:	4b10      	ldr	r3, [pc, #64]	@ (800afe4 <HAL_PCD_MspInit+0xbc>)
 800afa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afa6:	4a0f      	ldr	r2, [pc, #60]	@ (800afe4 <HAL_PCD_MspInit+0xbc>)
 800afa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afac:	6353      	str	r3, [r2, #52]	@ 0x34
 800afae:	2300      	movs	r3, #0
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	4b0c      	ldr	r3, [pc, #48]	@ (800afe4 <HAL_PCD_MspInit+0xbc>)
 800afb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afb6:	4a0b      	ldr	r2, [pc, #44]	@ (800afe4 <HAL_PCD_MspInit+0xbc>)
 800afb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800afbc:	6453      	str	r3, [r2, #68]	@ 0x44
 800afbe:	4b09      	ldr	r3, [pc, #36]	@ (800afe4 <HAL_PCD_MspInit+0xbc>)
 800afc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800afca:	2200      	movs	r2, #0
 800afcc:	2100      	movs	r1, #0
 800afce:	2043      	movs	r0, #67	@ 0x43
 800afd0:	f7f7 fa6f 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800afd4:	2043      	movs	r0, #67	@ 0x43
 800afd6:	f7f7 fa88 	bl	80024ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800afda:	bf00      	nop
 800afdc:	3728      	adds	r7, #40	@ 0x28
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	40023800 	.word	0x40023800
 800afe8:	40020000 	.word	0x40020000

0800afec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b000:	4619      	mov	r1, r3
 800b002:	4610      	mov	r0, r2
 800b004:	f7fe fb61 	bl	80096ca <USBD_LL_SetupStage>
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b022:	78fa      	ldrb	r2, [r7, #3]
 800b024:	6879      	ldr	r1, [r7, #4]
 800b026:	4613      	mov	r3, r2
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	440b      	add	r3, r1
 800b030:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	78fb      	ldrb	r3, [r7, #3]
 800b038:	4619      	mov	r1, r3
 800b03a:	f7fe fb9b 	bl	8009774 <USBD_LL_DataOutStage>
}
 800b03e:	bf00      	nop
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	460b      	mov	r3, r1
 800b050:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b058:	78fa      	ldrb	r2, [r7, #3]
 800b05a:	6879      	ldr	r1, [r7, #4]
 800b05c:	4613      	mov	r3, r2
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	440b      	add	r3, r1
 800b066:	3320      	adds	r3, #32
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	78fb      	ldrb	r3, [r7, #3]
 800b06c:	4619      	mov	r1, r3
 800b06e:	f7fe fc34 	bl	80098da <USBD_LL_DataInStage>
}
 800b072:	bf00      	nop
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b082      	sub	sp, #8
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fd6e 	bl	8009b6a <USBD_LL_SOF>
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	79db      	ldrb	r3, [r3, #7]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d102      	bne.n	800b0b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]
 800b0ae:	e008      	b.n	800b0c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	79db      	ldrb	r3, [r3, #7]
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d102      	bne.n	800b0be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	73fb      	strb	r3, [r7, #15]
 800b0bc:	e001      	b.n	800b0c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b0be:	f7f6 fe07 	bl	8001cd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b0c8:	7bfa      	ldrb	r2, [r7, #15]
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fe fd08 	bl	8009ae2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fcb0 	bl	8009a3e <USBD_LL_Reset>
}
 800b0de:	bf00      	nop
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
	...

0800b0e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fe fd03 	bl	8009b02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	6812      	ldr	r2, [r2, #0]
 800b10a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b10e:	f043 0301 	orr.w	r3, r3, #1
 800b112:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	7adb      	ldrb	r3, [r3, #11]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d005      	beq.n	800b128 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b11c:	4b04      	ldr	r3, [pc, #16]	@ (800b130 <HAL_PCD_SuspendCallback+0x48>)
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	4a03      	ldr	r2, [pc, #12]	@ (800b130 <HAL_PCD_SuspendCallback+0x48>)
 800b122:	f043 0306 	orr.w	r3, r3, #6
 800b126:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b128:	bf00      	nop
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	e000ed00 	.word	0xe000ed00

0800b134 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe fcf9 	bl	8009b3a <USBD_LL_Resume>
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b162:	78fa      	ldrb	r2, [r7, #3]
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f7fe fd51 	bl	8009c0e <USBD_LL_IsoOUTIncomplete>
}
 800b16c:	bf00      	nop
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b186:	78fa      	ldrb	r2, [r7, #3]
 800b188:	4611      	mov	r1, r2
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe fd0d 	bl	8009baa <USBD_LL_IsoINIncomplete>
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe fd63 	bl	8009c72 <USBD_LL_DevConnected>
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fe fd60 	bl	8009c88 <USBD_LL_DevDisconnected>
}
 800b1c8:	bf00      	nop
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d13c      	bne.n	800b25a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b1e0:	4a20      	ldr	r2, [pc, #128]	@ (800b264 <USBD_LL_Init+0x94>)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a1e      	ldr	r2, [pc, #120]	@ (800b264 <USBD_LL_Init+0x94>)
 800b1ec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1f0:	4b1c      	ldr	r3, [pc, #112]	@ (800b264 <USBD_LL_Init+0x94>)
 800b1f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b1f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b1f8:	4b1a      	ldr	r3, [pc, #104]	@ (800b264 <USBD_LL_Init+0x94>)
 800b1fa:	2204      	movs	r2, #4
 800b1fc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b1fe:	4b19      	ldr	r3, [pc, #100]	@ (800b264 <USBD_LL_Init+0x94>)
 800b200:	2202      	movs	r2, #2
 800b202:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b204:	4b17      	ldr	r3, [pc, #92]	@ (800b264 <USBD_LL_Init+0x94>)
 800b206:	2200      	movs	r2, #0
 800b208:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b20a:	4b16      	ldr	r3, [pc, #88]	@ (800b264 <USBD_LL_Init+0x94>)
 800b20c:	2202      	movs	r2, #2
 800b20e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b210:	4b14      	ldr	r3, [pc, #80]	@ (800b264 <USBD_LL_Init+0x94>)
 800b212:	2200      	movs	r2, #0
 800b214:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b216:	4b13      	ldr	r3, [pc, #76]	@ (800b264 <USBD_LL_Init+0x94>)
 800b218:	2200      	movs	r2, #0
 800b21a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b21c:	4b11      	ldr	r3, [pc, #68]	@ (800b264 <USBD_LL_Init+0x94>)
 800b21e:	2200      	movs	r2, #0
 800b220:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b222:	4b10      	ldr	r3, [pc, #64]	@ (800b264 <USBD_LL_Init+0x94>)
 800b224:	2200      	movs	r2, #0
 800b226:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b228:	4b0e      	ldr	r3, [pc, #56]	@ (800b264 <USBD_LL_Init+0x94>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b22e:	480d      	ldr	r0, [pc, #52]	@ (800b264 <USBD_LL_Init+0x94>)
 800b230:	f7f8 f9ba 	bl	80035a8 <HAL_PCD_Init>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b23a:	f7f6 fd49 	bl	8001cd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b23e:	2180      	movs	r1, #128	@ 0x80
 800b240:	4808      	ldr	r0, [pc, #32]	@ (800b264 <USBD_LL_Init+0x94>)
 800b242:	f7f9 fbe6 	bl	8004a12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b246:	2240      	movs	r2, #64	@ 0x40
 800b248:	2100      	movs	r1, #0
 800b24a:	4806      	ldr	r0, [pc, #24]	@ (800b264 <USBD_LL_Init+0x94>)
 800b24c:	f7f9 fb9a 	bl	8004984 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b250:	2280      	movs	r2, #128	@ 0x80
 800b252:	2101      	movs	r1, #1
 800b254:	4803      	ldr	r0, [pc, #12]	@ (800b264 <USBD_LL_Init+0x94>)
 800b256:	f7f9 fb95 	bl	8004984 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	20003fac 	.word	0x20003fac

0800b268 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b27e:	4618      	mov	r0, r3
 800b280:	f7f8 faa1 	bl	80037c6 <HAL_PCD_Start>
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 f942 	bl	800b514 <USBD_Get_USB_Status>
 800b290:	4603      	mov	r3, r0
 800b292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b294:	7bbb      	ldrb	r3, [r7, #14]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	4608      	mov	r0, r1
 800b2a8:	4611      	mov	r1, r2
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	70fb      	strb	r3, [r7, #3]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	70bb      	strb	r3, [r7, #2]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b2c6:	78bb      	ldrb	r3, [r7, #2]
 800b2c8:	883a      	ldrh	r2, [r7, #0]
 800b2ca:	78f9      	ldrb	r1, [r7, #3]
 800b2cc:	f7f8 ff75 	bl	80041ba <HAL_PCD_EP_Open>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 f91c 	bl	800b514 <USBD_Get_USB_Status>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b084      	sub	sp, #16
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b304:	78fa      	ldrb	r2, [r7, #3]
 800b306:	4611      	mov	r1, r2
 800b308:	4618      	mov	r0, r3
 800b30a:	f7f8 ffc0 	bl	800428e <HAL_PCD_EP_Close>
 800b30e:	4603      	mov	r3, r0
 800b310:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	4618      	mov	r0, r3
 800b316:	f000 f8fd 	bl	800b514 <USBD_Get_USB_Status>
 800b31a:	4603      	mov	r3, r0
 800b31c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	460b      	mov	r3, r1
 800b332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b338:	2300      	movs	r3, #0
 800b33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b342:	78fa      	ldrb	r2, [r7, #3]
 800b344:	4611      	mov	r1, r2
 800b346:	4618      	mov	r0, r3
 800b348:	f7f9 f878 	bl	800443c <HAL_PCD_EP_SetStall>
 800b34c:	4603      	mov	r3, r0
 800b34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b350:	7bfb      	ldrb	r3, [r7, #15]
 800b352:	4618      	mov	r0, r3
 800b354:	f000 f8de 	bl	800b514 <USBD_Get_USB_Status>
 800b358:	4603      	mov	r3, r0
 800b35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	460b      	mov	r3, r1
 800b370:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b380:	78fa      	ldrb	r2, [r7, #3]
 800b382:	4611      	mov	r1, r2
 800b384:	4618      	mov	r0, r3
 800b386:	f7f9 f8bc 	bl	8004502 <HAL_PCD_EP_ClrStall>
 800b38a:	4603      	mov	r3, r0
 800b38c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	4618      	mov	r0, r3
 800b392:	f000 f8bf 	bl	800b514 <USBD_Get_USB_Status>
 800b396:	4603      	mov	r3, r0
 800b398:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b3b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	da0b      	bge.n	800b3d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b3c0:	78fb      	ldrb	r3, [r7, #3]
 800b3c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3c6:	68f9      	ldr	r1, [r7, #12]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	4413      	add	r3, r2
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	440b      	add	r3, r1
 800b3d2:	3316      	adds	r3, #22
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	e00b      	b.n	800b3f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b3d8:	78fb      	ldrb	r3, [r7, #3]
 800b3da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3de:	68f9      	ldr	r1, [r7, #12]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	00db      	lsls	r3, r3, #3
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	440b      	add	r3, r1
 800b3ea:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b3ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b416:	78fa      	ldrb	r2, [r7, #3]
 800b418:	4611      	mov	r1, r2
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7f8 fea9 	bl	8004172 <HAL_PCD_SetAddress>
 800b420:	4603      	mov	r3, r0
 800b422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b424:	7bfb      	ldrb	r3, [r7, #15]
 800b426:	4618      	mov	r0, r3
 800b428:	f000 f874 	bl	800b514 <USBD_Get_USB_Status>
 800b42c:	4603      	mov	r3, r0
 800b42e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b430:	7bbb      	ldrb	r3, [r7, #14]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b086      	sub	sp, #24
 800b43e:	af00      	add	r7, sp, #0
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
 800b446:	460b      	mov	r3, r1
 800b448:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b44a:	2300      	movs	r3, #0
 800b44c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b458:	7af9      	ldrb	r1, [r7, #11]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	f7f8 ffb3 	bl	80043c8 <HAL_PCD_EP_Transmit>
 800b462:	4603      	mov	r3, r0
 800b464:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b466:	7dfb      	ldrb	r3, [r7, #23]
 800b468:	4618      	mov	r0, r3
 800b46a:	f000 f853 	bl	800b514 <USBD_Get_USB_Status>
 800b46e:	4603      	mov	r3, r0
 800b470:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b472:	7dbb      	ldrb	r3, [r7, #22]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b086      	sub	sp, #24
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	607a      	str	r2, [r7, #4]
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	460b      	mov	r3, r1
 800b48a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b49a:	7af9      	ldrb	r1, [r7, #11]
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	f7f8 ff3f 	bl	8004322 <HAL_PCD_EP_Receive>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4a8:	7dfb      	ldrb	r3, [r7, #23]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 f832 	bl	800b514 <USBD_Get_USB_Status>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3718      	adds	r7, #24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b082      	sub	sp, #8
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4d0:	78fa      	ldrb	r2, [r7, #3]
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7f8 ff5f 	bl	8004398 <HAL_PCD_EP_GetRxCount>
 800b4da:	4603      	mov	r3, r0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3708      	adds	r7, #8
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b4ec:	4b03      	ldr	r3, [pc, #12]	@ (800b4fc <USBD_static_malloc+0x18>)
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	20004490 	.word	0x20004490

0800b500 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]

}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	2b03      	cmp	r3, #3
 800b526:	d817      	bhi.n	800b558 <USBD_Get_USB_Status+0x44>
 800b528:	a201      	add	r2, pc, #4	@ (adr r2, 800b530 <USBD_Get_USB_Status+0x1c>)
 800b52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52e:	bf00      	nop
 800b530:	0800b541 	.word	0x0800b541
 800b534:	0800b547 	.word	0x0800b547
 800b538:	0800b54d 	.word	0x0800b54d
 800b53c:	0800b553 	.word	0x0800b553
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	73fb      	strb	r3, [r7, #15]
    break;
 800b544:	e00b      	b.n	800b55e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b546:	2303      	movs	r3, #3
 800b548:	73fb      	strb	r3, [r7, #15]
    break;
 800b54a:	e008      	b.n	800b55e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b54c:	2301      	movs	r3, #1
 800b54e:	73fb      	strb	r3, [r7, #15]
    break;
 800b550:	e005      	b.n	800b55e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b552:	2303      	movs	r3, #3
 800b554:	73fb      	strb	r3, [r7, #15]
    break;
 800b556:	e002      	b.n	800b55e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b558:	2303      	movs	r3, #3
 800b55a:	73fb      	strb	r3, [r7, #15]
    break;
 800b55c:	bf00      	nop
  }
  return usb_status;
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <memset>:
 800b56c:	4402      	add	r2, r0
 800b56e:	4603      	mov	r3, r0
 800b570:	4293      	cmp	r3, r2
 800b572:	d100      	bne.n	800b576 <memset+0xa>
 800b574:	4770      	bx	lr
 800b576:	f803 1b01 	strb.w	r1, [r3], #1
 800b57a:	e7f9      	b.n	800b570 <memset+0x4>

0800b57c <__libc_init_array>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	4d0d      	ldr	r5, [pc, #52]	@ (800b5b4 <__libc_init_array+0x38>)
 800b580:	4c0d      	ldr	r4, [pc, #52]	@ (800b5b8 <__libc_init_array+0x3c>)
 800b582:	1b64      	subs	r4, r4, r5
 800b584:	10a4      	asrs	r4, r4, #2
 800b586:	2600      	movs	r6, #0
 800b588:	42a6      	cmp	r6, r4
 800b58a:	d109      	bne.n	800b5a0 <__libc_init_array+0x24>
 800b58c:	4d0b      	ldr	r5, [pc, #44]	@ (800b5bc <__libc_init_array+0x40>)
 800b58e:	4c0c      	ldr	r4, [pc, #48]	@ (800b5c0 <__libc_init_array+0x44>)
 800b590:	f000 f818 	bl	800b5c4 <_init>
 800b594:	1b64      	subs	r4, r4, r5
 800b596:	10a4      	asrs	r4, r4, #2
 800b598:	2600      	movs	r6, #0
 800b59a:	42a6      	cmp	r6, r4
 800b59c:	d105      	bne.n	800b5aa <__libc_init_array+0x2e>
 800b59e:	bd70      	pop	{r4, r5, r6, pc}
 800b5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a4:	4798      	blx	r3
 800b5a6:	3601      	adds	r6, #1
 800b5a8:	e7ee      	b.n	800b588 <__libc_init_array+0xc>
 800b5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ae:	4798      	blx	r3
 800b5b0:	3601      	adds	r6, #1
 800b5b2:	e7f2      	b.n	800b59a <__libc_init_array+0x1e>
 800b5b4:	0800b644 	.word	0x0800b644
 800b5b8:	0800b644 	.word	0x0800b644
 800b5bc:	0800b644 	.word	0x0800b644
 800b5c0:	0800b648 	.word	0x0800b648

0800b5c4 <_init>:
 800b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c6:	bf00      	nop
 800b5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ca:	bc08      	pop	{r3}
 800b5cc:	469e      	mov	lr, r3
 800b5ce:	4770      	bx	lr

0800b5d0 <_fini>:
 800b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d2:	bf00      	nop
 800b5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5d6:	bc08      	pop	{r3}
 800b5d8:	469e      	mov	lr, r3
 800b5da:	4770      	bx	lr
