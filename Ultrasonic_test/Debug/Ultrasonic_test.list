
Ultrasonic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a690  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000210c  0800a820  0800a820  0000b820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c92c  0800c92c  0000e08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c92c  0800c92c  0000d92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c934  0800c934  0000e08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c934  0800c934  0000d934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c938  0800c938  0000d938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800c93c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e08c  2**0
                  CONTENTS
 10 .bss          00000e8c  2000008c  2000008c  0000e08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f18  20000f18  0000e08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad75  00000000  00000000  0000e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000425d  00000000  00000000  00028e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b0  00000000  00000000  0002d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000124e  00000000  00000000  0002e840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000061f6  00000000  00000000  0002fa8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f494  00000000  00000000  00035c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d47b7  00000000  00000000  00055118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001298cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ac8  00000000  00000000  00129914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001303dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a808 	.word	0x0800a808

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800a808 	.word	0x0800a808

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b988 	b.w	8000d74 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	468e      	mov	lr, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	4688      	mov	r8, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d962      	bls.n	8000b58 <__udivmoddi4+0xdc>
 8000a92:	fab2 f682 	clz	r6, r2
 8000a96:	b14e      	cbz	r6, 8000aac <__udivmoddi4+0x30>
 8000a98:	f1c6 0320 	rsb	r3, r6, #32
 8000a9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa0:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	ea43 0808 	orr.w	r8, r3, r8
 8000aaa:	40b4      	lsls	r4, r6
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab8:	0c23      	lsrs	r3, r4, #16
 8000aba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000abe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0x62>
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad0:	f080 80ea 	bcs.w	8000ca8 <__udivmoddi4+0x22c>
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f240 80e7 	bls.w	8000ca8 <__udivmoddi4+0x22c>
 8000ada:	3902      	subs	r1, #2
 8000adc:	443b      	add	r3, r7
 8000ade:	1a9a      	subs	r2, r3, r2
 8000ae0:	b2a3      	uxth	r3, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af2:	459c      	cmp	ip, r3
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x8e>
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afc:	f080 80d6 	bcs.w	8000cac <__udivmoddi4+0x230>
 8000b00:	459c      	cmp	ip, r3
 8000b02:	f240 80d3 	bls.w	8000cac <__udivmoddi4+0x230>
 8000b06:	443b      	add	r3, r7
 8000b08:	3802      	subs	r0, #2
 8000b0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b0e:	eba3 030c 	sub.w	r3, r3, ip
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11d      	cbz	r5, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40f3      	lsrs	r3, r6
 8000b18:	2200      	movs	r2, #0
 8000b1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d905      	bls.n	8000b32 <__udivmoddi4+0xb6>
 8000b26:	b10d      	cbz	r5, 8000b2c <__udivmoddi4+0xb0>
 8000b28:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e7f5      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b32:	fab3 f183 	clz	r1, r3
 8000b36:	2900      	cmp	r1, #0
 8000b38:	d146      	bne.n	8000bc8 <__udivmoddi4+0x14c>
 8000b3a:	4573      	cmp	r3, lr
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xc8>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 8105 	bhi.w	8000d4e <__udivmoddi4+0x2d2>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0e5      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b52:	e9c5 4800 	strd	r4, r8, [r5]
 8000b56:	e7e2      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	f000 8090 	beq.w	8000c7e <__udivmoddi4+0x202>
 8000b5e:	fab2 f682 	clz	r6, r2
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f040 80a4 	bne.w	8000cb0 <__udivmoddi4+0x234>
 8000b68:	1a8a      	subs	r2, r1, r2
 8000b6a:	0c03      	lsrs	r3, r0, #16
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	b280      	uxth	r0, r0
 8000b72:	b2bc      	uxth	r4, r7
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b82:	fb04 f20c 	mul.w	r2, r4, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d907      	bls.n	8000b9a <__udivmoddi4+0x11e>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x11c>
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f200 80e0 	bhi.w	8000d58 <__udivmoddi4+0x2dc>
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ba4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba8:	fb02 f404 	mul.w	r4, r2, r4
 8000bac:	429c      	cmp	r4, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x144>
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x142>
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	f200 80ca 	bhi.w	8000d52 <__udivmoddi4+0x2d6>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	1b1b      	subs	r3, r3, r4
 8000bc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0620 	rsb	r6, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd2:	431f      	orrs	r7, r3
 8000bd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bdc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	fa1f fc87 	uxth.w	ip, r7
 8000bee:	fbbe f0f9 	udiv	r0, lr, r9
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x1a0>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c0e:	f080 809c 	bcs.w	8000d4a <__udivmoddi4+0x2ce>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8099 	bls.w	8000d4a <__udivmoddi4+0x2ce>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	fa1f fe83 	uxth.w	lr, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1ce>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c3e:	f080 8082 	bcs.w	8000d46 <__udivmoddi4+0x2ca>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d97f      	bls.n	8000d46 <__udivmoddi4+0x2ca>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c56:	4564      	cmp	r4, ip
 8000c58:	4673      	mov	r3, lr
 8000c5a:	46e1      	mov	r9, ip
 8000c5c:	d362      	bcc.n	8000d24 <__udivmoddi4+0x2a8>
 8000c5e:	d05f      	beq.n	8000d20 <__udivmoddi4+0x2a4>
 8000c60:	b15d      	cbz	r5, 8000c7a <__udivmoddi4+0x1fe>
 8000c62:	ebb8 0203 	subs.w	r2, r8, r3
 8000c66:	eb64 0409 	sbc.w	r4, r4, r9
 8000c6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c72:	431e      	orrs	r6, r3
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e74f      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000c7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c82:	0c01      	lsrs	r1, r0, #16
 8000c84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4638      	mov	r0, r7
 8000c92:	463c      	mov	r4, r7
 8000c94:	46b8      	mov	r8, r7
 8000c96:	46be      	mov	lr, r7
 8000c98:	2620      	movs	r6, #32
 8000c9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ca2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ca6:	e766      	b.n	8000b76 <__udivmoddi4+0xfa>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	e718      	b.n	8000ade <__udivmoddi4+0x62>
 8000cac:	4610      	mov	r0, r2
 8000cae:	e72c      	b.n	8000b0a <__udivmoddi4+0x8e>
 8000cb0:	f1c6 0220 	rsb	r2, r6, #32
 8000cb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb8:	40b7      	lsls	r7, r6
 8000cba:	40b1      	lsls	r1, r6
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cca:	b2bc      	uxth	r4, r7
 8000ccc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb08 f904 	mul.w	r9, r8, r4
 8000cda:	40b0      	lsls	r0, r6
 8000cdc:	4589      	cmp	r9, r1
 8000cde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ce2:	b280      	uxth	r0, r0
 8000ce4:	d93e      	bls.n	8000d64 <__udivmoddi4+0x2e8>
 8000ce6:	1879      	adds	r1, r7, r1
 8000ce8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cec:	d201      	bcs.n	8000cf2 <__udivmoddi4+0x276>
 8000cee:	4589      	cmp	r9, r1
 8000cf0:	d81f      	bhi.n	8000d32 <__udivmoddi4+0x2b6>
 8000cf2:	eba1 0109 	sub.w	r1, r1, r9
 8000cf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfa:	fb09 f804 	mul.w	r8, r9, r4
 8000cfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d02:	b292      	uxth	r2, r2
 8000d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d08:	4542      	cmp	r2, r8
 8000d0a:	d229      	bcs.n	8000d60 <__udivmoddi4+0x2e4>
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d12:	d2c4      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d14:	4542      	cmp	r2, r8
 8000d16:	d2c2      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d18:	f1a9 0102 	sub.w	r1, r9, #2
 8000d1c:	443a      	add	r2, r7
 8000d1e:	e7be      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d20:	45f0      	cmp	r8, lr
 8000d22:	d29d      	bcs.n	8000c60 <__udivmoddi4+0x1e4>
 8000d24:	ebbe 0302 	subs.w	r3, lr, r2
 8000d28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	46e1      	mov	r9, ip
 8000d30:	e796      	b.n	8000c60 <__udivmoddi4+0x1e4>
 8000d32:	eba7 0909 	sub.w	r9, r7, r9
 8000d36:	4449      	add	r1, r9
 8000d38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d40:	fb09 f804 	mul.w	r8, r9, r4
 8000d44:	e7db      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d46:	4673      	mov	r3, lr
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1ce>
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	e766      	b.n	8000c1c <__udivmoddi4+0x1a0>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e6fd      	b.n	8000b4e <__udivmoddi4+0xd2>
 8000d52:	443b      	add	r3, r7
 8000d54:	3a02      	subs	r2, #2
 8000d56:	e733      	b.n	8000bc0 <__udivmoddi4+0x144>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	e71c      	b.n	8000b9a <__udivmoddi4+0x11e>
 8000d60:	4649      	mov	r1, r9
 8000d62:	e79c      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d64:	eba1 0109 	sub.w	r1, r1, r9
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	e7c4      	b.n	8000cfe <__udivmoddi4+0x282>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b598      	push	{r3, r4, r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f001 f842 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HCSR04_Init(HCSR04_SENSOR1, &htim2);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d80:	f000 f8c0 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d84:	f000 fa2c 	bl	80011e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d88:	f000 f926 	bl	8000fd8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d8c:	f000 f952 	bl	8001034 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d90:	f000 f980 	bl	8001094 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000d94:	f000 f9b4 	bl	8001100 <MX_TIM2_Init>
  MX_USB_HOST_Init();
 8000d98:	f008 fdd2 	bl	8009940 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start(&htim2);
 8000d9c:	484e      	ldr	r0, [pc, #312]	@ (8000ed8 <main+0x160>)
 8000d9e:	f005 fdc9 	bl	8006934 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000da8:	484c      	ldr	r0, [pc, #304]	@ (8000edc <main+0x164>)
 8000daa:	f001 fb87 	bl	80024bc <HAL_GPIO_WritePin>
	SSD1306_Init();
 8000dae:	f000 fb2f 	bl	8001410 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000db8:	4848      	ldr	r0, [pc, #288]	@ (8000edc <main+0x164>)
 8000dba:	f001 fb7f 	bl	80024bc <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000dbe:	4b46      	ldr	r3, [pc, #280]	@ (8000ed8 <main+0x160>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	@ 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim2) < 10);  // wait for 10 us
 8000dc6:	bf00      	nop
 8000dc8:	4b43      	ldr	r3, [pc, #268]	@ (8000ed8 <main+0x160>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dce:	2b09      	cmp	r3, #9
 8000dd0:	d9fa      	bls.n	8000dc8 <main+0x50>
	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dd8:	4840      	ldr	r0, [pc, #256]	@ (8000edc <main+0x164>)
 8000dda:	f001 fb6f 	bl	80024bc <HAL_GPIO_WritePin>

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000dde:	f001 f877 	bl	8001ed0 <HAL_GetTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee0 <main+0x168>)
 8000de6:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000de8:	bf00      	nop
 8000dea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dee:	483b      	ldr	r0, [pc, #236]	@ (8000edc <main+0x164>)
 8000df0:	f001 fb4c 	bl	800248c <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d108      	bne.n	8000e0c <main+0x94>
 8000dfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ee0 <main+0x168>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f103 040a 	add.w	r4, r3, #10
 8000e02:	f001 f865 	bl	8001ed0 <HAL_GetTick>
 8000e06:	4603      	mov	r3, r0
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	d8ee      	bhi.n	8000dea <main+0x72>
	      Value1 = __HAL_TIM_GET_COUNTER (&htim2);
 8000e0c:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <main+0x160>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e12:	4a34      	ldr	r2, [pc, #208]	@ (8000ee4 <main+0x16c>)
 8000e14:	6013      	str	r3, [r2, #0]

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000e16:	f001 f85b 	bl	8001ed0 <HAL_GetTick>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a30      	ldr	r2, [pc, #192]	@ (8000ee0 <main+0x168>)
 8000e1e:	6013      	str	r3, [r2, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000e20:	bf00      	nop
 8000e22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e26:	482d      	ldr	r0, [pc, #180]	@ (8000edc <main+0x164>)
 8000e28:	f001 fb30 	bl	800248c <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d008      	beq.n	8000e44 <main+0xcc>
 8000e32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee0 <main+0x168>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000e3a:	f001 f849 	bl	8001ed0 <HAL_GetTick>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	429c      	cmp	r4, r3
 8000e42:	d8ee      	bhi.n	8000e22 <main+0xaa>
	      Value2 = __HAL_TIM_GET_COUNTER (&htim2);
 8000e44:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <main+0x160>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <main+0x170>)
 8000e4c:	6013      	str	r3, [r2, #0]

	      Distance = (Value2-Value1)* 0.034/2;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <main+0x170>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <main+0x16c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb4b 	bl	80004f4 <__aeabi_ui2d>
 8000e5e:	a31c      	add	r3, pc, #112	@ (adr r3, 8000ed0 <main+0x158>)
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	f7ff fbc0 	bl	80005e8 <__aeabi_dmul>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e78:	f7ff fce0 	bl	800083c <__aeabi_ddiv>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fdc2 	bl	8000a0c <__aeabi_d2uiz>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <main+0x174>)
 8000e8e:	801a      	strh	r2, [r3, #0]

	      SSD1306_GotoXY (0, 0);
 8000e90:	2100      	movs	r1, #0
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 fc26 	bl	80016e4 <SSD1306_GotoXY>
	      SSD1306_Puts ("Distance:", &Font_11x18, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4915      	ldr	r1, [pc, #84]	@ (8000ef0 <main+0x178>)
 8000e9c:	4815      	ldr	r0, [pc, #84]	@ (8000ef4 <main+0x17c>)
 8000e9e:	f000 fcb5 	bl	800180c <SSD1306_Puts>
	      sprintf(strCopy,"%d    ", Distance);
 8000ea2:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <main+0x174>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4913      	ldr	r1, [pc, #76]	@ (8000ef8 <main+0x180>)
 8000eaa:	4814      	ldr	r0, [pc, #80]	@ (8000efc <main+0x184>)
 8000eac:	f009 f8ba 	bl	800a024 <siprintf>
	      SSD1306_GotoXY (0, 30);
 8000eb0:	211e      	movs	r1, #30
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 fc16 	bl	80016e4 <SSD1306_GotoXY>
	      SSD1306_Puts (strCopy, &Font_16x26, 1);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4911      	ldr	r1, [pc, #68]	@ (8000f00 <main+0x188>)
 8000ebc:	480f      	ldr	r0, [pc, #60]	@ (8000efc <main+0x184>)
 8000ebe:	f000 fca5 	bl	800180c <SSD1306_Puts>
	      SSD1306_UpdateScreen();
 8000ec2:	f000 fb69 	bl	8001598 <SSD1306_UpdateScreen>
	      HAL_Delay(50);
 8000ec6:	2032      	movs	r0, #50	@ 0x32
 8000ec8:	f001 f80e 	bl	8001ee8 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ecc:	e771      	b.n	8000db2 <main+0x3a>
 8000ece:	bf00      	nop
 8000ed0:	b020c49c 	.word	0xb020c49c
 8000ed4:	3fa16872 	.word	0x3fa16872
 8000ed8:	2000019c 	.word	0x2000019c
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	200001e4 	.word	0x200001e4
 8000ee4:	200001e8 	.word	0x200001e8
 8000ee8:	200001ec 	.word	0x200001ec
 8000eec:	200001f0 	.word	0x200001f0
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	0800a820 	.word	0x0800a820
 8000ef8:	0800a82c 	.word	0x0800a82c
 8000efc:	200001f4 	.word	0x200001f4
 8000f00:	20000008 	.word	0x20000008

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b094      	sub	sp, #80	@ 0x50
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	2230      	movs	r2, #48	@ 0x30
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f009 f8a8 	bl	800a068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <SystemClock_Config+0xcc>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	4a27      	ldr	r2, [pc, #156]	@ (8000fd0 <SystemClock_Config+0xcc>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f38:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <SystemClock_Config+0xcc>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <SystemClock_Config+0xd0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <SystemClock_Config+0xd0>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <SystemClock_Config+0xd0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f74:	2304      	movs	r3, #4
 8000f76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f78:	2348      	movs	r3, #72	@ 0x48
 8000f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f80:	2303      	movs	r3, #3
 8000f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f004 fe35 	bl	8005bf8 <HAL_RCC_OscConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f94:	f000 fa36 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f98:	230f      	movs	r3, #15
 8000f9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000faa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f005 f896 	bl	80060e8 <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fc2:	f000 fa1f 	bl	8001404 <Error_Handler>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3750      	adds	r7, #80	@ 0x50
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fde:	4a13      	ldr	r2, [pc, #76]	@ (800102c <MX_I2C1_Init+0x54>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <MX_I2C1_Init+0x58>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001016:	f003 fb83 	bl	8004720 <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001020:	f000 f9f0 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200000a8 	.word	0x200000a8
 800102c:	40005400 	.word	0x40005400
 8001030:	00061a80 	.word	0x00061a80

08001034 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <MX_I2S3_Init+0x54>)
 800103a:	4a14      	ldr	r2, [pc, #80]	@ (800108c <MX_I2S3_Init+0x58>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_I2S3_Init+0x54>)
 8001040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001044:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <MX_I2S3_Init+0x54>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_I2S3_Init+0x54>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <MX_I2S3_Init+0x54>)
 8001054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001058:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_I2S3_Init+0x54>)
 800105c:	4a0c      	ldr	r2, [pc, #48]	@ (8001090 <MX_I2S3_Init+0x5c>)
 800105e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_I2S3_Init+0x54>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_I2S3_Init+0x54>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_I2S3_Init+0x54>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_I2S3_Init+0x54>)
 8001074:	f004 f920 	bl	80052b8 <HAL_I2S_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800107e:	f000 f9c1 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000fc 	.word	0x200000fc
 800108c:	40003c00 	.word	0x40003c00
 8001090:	00017700 	.word	0x00017700

08001094 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_SPI1_Init+0x64>)
 800109a:	4a18      	ldr	r2, [pc, #96]	@ (80010fc <MX_SPI1_Init+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109e:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010e0:	220a      	movs	r2, #10
 80010e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <MX_SPI1_Init+0x64>)
 80010e6:	f005 fb4d 	bl	8006784 <HAL_SPI_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010f0:	f000 f988 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000144 	.word	0x20000144
 80010fc:	40013000 	.word	0x40013000

08001100 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800111e:	463b      	mov	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800112a:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <MX_TIM2_Init+0xdc>)
 800112c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001130:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001132:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <MX_TIM2_Init+0xdc>)
 8001134:	2247      	movs	r2, #71	@ 0x47
 8001136:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <MX_TIM2_Init+0xdc>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800113e:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <MX_TIM2_Init+0xdc>)
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <MX_TIM2_Init+0xdc>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <MX_TIM2_Init+0xdc>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001152:	4822      	ldr	r0, [pc, #136]	@ (80011dc <MX_TIM2_Init+0xdc>)
 8001154:	f005 fb9f 	bl	8006896 <HAL_TIM_Base_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800115e:	f000 f951 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001166:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	4619      	mov	r1, r3
 800116e:	481b      	ldr	r0, [pc, #108]	@ (80011dc <MX_TIM2_Init+0xdc>)
 8001170:	f005 fe2d 	bl	8006dce <HAL_TIM_ConfigClockSource>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800117a:	f000 f943 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800117e:	4817      	ldr	r0, [pc, #92]	@ (80011dc <MX_TIM2_Init+0xdc>)
 8001180:	f005 fc40 	bl	8006a04 <HAL_TIM_IC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800118a:	f000 f93b 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4619      	mov	r1, r3
 800119c:	480f      	ldr	r0, [pc, #60]	@ (80011dc <MX_TIM2_Init+0xdc>)
 800119e:	f006 f97f 	bl	80074a0 <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80011a8:	f000 f92c 	bl	8001404 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ac:	2300      	movs	r3, #0
 80011ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b0:	2301      	movs	r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <MX_TIM2_Init+0xdc>)
 80011c4:	f005 fd67 	bl	8006c96 <HAL_TIM_IC_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80011ce:	f000 f919 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	@ 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000019c 	.word	0x2000019c

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	@ 0x30
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	4b7c      	ldr	r3, [pc, #496]	@ (80013ec <MX_GPIO_Init+0x20c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a7b      	ldr	r2, [pc, #492]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b79      	ldr	r3, [pc, #484]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	4b75      	ldr	r3, [pc, #468]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a74      	ldr	r2, [pc, #464]	@ (80013ec <MX_GPIO_Init+0x20c>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b72      	ldr	r3, [pc, #456]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b6e      	ldr	r3, [pc, #440]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a6d      	ldr	r2, [pc, #436]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b6b      	ldr	r3, [pc, #428]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b67      	ldr	r3, [pc, #412]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a66      	ldr	r2, [pc, #408]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b64      	ldr	r3, [pc, #400]	@ (80013ec <MX_GPIO_Init+0x20c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b60      	ldr	r3, [pc, #384]	@ (80013ec <MX_GPIO_Init+0x20c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a5f      	ldr	r2, [pc, #380]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b5d      	ldr	r3, [pc, #372]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b59      	ldr	r3, [pc, #356]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a58      	ldr	r2, [pc, #352]	@ (80013ec <MX_GPIO_Init+0x20c>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b56      	ldr	r3, [pc, #344]	@ (80013ec <MX_GPIO_Init+0x20c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2108      	movs	r1, #8
 80012a2:	4853      	ldr	r0, [pc, #332]	@ (80013f0 <MX_GPIO_Init+0x210>)
 80012a4:	f001 f90a 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2101      	movs	r1, #1
 80012ac:	4851      	ldr	r0, [pc, #324]	@ (80013f4 <MX_GPIO_Init+0x214>)
 80012ae:	f001 f905 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012b8:	484f      	ldr	r0, [pc, #316]	@ (80013f8 <MX_GPIO_Init+0x218>)
 80012ba:	f001 f8ff 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012be:	2200      	movs	r2, #0
 80012c0:	f24f 0112 	movw	r1, #61458	@ 0xf012
 80012c4:	484d      	ldr	r0, [pc, #308]	@ (80013fc <MX_GPIO_Init+0x21c>)
 80012c6:	f001 f8f9 	bl	80024bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012ca:	2308      	movs	r3, #8
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	4843      	ldr	r0, [pc, #268]	@ (80013f0 <MX_GPIO_Init+0x210>)
 80012e2:	f000 ff37 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	483d      	ldr	r0, [pc, #244]	@ (80013f4 <MX_GPIO_Init+0x214>)
 80012fe:	f000 ff29 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001302:	2308      	movs	r3, #8
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001312:	2305      	movs	r3, #5
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4835      	ldr	r0, [pc, #212]	@ (80013f4 <MX_GPIO_Init+0x214>)
 800131e:	f000 ff19 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001322:	2301      	movs	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001326:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4832      	ldr	r0, [pc, #200]	@ (8001400 <MX_GPIO_Init+0x220>)
 8001338:	f000 ff0c 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800133c:	2304      	movs	r3, #4
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	482a      	ldr	r0, [pc, #168]	@ (80013f8 <MX_GPIO_Init+0x218>)
 8001350:	f000 ff00 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001366:	2305      	movs	r3, #5
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4821      	ldr	r0, [pc, #132]	@ (80013f8 <MX_GPIO_Init+0x218>)
 8001372:	f000 feef 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	481a      	ldr	r0, [pc, #104]	@ (80013f8 <MX_GPIO_Init+0x218>)
 8001390:	f000 fee0 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD1 Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001394:	f24f 0312 	movw	r3, #61458	@ 0xf012
 8001398:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4813      	ldr	r0, [pc, #76]	@ (80013fc <MX_GPIO_Init+0x21c>)
 80013ae:	f000 fed1 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|OTG_FS_OverCurrent_Pin;
 80013b2:	2324      	movs	r3, #36	@ 0x24
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_GPIO_Init+0x21c>)
 80013c6:	f000 fec5 	bl	8002154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013ce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_GPIO_Init+0x210>)
 80013e0:	f000 feb8 	bl	8002154 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	@ 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40020000 	.word	0x40020000

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001416:	f000 fa1f 	bl	8001858 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800141a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800141e:	2201      	movs	r2, #1
 8001420:	2178      	movs	r1, #120	@ 0x78
 8001422:	485b      	ldr	r0, [pc, #364]	@ (8001590 <SSD1306_Init+0x180>)
 8001424:	f003 fbbe 	bl	8004ba4 <HAL_I2C_IsDeviceReady>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800142e:	2300      	movs	r3, #0
 8001430:	e0a9      	b.n	8001586 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001432:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001436:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001438:	e002      	b.n	8001440 <SSD1306_Init+0x30>
		p--;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3b01      	subs	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001446:	22ae      	movs	r2, #174	@ 0xae
 8001448:	2100      	movs	r1, #0
 800144a:	2078      	movs	r0, #120	@ 0x78
 800144c:	f000 fa80 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001450:	2220      	movs	r2, #32
 8001452:	2100      	movs	r1, #0
 8001454:	2078      	movs	r0, #120	@ 0x78
 8001456:	f000 fa7b 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800145a:	2210      	movs	r2, #16
 800145c:	2100      	movs	r1, #0
 800145e:	2078      	movs	r0, #120	@ 0x78
 8001460:	f000 fa76 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001464:	22b0      	movs	r2, #176	@ 0xb0
 8001466:	2100      	movs	r1, #0
 8001468:	2078      	movs	r0, #120	@ 0x78
 800146a:	f000 fa71 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800146e:	22c8      	movs	r2, #200	@ 0xc8
 8001470:	2100      	movs	r1, #0
 8001472:	2078      	movs	r0, #120	@ 0x78
 8001474:	f000 fa6c 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2078      	movs	r0, #120	@ 0x78
 800147e:	f000 fa67 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001482:	2210      	movs	r2, #16
 8001484:	2100      	movs	r1, #0
 8001486:	2078      	movs	r0, #120	@ 0x78
 8001488:	f000 fa62 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800148c:	2240      	movs	r2, #64	@ 0x40
 800148e:	2100      	movs	r1, #0
 8001490:	2078      	movs	r0, #120	@ 0x78
 8001492:	f000 fa5d 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001496:	2281      	movs	r2, #129	@ 0x81
 8001498:	2100      	movs	r1, #0
 800149a:	2078      	movs	r0, #120	@ 0x78
 800149c:	f000 fa58 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80014a0:	22ff      	movs	r2, #255	@ 0xff
 80014a2:	2100      	movs	r1, #0
 80014a4:	2078      	movs	r0, #120	@ 0x78
 80014a6:	f000 fa53 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014aa:	22a1      	movs	r2, #161	@ 0xa1
 80014ac:	2100      	movs	r1, #0
 80014ae:	2078      	movs	r0, #120	@ 0x78
 80014b0:	f000 fa4e 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014b4:	22a6      	movs	r2, #166	@ 0xa6
 80014b6:	2100      	movs	r1, #0
 80014b8:	2078      	movs	r0, #120	@ 0x78
 80014ba:	f000 fa49 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80014be:	22a8      	movs	r2, #168	@ 0xa8
 80014c0:	2100      	movs	r1, #0
 80014c2:	2078      	movs	r0, #120	@ 0x78
 80014c4:	f000 fa44 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80014c8:	223f      	movs	r2, #63	@ 0x3f
 80014ca:	2100      	movs	r1, #0
 80014cc:	2078      	movs	r0, #120	@ 0x78
 80014ce:	f000 fa3f 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014d2:	22a4      	movs	r2, #164	@ 0xa4
 80014d4:	2100      	movs	r1, #0
 80014d6:	2078      	movs	r0, #120	@ 0x78
 80014d8:	f000 fa3a 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80014dc:	22d3      	movs	r2, #211	@ 0xd3
 80014de:	2100      	movs	r1, #0
 80014e0:	2078      	movs	r0, #120	@ 0x78
 80014e2:	f000 fa35 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2078      	movs	r0, #120	@ 0x78
 80014ec:	f000 fa30 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014f0:	22d5      	movs	r2, #213	@ 0xd5
 80014f2:	2100      	movs	r1, #0
 80014f4:	2078      	movs	r0, #120	@ 0x78
 80014f6:	f000 fa2b 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014fa:	22f0      	movs	r2, #240	@ 0xf0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2078      	movs	r0, #120	@ 0x78
 8001500:	f000 fa26 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001504:	22d9      	movs	r2, #217	@ 0xd9
 8001506:	2100      	movs	r1, #0
 8001508:	2078      	movs	r0, #120	@ 0x78
 800150a:	f000 fa21 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800150e:	2222      	movs	r2, #34	@ 0x22
 8001510:	2100      	movs	r1, #0
 8001512:	2078      	movs	r0, #120	@ 0x78
 8001514:	f000 fa1c 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001518:	22da      	movs	r2, #218	@ 0xda
 800151a:	2100      	movs	r1, #0
 800151c:	2078      	movs	r0, #120	@ 0x78
 800151e:	f000 fa17 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001522:	2212      	movs	r2, #18
 8001524:	2100      	movs	r1, #0
 8001526:	2078      	movs	r0, #120	@ 0x78
 8001528:	f000 fa12 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800152c:	22db      	movs	r2, #219	@ 0xdb
 800152e:	2100      	movs	r1, #0
 8001530:	2078      	movs	r0, #120	@ 0x78
 8001532:	f000 fa0d 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001536:	2220      	movs	r2, #32
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	@ 0x78
 800153c:	f000 fa08 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001540:	228d      	movs	r2, #141	@ 0x8d
 8001542:	2100      	movs	r1, #0
 8001544:	2078      	movs	r0, #120	@ 0x78
 8001546:	f000 fa03 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800154a:	2214      	movs	r2, #20
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	@ 0x78
 8001550:	f000 f9fe 	bl	8001950 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001554:	22af      	movs	r2, #175	@ 0xaf
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	@ 0x78
 800155a:	f000 f9f9 	bl	8001950 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800155e:	222e      	movs	r2, #46	@ 0x2e
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	@ 0x78
 8001564:	f000 f9f4 	bl	8001950 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001568:	2000      	movs	r0, #0
 800156a:	f000 f843 	bl	80015f4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800156e:	f000 f813 	bl	8001598 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001572:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <SSD1306_Init+0x184>)
 8001574:	2200      	movs	r2, #0
 8001576:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <SSD1306_Init+0x184>)
 800157a:	2200      	movs	r2, #0
 800157c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800157e:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <SSD1306_Init+0x184>)
 8001580:	2201      	movs	r2, #1
 8001582:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000a8 	.word	0x200000a8
 8001594:	20000604 	.word	0x20000604

08001598 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	e01d      	b.n	80015e0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	3b50      	subs	r3, #80	@ 0x50
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	2100      	movs	r1, #0
 80015ae:	2078      	movs	r0, #120	@ 0x78
 80015b0:	f000 f9ce 	bl	8001950 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2078      	movs	r0, #120	@ 0x78
 80015ba:	f000 f9c9 	bl	8001950 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015be:	2210      	movs	r2, #16
 80015c0:	2100      	movs	r1, #0
 80015c2:	2078      	movs	r0, #120	@ 0x78
 80015c4:	f000 f9c4 	bl	8001950 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	01db      	lsls	r3, r3, #7
 80015cc:	4a08      	ldr	r2, [pc, #32]	@ (80015f0 <SSD1306_UpdateScreen+0x58>)
 80015ce:	441a      	add	r2, r3
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	2140      	movs	r1, #64	@ 0x40
 80015d4:	2078      	movs	r0, #120	@ 0x78
 80015d6:	f000 f955 	bl	8001884 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	3301      	adds	r3, #1
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b07      	cmp	r3, #7
 80015e4:	d9de      	bls.n	80015a4 <SSD1306_UpdateScreen+0xc>
	}
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000204 	.word	0x20000204

080015f4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <SSD1306_Fill+0x14>
 8001604:	2300      	movs	r3, #0
 8001606:	e000      	b.n	800160a <SSD1306_Fill+0x16>
 8001608:	23ff      	movs	r3, #255	@ 0xff
 800160a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800160e:	4619      	mov	r1, r3
 8001610:	4803      	ldr	r0, [pc, #12]	@ (8001620 <SSD1306_Fill+0x2c>)
 8001612:	f008 fd29 	bl	800a068 <memset>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000204 	.word	0x20000204

08001624 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
 800162e:	460b      	mov	r3, r1
 8001630:	80bb      	strh	r3, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	70fb      	strb	r3, [r7, #3]
	if (
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	2b7f      	cmp	r3, #127	@ 0x7f
 800163a:	d848      	bhi.n	80016ce <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001640:	d845      	bhi.n	80016ce <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001642:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <SSD1306_DrawPixel+0xb8>)
 8001644:	791b      	ldrb	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d11a      	bne.n	8001694 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800165e:	88fa      	ldrh	r2, [r7, #6]
 8001660:	88bb      	ldrh	r3, [r7, #4]
 8001662:	08db      	lsrs	r3, r3, #3
 8001664:	b298      	uxth	r0, r3
 8001666:	4603      	mov	r3, r0
 8001668:	01db      	lsls	r3, r3, #7
 800166a:	4413      	add	r3, r2
 800166c:	4a1c      	ldr	r2, [pc, #112]	@ (80016e0 <SSD1306_DrawPixel+0xbc>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	b25a      	sxtb	r2, r3
 8001672:	88bb      	ldrh	r3, [r7, #4]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	b25b      	sxtb	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b259      	sxtb	r1, r3
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	4603      	mov	r3, r0
 8001688:	01db      	lsls	r3, r3, #7
 800168a:	4413      	add	r3, r2
 800168c:	b2c9      	uxtb	r1, r1
 800168e:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <SSD1306_DrawPixel+0xbc>)
 8001690:	54d1      	strb	r1, [r2, r3]
 8001692:	e01d      	b.n	80016d0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001694:	88fa      	ldrh	r2, [r7, #6]
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	08db      	lsrs	r3, r3, #3
 800169a:	b298      	uxth	r0, r3
 800169c:	4603      	mov	r3, r0
 800169e:	01db      	lsls	r3, r3, #7
 80016a0:	4413      	add	r3, r2
 80016a2:	4a0f      	ldr	r2, [pc, #60]	@ (80016e0 <SSD1306_DrawPixel+0xbc>)
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	4013      	ands	r3, r2
 80016bc:	b259      	sxtb	r1, r3
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	4603      	mov	r3, r0
 80016c2:	01db      	lsls	r3, r3, #7
 80016c4:	4413      	add	r3, r2
 80016c6:	b2c9      	uxtb	r1, r1
 80016c8:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <SSD1306_DrawPixel+0xbc>)
 80016ca:	54d1      	strb	r1, [r2, r3]
 80016cc:	e000      	b.n	80016d0 <SSD1306_DrawPixel+0xac>
		return;
 80016ce:	bf00      	nop
	}
}
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000604 	.word	0x20000604
 80016e0:	20000204 	.word	0x20000204

080016e4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	80fb      	strh	r3, [r7, #6]
 80016f0:	4613      	mov	r3, r2
 80016f2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80016f4:	4a05      	ldr	r2, [pc, #20]	@ (800170c <SSD1306_GotoXY+0x28>)
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016fa:	4a04      	ldr	r2, [pc, #16]	@ (800170c <SSD1306_GotoXY+0x28>)
 80016fc:	88bb      	ldrh	r3, [r7, #4]
 80016fe:	8053      	strh	r3, [r2, #2]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20000604 	.word	0x20000604

08001710 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	4613      	mov	r3, r2
 800171e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001720:	4b39      	ldr	r3, [pc, #228]	@ (8001808 <SSD1306_Putc+0xf8>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
	if (
 800172c:	2b7f      	cmp	r3, #127	@ 0x7f
 800172e:	dc07      	bgt.n	8001740 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001730:	4b35      	ldr	r3, [pc, #212]	@ (8001808 <SSD1306_Putc+0xf8>)
 8001732:	885b      	ldrh	r3, [r3, #2]
 8001734:	461a      	mov	r2, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	785b      	ldrb	r3, [r3, #1]
 800173a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800173c:	2b3f      	cmp	r3, #63	@ 0x3f
 800173e:	dd01      	ble.n	8001744 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001740:	2300      	movs	r3, #0
 8001742:	e05d      	b.n	8001800 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e04b      	b.n	80017e2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	3b20      	subs	r3, #32
 8001752:	6839      	ldr	r1, [r7, #0]
 8001754:	7849      	ldrb	r1, [r1, #1]
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4619      	mov	r1, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	440b      	add	r3, r1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	e030      	b.n	80017d0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d010      	beq.n	80017a0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800177e:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <SSD1306_Putc+0xf8>)
 8001780:	881a      	ldrh	r2, [r3, #0]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4413      	add	r3, r2
 8001788:	b298      	uxth	r0, r3
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <SSD1306_Putc+0xf8>)
 800178c:	885a      	ldrh	r2, [r3, #2]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	b29b      	uxth	r3, r3
 8001792:	4413      	add	r3, r2
 8001794:	b29b      	uxth	r3, r3
 8001796:	79ba      	ldrb	r2, [r7, #6]
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff ff43 	bl	8001624 <SSD1306_DrawPixel>
 800179e:	e014      	b.n	80017ca <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80017a0:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <SSD1306_Putc+0xf8>)
 80017a2:	881a      	ldrh	r2, [r3, #0]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	b298      	uxth	r0, r3
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <SSD1306_Putc+0xf8>)
 80017ae:	885a      	ldrh	r2, [r3, #2]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	b299      	uxth	r1, r3
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	f7ff ff2d 	bl	8001624 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	3301      	adds	r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4293      	cmp	r3, r2
 80017da:	d3c8      	bcc.n	800176e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	785b      	ldrb	r3, [r3, #1]
 80017e6:	461a      	mov	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d3ad      	bcc.n	800174a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <SSD1306_Putc+0xf8>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <SSD1306_Putc+0xf8>)
 80017fc:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000604 	.word	0x20000604

0800180c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	4613      	mov	r3, r2
 8001818:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800181a:	e012      	b.n	8001842 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff73 	bl	8001710 <SSD1306_Putc>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d002      	beq.n	800183c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	e008      	b.n	800184e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3301      	adds	r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1e8      	bne.n	800181c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	781b      	ldrb	r3, [r3, #0]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <ssd1306_I2C_Init+0x28>)
 8001860:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001862:	e002      	b.n	800186a <ssd1306_I2C_Init+0x12>
		p--;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	607b      	str	r3, [r7, #4]
	while(p>0)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f9      	bne.n	8001864 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	0003d090 	.word	0x0003d090

08001884 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b0c7      	sub	sp, #284	@ 0x11c
 8001888:	af02      	add	r7, sp, #8
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001892:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001896:	600a      	str	r2, [r1, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800189e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80018a2:	4622      	mov	r2, r4
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018aa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80018ae:	4602      	mov	r2, r0
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018ba:	460a      	mov	r2, r1
 80018bc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80018be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80018ca:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80018ce:	7812      	ldrb	r2, [r2, #0]
 80018d0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80018d8:	e015      	b.n	8001906 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80018da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80018de:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80018e2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	441a      	add	r2, r3
 80018ea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80018ee:	3301      	adds	r3, #1
 80018f0:	7811      	ldrb	r1, [r2, #0]
 80018f2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80018f6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80018fa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80018fc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001900:	3301      	adds	r3, #1
 8001902:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001906:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800190a:	b29b      	uxth	r3, r3
 800190c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001910:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001914:	8812      	ldrh	r2, [r2, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d8df      	bhi.n	80018da <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800191a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800191e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b299      	uxth	r1, r3
 8001926:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800192a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	b29b      	uxth	r3, r3
 8001934:	f107 020c 	add.w	r2, r7, #12
 8001938:	200a      	movs	r0, #10
 800193a:	9000      	str	r0, [sp, #0]
 800193c:	4803      	ldr	r0, [pc, #12]	@ (800194c <ssd1306_I2C_WriteMulti+0xc8>)
 800193e:	f003 f833 	bl	80049a8 <HAL_I2C_Master_Transmit>
}
 8001942:	bf00      	nop
 8001944:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}
 800194c:	200000a8 	.word	0x200000a8

08001950 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af02      	add	r7, sp, #8
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	460b      	mov	r3, r1
 800195c:	71bb      	strb	r3, [r7, #6]
 800195e:	4613      	mov	r3, r2
 8001960:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001966:	797b      	ldrb	r3, [r7, #5]
 8001968:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	b299      	uxth	r1, r3
 800196e:	f107 020c 	add.w	r2, r7, #12
 8001972:	230a      	movs	r3, #10
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2302      	movs	r3, #2
 8001978:	4803      	ldr	r0, [pc, #12]	@ (8001988 <ssd1306_I2C_Write+0x38>)
 800197a:	f003 f815 	bl	80049a8 <HAL_I2C_Master_Transmit>
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200000a8 	.word	0x200000a8

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_MspInit+0x4c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ca:	2007      	movs	r0, #7
 80019cc:	f000 fb80 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a19      	ldr	r2, [pc, #100]	@ (8001a60 <HAL_I2C_MspInit+0x84>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d12c      	bne.n	8001a58 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a17      	ldr	r2, [pc, #92]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a1a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a20:	2312      	movs	r3, #18
 8001a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <HAL_I2C_MspInit+0x8c>)
 8001a38:	f000 fb8c 	bl	8002154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	@ 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40005400 	.word	0x40005400
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020400 	.word	0x40020400

08001a6c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08e      	sub	sp, #56	@ 0x38
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a31      	ldr	r2, [pc, #196]	@ (8001b5c <HAL_I2S_MspInit+0xf0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d15a      	bne.n	8001b52 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001aa0:	2332      	movs	r3, #50	@ 0x32
 8001aa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4618      	mov	r0, r3
 8001aae:	f004 fd27 	bl	8006500 <HAL_RCCEx_PeriphCLKConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ab8:	f7ff fca4 	bl	8001404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	4b27      	ldr	r3, [pc, #156]	@ (8001b60 <HAL_I2S_MspInit+0xf4>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	4a26      	ldr	r2, [pc, #152]	@ (8001b60 <HAL_I2S_MspInit+0xf4>)
 8001ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001acc:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <HAL_I2S_MspInit+0xf4>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <HAL_I2S_MspInit+0xf4>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b60 <HAL_I2S_MspInit+0xf4>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <HAL_I2S_MspInit+0xf4>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <HAL_I2S_MspInit+0xf4>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	4a18      	ldr	r2, [pc, #96]	@ (8001b60 <HAL_I2S_MspInit+0xf4>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <HAL_I2S_MspInit+0xf4>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b10:	2310      	movs	r3, #16
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b20:	2306      	movs	r3, #6
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480e      	ldr	r0, [pc, #56]	@ (8001b64 <HAL_I2S_MspInit+0xf8>)
 8001b2c:	f000 fb12 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b30:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b42:	2306      	movs	r3, #6
 8001b44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4806      	ldr	r0, [pc, #24]	@ (8001b68 <HAL_I2S_MspInit+0xfc>)
 8001b4e:	f000 fb01 	bl	8002154 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b52:	bf00      	nop
 8001b54:	3738      	adds	r7, #56	@ 0x38
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40003c00 	.word	0x40003c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020800 	.word	0x40020800

08001b6c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <HAL_SPI_MspInit+0x84>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12b      	bne.n	8001be6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	4a17      	ldr	r2, [pc, #92]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001b98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	4a10      	ldr	r2, [pc, #64]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001bc6:	23e0      	movs	r3, #224	@ 0xe0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <HAL_SPI_MspInit+0x8c>)
 8001be2:	f000 fab7 	bl	8002154 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	@ 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40013000 	.word	0x40013000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	@ 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c1c:	d134      	bne.n	8001c88 <HAL_TIM_Base_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <HAL_TIM_Base_MspInit+0x94>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	4a1a      	ldr	r2, [pc, #104]	@ (8001c90 <HAL_TIM_Base_MspInit+0x94>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <HAL_TIM_Base_MspInit+0x94>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <HAL_TIM_Base_MspInit+0x94>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a13      	ldr	r2, [pc, #76]	@ (8001c90 <HAL_TIM_Base_MspInit+0x94>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_TIM_Base_MspInit+0x94>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	4808      	ldr	r0, [pc, #32]	@ (8001c94 <HAL_TIM_Base_MspInit+0x98>)
 8001c74:	f000 fa6e 	bl	8002154 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	201c      	movs	r0, #28
 8001c7e:	f000 fa32 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c82:	201c      	movs	r0, #28
 8001c84:	f000 fa4b 	bl	800211e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c88:	bf00      	nop
 8001c8a:	3728      	adds	r7, #40	@ 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020000 	.word	0x40020000

08001c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <NMI_Handler+0x4>

08001ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <MemManage_Handler+0x4>

08001cb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cee:	f000 f8db 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <TIM2_IRQHandler+0x10>)
 8001cfe:	f004 feda 	bl	8006ab6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000019c 	.word	0x2000019c

08001d0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <OTG_FS_IRQHandler+0x10>)
 8001d12:	f000 fecd 	bl	8002ab0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200009f0 	.word	0x200009f0

08001d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d28:	4a14      	ldr	r2, [pc, #80]	@ (8001d7c <_sbrk+0x5c>)
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <_sbrk+0x60>)
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d34:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <_sbrk+0x64>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	@ (8001d88 <_sbrk+0x68>)
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d42:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d207      	bcs.n	8001d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d50:	f008 f9a2 	bl	800a098 <__errno>
 8001d54:	4603      	mov	r3, r0
 8001d56:	220c      	movs	r2, #12
 8001d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	e009      	b.n	8001d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d60:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d66:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <_sbrk+0x64>)
 8001d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20020000 	.word	0x20020000
 8001d80:	00000400 	.word	0x00000400
 8001d84:	2000060c 	.word	0x2000060c
 8001d88:	20000f18 	.word	0x20000f18

08001d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <SystemInit+0x20>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <SystemInit+0x20>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001de8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001db4:	f7ff ffea 	bl	8001d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	@ (8001df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dde:	f008 f961 	bl	800a0a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7fe ffc9 	bl	8000d78 <main>
  bx  lr    
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001df4:	0800c93c 	.word	0x0800c93c
  ldr r2, =_sbss
 8001df8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001dfc:	20000f18 	.word	0x20000f18

08001e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC_IRQHandler>
	...

08001e04 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <HAL_Init+0x40>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_Init+0x40>)
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_Init+0x40>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f94f 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f808 	bl	8001e48 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8001e38:	f7ff fda8 	bl	800198c <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x54>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_InitTick+0x58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f967 	bl	800213a <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x2e>
		return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f000 f92f 	bl	80020e6 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	@ (8001ea4 <HAL_InitTick+0x5c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x4c>
		return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	20000018 	.word	0x20000018
 8001ea4:	20000014 	.word	0x20000014

08001ea8 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000018 	.word	0x20000018
 8001ecc:	20000610 	.word	0x20000610

08001ed0 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
	return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000610 	.word	0x20000610

08001ee8 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff ffee 	bl	8001ed0 <HAL_GetTick>
 8001ef4:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f00:	d005      	beq.n	8001f0e <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <HAL_Delay+0x44>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8001f0e:	bf00      	nop
 8001f10:	f7ff ffde 	bl	8001ed0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8f7      	bhi.n	8001f10 <HAL_Delay+0x28>
	}
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000018 	.word	0x20000018

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	@ (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	@ (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	@ (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	@ 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff29 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff3e 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff8e 	bl	8002024 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5d 	bl	8001fd0 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff31 	bl	8001f94 <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	@ 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e16b      	b.n	8002448 <HAL_GPIO_Init+0x2f4>
		/* Get the IO position */
		ioposition = 0x01U << position;
 8002170:	2201      	movs	r2, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	f040 815a 	bne.w	8002442 <HAL_GPIO_Init+0x2ee>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d005      	beq.n	80021a6 <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d130      	bne.n	8002208 <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 0201 	and.w	r2, r3, #1
						<< position);
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b03      	cmp	r3, #3
 8002212:	d017      	beq.n	8002244 <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d123      	bne.n	8002298 <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	08da      	lsrs	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3208      	adds	r2, #8
 8002258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225c:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	69b9      	ldr	r1, [r7, #24]
 8002294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0203 	and.w	r2, r3, #3
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80b4 	beq.w	8002442 <HAL_GPIO_Init+0x2ee>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4b60      	ldr	r3, [pc, #384]	@ (8002460 <HAL_GPIO_Init+0x30c>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002460 <HAL_GPIO_Init+0x30c>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002460 <HAL_GPIO_Init+0x30c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 80022f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002464 <HAL_GPIO_Init+0x310>)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3302      	adds	r3, #2
 80022fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002302:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	220f      	movs	r2, #15
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a52      	ldr	r2, [pc, #328]	@ (8002468 <HAL_GPIO_Init+0x314>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d02b      	beq.n	800237a <HAL_GPIO_Init+0x226>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a51      	ldr	r2, [pc, #324]	@ (800246c <HAL_GPIO_Init+0x318>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d025      	beq.n	8002376 <HAL_GPIO_Init+0x222>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a50      	ldr	r2, [pc, #320]	@ (8002470 <HAL_GPIO_Init+0x31c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01f      	beq.n	8002372 <HAL_GPIO_Init+0x21e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4f      	ldr	r2, [pc, #316]	@ (8002474 <HAL_GPIO_Init+0x320>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x21a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4e      	ldr	r2, [pc, #312]	@ (8002478 <HAL_GPIO_Init+0x324>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x216>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4d      	ldr	r2, [pc, #308]	@ (800247c <HAL_GPIO_Init+0x328>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x212>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4c      	ldr	r2, [pc, #304]	@ (8002480 <HAL_GPIO_Init+0x32c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x20e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4b      	ldr	r2, [pc, #300]	@ (8002484 <HAL_GPIO_Init+0x330>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x20a>
 800235a:	2307      	movs	r3, #7
 800235c:	e00e      	b.n	800237c <HAL_GPIO_Init+0x228>
 800235e:	2308      	movs	r3, #8
 8002360:	e00c      	b.n	800237c <HAL_GPIO_Init+0x228>
 8002362:	2306      	movs	r3, #6
 8002364:	e00a      	b.n	800237c <HAL_GPIO_Init+0x228>
 8002366:	2305      	movs	r3, #5
 8002368:	e008      	b.n	800237c <HAL_GPIO_Init+0x228>
 800236a:	2304      	movs	r3, #4
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x228>
 800236e:	2303      	movs	r3, #3
 8002370:	e004      	b.n	800237c <HAL_GPIO_Init+0x228>
 8002372:	2302      	movs	r3, #2
 8002374:	e002      	b.n	800237c <HAL_GPIO_Init+0x228>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x228>
 800237a:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f002 0203 	and.w	r2, r2, #3
 8002382:	0092      	lsls	r2, r2, #2
 8002384:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 800238c:	4935      	ldr	r1, [pc, #212]	@ (8002464 <HAL_GPIO_Init+0x310>)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 800239a:	4b3b      	ldr	r3, [pc, #236]	@ (8002488 <HAL_GPIO_Init+0x334>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x26a>
					temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 80023be:	4a32      	ldr	r2, [pc, #200]	@ (8002488 <HAL_GPIO_Init+0x334>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 80023c4:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <HAL_GPIO_Init+0x334>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x294>
					temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 80023e8:	4a27      	ldr	r2, [pc, #156]	@ (8002488 <HAL_GPIO_Init+0x334>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 80023ee:	4b26      	ldr	r3, [pc, #152]	@ (8002488 <HAL_GPIO_Init+0x334>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2be>
					temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 8002412:	4a1d      	ldr	r2, [pc, #116]	@ (8002488 <HAL_GPIO_Init+0x334>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8002418:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <HAL_GPIO_Init+0x334>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x2e8>
					temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 800243c:	4a12      	ldr	r2, [pc, #72]	@ (8002488 <HAL_GPIO_Init+0x334>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3301      	adds	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	f67f ae90 	bls.w	8002170 <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3724      	adds	r7, #36	@ 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40013800 	.word	0x40013800
 8002468:	40020000 	.word	0x40020000
 800246c:	40020400 	.word	0x40020400
 8002470:	40020800 	.word	0x40020800
 8002474:	40020c00 	.word	0x40020c00
 8002478:	40021000 	.word	0x40021000
 800247c:	40021400 	.word	0x40021400
 8002480:	40021800 	.word	0x40021800
 8002484:	40021c00 	.word	0x40021c00
 8002488:	40013c00 	.word	0x40013c00

0800248c <HAL_GPIO_ReadPin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 80024d8:	e003      	b.n	80024e2 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_HCD_Init>:
/**
 * @brief  Initialize the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd) {
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af02      	add	r7, sp, #8
 80024f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
	const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

	/* Check the HCD handle allocation */
	if (hhcd == NULL) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_HCD_Init+0x12>
		return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e059      	b.n	80025b4 <HAL_HCD_Init+0xc6>

	/* Check the parameters */
	assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
	USBx = hhcd->Instance;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

	if (hhcd->State == HAL_HCD_STATE_RESET) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_HCD_Init+0x32>
		/* Allocate lock resource and initialize it */
		hhcd->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_HCD_MspInit(hhcd);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f007 fa64 	bl	80099e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
	}

	hhcd->State = HAL_HCD_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2203      	movs	r2, #3
 8002524:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
	/* Disable DMA mode for FS instance */
	if (USBx == USB_OTG_FS) {
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800252e:	d102      	bne.n	8002536 <HAL_HCD_Init+0x48>
		hhcd->Init.dma_enable = 0U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	719a      	strb	r2, [r3, #6]
	}
#endif /* defined (USB_OTG_FS) */

	/* Disable the Interrupts */
	__HAL_HCD_DISABLE(hhcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f005 f8b5 	bl	80076aa <USB_DisableGlobalInt>

	/* Init the Core (common init.) */
	if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7c1a      	ldrb	r2, [r3, #16]
 8002548:	f88d 2000 	strb.w	r2, [sp]
 800254c:	3304      	adds	r3, #4
 800254e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002550:	f005 f836 	bl	80075c0 <USB_CoreInit>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_HCD_Init+0x78>
		hhcd->State = HAL_HCD_STATE_ERROR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e026      	b.n	80025b4 <HAL_HCD_Init+0xc6>
	}

	/* Force Host Mode */
	if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK) {
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2101      	movs	r1, #1
 800256c:	4618      	mov	r0, r3
 800256e:	f005 f8ad 	bl	80076cc <USB_SetCurrentMode>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_HCD_Init+0x96>
		hhcd->State = HAL_HCD_STATE_ERROR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e017      	b.n	80025b4 <HAL_HCD_Init+0xc6>
	}

	/* Init Host */
	if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK) {
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7c1a      	ldrb	r2, [r3, #16]
 800258c:	f88d 2000 	strb.w	r2, [sp]
 8002590:	3304      	adds	r3, #4
 8002592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002594:	f005 fa50 	bl	8007a38 <USB_HostInit>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_HCD_Init+0xbc>
		hhcd->State = HAL_HCD_STATE_ERROR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e004      	b.n	80025b4 <HAL_HCD_Init+0xc6>
	}

	hhcd->State = HAL_HCD_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

	return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_HCD_HC_Init>:
 *          This parameter can be a value from 0 to32K
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
		uint8_t epnum, uint8_t dev_address, uint8_t speed, uint8_t ep_type,
		uint16_t mps) {
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b08b      	sub	sp, #44	@ 0x2c
 80025c0:	af04      	add	r7, sp, #16
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	4608      	mov	r0, r1
 80025c6:	4611      	mov	r1, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	70fb      	strb	r3, [r7, #3]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70bb      	strb	r3, [r7, #2]
 80025d2:	4613      	mov	r3, r2
 80025d4:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status;
	uint32_t HostCoreSpeed;
	uint32_t HCcharMps = mps;
 80025d6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80025d8:	617b      	str	r3, [r7, #20]

	__HAL_LOCK(hhcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_HCD_HC_Init+0x2c>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e09d      	b.n	8002724 <HAL_HCD_HC_Init+0x168>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	hhcd->hc[ch_num].do_ping = 0U;
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3319      	adds	r3, #25
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].dev_addr = dev_address;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3314      	adds	r3, #20
 8002614:	787a      	ldrb	r2, [r7, #1]
 8002616:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ch_num = ch_num;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3315      	adds	r3, #21
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_type = ep_type;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3326      	adds	r3, #38	@ 0x26
 800263c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002640:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	78bb      	ldrb	r3, [r7, #2]
 8002646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800264a:	b2d8      	uxtb	r0, r3
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	3316      	adds	r3, #22
 800265a:	4602      	mov	r2, r0
 800265c:	701a      	strb	r2, [r3, #0]

	(void) HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fbac 	bl	8002dc0 <HAL_HCD_HC_ClearHubInfo>

	if ((epnum & 0x80U) == 0x80U) {
 8002668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800266c:	2b00      	cmp	r3, #0
 800266e:	da0a      	bge.n	8002686 <HAL_HCD_HC_Init+0xca>
		hhcd->hc[ch_num].ep_is_in = 1U;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3317      	adds	r3, #23
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e009      	b.n	800269a <HAL_HCD_HC_Init+0xde>
	} else {
		hhcd->hc[ch_num].ep_is_in = 0U;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3317      	adds	r3, #23
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
	}

	HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f005 fb04 	bl	8007cac <USB_GetHostSpeed>
 80026a4:	6138      	str	r0, [r7, #16]

	if (ep_type == EP_TYPE_ISOC) {
 80026a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10b      	bne.n	80026c6 <HAL_HCD_HC_Init+0x10a>
		/* FS device plugged to HS HUB */
		if ((speed == HCD_DEVICE_SPEED_FULL)
 80026ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d107      	bne.n	80026c6 <HAL_HCD_HC_Init+0x10a>
				&& (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED)) {
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <HAL_HCD_HC_Init+0x10a>
			if (HCcharMps > ISO_SPLT_MPS) {
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2bbc      	cmp	r3, #188	@ 0xbc
 80026c0:	d901      	bls.n	80026c6 <HAL_HCD_HC_Init+0x10a>
				/* ISO Max Packet Size for Split mode */
				HCcharMps = ISO_SPLT_MPS;
 80026c2:	23bc      	movs	r3, #188	@ 0xbc
 80026c4:	617b      	str	r3, [r7, #20]
			}
		}
	}

	hhcd->hc[ch_num].speed = speed;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3318      	adds	r3, #24
 80026d6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80026da:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].max_packet = (uint16_t) HCcharMps;
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	b298      	uxth	r0, r3
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3328      	adds	r3, #40	@ 0x28
 80026f0:	4602      	mov	r2, r0
 80026f2:	801a      	strh	r2, [r3, #0]

	status = USB_HC_Init(hhcd->Instance, ch_num, epnum, dev_address, speed,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	787c      	ldrb	r4, [r7, #1]
 80026fe:	78ba      	ldrb	r2, [r7, #2]
 8002700:	78f9      	ldrb	r1, [r7, #3]
 8002702:	9302      	str	r3, [sp, #8]
 8002704:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4623      	mov	r3, r4
 8002712:	f005 faf3 	bl	8007cfc <USB_HC_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	73fb      	strb	r3, [r7, #15]
			ep_type, (uint16_t) HCcharMps);

	__HAL_UNLOCK(hhcd);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return status;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd90      	pop	{r4, r7, pc}

0800272c <HAL_HCD_HC_Halt>:
 * @param  hhcd HCD handle
 * @param  ch_num Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]

	__HAL_LOCK(hhcd);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_HCD_HC_Halt+0x1e>
 8002746:	2302      	movs	r3, #2
 8002748:	e00f      	b.n	800276a <HAL_HCD_HC_Halt+0x3e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	(void) USB_HC_Halt(hhcd->Instance, ch_num);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f005 fe85 	bl	800846a <USB_HC_Halt>
	__HAL_UNLOCK(hhcd);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_HCD_HC_SubmitRequest>:
 *           0 : do ping inactive / 1 : do ping active
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_SubmitRequest(HCD_HandleTypeDef *hhcd,
		uint8_t ch_num, uint8_t direction, uint8_t ep_type, uint8_t token,
		uint8_t *pbuff, uint16_t length, uint8_t do_ping) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	70fb      	strb	r3, [r7, #3]
 8002786:	460b      	mov	r3, r1
 8002788:	70bb      	strb	r3, [r7, #2]
 800278a:	4613      	mov	r3, r2
 800278c:	707b      	strb	r3, [r7, #1]
	hhcd->hc[ch_num].ep_is_in = direction;
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	3317      	adds	r3, #23
 800279e:	78ba      	ldrb	r2, [r7, #2]
 80027a0:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_type = ep_type;
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	3326      	adds	r3, #38	@ 0x26
 80027b2:	787a      	ldrb	r2, [r7, #1]
 80027b4:	701a      	strb	r2, [r3, #0]

	if (token == 0U) {
 80027b6:	7c3b      	ldrb	r3, [r7, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d114      	bne.n	80027e6 <HAL_HCD_HC_SubmitRequest+0x72>
		hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	332a      	adds	r3, #42	@ 0x2a
 80027cc:	2203      	movs	r2, #3
 80027ce:	701a      	strb	r2, [r3, #0]
		hhcd->hc[ch_num].do_ping = do_ping;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3319      	adds	r3, #25
 80027e0:	7f3a      	ldrb	r2, [r7, #28]
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e009      	b.n	80027fa <HAL_HCD_HC_SubmitRequest+0x86>
	} else {
		hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	332a      	adds	r3, #42	@ 0x2a
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
	}

	/* Manage Data Toggle */
	switch (ep_type) {
 80027fa:	787b      	ldrb	r3, [r7, #1]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	f200 8102 	bhi.w	8002a06 <HAL_HCD_HC_SubmitRequest+0x292>
 8002802:	a201      	add	r2, pc, #4	@ (adr r2, 8002808 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	08002819 	.word	0x08002819
 800280c:	080029f1 	.word	0x080029f1
 8002810:	080028dd 	.word	0x080028dd
 8002814:	08002967 	.word	0x08002967
	case EP_TYPE_CTRL:
		if (token == 1U) /* send data */
 8002818:	7c3b      	ldrb	r3, [r7, #16]
 800281a:	2b01      	cmp	r3, #1
 800281c:	f040 80f5 	bne.w	8002a0a <HAL_HCD_HC_SubmitRequest+0x296>
		{
			if (direction == 0U) {
 8002820:	78bb      	ldrb	r3, [r7, #2]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d12d      	bne.n	8002882 <HAL_HCD_HC_SubmitRequest+0x10e>
				if (length == 0U) {
 8002826:	8b3b      	ldrh	r3, [r7, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_HCD_HC_SubmitRequest+0xcc>
					/* For Status OUT stage, Length == 0U, Status Out PID = 1 */
					hhcd->hc[ch_num].toggle_out = 1U;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	333d      	adds	r3, #61	@ 0x3d
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
				}

				/* Set the Data Toggle bit as per the Flag */
				if (hhcd->hc[ch_num].toggle_out == 0U) {
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	333d      	adds	r3, #61	@ 0x3d
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <HAL_HCD_HC_SubmitRequest+0xf8>
					/* Put the PID 0 */
					hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	332a      	adds	r3, #42	@ 0x2a
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
						hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
					}
				}
			}
		}
		break;
 800286a:	e0ce      	b.n	8002a0a <HAL_HCD_HC_SubmitRequest+0x296>
					hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	332a      	adds	r3, #42	@ 0x2a
 800287c:	2202      	movs	r2, #2
 800287e:	701a      	strb	r2, [r3, #0]
		break;
 8002880:	e0c3      	b.n	8002a0a <HAL_HCD_HC_SubmitRequest+0x296>
				if (hhcd->hc[ch_num].do_ssplit == 1U) {
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	331a      	adds	r3, #26
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	f040 80b8 	bne.w	8002a0a <HAL_HCD_HC_SubmitRequest+0x296>
					if (hhcd->hc[ch_num].toggle_in == 0U) {
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	333c      	adds	r3, #60	@ 0x3c
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10a      	bne.n	80028c6 <HAL_HCD_HC_SubmitRequest+0x152>
						hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	332a      	adds	r3, #42	@ 0x2a
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
		break;
 80028c4:	e0a1      	b.n	8002a0a <HAL_HCD_HC_SubmitRequest+0x296>
						hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	332a      	adds	r3, #42	@ 0x2a
 80028d6:	2202      	movs	r2, #2
 80028d8:	701a      	strb	r2, [r3, #0]
		break;
 80028da:	e096      	b.n	8002a0a <HAL_HCD_HC_SubmitRequest+0x296>

	case EP_TYPE_BULK:
		if (direction == 0U) {
 80028dc:	78bb      	ldrb	r3, [r7, #2]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d120      	bne.n	8002924 <HAL_HCD_HC_SubmitRequest+0x1b0>
			/* Set the Data Toggle bit as per the Flag */
			if (hhcd->hc[ch_num].toggle_out == 0U) {
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	333d      	adds	r3, #61	@ 0x3d
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <HAL_HCD_HC_SubmitRequest+0x19a>
				/* Put the PID 0 */
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	332a      	adds	r3, #42	@ 0x2a
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
			} else {
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
			}
		}

		break;
 800290c:	e07e      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	332a      	adds	r3, #42	@ 0x2a
 800291e:	2202      	movs	r2, #2
 8002920:	701a      	strb	r2, [r3, #0]
		break;
 8002922:	e073      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x298>
			if (hhcd->hc[ch_num].toggle_in == 0U) {
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	333c      	adds	r3, #60	@ 0x3c
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <HAL_HCD_HC_SubmitRequest+0x1dc>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	332a      	adds	r3, #42	@ 0x2a
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
		break;
 800294e:	e05d      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	332a      	adds	r3, #42	@ 0x2a
 8002960:	2202      	movs	r2, #2
 8002962:	701a      	strb	r2, [r3, #0]
		break;
 8002964:	e052      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x298>
	case EP_TYPE_INTR:
		if (direction == 0U) {
 8002966:	78bb      	ldrb	r3, [r7, #2]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d120      	bne.n	80029ae <HAL_HCD_HC_SubmitRequest+0x23a>
			/* Set the Data Toggle bit as per the Flag */
			if (hhcd->hc[ch_num].toggle_out == 0U) {
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	333d      	adds	r3, #61	@ 0x3d
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10a      	bne.n	8002998 <HAL_HCD_HC_SubmitRequest+0x224>
				/* Put the PID 0 */
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	332a      	adds	r3, #42	@ 0x2a
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
			} else {
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
			}
		}
		break;
 8002996:	e039      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	332a      	adds	r3, #42	@ 0x2a
 80029a8:	2202      	movs	r2, #2
 80029aa:	701a      	strb	r2, [r3, #0]
		break;
 80029ac:	e02e      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x298>
			if (hhcd->hc[ch_num].toggle_in == 0U) {
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	333c      	adds	r3, #60	@ 0x3c
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_HCD_HC_SubmitRequest+0x266>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	332a      	adds	r3, #42	@ 0x2a
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
		break;
 80029d8:	e018      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	332a      	adds	r3, #42	@ 0x2a
 80029ea:	2202      	movs	r2, #2
 80029ec:	701a      	strb	r2, [r3, #0]
		break;
 80029ee:	e00d      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x298>

	case EP_TYPE_ISOC:
		hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	332a      	adds	r3, #42	@ 0x2a
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
		break;
 8002a04:	e002      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x298>

	default:
		break;
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x298>
		break;
 8002a0a:	bf00      	nop
	}

	hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	332c      	adds	r3, #44	@ 0x2c
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	601a      	str	r2, [r3, #0]
	hhcd->hc[ch_num].xfer_len = length;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	8b39      	ldrh	r1, [r7, #24]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4403      	add	r3, r0
 8002a30:	3334      	adds	r3, #52	@ 0x34
 8002a32:	6019      	str	r1, [r3, #0]
	hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	334c      	adds	r3, #76	@ 0x4c
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].xfer_count = 0U;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3338      	adds	r3, #56	@ 0x38
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
	hhcd->hc[ch_num].ch_num = ch_num;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	3315      	adds	r3, #21
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].state = HC_IDLE;
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	334d      	adds	r3, #77	@ 0x4d
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]

	return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num],
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	3310      	adds	r3, #16
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	1d19      	adds	r1, r3, #4
			(uint8_t) hhcd->Init.dma_enable);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	799b      	ldrb	r3, [r3, #6]
	return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num],
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f005 fa58 	bl	8007f54 <USB_HC_StartXfer>
 8002aa4:	4603      	mov	r3, r0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop

08002ab0 <HAL_HCD_IRQHandler>:
/**
 * @brief  Handle HCD interrupt request.
 * @param  hhcd HCD handle
 * @retval None
 */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	613b      	str	r3, [r7, #16]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	60fb      	str	r3, [r7, #12]
	uint32_t i;
	uint32_t interrupt;

	/* Ensure that we are in device mode */
	if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST) {
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 ff76 	bl	80079b8 <USB_GetMode>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	f040 80fb 	bne.w	8002cca <HAL_HCD_IRQHandler+0x21a>
		/* Avoid spurious interrupt */
		if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) {
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f004 ff39 	bl	8007950 <USB_ReadInterrupts>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80f1 	beq.w	8002cc8 <HAL_HCD_IRQHandler+0x218>
			return;
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f004 ff30 	bl	8007950 <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002afa:	d104      	bne.n	8002b06 <HAL_HCD_IRQHandler+0x56>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b04:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR)) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 ff20 	bl	8007950 <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b1a:	d104      	bne.n	8002b26 <HAL_HCD_IRQHandler+0x76>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b24:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE)) {
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 ff10 	bl	8007950 <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b3a:	d104      	bne.n	8002b46 <HAL_HCD_IRQHandler+0x96>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b44:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS)) {
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 ff00 	bl	8007950 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d103      	bne.n	8002b62 <HAL_HCD_IRQHandler+0xb2>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	615a      	str	r2, [r3, #20]
		}

		/* Handle Host Disconnect Interrupts */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT)) {
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 fef2 	bl	8007950 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b76:	d120      	bne.n	8002bba <HAL_HCD_IRQHandler+0x10a>
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002b80:	615a      	str	r2, [r3, #20]

			if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U) {
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d113      	bne.n	8002bba <HAL_HCD_IRQHandler+0x10a>
				/* Flush USB Fifo */
				(void) USB_FlushTxFifo(USBx, 0x10U);
 8002b92:	2110      	movs	r1, #16
 8002b94:	6938      	ldr	r0, [r7, #16]
 8002b96:	f004 fde5 	bl	8007764 <USB_FlushTxFifo>
				(void) USB_FlushRxFifo(USBx);
 8002b9a:	6938      	ldr	r0, [r7, #16]
 8002b9c:	f004 fe14 	bl	80077c8 <USB_FlushRxFifo>

				if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7a5b      	ldrb	r3, [r3, #9]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d105      	bne.n	8002bb4 <HAL_HCD_IRQHandler+0x104>
					/* Restore FS Clock */
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f005 f806 	bl	8007bc0 <USB_InitFSLSPClkSel>

				/* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
				HAL_HCD_Disconnect_Callback(hhcd);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f006 ff95 	bl	8009ae4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
			}
		}

		/* Handle Host Port Interrupts */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT)) {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 fec6 	bl	8007950 <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bce:	d102      	bne.n	8002bd6 <HAL_HCD_IRQHandler+0x126>
			HCD_Port_IRQHandler(hhcd);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f001 fd31 	bl	8004638 <HCD_Port_IRQHandler>
		}

		/* Handle Host SOF Interrupt */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF)) {
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f004 feb8 	bl	8007950 <USB_ReadInterrupts>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d106      	bne.n	8002bf8 <HAL_HCD_IRQHandler+0x148>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
			HAL_HCD_SOF_Callback(hhcd);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f006 ff5e 	bl	8009aac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	615a      	str	r2, [r3, #20]
		}

		/* Handle Host channel Interrupt */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT)) {
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 fea7 	bl	8007950 <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c0c:	d139      	bne.n	8002c82 <HAL_HCD_IRQHandler+0x1d2>
			interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f005 fc18 	bl	8008448 <USB_HC_ReadInterrupt>
 8002c18:	60b8      	str	r0, [r7, #8]
			for (i = 0U; i < hhcd->Init.Host_channels; i++) {
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e025      	b.n	8002c6c <HAL_HCD_IRQHandler+0x1bc>
				if ((interrupt & (1UL << (i & 0xFU))) != 0U) {
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d018      	beq.n	8002c66 <HAL_HCD_IRQHandler+0x1b6>
					if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c4a:	d106      	bne.n	8002c5a <HAL_HCD_IRQHandler+0x1aa>
							== USB_OTG_HCCHAR_EPDIR) {
						HCD_HC_IN_IRQHandler(hhcd, (uint8_t) i);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8e9 	bl	8002e2a <HCD_HC_IN_IRQHandler>
 8002c58:	e005      	b.n	8002c66 <HAL_HCD_IRQHandler+0x1b6>
					} else {
						HCD_HC_OUT_IRQHandler(hhcd, (uint8_t) i);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 ff4b 	bl	8003afc <HCD_HC_OUT_IRQHandler>
			for (i = 0U; i < hhcd->Init.Host_channels; i++) {
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	795b      	ldrb	r3, [r3, #5]
 8002c70:	461a      	mov	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d3d3      	bcc.n	8002c20 <HAL_HCD_IRQHandler+0x170>
					}
				}
			}
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c80:	615a      	str	r2, [r3, #20]
		}

		/* Handle Rx Queue Level Interrupts */
		if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U) {
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 fe62 	bl	8007950 <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d101      	bne.n	8002c9a <HAL_HCD_IRQHandler+0x1ea>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_HCD_IRQHandler+0x1ec>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d014      	beq.n	8002cca <HAL_HCD_IRQHandler+0x21a>
			USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0210 	bic.w	r2, r2, #16
 8002cae:	619a      	str	r2, [r3, #24]

			HCD_RXQLVL_IRQHandler(hhcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f001 fbe2 	bl	800447a <HCD_RXQLVL_IRQHandler>

			USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0210 	orr.w	r2, r2, #16
 8002cc4:	619a      	str	r2, [r3, #24]
 8002cc6:	e000      	b.n	8002cca <HAL_HCD_IRQHandler+0x21a>
			return;
 8002cc8:	bf00      	nop
		}
	}
}
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_HCD_Start>:
/**
 * @brief  Start the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	__HAL_LOCK(hhcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_HCD_Start+0x16>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e013      	b.n	8002d0e <HAL_HCD_Start+0x3e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	/* Enable port power */
	(void) USB_DriveVbus(hhcd->Instance, 1U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f004 ffa0 	bl	8007c3a <USB_DriveVbus>

	/* Enable global interrupt */
	__HAL_HCD_ENABLE(hhcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 fcc2 	bl	8007688 <USB_EnableGlobalInt>
	__HAL_UNLOCK(hhcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_HCD_Stop>:
 * @brief  Stop the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd) {
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
	__HAL_LOCK(hhcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_HCD_Stop+0x16>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e00d      	b.n	8002d48 <HAL_HCD_Stop+0x32>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	(void) USB_StopHost(hhcd->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f005 fcf3 	bl	8008724 <USB_StopHost>
	__HAL_UNLOCK(hhcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_HCD_HC_GetURBState>:
 *            URB_NYET/
 *            URB_ERROR/
 *            URB_STALL
 */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd,
		uint8_t chnum) {
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
	return hhcd->hc[chnum].urb_state;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	334c      	adds	r3, #76	@ 0x4c
 8002d6c:	781b      	ldrb	r3, [r3, #0]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_HCD_HC_GetXferCount>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval last transfer size in byte
 */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum) {
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	70fb      	strb	r3, [r7, #3]
	return hhcd->hc[chnum].xfer_count;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3338      	adds	r3, #56	@ 0x38
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_HCD_GetCurrentFrame>:
/**
 * @brief  Return the current Host frame number.
 * @param  hhcd HCD handle
 * @retval Current Host frame number
 */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	return (USB_GetCurrentFrame(hhcd->Instance));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 ff92 	bl	8007cda <USB_GetCurrentFrame>
 8002db6:	4603      	mov	r3, r0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_HCD_HC_ClearHubInfo>:
 * @param  ch_num Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd,
		uint8_t ch_num) {
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
	hhcd->hc[ch_num].do_ssplit = 0U;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	331a      	adds	r3, #26
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].do_csplit = 0U;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	331b      	adds	r3, #27
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].hub_addr = 0U;
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	3325      	adds	r3, #37	@ 0x25
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3324      	adds	r3, #36	@ 0x24
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HCD_HC_IN_IRQHandler>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval none
 */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum) {
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	70fb      	strb	r3, [r7, #3]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg;

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR)) {
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f004 fd94 	bl	8007976 <USB_ReadChInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d11a      	bne.n	8002e8e <HCD_HC_IN_IRQHandler+0x64>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e64:	461a      	mov	r2, r3
 8002e66:	2304      	movs	r3, #4
 8002e68:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	334d      	adds	r3, #77	@ 0x4d
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f005 faef 	bl	800846a <USB_HC_Halt>
 8002e8c:	e09e      	b.n	8002fcc <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR)) {
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f004 fd6d 	bl	8007976 <USB_ReadChInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea6:	d11b      	bne.n	8002ee0 <HCD_HC_IN_IRQHandler+0xb6>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eba:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_BBLERR;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	334d      	adds	r3, #77	@ 0x4d
 8002ecc:	2208      	movs	r2, #8
 8002ece:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f005 fac6 	bl	800846a <USB_HC_Halt>
 8002ede:	e075      	b.n	8002fcc <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL)) {
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f004 fd44 	bl	8007976 <USB_ReadChInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d11a      	bne.n	8002f2e <HCD_HC_IN_IRQHandler+0x104>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f04:	461a      	mov	r2, r3
 8002f06:	2308      	movs	r3, #8
 8002f08:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_STALL;
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	334d      	adds	r3, #77	@ 0x4d
 8002f1a:	2206      	movs	r2, #6
 8002f1c:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f005 fa9f 	bl	800846a <USB_HC_Halt>
 8002f2c:	e04e      	b.n	8002fcc <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR)) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 fd1d 	bl	8007976 <USB_ReadChInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f46:	d11b      	bne.n	8002f80 <HCD_HC_IN_IRQHandler+0x156>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f5a:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	334d      	adds	r3, #77	@ 0x4d
 8002f6c:	2209      	movs	r2, #9
 8002f6e:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f005 fa76 	bl	800846a <USB_HC_Halt>
 8002f7e:	e025      	b.n	8002fcc <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR)) {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 fcf4 	bl	8007976 <USB_ReadChInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f94:	2b80      	cmp	r3, #128	@ 0x80
 8002f96:	d119      	bne.n	8002fcc <HCD_HC_IN_IRQHandler+0x1a2>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	334d      	adds	r3, #77	@ 0x4d
 8002fba:	2207      	movs	r2, #7
 8002fbc:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f005 fa4f 	bl	800846a <USB_HC_Halt>
	} else {
		/* ... */
	}

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR)) {
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f004 fcce 	bl	8007976 <USB_ReadChInterrupts>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fe4:	d112      	bne.n	800300c <HCD_HC_IN_IRQHandler+0x1e2>
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f005 fa3b 	bl	800846a <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003000:	461a      	mov	r2, r3
 8003002:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003006:	6093      	str	r3, [r2, #8]
 8003008:	f000 bd75 	b.w	8003af6 <HCD_HC_IN_IRQHandler+0xccc>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC)) {
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f004 fcae 	bl	8007976 <USB_ReadChInterrupts>
 800301a:	4603      	mov	r3, r0
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	f040 8128 	bne.w	8003276 <HCD_HC_IN_IRQHandler+0x44c>
		/* Clear any pending ACK IT */
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003032:	461a      	mov	r2, r3
 8003034:	2320      	movs	r3, #32
 8003036:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_csplit == 1U) {
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	331b      	adds	r3, #27
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d119      	bne.n	8003082 <HCD_HC_IN_IRQHandler+0x258>
			hhcd->hc[chnum].do_csplit = 0U;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	331b      	adds	r3, #27
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	0151      	lsls	r1, r2, #5
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	440a      	add	r2, r1
 8003078:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800307c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003080:	6053      	str	r3, [r2, #4]
		}

		if (hhcd->Init.dma_enable != 0U) {
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	799b      	ldrb	r3, [r3, #6]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01b      	beq.n	80030c2 <HCD_HC_IN_IRQHandler+0x298>
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3330      	adds	r3, #48	@ 0x30
 800309a:	6819      	ldr	r1, [r3, #0]
					- (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 80030ae:	78fa      	ldrb	r2, [r7, #3]
					- (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030b0:	1ac9      	subs	r1, r1, r3
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4403      	add	r3, r0
 80030be:	3338      	adds	r3, #56	@ 0x38
 80030c0:	6019      	str	r1, [r3, #0]
		}

		hhcd->hc[chnum].state = HC_XFRC;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	334d      	adds	r3, #77	@ 0x4d
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
		hhcd->hc[chnum].ErrCnt = 0U;
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3344      	adds	r3, #68	@ 0x44
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f6:	461a      	mov	r2, r3
 80030f8:	2301      	movs	r3, #1
 80030fa:	6093      	str	r3, [r2, #8]

		if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	3326      	adds	r3, #38	@ 0x26
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HCD_HC_IN_IRQHandler+0x2fe>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	3326      	adds	r3, #38	@ 0x26
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d110      	bne.n	800314a <HCD_HC_IN_IRQHandler+0x320>
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f005 f99a 	bl	800846a <USB_HC_Halt>
			__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003142:	461a      	mov	r2, r3
 8003144:	2310      	movs	r3, #16
 8003146:	6093      	str	r3, [r2, #8]
 8003148:	e03d      	b.n	80031c6 <HCD_HC_IN_IRQHandler+0x39c>
		} else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3326      	adds	r3, #38	@ 0x26
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d00a      	beq.n	8003176 <HCD_HC_IN_IRQHandler+0x34c>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC)) {
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3326      	adds	r3, #38	@ 0x26
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d127      	bne.n	80031c6 <HCD_HC_IN_IRQHandler+0x39c>
			USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	0151      	lsls	r1, r2, #5
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	440a      	add	r2, r1
 800318c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003190:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003194:	6013      	str	r3, [r2, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	334c      	adds	r3, #76	@ 0x4c
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
			HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	334c      	adds	r3, #76	@ 0x4c
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f006 fc9d 	bl	8009b00 <HAL_HCD_HC_NotifyURBChange_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		} else {
			/* ... */
		}

		if (hhcd->Init.dma_enable == 1U) {
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	799b      	ldrb	r3, [r3, #6]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d13b      	bne.n	8003246 <HCD_HC_IN_IRQHandler+0x41c>
			if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U)
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3338      	adds	r3, #56	@ 0x38
 80031de:	6819      	ldr	r1, [r3, #0]
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4403      	add	r3, r0
 80031ee:	3328      	adds	r3, #40	@ 0x28
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	440b      	add	r3, r1
 80031f4:	1e59      	subs	r1, r3, #1
					/ hhcd->hc[chnum].max_packet) & 1U) != 0U) {
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4403      	add	r3, r0
 8003204:	3328      	adds	r3, #40	@ 0x28
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	fbb1 f3f3 	udiv	r3, r1, r3
 800320c:	f003 0301 	and.w	r3, r3, #1
			if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U)
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8470 	beq.w	8003af6 <HCD_HC_IN_IRQHandler+0xccc>
				hhcd->hc[chnum].toggle_in ^= 1U;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	333c      	adds	r3, #60	@ 0x3c
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	f083 0301 	eor.w	r3, r3, #1
 800322e:	b2d8      	uxtb	r0, r3
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	333c      	adds	r3, #60	@ 0x3c
 800323e:	4602      	mov	r2, r0
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	f000 bc58 	b.w	8003af6 <HCD_HC_IN_IRQHandler+0xccc>
			}
		} else {
			hhcd->hc[chnum].toggle_in ^= 1U;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	333c      	adds	r3, #60	@ 0x3c
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	f083 0301 	eor.w	r3, r3, #1
 800325e:	b2d8      	uxtb	r0, r3
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	333c      	adds	r3, #60	@ 0x3c
 800326e:	4602      	mov	r2, r0
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	f000 bc40 	b.w	8003af6 <HCD_HC_IN_IRQHandler+0xccc>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK)) {
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f004 fb79 	bl	8007976 <USB_ReadChInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b20      	cmp	r3, #32
 800328c:	d131      	bne.n	80032f2 <HCD_HC_IN_IRQHandler+0x4c8>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800329a:	461a      	mov	r2, r3
 800329c:	2320      	movs	r3, #32
 800329e:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_ssplit == 1U) {
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	331a      	adds	r3, #26
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	f040 841f 	bne.w	8003af6 <HCD_HC_IN_IRQHandler+0xccc>
			hhcd->hc[chnum].do_csplit = 1U;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	331b      	adds	r3, #27
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_ACK;
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	334d      	adds	r3, #77	@ 0x4d
 80032dc:	2203      	movs	r2, #3
 80032de:	701a      	strb	r2, [r3, #0]

			(void) USB_HC_Halt(hhcd->Instance, chnum);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f005 f8be 	bl	800846a <USB_HC_Halt>
 80032ee:	f000 bc02 	b.w	8003af6 <HCD_HC_IN_IRQHandler+0xccc>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH)) {
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 fb3b 	bl	8007976 <USB_ReadChInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	f040 8305 	bne.w	8003916 <HCD_HC_IN_IRQHandler+0xaec>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003318:	461a      	mov	r2, r3
 800331a:	2302      	movs	r3, #2
 800331c:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].state == HC_XFRC) {
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	334d      	adds	r3, #77	@ 0x4d
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d114      	bne.n	800335e <HCD_HC_IN_IRQHandler+0x534>
			hhcd->hc[chnum].state = HC_HALTED;
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	334d      	adds	r3, #77	@ 0x4d
 8003344:	2202      	movs	r2, #2
 8003346:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	334c      	adds	r3, #76	@ 0x4c
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e2cc      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0xace>
		} else if (hhcd->hc[chnum].state == HC_STALL) {
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	334d      	adds	r3, #77	@ 0x4d
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b06      	cmp	r3, #6
 8003372:	d114      	bne.n	800339e <HCD_HC_IN_IRQHandler+0x574>
			hhcd->hc[chnum].state = HC_HALTED;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	334d      	adds	r3, #77	@ 0x4d
 8003384:	2202      	movs	r2, #2
 8003386:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_STALL;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334c      	adds	r3, #76	@ 0x4c
 8003398:	2205      	movs	r2, #5
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e2ac      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0xace>
		} else if ((hhcd->hc[chnum].state == HC_XACTERR)
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	334d      	adds	r3, #77	@ 0x4d
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b07      	cmp	r3, #7
 80033b2:	d00b      	beq.n	80033cc <HCD_HC_IN_IRQHandler+0x5a2>
				|| (hhcd->hc[chnum].state == HC_DATATGLERR)) {
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	334d      	adds	r3, #77	@ 0x4d
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b09      	cmp	r3, #9
 80033c8:	f040 80a6 	bne.w	8003518 <HCD_HC_IN_IRQHandler+0x6ee>
			hhcd->hc[chnum].state = HC_HALTED;
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	334d      	adds	r3, #77	@ 0x4d
 80033dc:	2202      	movs	r2, #2
 80033de:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	3344      	adds	r3, #68	@ 0x44
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	1c59      	adds	r1, r3, #1
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4403      	add	r3, r0
 8003400:	3344      	adds	r3, #68	@ 0x44
 8003402:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3344      	adds	r3, #68	@ 0x44
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d943      	bls.n	80034a2 <HCD_HC_IN_IRQHandler+0x678>
				hhcd->hc[chnum].ErrCnt = 0U;
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	3344      	adds	r3, #68	@ 0x44
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]

				if (hhcd->hc[chnum].do_ssplit == 1U) {
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	331a      	adds	r3, #26
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d123      	bne.n	800348c <HCD_HC_IN_IRQHandler+0x662>
					hhcd->hc[chnum].do_csplit = 0U;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	331b      	adds	r3, #27
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
					hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	331c      	adds	r3, #28
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
					__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	0151      	lsls	r1, r2, #5
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	440a      	add	r2, r1
 8003482:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800348a:	6053      	str	r3, [r2, #4]
				}

				hhcd->hc[chnum].urb_state = URB_ERROR;
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	334c      	adds	r3, #76	@ 0x4c
 800349c:	2204      	movs	r2, #4
 800349e:	701a      	strb	r2, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80034a0:	e229      	b.n	80038f6 <HCD_HC_IN_IRQHandler+0xacc>
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	334c      	adds	r3, #76	@ 0x4c
 80034b2:	2202      	movs	r2, #2
 80034b4:	701a      	strb	r2, [r3, #0]

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	3326      	adds	r3, #38	@ 0x26
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00b      	beq.n	80034e4 <HCD_HC_IN_IRQHandler+0x6ba>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	3326      	adds	r3, #38	@ 0x26
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	f040 8209 	bne.w	80038f6 <HCD_HC_IN_IRQHandler+0xacc>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034fa:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003502:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003510:	461a      	mov	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6013      	str	r3, [r2, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003516:	e1ee      	b.n	80038f6 <HCD_HC_IN_IRQHandler+0xacc>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_NYET) {
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	334d      	adds	r3, #77	@ 0x4d
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b05      	cmp	r3, #5
 800352c:	f040 80c8 	bne.w	80036c0 <HCD_HC_IN_IRQHandler+0x896>
			hhcd->hc[chnum].state = HC_HALTED;
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	334d      	adds	r3, #77	@ 0x4d
 8003540:	2202      	movs	r2, #2
 8003542:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	331b      	adds	r3, #27
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	f040 81ce 	bne.w	80038f8 <HCD_HC_IN_IRQHandler+0xace>
				if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR) {
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3326      	adds	r3, #38	@ 0x26
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d16b      	bne.n	800364a <HCD_HC_IN_IRQHandler+0x820>
					hhcd->hc[chnum].NyetErrCnt++;
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3348      	adds	r3, #72	@ 0x48
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	1c59      	adds	r1, r3, #1
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4403      	add	r3, r0
 8003592:	3348      	adds	r3, #72	@ 0x48
 8003594:	6019      	str	r1, [r3, #0]
					if (hhcd->hc[chnum].NyetErrCnt > 2U) {
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3348      	adds	r3, #72	@ 0x48
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d943      	bls.n	8003634 <HCD_HC_IN_IRQHandler+0x80a>
						hhcd->hc[chnum].NyetErrCnt = 0U;
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	3348      	adds	r3, #72	@ 0x48
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
						hhcd->hc[chnum].do_csplit = 0U;
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	331b      	adds	r3, #27
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]

						if (hhcd->hc[chnum].ErrCnt < 3U) {
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3344      	adds	r3, #68	@ 0x44
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d809      	bhi.n	80035fe <HCD_HC_IN_IRQHandler+0x7d4>
							hhcd->hc[chnum].ep_ss_schedule = 1U;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	331c      	adds	r3, #28
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
						}
						__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	440a      	add	r2, r1
 8003614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361c:	6053      	str	r3, [r2, #4]
						hhcd->hc[chnum].urb_state = URB_ERROR;
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	334c      	adds	r3, #76	@ 0x4c
 800362e:	2204      	movs	r2, #4
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e014      	b.n	800365e <HCD_HC_IN_IRQHandler+0x834>
					} else {
						hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334c      	adds	r3, #76	@ 0x4c
 8003644:	2202      	movs	r2, #2
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e009      	b.n	800365e <HCD_HC_IN_IRQHandler+0x834>
					}
				} else {
					hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	334c      	adds	r3, #76	@ 0x4c
 800365a:	2202      	movs	r2, #2
 800365c:	701a      	strb	r2, [r3, #0]
				}

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3326      	adds	r3, #38	@ 0x26
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <HCD_HC_IN_IRQHandler+0x862>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	3326      	adds	r3, #38	@ 0x26
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b02      	cmp	r3, #2
 8003688:	f040 8136 	bne.w	80038f8 <HCD_HC_IN_IRQHandler+0xace>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036a2:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036aa:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b8:	461a      	mov	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e11b      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0xace>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_ACK) {
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334d      	adds	r3, #77	@ 0x4d
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	f040 8081 	bne.w	80037da <HCD_HC_IN_IRQHandler+0x9b0>
			hhcd->hc[chnum].state = HC_HALTED;
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	334d      	adds	r3, #77	@ 0x4d
 80036e8:	2202      	movs	r2, #2
 80036ea:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	331b      	adds	r3, #27
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	f040 80fa 	bne.w	80038f8 <HCD_HC_IN_IRQHandler+0xace>
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	334c      	adds	r3, #76	@ 0x4c
 8003714:	2202      	movs	r2, #2
 8003716:	701a      	strb	r2, [r3, #0]

				/* Set Complete split and re-activate the channel */
				USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	440a      	add	r2, r1
 800372e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003736:	6053      	str	r3, [r2, #4]
				USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	0151      	lsls	r1, r2, #5
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	440a      	add	r2, r1
 800374e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003756:	60d3      	str	r3, [r2, #12]
				USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	0151      	lsls	r1, r2, #5
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	440a      	add	r2, r1
 800376e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003772:	f023 0320 	bic.w	r3, r3, #32
 8003776:	60d3      	str	r3, [r2, #12]

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3326      	adds	r3, #38	@ 0x26
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HCD_HC_IN_IRQHandler+0x97c>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3326      	adds	r3, #38	@ 0x26
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	f040 80a9 	bne.w	80038f8 <HCD_HC_IN_IRQHandler+0xace>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037bc:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037c4:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e08e      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0xace>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_NAK) {
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	334d      	adds	r3, #77	@ 0x4d
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d143      	bne.n	8003878 <HCD_HC_IN_IRQHandler+0xa4e>
			hhcd->hc[chnum].state = HC_HALTED;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	334d      	adds	r3, #77	@ 0x4d
 8003800:	2202      	movs	r2, #2
 8003802:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	334c      	adds	r3, #76	@ 0x4c
 8003814:	2202      	movs	r2, #2
 8003816:	701a      	strb	r2, [r3, #0]

			if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3326      	adds	r3, #38	@ 0x26
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HCD_HC_IN_IRQHandler+0xa1a>
					|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3326      	adds	r3, #38	@ 0x26
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d159      	bne.n	80038f8 <HCD_HC_IN_IRQHandler+0xace>
				/* re-activate the channel */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800385a:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003862:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003870:	461a      	mov	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e03f      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0xace>
			}
		} else if (hhcd->hc[chnum].state == HC_BBLERR) {
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	334d      	adds	r3, #77	@ 0x4d
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b08      	cmp	r3, #8
 800388c:	d126      	bne.n	80038dc <HCD_HC_IN_IRQHandler+0xab2>
			hhcd->hc[chnum].state = HC_HALTED;
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	334d      	adds	r3, #77	@ 0x4d
 800389e:	2202      	movs	r2, #2
 80038a0:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	3344      	adds	r3, #68	@ 0x44
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	1c59      	adds	r1, r3, #1
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4403      	add	r3, r0
 80038c2:	3344      	adds	r3, #68	@ 0x44
 80038c4:	6019      	str	r1, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_ERROR;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	334c      	adds	r3, #76	@ 0x4c
 80038d6:	2204      	movs	r2, #4
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e00d      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0xace>
		} else {
			if (hhcd->hc[chnum].state == HC_HALTED) {
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	334d      	adds	r3, #77	@ 0x4d
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	f000 8100 	beq.w	8003af4 <HCD_HC_IN_IRQHandler+0xcca>
 80038f4:	e000      	b.n	80038f8 <HCD_HC_IN_IRQHandler+0xace>
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80038f6:	bf00      	nop
		}

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
		HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	334c      	adds	r3, #76	@ 0x4c
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f006 f8f6 	bl	8009b00 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003914:	e0ef      	b.n	8003af6 <HCD_HC_IN_IRQHandler+0xccc>
				hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f004 f829 	bl	8007976 <USB_ReadChInterrupts>
 8003924:	4603      	mov	r3, r0
 8003926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392a:	2b40      	cmp	r3, #64	@ 0x40
 800392c:	d12f      	bne.n	800398e <HCD_HC_IN_IRQHandler+0xb64>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4413      	add	r3, r2
 8003936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800393a:	461a      	mov	r2, r3
 800393c:	2340      	movs	r3, #64	@ 0x40
 800393e:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_NYET;
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	334d      	adds	r3, #77	@ 0x4d
 8003950:	2205      	movs	r2, #5
 8003952:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ssplit == 0U) {
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	331a      	adds	r3, #26
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HCD_HC_IN_IRQHandler+0xb54>
			hhcd->hc[chnum].ErrCnt = 0U;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3344      	adds	r3, #68	@ 0x44
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
		}

		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f004 fd6f 	bl	800846a <USB_HC_Halt>
 800398c:	e0b3      	b.n	8003af6 <HCD_HC_IN_IRQHandler+0xccc>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK)) {
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f003 ffed 	bl	8007976 <USB_ReadChInterrupts>
 800399c:	4603      	mov	r3, r0
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	f040 80a7 	bne.w	8003af6 <HCD_HC_IN_IRQHandler+0xccc>
		if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR) {
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	3326      	adds	r3, #38	@ 0x26
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d11b      	bne.n	80039f6 <HCD_HC_IN_IRQHandler+0xbcc>
			hhcd->hc[chnum].ErrCnt = 0U;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3344      	adds	r3, #68	@ 0x44
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_NAK;
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	334d      	adds	r3, #77	@ 0x4d
 80039e2:	2204      	movs	r2, #4
 80039e4:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 fd3b 	bl	800846a <USB_HC_Halt>
 80039f4:	e03f      	b.n	8003a76 <HCD_HC_IN_IRQHandler+0xc4c>
		} else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3326      	adds	r3, #38	@ 0x26
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HCD_HC_IN_IRQHandler+0xbf8>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3326      	adds	r3, #38	@ 0x26
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d129      	bne.n	8003a76 <HCD_HC_IN_IRQHandler+0xc4c>
			hhcd->hc[chnum].ErrCnt = 0U;
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	3344      	adds	r3, #68	@ 0x44
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

			if ((hhcd->Init.dma_enable == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	799b      	ldrb	r3, [r3, #6]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HCD_HC_IN_IRQHandler+0xc2a>
					|| (hhcd->hc[chnum].do_csplit == 1U)) {
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	331b      	adds	r3, #27
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d110      	bne.n	8003a76 <HCD_HC_IN_IRQHandler+0xc4c>
				hhcd->hc[chnum].state = HC_NAK;
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	334d      	adds	r3, #77	@ 0x4d
 8003a64:	2204      	movs	r2, #4
 8003a66:	701a      	strb	r2, [r3, #0]
				(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f004 fcfa 	bl	800846a <USB_HC_Halt>
			}
		} else {
			/* ... */
		}

		if (hhcd->hc[chnum].do_csplit == 1U) {
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	331b      	adds	r3, #27
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d129      	bne.n	8003ae0 <HCD_HC_IN_IRQHandler+0xcb6>
			hhcd->hc[chnum].do_csplit = 0U;
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	331b      	adds	r3, #27
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	0151      	lsls	r1, r2, #5
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	440a      	add	r2, r1
 8003ab6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003abe:	6053      	str	r3, [r2, #4]
			__HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	0151      	lsls	r1, r2, #5
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ada:	f043 0320 	orr.w	r3, r3, #32
 8003ade:	60d3      	str	r3, [r2, #12]
		}

		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aec:	461a      	mov	r2, r3
 8003aee:	2310      	movs	r3, #16
 8003af0:	6093      	str	r3, [r2, #8]
 8003af2:	e000      	b.n	8003af6 <HCD_HC_IN_IRQHandler+0xccc>
				return;
 8003af4:	bf00      	nop
	} else {
		/* ... */
	}
}
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HCD_HC_OUT_IRQHandler>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval none
 */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	70fb      	strb	r3, [r7, #3]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg;
	uint32_t num_packets;

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR)) {
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 ff2b 	bl	8007976 <USB_ReadChInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d11b      	bne.n	8003b62 <HCD_HC_OUT_IRQHandler+0x66>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b36:	461a      	mov	r2, r3
 8003b38:	2304      	movs	r3, #4
 8003b3a:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	334d      	adds	r3, #77	@ 0x4d
 8003b4c:	2207      	movs	r2, #7
 8003b4e:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f004 fc86 	bl	800846a <USB_HC_Halt>
 8003b5e:	f000 bc89 	b.w	8004474 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK)) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f003 ff03 	bl	8007976 <USB_ReadChInterrupts>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	f040 8082 	bne.w	8003c80 <HCD_HC_OUT_IRQHandler+0x184>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2320      	movs	r3, #32
 8003b8c:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_ping == 1U) {
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3319      	adds	r3, #25
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d124      	bne.n	8003bee <HCD_HC_OUT_IRQHandler+0xf2>
			hhcd->hc[chnum].do_ping = 0U;
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3319      	adds	r3, #25
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	334c      	adds	r3, #76	@ 0x4c
 8003bc8:	2202      	movs	r2, #2
 8003bca:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_ACK;
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	334d      	adds	r3, #77	@ 0x4d
 8003bdc:	2203      	movs	r2, #3
 8003bde:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f004 fc3e 	bl	800846a <USB_HC_Halt>
		}

		if ((hhcd->hc[chnum].do_ssplit == 1U)
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	331a      	adds	r3, #26
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	f040 8437 	bne.w	8004474 <HCD_HC_OUT_IRQHandler+0x978>
				&& (hhcd->hc[chnum].do_csplit == 0U)) {
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	331b      	adds	r3, #27
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f040 842b 	bne.w	8004474 <HCD_HC_OUT_IRQHandler+0x978>
			if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC) {
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3326      	adds	r3, #38	@ 0x26
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d009      	beq.n	8003c48 <HCD_HC_OUT_IRQHandler+0x14c>
				hhcd->hc[chnum].do_csplit = 1U;
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	331b      	adds	r3, #27
 8003c44:	2201      	movs	r2, #1
 8003c46:	701a      	strb	r2, [r3, #0]
			}

			hhcd->hc[chnum].state = HC_ACK;
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	334d      	adds	r3, #77	@ 0x4d
 8003c58:	2203      	movs	r2, #3
 8003c5a:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f004 fc00 	bl	800846a <USB_HC_Halt>

			/* reset error_count */
			hhcd->hc[chnum].ErrCnt = 0U;
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3344      	adds	r3, #68	@ 0x44
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e3f9      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x978>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR)) {
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 fe74 	bl	8007976 <USB_ReadChInterrupts>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c98:	d111      	bne.n	8003cbe <HCD_HC_OUT_IRQHandler+0x1c2>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cac:	6093      	str	r3, [r2, #8]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 fbd7 	bl	800846a <USB_HC_Halt>
 8003cbc:	e3da      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC)) {
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f003 fe55 	bl	8007976 <USB_ReadChInterrupts>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d168      	bne.n	8003da8 <HCD_HC_OUT_IRQHandler+0x2ac>
		hhcd->hc[chnum].ErrCnt = 0U;
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3344      	adds	r3, #68	@ 0x44
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

		/* transaction completed with NYET state, update do ping state */
		if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f003 fe3f 	bl	8007976 <USB_ReadChInterrupts>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfe:	2b40      	cmp	r3, #64	@ 0x40
 8003d00:	d112      	bne.n	8003d28 <HCD_HC_OUT_IRQHandler+0x22c>
			hhcd->hc[chnum].do_ping = 1U;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3319      	adds	r3, #25
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d22:	461a      	mov	r2, r3
 8003d24:	2340      	movs	r3, #64	@ 0x40
 8003d26:	6093      	str	r3, [r2, #8]
		}

		if (hhcd->hc[chnum].do_csplit != 0U) {
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	331b      	adds	r3, #27
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d019      	beq.n	8003d72 <HCD_HC_OUT_IRQHandler+0x276>
			hhcd->hc[chnum].do_csplit = 0U;
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	331b      	adds	r3, #27
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	0151      	lsls	r1, r2, #5
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	440a      	add	r2, r1
 8003d68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d70:	6053      	str	r3, [r2, #4]
		}

		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2301      	movs	r3, #1
 8003d82:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XFRC;
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	334d      	adds	r3, #77	@ 0x4d
 8003d94:	2201      	movs	r2, #1
 8003d96:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f004 fb62 	bl	800846a <USB_HC_Halt>
 8003da6:	e365      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f003 fde0 	bl	8007976 <USB_ReadChInterrupts>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbc:	2b40      	cmp	r3, #64	@ 0x40
 8003dbe:	d139      	bne.n	8003e34 <HCD_HC_OUT_IRQHandler+0x338>
		hhcd->hc[chnum].state = HC_NYET;
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	334d      	adds	r3, #77	@ 0x4d
 8003dd0:	2205      	movs	r2, #5
 8003dd2:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ssplit == 0U) {
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	331a      	adds	r3, #26
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HCD_HC_OUT_IRQHandler+0x302>
			hhcd->hc[chnum].do_ping = 1U;
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	3319      	adds	r3, #25
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
		}

		hhcd->hc[chnum].ErrCnt = 0U;
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3344      	adds	r3, #68	@ 0x44
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f004 fb25 	bl	800846a <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2340      	movs	r3, #64	@ 0x40
 8003e30:	6093      	str	r3, [r2, #8]
 8003e32:	e31f      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL)) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f003 fd9a 	bl	8007976 <USB_ReadChInterrupts>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d11a      	bne.n	8003e82 <HCD_HC_OUT_IRQHandler+0x386>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_STALL;
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	334d      	adds	r3, #77	@ 0x4d
 8003e6e:	2206      	movs	r2, #6
 8003e70:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f004 faf5 	bl	800846a <USB_HC_Halt>
 8003e80:	e2f8      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK)) {
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	4611      	mov	r1, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f003 fd73 	bl	8007976 <USB_ReadChInterrupts>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d144      	bne.n	8003f24 <HCD_HC_OUT_IRQHandler+0x428>
		hhcd->hc[chnum].ErrCnt = 0U;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3344      	adds	r3, #68	@ 0x44
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
		hhcd->hc[chnum].state = HC_NAK;
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	334d      	adds	r3, #77	@ 0x4d
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ping == 0U) {
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3319      	adds	r3, #25
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d114      	bne.n	8003f02 <HCD_HC_OUT_IRQHandler+0x406>
			if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH) {
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3318      	adds	r3, #24
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HCD_HC_OUT_IRQHandler+0x406>
				hhcd->hc[chnum].do_ping = 1U;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	3319      	adds	r3, #25
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
			}
		}

		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	4611      	mov	r1, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f004 faad 	bl	800846a <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2310      	movs	r3, #16
 8003f20:	6093      	str	r3, [r2, #8]
 8003f22:	e2a7      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR)) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fd22 	bl	8007976 <USB_ReadChInterrupts>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f38:	2b80      	cmp	r3, #128	@ 0x80
 8003f3a:	f040 8083 	bne.w	8004044 <HCD_HC_OUT_IRQHandler+0x548>
		if (hhcd->Init.dma_enable == 0U) {
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	799b      	ldrb	r3, [r3, #6]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d111      	bne.n	8003f6a <HCD_HC_OUT_IRQHandler+0x46e>
			hhcd->hc[chnum].state = HC_XACTERR;
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	334d      	adds	r3, #77	@ 0x4d
 8003f56:	2207      	movs	r2, #7
 8003f58:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f004 fa81 	bl	800846a <USB_HC_Halt>
 8003f68:	e062      	b.n	8004030 <HCD_HC_OUT_IRQHandler+0x534>
		} else {
			hhcd->hc[chnum].ErrCnt++;
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	3344      	adds	r3, #68	@ 0x44
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	1c59      	adds	r1, r3, #1
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4403      	add	r3, r0
 8003f8a:	3344      	adds	r3, #68	@ 0x44
 8003f8c:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3344      	adds	r3, #68	@ 0x44
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d922      	bls.n	8003fea <HCD_HC_OUT_IRQHandler+0x4ee>
				hhcd->hc[chnum].ErrCnt = 0U;
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3344      	adds	r3, #68	@ 0x44
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
				hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	334c      	adds	r3, #76	@ 0x4c
 8003fc8:	2204      	movs	r2, #4
 8003fca:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
				HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	334c      	adds	r3, #76	@ 0x4c
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f005 fd8c 	bl	8009b00 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003fe8:	e022      	b.n	8004030 <HCD_HC_OUT_IRQHandler+0x534>
						hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	334c      	adds	r3, #76	@ 0x4c
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	701a      	strb	r2, [r3, #0]

				/* Re-activate the channel  */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004014:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800401c:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6013      	str	r3, [r2, #0]
			}
		}
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800403c:	461a      	mov	r2, r3
 800403e:	2380      	movs	r3, #128	@ 0x80
 8004040:	6093      	str	r3, [r2, #8]
 8004042:	e217      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR)) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	4611      	mov	r1, r2
 800404c:	4618      	mov	r0, r3
 800404e:	f003 fc92 	bl	8007976 <USB_ReadChInterrupts>
 8004052:	4603      	mov	r3, r0
 8004054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405c:	d11b      	bne.n	8004096 <HCD_HC_OUT_IRQHandler+0x59a>
		hhcd->hc[chnum].state = HC_DATATGLERR;
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	334d      	adds	r3, #77	@ 0x4d
 800406e:	2209      	movs	r2, #9
 8004070:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f004 f9f5 	bl	800846a <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800408c:	461a      	mov	r2, r3
 800408e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004092:	6093      	str	r3, [r2, #8]
 8004094:	e1ee      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH)) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	4611      	mov	r1, r2
 800409e:	4618      	mov	r0, r3
 80040a0:	f003 fc69 	bl	8007976 <USB_ReadChInterrupts>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	f040 81df 	bne.w	800446e <HCD_HC_OUT_IRQHandler+0x972>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040bc:	461a      	mov	r2, r3
 80040be:	2302      	movs	r3, #2
 80040c0:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].state == HC_XFRC) {
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	334d      	adds	r3, #77	@ 0x4d
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	f040 8093 	bne.w	8004200 <HCD_HC_OUT_IRQHandler+0x704>
			hhcd->hc[chnum].state = HC_HALTED;
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	334d      	adds	r3, #77	@ 0x4d
 80040ea:	2202      	movs	r2, #2
 80040ec:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	334c      	adds	r3, #76	@ 0x4c
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]

			if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	3326      	adds	r3, #38	@ 0x26
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d00b      	beq.n	8004130 <HCD_HC_OUT_IRQHandler+0x634>
					|| (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)) {
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3326      	adds	r3, #38	@ 0x26
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b03      	cmp	r3, #3
 800412c:	f040 8190 	bne.w	8004450 <HCD_HC_OUT_IRQHandler+0x954>
				if (hhcd->Init.dma_enable == 0U) {
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	799b      	ldrb	r3, [r3, #6]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d115      	bne.n	8004164 <HCD_HC_OUT_IRQHandler+0x668>
					hhcd->hc[chnum].toggle_out ^= 1U;
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	333d      	adds	r3, #61	@ 0x3d
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	f083 0301 	eor.w	r3, r3, #1
 8004150:	b2d8      	uxtb	r0, r3
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	333d      	adds	r3, #61	@ 0x3d
 8004160:	4602      	mov	r2, r0
 8004162:	701a      	strb	r2, [r3, #0]
				}

				if ((hhcd->Init.dma_enable == 1U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	799b      	ldrb	r3, [r3, #6]
 8004168:	2b01      	cmp	r3, #1
 800416a:	f040 8171 	bne.w	8004450 <HCD_HC_OUT_IRQHandler+0x954>
						&& (hhcd->hc[chnum].xfer_len > 0U)) {
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	3334      	adds	r3, #52	@ 0x34
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8165 	beq.w	8004450 <HCD_HC_OUT_IRQHandler+0x954>
					num_packets = (hhcd->hc[chnum].xfer_len
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	3334      	adds	r3, #52	@ 0x34
 8004196:	6819      	ldr	r1, [r3, #0]
							+ hhcd->hc[chnum].max_packet - 1U)
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4403      	add	r3, r0
 80041a6:	3328      	adds	r3, #40	@ 0x28
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	440b      	add	r3, r1
 80041ac:	1e59      	subs	r1, r3, #1
							/ hhcd->hc[chnum].max_packet;
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4403      	add	r3, r0
 80041bc:	3328      	adds	r3, #40	@ 0x28
 80041be:	881b      	ldrh	r3, [r3, #0]
					num_packets = (hhcd->hc[chnum].xfer_len
 80041c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80041c4:	60bb      	str	r3, [r7, #8]

					if ((num_packets & 1U) != 0U) {
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 813f 	beq.w	8004450 <HCD_HC_OUT_IRQHandler+0x954>
						hhcd->hc[chnum].toggle_out ^= 1U;
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	333d      	adds	r3, #61	@ 0x3d
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	f083 0301 	eor.w	r3, r3, #1
 80041ea:	b2d8      	uxtb	r0, r3
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	333d      	adds	r3, #61	@ 0x3d
 80041fa:	4602      	mov	r2, r0
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e127      	b.n	8004450 <HCD_HC_OUT_IRQHandler+0x954>
					}
				}
			}
		} else if (hhcd->hc[chnum].state == HC_ACK) {
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	334d      	adds	r3, #77	@ 0x4d
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d120      	bne.n	8004258 <HCD_HC_OUT_IRQHandler+0x75c>
			hhcd->hc[chnum].state = HC_HALTED;
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	334d      	adds	r3, #77	@ 0x4d
 8004226:	2202      	movs	r2, #2
 8004228:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	331b      	adds	r3, #27
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	f040 8107 	bne.w	8004450 <HCD_HC_OUT_IRQHandler+0x954>
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	334c      	adds	r3, #76	@ 0x4c
 8004252:	2202      	movs	r2, #2
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	e0fb      	b.n	8004450 <HCD_HC_OUT_IRQHandler+0x954>
			}
		} else if (hhcd->hc[chnum].state == HC_NAK) {
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	334d      	adds	r3, #77	@ 0x4d
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b04      	cmp	r3, #4
 800426c:	d13a      	bne.n	80042e4 <HCD_HC_OUT_IRQHandler+0x7e8>
			hhcd->hc[chnum].state = HC_HALTED;
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	334d      	adds	r3, #77	@ 0x4d
 800427e:	2202      	movs	r2, #2
 8004280:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	334c      	adds	r3, #76	@ 0x4c
 8004292:	2202      	movs	r2, #2
 8004294:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	331b      	adds	r3, #27
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	f040 80d1 	bne.w	8004450 <HCD_HC_OUT_IRQHandler+0x954>
				hhcd->hc[chnum].do_csplit = 0U;
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	331b      	adds	r3, #27
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
				__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	0151      	lsls	r1, r2, #5
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	440a      	add	r2, r1
 80042d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e0:	6053      	str	r3, [r2, #4]
 80042e2:	e0b5      	b.n	8004450 <HCD_HC_OUT_IRQHandler+0x954>
			}
		} else if (hhcd->hc[chnum].state == HC_NYET) {
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	334d      	adds	r3, #77	@ 0x4d
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b05      	cmp	r3, #5
 80042f8:	d114      	bne.n	8004324 <HCD_HC_OUT_IRQHandler+0x828>
			hhcd->hc[chnum].state = HC_HALTED;
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	334d      	adds	r3, #77	@ 0x4d
 800430a:	2202      	movs	r2, #2
 800430c:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	334c      	adds	r3, #76	@ 0x4c
 800431e:	2202      	movs	r2, #2
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	e095      	b.n	8004450 <HCD_HC_OUT_IRQHandler+0x954>
		} else if (hhcd->hc[chnum].state == HC_STALL) {
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	334d      	adds	r3, #77	@ 0x4d
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b06      	cmp	r3, #6
 8004338:	d114      	bne.n	8004364 <HCD_HC_OUT_IRQHandler+0x868>
			hhcd->hc[chnum].state = HC_HALTED;
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	334d      	adds	r3, #77	@ 0x4d
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_STALL;
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	334c      	adds	r3, #76	@ 0x4c
 800435e:	2205      	movs	r2, #5
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e075      	b.n	8004450 <HCD_HC_OUT_IRQHandler+0x954>
		} else if ((hhcd->hc[chnum].state == HC_XACTERR)
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	334d      	adds	r3, #77	@ 0x4d
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b07      	cmp	r3, #7
 8004378:	d00a      	beq.n	8004390 <HCD_HC_OUT_IRQHandler+0x894>
				|| (hhcd->hc[chnum].state == HC_DATATGLERR)) {
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	334d      	adds	r3, #77	@ 0x4d
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b09      	cmp	r3, #9
 800438e:	d170      	bne.n	8004472 <HCD_HC_OUT_IRQHandler+0x976>
			hhcd->hc[chnum].state = HC_HALTED;
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	334d      	adds	r3, #77	@ 0x4d
 80043a0:	2202      	movs	r2, #2
 80043a2:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	3344      	adds	r3, #68	@ 0x44
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4403      	add	r3, r0
 80043c4:	3344      	adds	r3, #68	@ 0x44
 80043c6:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	3344      	adds	r3, #68	@ 0x44
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d914      	bls.n	8004408 <HCD_HC_OUT_IRQHandler+0x90c>
				hhcd->hc[chnum].ErrCnt = 0U;
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	3344      	adds	r3, #68	@ 0x44
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
				hhcd->hc[chnum].urb_state = URB_ERROR;
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	334c      	adds	r3, #76	@ 0x4c
 8004402:	2204      	movs	r2, #4
 8004404:	701a      	strb	r2, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8004406:	e022      	b.n	800444e <HCD_HC_OUT_IRQHandler+0x952>
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	334c      	adds	r3, #76	@ 0x4c
 8004418:	2202      	movs	r2, #2
 800441a:	701a      	strb	r2, [r3, #0]

				/* re-activate the channel  */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004432:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800443a:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4413      	add	r3, r2
 8004444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004448:	461a      	mov	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6013      	str	r3, [r2, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 800444e:	bf00      	nop
		}

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
		HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	334c      	adds	r3, #76	@ 0x4c
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f005 fb4a 	bl	8009b00 <HAL_HCD_HC_NotifyURBChange_Callback>
 800446c:	e002      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x978>
				hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
	} else {
		return;
 800446e:	bf00      	nop
 8004470:	e000      	b.n	8004474 <HCD_HC_OUT_IRQHandler+0x978>
			return;
 8004472:	bf00      	nop
	}
}
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HCD_RXQLVL_IRQHandler>:
/**
 * @brief  Handle Rx Queue Level interrupt requests.
 * @param  hhcd HCD handle
 * @retval none
 */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd) {
 800447a:	b580      	push	{r7, lr}
 800447c:	b08a      	sub	sp, #40	@ 0x28
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t USBx_BASE = (uint32_t) USBx;
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	623b      	str	r3, [r7, #32]
	uint32_t GrxstspReg;
	uint32_t xferSizePktCnt;
	uint32_t tmpreg;
	uint32_t chnum;

	GrxstspReg = hhcd->Instance->GRXSTSP;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	61fb      	str	r3, [r7, #28]
	chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	61bb      	str	r3, [r7, #24]
	pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	0c5b      	lsrs	r3, r3, #17
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	617b      	str	r3, [r7, #20]
	pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ae:	613b      	str	r3, [r7, #16]

	switch (pktsts) {
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d004      	beq.n	80044c0 <HCD_RXQLVL_IRQHandler+0x46>
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	f000 80b6 	beq.w	800462a <HCD_RXQLVL_IRQHandler+0x1b0>
		break;

	case GRXSTS_PKTSTS_IN_XFER_COMP:
	case GRXSTS_PKTSTS_CH_HALTED:
	default:
		break;
 80044be:	e0b7      	b.n	8004630 <HCD_RXQLVL_IRQHandler+0x1b6>
		if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void*) 0)) {
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80b3 	beq.w	800462e <HCD_RXQLVL_IRQHandler+0x1b4>
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	332c      	adds	r3, #44	@ 0x2c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 80a7 	beq.w	800462e <HCD_RXQLVL_IRQHandler+0x1b4>
			if ((hhcd->hc[chnum].xfer_count + pktcnt)
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	3338      	adds	r3, #56	@ 0x38
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	18d1      	adds	r1, r2, r3
					<= hhcd->hc[chnum].xfer_len) {
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4613      	mov	r3, r2
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4403      	add	r3, r0
 8004504:	3334      	adds	r3, #52	@ 0x34
 8004506:	681b      	ldr	r3, [r3, #0]
			if ((hhcd->hc[chnum].xfer_count + pktcnt)
 8004508:	4299      	cmp	r1, r3
 800450a:	f200 8083 	bhi.w	8004614 <HCD_RXQLVL_IRQHandler+0x19a>
				(void) USB_ReadPacket(hhcd->Instance, hhcd->hc[chnum].xfer_buff,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4613      	mov	r3, r2
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	332c      	adds	r3, #44	@ 0x2c
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	b292      	uxth	r2, r2
 8004528:	4619      	mov	r1, r3
 800452a:	f003 f9b9 	bl	80078a0 <USB_ReadPacket>
				hhcd->hc[chnum].xfer_buff += pktcnt;
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	332c      	adds	r3, #44	@ 0x2c
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	18d1      	adds	r1, r2, r3
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4403      	add	r3, r0
 8004552:	332c      	adds	r3, #44	@ 0x2c
 8004554:	6019      	str	r1, [r3, #0]
				hhcd->hc[chnum].xfer_count += pktcnt;
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	3338      	adds	r3, #56	@ 0x38
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	18d1      	adds	r1, r2, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4403      	add	r3, r0
 800457a:	3338      	adds	r3, #56	@ 0x38
 800457c:	6019      	str	r1, [r3, #0]
						(USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	0cdb      	lsrs	r3, r3, #19
				xferSizePktCnt =
 800458e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004592:	60fb      	str	r3, [r7, #12]
				if ((hhcd->hc[chnum].max_packet == pktcnt)
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	3328      	adds	r3, #40	@ 0x28
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d13f      	bne.n	800462e <HCD_RXQLVL_IRQHandler+0x1b4>
						&& (xferSizePktCnt > 0U)) {
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d03c      	beq.n	800462e <HCD_RXQLVL_IRQHandler+0x1b4>
					tmpreg = USBx_HC(chnum)->HCCHAR;
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60bb      	str	r3, [r7, #8]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045ca:	60bb      	str	r3, [r7, #8]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045d2:	60bb      	str	r3, [r7, #8]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045e0:	461a      	mov	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6013      	str	r3, [r2, #0]
					hhcd->hc[chnum].toggle_in ^= 1U;
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	333c      	adds	r3, #60	@ 0x3c
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f083 0301 	eor.w	r3, r3, #1
 80045fc:	b2d8      	uxtb	r0, r3
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4613      	mov	r3, r2
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	333c      	adds	r3, #60	@ 0x3c
 800460e:	4602      	mov	r2, r0
 8004610:	701a      	strb	r2, [r3, #0]
		break;
 8004612:	e00c      	b.n	800462e <HCD_RXQLVL_IRQHandler+0x1b4>
				hhcd->hc[chnum].urb_state = URB_ERROR;
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4613      	mov	r3, r2
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	334c      	adds	r3, #76	@ 0x4c
 8004624:	2204      	movs	r2, #4
 8004626:	701a      	strb	r2, [r3, #0]
		break;
 8004628:	e001      	b.n	800462e <HCD_RXQLVL_IRQHandler+0x1b4>
		break;
 800462a:	bf00      	nop
 800462c:	e000      	b.n	8004630 <HCD_RXQLVL_IRQHandler+0x1b6>
		break;
 800462e:	bf00      	nop
	}
}
 8004630:	bf00      	nop
 8004632:	3728      	adds	r7, #40	@ 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HCD_Port_IRQHandler>:
/**
 * @brief  Handle Host Port interrupt requests.
 * @param  hhcd HCD handle
 * @retval None
 */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	613b      	str	r3, [r7, #16]
	__IO uint32_t hprt0;
	__IO uint32_t hprt0_dup;

	/* Handle Host Port Interrupts */
	hprt0 = USBx_HPRT0;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]
	hprt0_dup = USBx_HPRT0;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60bb      	str	r3, [r7, #8]

	hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004664:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	/* Check whether Port Connect detected */
	if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET) {
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d10b      	bne.n	8004688 <HCD_Port_IRQHandler+0x50>
		if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS) {
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d102      	bne.n	8004680 <HCD_Port_IRQHandler+0x48>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
			HAL_HCD_Connect_Callback(hhcd);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f005 fa24 	bl	8009ac8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		}
		hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f043 0302 	orr.w	r3, r3, #2
 8004686:	60bb      	str	r3, [r7, #8]
	}

	/* Check whether Port Enable Changed */
	if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG) {
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b08      	cmp	r3, #8
 8004690:	d132      	bne.n	80046f8 <HCD_Port_IRQHandler+0xc0>
		hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	60bb      	str	r3, [r7, #8]

		if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA) {
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d126      	bne.n	80046f2 <HCD_Port_IRQHandler+0xba>
			if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	7a5b      	ldrb	r3, [r3, #9]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d113      	bne.n	80046d4 <HCD_Port_IRQHandler+0x9c>
				if ((hprt0 & USB_OTG_HPRT_PSPD)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80046b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046b6:	d106      	bne.n	80046c6 <HCD_Port_IRQHandler+0x8e>
						== (HPRT0_PRTSPD_LOW_SPEED << 17)) {
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2102      	movs	r1, #2
 80046be:	4618      	mov	r0, r3
 80046c0:	f003 fa7e 	bl	8007bc0 <USB_InitFSLSPClkSel>
 80046c4:	e011      	b.n	80046ea <HCD_Port_IRQHandler+0xb2>
				} else {
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f003 fa77 	bl	8007bc0 <USB_InitFSLSPClkSel>
 80046d2:	e00a      	b.n	80046ea <HCD_Port_IRQHandler+0xb2>
				}
			} else {
				if (hhcd->Init.speed == HCD_SPEED_FULL) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	79db      	ldrb	r3, [r3, #7]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d106      	bne.n	80046ea <HCD_Port_IRQHandler+0xb2>
					USBx_HOST->HFIR = HFIR_60_MHZ;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046e2:	461a      	mov	r2, r3
 80046e4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80046e8:	6053      	str	r3, [r2, #4]
				}
			}
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
			HAL_HCD_PortEnabled_Callback(hhcd);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f005 fa16 	bl	8009b1c <HAL_HCD_PortEnabled_Callback>
 80046f0:	e002      	b.n	80046f8 <HCD_Port_IRQHandler+0xc0>

		} else {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
			HAL_HCD_PortDisabled_Callback(hhcd);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f005 fa20 	bl	8009b38 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		}
	}

	/* Check for an overcurrent */
	if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG) {
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b20      	cmp	r3, #32
 8004700:	d103      	bne.n	800470a <HCD_Port_IRQHandler+0xd2>
		hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f043 0320 	orr.w	r3, r3, #32
 8004708:	60bb      	str	r3, [r7, #8]
	}

	/* Clear Port Interrupts */
	USBx_HPRT0 = hprt0_dup;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004710:	461a      	mov	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6013      	str	r3, [r2, #0]
}
 8004716:	bf00      	nop
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e12b      	b.n	800498a <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fd f948 	bl	80019dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2224      	movs	r2, #36	@ 0x24
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004772:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004782:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8004784:	f001 fea8 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8004788:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4a81      	ldr	r2, [pc, #516]	@ (8004994 <HAL_I2C_Init+0x274>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d807      	bhi.n	80047a4 <HAL_I2C_Init+0x84>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a80      	ldr	r2, [pc, #512]	@ (8004998 <HAL_I2C_Init+0x278>)
 8004798:	4293      	cmp	r3, r2
 800479a:	bf94      	ite	ls
 800479c:	2301      	movls	r3, #1
 800479e:	2300      	movhi	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e006      	b.n	80047b2 <HAL_I2C_Init+0x92>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a7d      	ldr	r2, [pc, #500]	@ (800499c <HAL_I2C_Init+0x27c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	bf94      	ite	ls
 80047ac:	2301      	movls	r3, #1
 80047ae:	2300      	movhi	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0e7      	b.n	800498a <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a78      	ldr	r2, [pc, #480]	@ (80049a0 <HAL_I2C_Init+0x280>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0c9b      	lsrs	r3, r3, #18
 80047c4:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004994 <HAL_I2C_Init+0x274>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d802      	bhi.n	80047f4 <HAL_I2C_Init+0xd4>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3301      	adds	r3, #1
 80047f2:	e009      	b.n	8004808 <HAL_I2C_Init+0xe8>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	4a69      	ldr	r2, [pc, #420]	@ (80049a4 <HAL_I2C_Init+0x284>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	3301      	adds	r3, #1
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	430b      	orrs	r3, r1
 800480e:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800481a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	495c      	ldr	r1, [pc, #368]	@ (8004994 <HAL_I2C_Init+0x274>)
 8004824:	428b      	cmp	r3, r1
 8004826:	d819      	bhi.n	800485c <HAL_I2C_Init+0x13c>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1e59      	subs	r1, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fbb1 f3f3 	udiv	r3, r1, r3
 8004836:	1c59      	adds	r1, r3, #1
 8004838:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800483c:	400b      	ands	r3, r1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_I2C_Init+0x138>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1e59      	subs	r1, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004850:	3301      	adds	r3, #1
 8004852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004856:	e051      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 8004858:	2304      	movs	r3, #4
 800485a:	e04f      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d111      	bne.n	8004888 <HAL_I2C_Init+0x168>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1e58      	subs	r0, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	440b      	add	r3, r1
 8004872:	fbb0 f3f3 	udiv	r3, r0, r3
 8004876:	3301      	adds	r3, #1
 8004878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e012      	b.n	80048ae <HAL_I2C_Init+0x18e>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1e58      	subs	r0, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	0099      	lsls	r1, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	fbb0 f3f3 	udiv	r3, r0, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_Init+0x196>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e022      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10e      	bne.n	80048dc <HAL_I2C_Init+0x1bc>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1e58      	subs	r0, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	440b      	add	r3, r1
 80048cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d0:	3301      	adds	r3, #1
 80048d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048da:	e00f      	b.n	80048fc <HAL_I2C_Init+0x1dc>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1e58      	subs	r0, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6859      	ldr	r1, [r3, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	0099      	lsls	r1, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	6809      	ldr	r1, [r1, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800492a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6911      	ldr	r1, [r2, #16]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68d2      	ldr	r2, [r2, #12]
 8004936:	4311      	orrs	r1, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	430b      	orrs	r3, r1
 800493e:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	@ 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	000186a0 	.word	0x000186a0
 8004998:	001e847f 	.word	0x001e847f
 800499c:	003d08ff 	.word	0x003d08ff
 80049a0:	431bde83 	.word	0x431bde83
 80049a4:	10624dd3 	.word	0x10624dd3

080049a8 <HAL_I2C_Master_Transmit>:
 * @param  Size Amount of data to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	461a      	mov	r2, r3
 80049b4:	460b      	mov	r3, r1
 80049b6:	817b      	strh	r3, [r7, #10]
 80049b8:	4613      	mov	r3, r2
 80049ba:	813b      	strh	r3, [r7, #8]
	/* Init tickstart for timeout management*/
	uint32_t tickstart = HAL_GetTick();
 80049bc:	f7fd fa88 	bl	8001ed0 <HAL_GetTick>
 80049c0:	6178      	str	r0, [r7, #20]

	if (hi2c->State == HAL_I2C_STATE_READY) {
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	f040 80e0 	bne.w	8004b90 <HAL_I2C_Master_Transmit+0x1e8>
		/* Wait until BUSY flag is reset */
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	2319      	movs	r3, #25
 80049d6:	2201      	movs	r2, #1
 80049d8:	4970      	ldr	r1, [pc, #448]	@ (8004b9c <HAL_I2C_Master_Transmit+0x1f4>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fa92 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_I2C_Master_Transmit+0x42>
				I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
			return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
 80049e8:	e0d3      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
		}

		/* Process Locked */
		__HAL_LOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_I2C_Master_Transmit+0x50>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e0cc      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		/* Check if the I2C is already enabled */
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d007      	beq.n	8004a1e <HAL_I2C_Master_Transmit+0x76>
			/* Enable I2C peripheral */
			__HAL_I2C_ENABLE(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0201 	orr.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
		}

		/* Disable Pos */
		CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a2c:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2221      	movs	r2, #33	@ 0x21
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		hi2c->Mode = HAL_I2C_MODE_MASTER;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	641a      	str	r2, [r3, #64]	@ 0x40

		/* Prepare transfer parameters */
		hi2c->pBuffPtr = pData;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	@ 0x24
		hi2c->XferCount = Size;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	893a      	ldrh	r2, [r7, #8]
 8004a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
		hi2c->XferSize = hi2c->XferCount;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	851a      	strh	r2, [r3, #40]	@ 0x28
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a50      	ldr	r2, [pc, #320]	@ (8004ba0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Send Slave Address */
		if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart)
 8004a60:	8979      	ldrh	r1, [r7, #10]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6a3a      	ldr	r2, [r7, #32]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f9ca 	bl	8004e00 <I2C_MasterRequestWrite>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_I2C_Master_Transmit+0xce>
				!= HAL_OK) {
			return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e08d      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
		}

		/* Clear ADDR flag */
		__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	693b      	ldr	r3, [r7, #16]

		while (hi2c->XferSize > 0U) {
 8004a8c:	e066      	b.n	8004b5c <HAL_I2C_Master_Transmit+0x1b4>
			/* Wait until TXE flag is set */
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart)
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	6a39      	ldr	r1, [r7, #32]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fb50 	bl	8005138 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00d      	beq.n	8004aba <HAL_I2C_Master_Transmit+0x112>
					!= HAL_OK) {
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d107      	bne.n	8004ab6 <HAL_I2C_Master_Transmit+0x10e>
					/* Generate Stop */
					SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab4:	601a      	str	r2, [r3, #0]
				}
				return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e06b      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
			}

			/* Write data to DR */
			hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	781a      	ldrb	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	611a      	str	r2, [r3, #16]

			/* Increment Buffer pointer */
			hi2c->pBuffPtr++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	625a      	str	r2, [r3, #36]	@ 0x24

			/* Update counter */
			hi2c->XferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
			hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	@ 0x28

			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d11b      	bne.n	8004b30 <HAL_I2C_Master_Transmit+0x188>
					&& (hi2c->XferSize != 0U)) {
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d017      	beq.n	8004b30 <HAL_I2C_Master_Transmit+0x188>
				/* Write data to DR */
				hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	611a      	str	r2, [r3, #16]

				/* Increment Buffer pointer */
				hi2c->pBuffPtr++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	625a      	str	r2, [r3, #36]	@ 0x24

				/* Update counter */
				hi2c->XferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
				hi2c->XferSize--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
			}

			/* Wait until BTF flag is set */
			if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart)
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	6a39      	ldr	r1, [r7, #32]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fb47 	bl	80051c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00d      	beq.n	8004b5c <HAL_I2C_Master_Transmit+0x1b4>
					!= HAL_OK) {
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d107      	bne.n	8004b58 <HAL_I2C_Master_Transmit+0x1b0>
					/* Generate Stop */
					SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b56:	601a      	str	r2, [r3, #0]
				}
				return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e01a      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
		while (hi2c->XferSize > 0U) {
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d194      	bne.n	8004a8e <HAL_I2C_Master_Transmit+0xe6>
			}
		}

		/* Generate Stop */
		SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b72:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e000      	b.n	8004b92 <HAL_I2C_Master_Transmit+0x1ea>
	} else {
		return HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
	}
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	00100002 	.word	0x00100002
 8004ba0:	ffff0000 	.word	0xffff0000

08004ba4 <HAL_I2C_IsDeviceReady>:
 * @param  Trials Number of trials
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint32_t Trials, uint32_t Timeout) {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	@ 0x28
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	817b      	strh	r3, [r7, #10]
	/* Get tick */
	uint32_t tickstart = HAL_GetTick();
 8004bb4:	f7fd f98c 	bl	8001ed0 <HAL_GetTick>
 8004bb8:	61f8      	str	r0, [r7, #28]
	uint32_t I2C_Trials = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
	FlagStatus tmp1;
	FlagStatus tmp2;

	if (hi2c->State == HAL_I2C_STATE_READY) {
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	f040 8111 	bne.w	8004dee <HAL_I2C_IsDeviceReady+0x24a>
		/* Wait until BUSY flag is reset */
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2319      	movs	r3, #25
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4988      	ldr	r1, [pc, #544]	@ (8004df8 <HAL_I2C_IsDeviceReady+0x254>)
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f994 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_I2C_IsDeviceReady+0x42>
				I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
			return HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
 8004be4:	e104      	b.n	8004df0 <HAL_I2C_IsDeviceReady+0x24c>
		}

		/* Process Locked */
		__HAL_LOCK(hi2c);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_I2C_IsDeviceReady+0x50>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e0fd      	b.n	8004df0 <HAL_I2C_IsDeviceReady+0x24c>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		/* Check if the I2C is already enabled */
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d007      	beq.n	8004c1a <HAL_I2C_IsDeviceReady+0x76>
			/* Enable I2C peripheral */
			__HAL_I2C_ENABLE(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0201 	orr.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
		}

		/* Disable Pos */
		CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c28:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_BUSY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2224      	movs	r2, #36	@ 0x24
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	641a      	str	r2, [r3, #64]	@ 0x40
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a70      	ldr	r2, [pc, #448]	@ (8004dfc <HAL_I2C_IsDeviceReady+0x258>)
 8004c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

		do {
			/* Generate Start */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c4c:	601a      	str	r2, [r3, #0]

			/* Wait until SB flag is set */
			if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout,
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f952 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <HAL_I2C_IsDeviceReady+0xde>
					tickstart) != HAL_OK) {
				if (READ_BIT(hi2c->Instance->CR1,
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c74:	d103      	bne.n	8004c7e <HAL_I2C_IsDeviceReady+0xda>
						I2C_CR1_START) == I2C_CR1_START) {
					hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c7c:	641a      	str	r2, [r3, #64]	@ 0x40
				}
				return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e0b6      	b.n	8004df0 <HAL_I2C_IsDeviceReady+0x24c>
			}

			/* Send slave address */
			hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c82:	897b      	ldrh	r3, [r7, #10]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c90:	611a      	str	r2, [r3, #16]

			/* Wait until ADDR or AF flag are set */
			/* Get tick */
			tickstart = HAL_GetTick();
 8004c92:	f7fd f91d 	bl	8001ed0 <HAL_GetTick>
 8004c96:	61f8      	str	r0, [r7, #28]

			tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	75fb      	strb	r3, [r7, #23]
			tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	75bb      	strb	r3, [r7, #22]
			while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET)
 8004cc6:	e025      	b.n	8004d14 <HAL_I2C_IsDeviceReady+0x170>
					&& (tmp2 == RESET)) {
				if (((HAL_GetTick() - tickstart) > Timeout)
 8004cc8:	f7fd f902 	bl	8001ed0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <HAL_I2C_IsDeviceReady+0x13a>
						|| (Timeout == 0U)) {
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <HAL_I2C_IsDeviceReady+0x142>
					hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	22a0      	movs	r2, #160	@ 0xa0
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
				}
				tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	75fb      	strb	r3, [r7, #23]
				tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	75bb      	strb	r3, [r7, #22]
			while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d1a:	b2db      	uxtb	r3, r3
					&& (tmp2 == RESET)) {
 8004d1c:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d1e:	d005      	beq.n	8004d2c <HAL_I2C_IsDeviceReady+0x188>
			while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET)
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <HAL_I2C_IsDeviceReady+0x188>
					&& (tmp2 == RESET)) {
 8004d26:	7dbb      	ldrb	r3, [r7, #22]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0cd      	beq.n	8004cc8 <HAL_I2C_IsDeviceReady+0x124>
			}

			hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

			/* Check if the ADDR flag has been set */
			if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET) {
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d129      	bne.n	8004d96 <HAL_I2C_IsDeviceReady+0x1f2>
				/* Generate Stop */
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d50:	601a      	str	r2, [r3, #0]

				/* Clear ADDR Flag */
				__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	693b      	ldr	r3, [r7, #16]

				/* Wait until BUSY flag is reset */
				if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2319      	movs	r3, #25
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4921      	ldr	r1, [pc, #132]	@ (8004df8 <HAL_I2C_IsDeviceReady+0x254>)
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f8c6 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_IsDeviceReady+0x1de>
						I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
					return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e036      	b.n	8004df0 <HAL_I2C_IsDeviceReady+0x24c>
				}

				hi2c->State = HAL_I2C_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

				/* Process Unlocked */
				__HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

				return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e02c      	b.n	8004df0 <HAL_I2C_IsDeviceReady+0x24c>
			} else {
				/* Generate Stop */
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004da4:	601a      	str	r2, [r3, #0]

				/* Clear AF Flag */
				__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dae:	615a      	str	r2, [r3, #20]

				/* Wait until BUSY flag is reset */
				if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	2319      	movs	r3, #25
 8004db6:	2201      	movs	r2, #1
 8004db8:	490f      	ldr	r1, [pc, #60]	@ (8004df8 <HAL_I2C_IsDeviceReady+0x254>)
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f8a2 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <HAL_I2C_IsDeviceReady+0x226>
						I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
					return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e012      	b.n	8004df0 <HAL_I2C_IsDeviceReady+0x24c>
				}
			}

			/* Increment Trials */
			I2C_Trials++;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	61bb      	str	r3, [r7, #24]
		} while (I2C_Trials < Trials);
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	f4ff af32 	bcc.w	8004c3e <HAL_I2C_IsDeviceReady+0x9a>

		hi2c->State = HAL_I2C_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_I2C_IsDeviceReady+0x24c>
	} else {
		return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
	}
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	00100002 	.word	0x00100002
 8004dfc:	ffff0000 	.word	0xffff0000

08004e00 <I2C_MasterRequestWrite>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	817b      	strh	r3, [r7, #10]
	/* Declaration of temporary variable to prevent undefined behavior of volatile usage */
	uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	617b      	str	r3, [r7, #20]

	/* Generate Start condition if first transfer */
	if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d006      	beq.n	8004e2a <I2C_MasterRequestWrite+0x2a>
			|| (CurrentXferOptions == I2C_FIRST_FRAME)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d003      	beq.n	8004e2a <I2C_MasterRequestWrite+0x2a>
			|| (CurrentXferOptions == I2C_NO_OPTION_FRAME)) {
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e28:	d108      	bne.n	8004e3c <I2C_MasterRequestWrite+0x3c>
		/* Generate Start */
		SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e00b      	b.n	8004e54 <I2C_MasterRequestWrite+0x54>
	} else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) {
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e40:	2b12      	cmp	r3, #18
 8004e42:	d107      	bne.n	8004e54 <I2C_MasterRequestWrite+0x54>
		/* Generate ReStart */
		SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e52:	601a      	str	r2, [r3, #0]
	} else {
		/* Do nothing */
	}

	/* Wait until SB flag is set */
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f84f 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00d      	beq.n	8004e88 <I2C_MasterRequestWrite+0x88>
			!= HAL_OK) {
		if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7a:	d103      	bne.n	8004e84 <I2C_MasterRequestWrite+0x84>
			hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e82:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e035      	b.n	8004ef4 <I2C_MasterRequestWrite+0xf4>
	}

	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e90:	d108      	bne.n	8004ea4 <I2C_MasterRequestWrite+0xa4>
		/* Send slave address */
		hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e92:	897b      	ldrh	r3, [r7, #10]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ea0:	611a      	str	r2, [r3, #16]
 8004ea2:	e01b      	b.n	8004edc <I2C_MasterRequestWrite+0xdc>
	} else {
		/* Send header of slave address */
		hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ea4:	897b      	ldrh	r3, [r7, #10]
 8004ea6:	11db      	asrs	r3, r3, #7
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 0306 	and.w	r3, r3, #6
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f063 030f 	orn	r3, r3, #15
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	611a      	str	r2, [r3, #16]

		/* Wait until ADD10 flag is set */
		if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10,
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	490e      	ldr	r1, [pc, #56]	@ (8004efc <I2C_MasterRequestWrite+0xfc>)
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f898 	bl	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <I2C_MasterRequestWrite+0xd2>
				Timeout, Tickstart) != HAL_OK) {
			return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e010      	b.n	8004ef4 <I2C_MasterRequestWrite+0xf4>
		}

		/* Send slave address */
		hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ed2:	897b      	ldrh	r3, [r7, #10]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	611a      	str	r2, [r3, #16]
	}

	/* Wait until ADDR flag is set */
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout,
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4907      	ldr	r1, [pc, #28]	@ (8004f00 <I2C_MasterRequestWrite+0x100>)
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f888 	bl	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <I2C_MasterRequestWrite+0xf2>
			Tickstart) != HAL_OK) {
		return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <I2C_MasterRequestWrite+0xf4>
	}

	return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	00010008 	.word	0x00010008
 8004f00:	00010002 	.word	0x00010002

08004f04 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8004f14:	e048      	b.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d044      	beq.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8004f1e:	f7fc ffd7 	bl	8001ed0 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d139      	bne.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
				if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)) {
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	0c1b      	lsrs	r3, r3, #16
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d10d      	bne.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	43da      	mvns	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	e00c      	b.n	8004f74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	43da      	mvns	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d116      	bne.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
					hi2c->PreviousState = I2C_STATE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
					hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	f043 0220 	orr.w	r2, r3, #32
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

					return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e023      	b.n	8004ff0 <I2C_WaitOnFlagUntilTimeout+0xec>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	0c1b      	lsrs	r3, r3, #16
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d10d      	bne.n	8004fce <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	43da      	mvns	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	e00c      	b.n	8004fe8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	43da      	mvns	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d093      	beq.n	8004f16 <I2C_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(
		I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout,
		uint32_t Tickstart) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8005006:	e071      	b.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005016:	d123      	bne.n	8005060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005026:	601a      	str	r2, [r3, #0]

			/* Clear AF Flag */
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005030:	615a      	str	r2, [r3, #20]

			hi2c->PreviousState = I2C_STATE_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	631a      	str	r2, [r3, #48]	@ 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
			hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504c:	f043 0204 	orr.w	r2, r3, #4
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	641a      	str	r2, [r3, #64]	@ 0x40

			/* Process Unlocked */
			__HAL_UNLOCK(hi2c);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

			return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e067      	b.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d041      	beq.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8005068:	f7fc ff32 	bl	8001ed0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d302      	bcc.n	800507e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d136      	bne.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
				if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)) {
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	0c1b      	lsrs	r3, r3, #16
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d10c      	bne.n	80050a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	43da      	mvns	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	bf14      	ite	ne
 800509a:	2301      	movne	r3, #1
 800509c:	2300      	moveq	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	e00b      	b.n	80050ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	43da      	mvns	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d016      	beq.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
					hi2c->PreviousState = I2C_STATE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	@ 0x30
					hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
					hi2c->Mode = HAL_I2C_MODE_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	f043 0220 	orr.w	r2, r3, #32
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

					return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e021      	b.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10c      	bne.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	43da      	mvns	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4013      	ands	r3, r2
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e00b      	b.n	8005128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	43da      	mvns	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	bf14      	ite	ne
 8005122:	2301      	movne	r3, #1
 8005124:	2300      	moveq	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	f47f af6d 	bne.w	8005008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
				}
			}
		}
	}
	return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <I2C_WaitOnTXEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8005144:	e034      	b.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
		/* Check if a NACK is detected */
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 f886 	bl	8005258 <I2C_IsAcknowledgeFailed>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
			return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e034      	b.n	80051c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d028      	beq.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 800515e:	f7fc feb7 	bl	8001ed0 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	429a      	cmp	r2, r3
 800516c:	d302      	bcc.n	8005174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11d      	bne.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
				if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)) {
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517e:	2b80      	cmp	r3, #128	@ 0x80
 8005180:	d016      	beq.n	80051b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
					hi2c->PreviousState = I2C_STATE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	@ 0x30
					hi2c->State = HAL_I2C_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

					return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e007      	b.n	80051c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ba:	2b80      	cmp	r3, #128	@ 0x80
 80051bc:	d1c3      	bne.n	8005146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
				}
			}
		}
	}
	return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <I2C_WaitOnBTFFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 80051d4:	e034      	b.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
		/* Check if a NACK is detected */
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f83e 	bl	8005258 <I2C_IsAcknowledgeFailed>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
			return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e034      	b.n	8005250 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d028      	beq.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80051ee:	f7fc fe6f 	bl	8001ed0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11d      	bne.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
				if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)) {
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b04      	cmp	r3, #4
 8005210:	d016      	beq.n	8005240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
					hi2c->PreviousState = I2C_STATE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	631a      	str	r2, [r3, #48]	@ 0x30
					hi2c->State = HAL_I2C_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522c:	f043 0220 	orr.w	r2, r3, #32
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	641a      	str	r2, [r3, #64]	@ 0x40

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

					return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e007      	b.n	8005250 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b04      	cmp	r3, #4
 800524c:	d1c3      	bne.n	80051d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
				}
			}
		}
	}
	return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c) {
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526e:	d11b      	bne.n	80052a8 <I2C_IsAcknowledgeFailed+0x50>
		/* Clear NACKF Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005278:	615a      	str	r2, [r3, #20]

		hi2c->PreviousState = I2C_STATE_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	f043 0204 	orr.w	r2, r3, #4
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	641a      	str	r2, [r3, #64]	@ 0x40

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <I2C_IsAcknowledgeFailed+0x52>
	}
	return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <HAL_I2S_Init>:
 *         in the I2S_InitTypeDef and create the associated handle.
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
	uint16_t tmpreg;
#endif

	/* Check the I2S handle allocation */
	if (hi2s == NULL) {
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_I2S_Init+0x12>
		return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e128      	b.n	800551c <HAL_I2S_Init+0x264>
	assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
	assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
	assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
	assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

	if (hi2s->State == HAL_I2S_STATE_RESET) {
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_I2S_Init+0x32>
		/* Allocate lock resource and initialize it */
		hi2s->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

		/* Initialize Default I2S IrqHandler ISR */
		hi2s->IrqHandlerISR = I2S_IRQHandler;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a90      	ldr	r2, [pc, #576]	@ (8005524 <HAL_I2S_Init+0x26c>)
 80052e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
		/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
		HAL_I2S_MspInit(hi2s);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fc fbc1 	bl	8001a6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}

	hi2s->State = HAL_I2S_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	CLEAR_BIT(hi2s->Instance->I2SCFGR,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005300:	f023 030f 	bic.w	r3, r3, #15
 8005304:	61d3      	str	r3, [r2, #28]
			(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
	hi2s->Instance->I2SPR = 0x0002U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2202      	movs	r2, #2
 800530c:	621a      	str	r2, [r3, #32]

	/*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
	/* If the requested audio frequency is not the default, compute the prescaler */
	if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT) {
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d060      	beq.n	80053d8 <HAL_I2S_Init+0x120>
		/* Check the frame length (For the Prescaler computing) ********************/
		if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B) {
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <HAL_I2S_Init+0x6c>
			/* Packet length is 16 bits */
			packetlength = 16U;
 800531e:	2310      	movs	r3, #16
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e001      	b.n	8005328 <HAL_I2S_Init+0x70>
		} else {
			/* Packet length is 32 bits */
			packetlength = 32U;
 8005324:	2320      	movs	r3, #32
 8005326:	617b      	str	r3, [r7, #20]
		}

		/* I2S standard */
		if (hi2s->Init.Standard <= I2S_STANDARD_LSB) {
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b20      	cmp	r3, #32
 800532e:	d802      	bhi.n	8005336 <HAL_I2S_Init+0x7e>
			/* In I2S standard packet length is multiplied by 2 */
			packetlength = packetlength * 2U;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
		i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005336:	2001      	movs	r0, #1
 8005338:	f001 f9c4 	bl	80066c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800533c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

		/* Compute the Real divider depending on the MCLK output state, with a floating point */
		if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE) {
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005346:	d125      	bne.n	8005394 <HAL_I2S_Init+0xdc>
			/* MCLK output is enabled */
			if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B) {
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d010      	beq.n	8005372 <HAL_I2S_Init+0xba>
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	fbb2 f2f3 	udiv	r2, r2, r3
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 800536c:	3305      	adds	r3, #5
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	e01f      	b.n	80053b2 <HAL_I2S_Init+0xfa>
			} else {
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	fbb2 f2f3 	udiv	r2, r2, r3
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 800538e:	3305      	adds	r3, #5
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	e00e      	b.n	80053b2 <HAL_I2S_Init+0xfa>
			}
		} else {
			/* MCLK output is disabled */
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	fbb2 f2f3 	udiv	r2, r2, r3
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	461a      	mov	r2, r3
					/ hi2s->Init.AudioFreq)) + 5U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	fbb2 f3f3 	udiv	r3, r2, r3
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 80053ae:	3305      	adds	r3, #5
 80053b0:	613b      	str	r3, [r7, #16]
		}

		/* Remove the flatting point */
		tmp = tmp / 10U;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4a5c      	ldr	r2, [pc, #368]	@ (8005528 <HAL_I2S_Init+0x270>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	08db      	lsrs	r3, r3, #3
 80053bc:	613b      	str	r3, [r7, #16]

		/* Check the parity of the divider */
		i2sodd = (uint32_t) (tmp & (uint32_t) 1U);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	61bb      	str	r3, [r7, #24]

		/* Compute the i2sdiv prescaler */
		i2sdiv = (uint32_t) ((tmp - i2sodd) / 2U);
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]

		/* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
		i2sodd = (uint32_t) (i2sodd << 8U);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e003      	b.n	80053e0 <HAL_I2S_Init+0x128>
	} else {
		/* Set the default values */
		i2sdiv = 2U;
 80053d8:	2302      	movs	r3, #2
 80053da:	61fb      	str	r3, [r7, #28]
		i2sodd = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
	}

	/* Test if the divider is 1 or 0 or greater than 0xFF */
	if ((i2sdiv < 2U) || (i2sdiv > 0xFFU)) {
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d902      	bls.n	80053ec <HAL_I2S_Init+0x134>
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	2bff      	cmp	r3, #255	@ 0xff
 80053ea:	d907      	bls.n	80053fc <HAL_I2S_Init+0x144>
		/* Set the error code and execute error callback*/
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f0:	f043 0210 	orr.w	r2, r3, #16
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	645a      	str	r2, [r3, #68]	@ 0x44
		return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e08f      	b.n	800551c <HAL_I2S_Init+0x264>

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

	/* Write to SPIx I2SPR register the computed value */
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
			| (uint32_t) (i2sodd | (uint32_t) hi2s->Init.MCLKOutput));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	ea42 0103 	orr.w	r1, r2, r3
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	430a      	orrs	r2, r1
 800540e:	621a      	str	r2, [r3, #32]

	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	/* And configure the I2S with the I2S_InitStruct values                      */
	MODIFY_REG(hi2s->Instance->I2SCFGR,
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800541a:	f023 030f 	bic.w	r3, r3, #15
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6851      	ldr	r1, [r2, #4]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6892      	ldr	r2, [r2, #8]
 8005426:	4311      	orrs	r1, r2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68d2      	ldr	r2, [r2, #12]
 800542c:	4311      	orrs	r1, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6992      	ldr	r2, [r2, #24]
 8005432:	430a      	orrs	r2, r1
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800543e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

	/* Configure the I2S extended if the full duplex mode is enabled */
	assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

	if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE) {
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d161      	bne.n	800550c <HAL_I2S_Init+0x254>
		/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
		hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a38      	ldr	r2, [pc, #224]	@ (800552c <HAL_I2S_Init+0x274>)
 800544c:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
		CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a37      	ldr	r2, [pc, #220]	@ (8005530 <HAL_I2S_Init+0x278>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d101      	bne.n	800545c <HAL_I2S_Init+0x1a4>
 8005458:	4b36      	ldr	r3, [pc, #216]	@ (8005534 <HAL_I2S_Init+0x27c>)
 800545a:	e001      	b.n	8005460 <HAL_I2S_Init+0x1a8>
 800545c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	4932      	ldr	r1, [pc, #200]	@ (8005530 <HAL_I2S_Init+0x278>)
 8005468:	428a      	cmp	r2, r1
 800546a:	d101      	bne.n	8005470 <HAL_I2S_Init+0x1b8>
 800546c:	4a31      	ldr	r2, [pc, #196]	@ (8005534 <HAL_I2S_Init+0x27c>)
 800546e:	e001      	b.n	8005474 <HAL_I2S_Init+0x1bc>
 8005470:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005474:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005478:	f023 030f 	bic.w	r3, r3, #15
 800547c:	61d3      	str	r3, [r2, #28]
				(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
		I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a2b      	ldr	r2, [pc, #172]	@ (8005530 <HAL_I2S_Init+0x278>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d101      	bne.n	800548c <HAL_I2S_Init+0x1d4>
 8005488:	4b2a      	ldr	r3, [pc, #168]	@ (8005534 <HAL_I2S_Init+0x27c>)
 800548a:	e001      	b.n	8005490 <HAL_I2S_Init+0x1d8>
 800548c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005490:	2202      	movs	r2, #2
 8005492:	621a      	str	r2, [r3, #32]

		/* Get the I2SCFGR register value */
		tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a25      	ldr	r2, [pc, #148]	@ (8005530 <HAL_I2S_Init+0x278>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d101      	bne.n	80054a2 <HAL_I2S_Init+0x1ea>
 800549e:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <HAL_I2S_Init+0x27c>)
 80054a0:	e001      	b.n	80054a6 <HAL_I2S_Init+0x1ee>
 80054a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	817b      	strh	r3, [r7, #10]

		/* Get the mode to be configured for the extended I2S */
		if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b2:	d003      	beq.n	80054bc <HAL_I2S_Init+0x204>
				|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d103      	bne.n	80054c4 <HAL_I2S_Init+0x20c>
			tmp = I2S_MODE_SLAVE_RX;
 80054bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	e001      	b.n	80054c8 <HAL_I2S_Init+0x210>
		} else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
		{
			tmp = I2S_MODE_SLAVE_TX;
 80054c4:	2300      	movs	r3, #0
 80054c6:	613b      	str	r3, [r7, #16]
		}

		/* Configure the I2S Slave with the I2S Master parameter values */
		tmpreg |=
				(uint16_t) ((uint16_t) SPI_I2SCFGR_I2SMOD | (uint16_t) tmp
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.Standard
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	b29b      	uxth	r3, r3
		tmpreg |=
 80054d2:	4313      	orrs	r3, r2
 80054d4:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.DataFormat
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	b29b      	uxth	r3, r3
		tmpreg |=
 80054dc:	4313      	orrs	r3, r2
 80054de:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.CPOL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	b29b      	uxth	r3, r3
		tmpreg |=
 80054e6:	4313      	orrs	r3, r2
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	897b      	ldrh	r3, [r7, #10]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80054f4:	817b      	strh	r3, [r7, #10]

		/* Write to SPIx I2SCFGR */
		WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005530 <HAL_I2S_Init+0x278>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_I2S_Init+0x24c>
 8005500:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <HAL_I2S_Init+0x27c>)
 8005502:	e001      	b.n	8005508 <HAL_I2S_Init+0x250>
 8005504:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005508:	897a      	ldrh	r2, [r7, #10]
 800550a:	61da      	str	r2, [r3, #28]
	}
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	645a      	str	r2, [r3, #68]	@ 0x44
	hi2s->State = HAL_I2S_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	0800562f 	.word	0x0800562f
 8005528:	cccccccd 	.word	0xcccccccd
 800552c:	08005745 	.word	0x08005745
 8005530:	40003800 	.word	0x40003800
 8005534:	40003400 	.word	0x40003400

08005538 <HAL_I2S_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_TxCpltCallback could be implemented in the user file
	 */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_I2S_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_I2S_ErrorCallback>:
 * @brief  I2S error callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_ErrorCallback could be implemented in the user file
	 */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <I2S_Transmit_IT>:
 * @brief  Transmit an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	/* Transmit data */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60da      	str	r2, [r3, #12]
	hi2s->pTxBuffPtr++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	1c9a      	adds	r2, r3, #2
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	625a      	str	r2, [r3, #36]	@ 0x24
	hi2s->TxXferCount--;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10e      	bne.n	80055c8 <I2S_Transmit_IT+0x54>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055b8:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
		HAL_I2S_TxCpltCallback(hi2s);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ffb8 	bl	8005538 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <I2S_Receive_IT>:
 * @brief  Receive an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s) {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* Receive data */
	(*hi2s->pRxBuffPtr) = (uint16_t) hi2s->Instance->DR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e2:	b292      	uxth	r2, r2
 80055e4:	801a      	strh	r2, [r3, #0]
	hi2s->pRxBuffPtr++;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	1c9a      	adds	r2, r3, #2
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	hi2s->RxXferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10e      	bne.n	8005626 <I2S_Receive_IT+0x56>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005616:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
		HAL_I2S_RxCpltCallback(hi2s);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff ff93 	bl	800554c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <I2S_IRQHandler>:
 * @brief  This function handles I2S interrupt request.
 * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s) {
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	617b      	str	r3, [r7, #20]

	if (hi2s->State == HAL_I2S_STATE_BUSY_RX) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b04      	cmp	r3, #4
 8005648:	d13a      	bne.n	80056c0 <I2S_IRQHandler+0x92>
		/* I2S in mode Receiver ------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b01      	cmp	r3, #1
 8005652:	d109      	bne.n	8005668 <I2S_IRQHandler+0x3a>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET)) {
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565e:	2b40      	cmp	r3, #64	@ 0x40
 8005660:	d102      	bne.n	8005668 <I2S_IRQHandler+0x3a>
			I2S_Receive_IT(hi2s);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff ffb4 	bl	80055d0 <I2S_Receive_IT>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800566e:	2b40      	cmp	r3, #64	@ 0x40
 8005670:	d126      	bne.n	80056c0 <I2S_IRQHandler+0x92>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b20      	cmp	r3, #32
 800567e:	d11f      	bne.n	80056c0 <I2S_IRQHandler+0x92>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800568e:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	693b      	ldr	r3, [r7, #16]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b2:	f043 0202 	orr.w	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff ff50 	bl	8005560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}

	if (hi2s->State == HAL_I2S_STATE_BUSY_TX) {
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d136      	bne.n	800573a <I2S_IRQHandler+0x10c>
		/* I2S in mode Transmitter -----------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d109      	bne.n	80056ea <I2S_IRQHandler+0xbc>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET)) {
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e0:	2b80      	cmp	r3, #128	@ 0x80
 80056e2:	d102      	bne.n	80056ea <I2S_IRQHandler+0xbc>
			I2S_Transmit_IT(hi2s);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff ff45 	bl	8005574 <I2S_Transmit_IT>
		}

		/* I2S Underrun error interrupt occurred --------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d122      	bne.n	800573a <I2S_IRQHandler+0x10c>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d11b      	bne.n	800573a <I2S_IRQHandler+0x10c>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005710:	605a      	str	r2, [r3, #4]

			/* Clear Underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572c:	f043 0204 	orr.w	r2, r3, #4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff ff13 	bl	8005560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_I2SEx_FullDuplex_IRQHandler>:
/**
 * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
 * @param  hi2s I2S handle
 * @retval HAL status
 */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a92      	ldr	r2, [pc, #584]	@ (80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d101      	bne.n	8005762 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800575e:	4b92      	ldr	r3, [pc, #584]	@ (80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005760:	e001      	b.n	8005766 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005762:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	61bb      	str	r3, [r7, #24]
	__IO uint32_t i2scr2 = hi2s->Instance->CR2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	617b      	str	r3, [r7, #20]
	__IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a8b      	ldr	r2, [pc, #556]	@ (80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d101      	bne.n	8005780 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800577c:	4b8a      	ldr	r3, [pc, #552]	@ (80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800577e:	e001      	b.n	8005784 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005780:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	613b      	str	r3, [r7, #16]

	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005790:	d004      	beq.n	800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
			|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f040 8099 	bne.w	80058ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
		/* I2S in mode Transmitter -------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d107      	bne.n	80057b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
				&& ((i2scr2 & I2S_IT_TXE) != RESET)) {
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2S(hi2s);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f925 	bl	8005a00 <I2SEx_TxISR_I2S>
		}

		/* I2Sext in mode Receiver -----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d107      	bne.n	80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
				&& ((i2sextcr2 & I2S_IT_RXNE) != RESET)) {
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2SExt(hi2s);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f9c8 	bl	8005b60 <I2SEx_RxISR_I2SExt>
		}

		/* I2Sext Overrun error interrupt occurred --------------------------------*/
		if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d6:	2b40      	cmp	r3, #64	@ 0x40
 80057d8:	d13a      	bne.n	8005850 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d035      	beq.n	8005850 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a6e      	ldr	r2, [pc, #440]	@ (80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d101      	bne.n	80057f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80057ee:	4b6e      	ldr	r3, [pc, #440]	@ (80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057f0:	e001      	b.n	80057f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80057f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4969      	ldr	r1, [pc, #420]	@ (80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057fe:	428b      	cmp	r3, r1
 8005800:	d101      	bne.n	8005806 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005802:	4b69      	ldr	r3, [pc, #420]	@ (80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005804:	e001      	b.n	800580a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005806:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800580a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800580e:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800581e:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005842:	f043 0202 	orr.w	r2, r3, #2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff fe88 	bl	8005560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2S Underrun error interrupt occurred ----------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b08      	cmp	r3, #8
 8005858:	f040 80c3 	bne.w	80059e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80bd 	beq.w	80059e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005876:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a49      	ldr	r2, [pc, #292]	@ (80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d101      	bne.n	8005886 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005882:	4b49      	ldr	r3, [pc, #292]	@ (80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005884:	e001      	b.n	800588a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005886:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4944      	ldr	r1, [pc, #272]	@ (80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005892:	428b      	cmp	r3, r1
 8005894:	d101      	bne.n	800589a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005896:	4b44      	ldr	r3, [pc, #272]	@ (80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005898:	e001      	b.n	800589e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800589a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800589e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058a2:	605a      	str	r2, [r3, #4]

			/* Clear underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058a4:	2300      	movs	r3, #0
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	68bb      	ldr	r3, [r7, #8]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	f043 0204 	orr.w	r2, r3, #4
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fe4a 	bl	8005560 <HAL_I2S_ErrorCallback>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 80058cc:	e089      	b.n	80059e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
		}
	}
	/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
	else {
		/* I2Sext in mode Transmitter ----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d107      	bne.n	80058e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
				&& ((i2sextcr2 & I2S_IT_TXE) != RESET)) {
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2SExt(hi2s);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f8be 	bl	8005a64 <I2SEx_TxISR_I2SExt>
		}

		/* I2S in mode Receiver --------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d107      	bne.n	8005902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
				&& ((i2scr2 & I2S_IT_RXNE) != RESET)) {
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2S(hi2s);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f8fd 	bl	8005afc <I2SEx_RxISR_I2S>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005908:	2b40      	cmp	r3, #64	@ 0x40
 800590a:	d12f      	bne.n	800596c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02a      	beq.n	800596c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005924:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d101      	bne.n	8005934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005930:	4b1d      	ldr	r3, [pc, #116]	@ (80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005932:	e001      	b.n	8005938 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005934:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4919      	ldr	r1, [pc, #100]	@ (80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005940:	428b      	cmp	r3, r1
 8005942:	d101      	bne.n	8005948 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005944:	4b18      	ldr	r3, [pc, #96]	@ (80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005946:	e001      	b.n	800594c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005948:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800594c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005950:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595e:	f043 0202 	orr.w	r2, r3, #2
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff fdfa 	bl	8005560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2Sext Underrun error interrupt occurred -------------------------------*/
		if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b08      	cmp	r3, #8
 8005974:	d136      	bne.n	80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d031      	beq.n	80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a07      	ldr	r2, [pc, #28]	@ (80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800598a:	4b07      	ldr	r3, [pc, #28]	@ (80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800598c:	e001      	b.n	8005992 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800598e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4902      	ldr	r1, [pc, #8]	@ (80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800599a:	428b      	cmp	r3, r1
 800599c:	d106      	bne.n	80059ac <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800599e:	4b02      	ldr	r3, [pc, #8]	@ (80059a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059a0:	e006      	b.n	80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80059a2:	bf00      	nop
 80059a4:	40003800 	.word	0x40003800
 80059a8:	40003400 	.word	0x40003400
 80059ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059b4:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059c4:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d2:	f043 0204 	orr.w	r2, r3, #4
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fdc0 	bl	8005560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 80059e0:	e000      	b.n	80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 80059e2:	bf00      	nop
}
 80059e4:	bf00      	nop
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_I2SEx_TxRxCpltCallback>:
/**
 * @brief  Tx and Rx Transfer completed callback
 * @param  hi2s I2S handle
 * @retval None
 */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
	 */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <I2SEx_TxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	1c99      	adds	r1, r3, #2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6251      	str	r1, [r2, #36]	@ 0x24
 8005a12:	881a      	ldrh	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d113      	bne.n	8005a5a <I2SEx_TxISR_I2S+0x5a>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a40:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <I2SEx_TxISR_I2S+0x5a>
			hi2s->State = HAL_I2S_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff ffc9 	bl	80059ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <I2SEx_TxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	1c99      	adds	r1, r3, #2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6251      	str	r1, [r2, #36]	@ 0x24
 8005a76:	8819      	ldrh	r1, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005af4 <I2SEx_TxISR_I2SExt+0x90>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d101      	bne.n	8005a86 <I2SEx_TxISR_I2SExt+0x22>
 8005a82:	4b1d      	ldr	r3, [pc, #116]	@ (8005af8 <I2SEx_TxISR_I2SExt+0x94>)
 8005a84:	e001      	b.n	8005a8a <I2SEx_TxISR_I2SExt+0x26>
 8005a86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a8a:	460a      	mov	r2, r1
 8005a8c:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d121      	bne.n	8005aea <I2SEx_TxISR_I2SExt+0x86>
		/* Disable I2Sext TXE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a12      	ldr	r2, [pc, #72]	@ (8005af4 <I2SEx_TxISR_I2SExt+0x90>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d101      	bne.n	8005ab4 <I2SEx_TxISR_I2SExt+0x50>
 8005ab0:	4b11      	ldr	r3, [pc, #68]	@ (8005af8 <I2SEx_TxISR_I2SExt+0x94>)
 8005ab2:	e001      	b.n	8005ab8 <I2SEx_TxISR_I2SExt+0x54>
 8005ab4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	490d      	ldr	r1, [pc, #52]	@ (8005af4 <I2SEx_TxISR_I2SExt+0x90>)
 8005ac0:	428b      	cmp	r3, r1
 8005ac2:	d101      	bne.n	8005ac8 <I2SEx_TxISR_I2SExt+0x64>
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <I2SEx_TxISR_I2SExt+0x94>)
 8005ac6:	e001      	b.n	8005acc <I2SEx_TxISR_I2SExt+0x68>
 8005ac8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005acc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ad0:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <I2SEx_TxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff ff81 	bl	80059ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40003800 	.word	0x40003800
 8005af8:	40003400 	.word	0x40003400

08005afc <I2SEx_RxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68d8      	ldr	r0, [r3, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	1c99      	adds	r1, r3, #2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005b14:	b282      	uxth	r2, r0
 8005b16:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d113      	bne.n	8005b58 <I2SEx_RxISR_I2S+0x5c>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b3e:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <I2SEx_RxISR_I2S+0x5c>
			hi2s->State = HAL_I2S_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff ff4a 	bl	80059ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <I2SEx_RxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a20      	ldr	r2, [pc, #128]	@ (8005bf0 <I2SEx_RxISR_I2SExt+0x90>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d101      	bne.n	8005b76 <I2SEx_RxISR_I2SExt+0x16>
 8005b72:	4b20      	ldr	r3, [pc, #128]	@ (8005bf4 <I2SEx_RxISR_I2SExt+0x94>)
 8005b74:	e001      	b.n	8005b7a <I2SEx_RxISR_I2SExt+0x1a>
 8005b76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b7a:	68d8      	ldr	r0, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	1c99      	adds	r1, r3, #2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005b86:	b282      	uxth	r2, r0
 8005b88:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d121      	bne.n	8005be6 <I2SEx_RxISR_I2SExt+0x86>
		/* Disable I2Sext RXNE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a12      	ldr	r2, [pc, #72]	@ (8005bf0 <I2SEx_RxISR_I2SExt+0x90>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d101      	bne.n	8005bb0 <I2SEx_RxISR_I2SExt+0x50>
 8005bac:	4b11      	ldr	r3, [pc, #68]	@ (8005bf4 <I2SEx_RxISR_I2SExt+0x94>)
 8005bae:	e001      	b.n	8005bb4 <I2SEx_RxISR_I2SExt+0x54>
 8005bb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	490d      	ldr	r1, [pc, #52]	@ (8005bf0 <I2SEx_RxISR_I2SExt+0x90>)
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	d101      	bne.n	8005bc4 <I2SEx_RxISR_I2SExt+0x64>
 8005bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf4 <I2SEx_RxISR_I2SExt+0x94>)
 8005bc2:	e001      	b.n	8005bc8 <I2SEx_RxISR_I2SExt+0x68>
 8005bc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bc8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bcc:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <I2SEx_RxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff ff03 	bl	80059ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40003800 	.word	0x40003800
 8005bf4:	40003400 	.word	0x40003400

08005bf8 <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e267      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d075      	beq.n	8005d02 <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c16:	4b88      	ldr	r3, [pc, #544]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d00c      	beq.n	8005c3c <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c22:	4b85      	ldr	r3, [pc, #532]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d112      	bne.n	8005c54 <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8005c2e:	4b82      	ldr	r3, [pc, #520]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c3a:	d10b      	bne.n	8005c54 <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c3c:	4b7e      	ldr	r3, [pc, #504]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d05b      	beq.n	8005d00 <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d157      	bne.n	8005d00 <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e242      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c5c:	d106      	bne.n	8005c6c <HAL_RCC_OscConfig+0x74>
 8005c5e:	4b76      	ldr	r3, [pc, #472]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a75      	ldr	r2, [pc, #468]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e01d      	b.n	8005ca8 <HAL_RCC_OscConfig+0xb0>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c74:	d10c      	bne.n	8005c90 <HAL_RCC_OscConfig+0x98>
 8005c76:	4b70      	ldr	r3, [pc, #448]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a6f      	ldr	r2, [pc, #444]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	4b6d      	ldr	r3, [pc, #436]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a6c      	ldr	r2, [pc, #432]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	e00b      	b.n	8005ca8 <HAL_RCC_OscConfig+0xb0>
 8005c90:	4b69      	ldr	r3, [pc, #420]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a68      	ldr	r2, [pc, #416]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	4b66      	ldr	r3, [pc, #408]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a65      	ldr	r2, [pc, #404]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ca6:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d013      	beq.n	8005cd8 <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8005cb0:	f7fc f90e 	bl	8001ed0 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005cb8:	f7fc f90a 	bl	8001ed0 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b64      	cmp	r3, #100	@ 0x64
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e207      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8005cca:	4b5b      	ldr	r3, [pc, #364]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0f0      	beq.n	8005cb8 <HAL_RCC_OscConfig+0xc0>
 8005cd6:	e014      	b.n	8005d02 <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8005cd8:	f7fc f8fa 	bl	8001ed0 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8005ce0:	f7fc f8f6 	bl	8001ed0 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	@ 0x64
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e1f3      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8005cf2:	4b51      	ldr	r3, [pc, #324]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0xe8>
 8005cfe:	e000      	b.n	8005d02 <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d00:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d063      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005d1a:	4b47      	ldr	r3, [pc, #284]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 030c 	and.w	r3, r3, #12
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d11c      	bne.n	8005d60 <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8005d26:	4b44      	ldr	r3, [pc, #272]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d116      	bne.n	8005d60 <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d32:	4b41      	ldr	r3, [pc, #260]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d001      	beq.n	8005d4a <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e1c7      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8005d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	4937      	ldr	r1, [pc, #220]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d5e:	e03a      	b.n	8005dd6 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d020      	beq.n	8005daa <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8005d68:	4b34      	ldr	r3, [pc, #208]	@ (8005e3c <HAL_RCC_OscConfig+0x244>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8005d6e:	f7fc f8af 	bl	8001ed0 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8005d76:	f7fc f8ab 	bl	8001ed0 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e1a8      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8005d88:	4b2b      	ldr	r3, [pc, #172]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8005d94:	4b28      	ldr	r3, [pc, #160]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	4925      	ldr	r1, [pc, #148]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	600b      	str	r3, [r1, #0]
 8005da8:	e015      	b.n	8005dd6 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8005daa:	4b24      	ldr	r3, [pc, #144]	@ (8005e3c <HAL_RCC_OscConfig+0x244>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8005db0:	f7fc f88e 	bl	8001ed0 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8005db8:	f7fc f88a 	bl	8001ed0 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e187      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8005dca:	4b1b      	ldr	r3, [pc, #108]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d036      	beq.n	8005e50 <HAL_RCC_OscConfig+0x258>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d016      	beq.n	8005e18 <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8005dea:	4b15      	ldr	r3, [pc, #84]	@ (8005e40 <HAL_RCC_OscConfig+0x248>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005df0:	f7fc f86e 	bl	8001ed0 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8005df8:	f7fc f86a 	bl	8001ed0 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e167      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e38 <HAL_RCC_OscConfig+0x240>)
 8005e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCC_OscConfig+0x200>
 8005e16:	e01b      	b.n	8005e50 <HAL_RCC_OscConfig+0x258>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8005e18:	4b09      	ldr	r3, [pc, #36]	@ (8005e40 <HAL_RCC_OscConfig+0x248>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8005e1e:	f7fc f857 	bl	8001ed0 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8005e24:	e00e      	b.n	8005e44 <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8005e26:	f7fc f853 	bl	8001ed0 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d907      	bls.n	8005e44 <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e150      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	42470000 	.word	0x42470000
 8005e40:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8005e44:	4b88      	ldr	r3, [pc, #544]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1ea      	bne.n	8005e26 <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8097 	beq.w	8005f8c <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8005e62:	4b81      	ldr	r3, [pc, #516]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10f      	bne.n	8005e8e <HAL_RCC_OscConfig+0x296>
			__HAL_RCC_PWR_CLK_ENABLE();
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
 8005e72:	4b7d      	ldr	r3, [pc, #500]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e76:	4a7c      	ldr	r2, [pc, #496]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e86:	60bb      	str	r3, [r7, #8]
 8005e88:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8005e8e:	4b77      	ldr	r3, [pc, #476]	@ (800606c <HAL_RCC_OscConfig+0x474>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d118      	bne.n	8005ecc <HAL_RCC_OscConfig+0x2d4>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e9a:	4b74      	ldr	r3, [pc, #464]	@ (800606c <HAL_RCC_OscConfig+0x474>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a73      	ldr	r2, [pc, #460]	@ (800606c <HAL_RCC_OscConfig+0x474>)
 8005ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ea4:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8005ea6:	f7fc f813 	bl	8001ed0 <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_OscConfig+0x2c8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8005eae:	f7fc f80f 	bl	8001ed0 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x2c8>
					return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e10c      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8005ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800606c <HAL_RCC_OscConfig+0x474>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0f0      	beq.n	8005eae <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d106      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x2ea>
 8005ed4:	4b64      	ldr	r3, [pc, #400]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed8:	4a63      	ldr	r2, [pc, #396]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ee0:	e01c      	b.n	8005f1c <HAL_RCC_OscConfig+0x324>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b05      	cmp	r3, #5
 8005ee8:	d10c      	bne.n	8005f04 <HAL_RCC_OscConfig+0x30c>
 8005eea:	4b5f      	ldr	r3, [pc, #380]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eee:	4a5e      	ldr	r2, [pc, #376]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005ef0:	f043 0304 	orr.w	r3, r3, #4
 8005ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efa:	4a5b      	ldr	r2, [pc, #364]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005efc:	f043 0301 	orr.w	r3, r3, #1
 8005f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f02:	e00b      	b.n	8005f1c <HAL_RCC_OscConfig+0x324>
 8005f04:	4b58      	ldr	r3, [pc, #352]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f08:	4a57      	ldr	r2, [pc, #348]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005f0a:	f023 0301 	bic.w	r3, r3, #1
 8005f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f10:	4b55      	ldr	r3, [pc, #340]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f14:	4a54      	ldr	r2, [pc, #336]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005f16:	f023 0304 	bic.w	r3, r3, #4
 8005f1a:	6713      	str	r3, [r2, #112]	@ 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d015      	beq.n	8005f50 <HAL_RCC_OscConfig+0x358>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005f24:	f7fb ffd4 	bl	8001ed0 <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8005f2a:	e00a      	b.n	8005f42 <HAL_RCC_OscConfig+0x34a>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005f2c:	f7fb ffd0 	bl	8001ed0 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x34a>
					return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e0cb      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8005f42:	4b49      	ldr	r3, [pc, #292]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0ee      	beq.n	8005f2c <HAL_RCC_OscConfig+0x334>
 8005f4e:	e014      	b.n	8005f7a <HAL_RCC_OscConfig+0x382>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8005f50:	f7fb ffbe 	bl	8001ed0 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8005f56:	e00a      	b.n	8005f6e <HAL_RCC_OscConfig+0x376>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005f58:	f7fb ffba 	bl	8001ed0 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x376>
					return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e0b5      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8005f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1ee      	bne.n	8005f58 <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8005f7a:	7dfb      	ldrb	r3, [r7, #23]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d105      	bne.n	8005f8c <HAL_RCC_OscConfig+0x394>
			__HAL_RCC_PWR_CLK_DISABLE();
 8005f80:	4b39      	ldr	r3, [pc, #228]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	4a38      	ldr	r2, [pc, #224]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f8a:	6413      	str	r3, [r2, #64]	@ 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 80a1 	beq.w	80060d8 <HAL_RCC_OscConfig+0x4e0>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8005f96:	4b34      	ldr	r3, [pc, #208]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d05c      	beq.n	800605c <HAL_RCC_OscConfig+0x464>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d141      	bne.n	800602e <HAL_RCC_OscConfig+0x436>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8005faa:	4b31      	ldr	r3, [pc, #196]	@ (8006070 <HAL_RCC_OscConfig+0x478>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8005fb0:	f7fb ff8e 	bl	8001ed0 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x3d2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8005fb8:	f7fb ff8a 	bl	8001ed0 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x3d2>
						return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e087      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8005fca:	4b27      	ldr	r3, [pc, #156]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69da      	ldr	r2, [r3, #28]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	019b      	lsls	r3, r3, #6
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff8:	061b      	lsls	r3, r3, #24
 8005ffa:	491b      	ldr	r1, [pc, #108]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8006000:	4b1b      	ldr	r3, [pc, #108]	@ (8006070 <HAL_RCC_OscConfig+0x478>)
 8006002:	2201      	movs	r2, #1
 8006004:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8006006:	f7fb ff63 	bl	8001ed0 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x428>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800600e:	f7fb ff5f 	bl	8001ed0 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x428>
						return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e05c      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8006020:	4b11      	ldr	r3, [pc, #68]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0f0      	beq.n	800600e <HAL_RCC_OscConfig+0x416>
 800602c:	e054      	b.n	80060d8 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800602e:	4b10      	ldr	r3, [pc, #64]	@ (8006070 <HAL_RCC_OscConfig+0x478>)
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8006034:	f7fb ff4c 	bl	8001ed0 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0x456>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800603c:	f7fb ff48 	bl	8001ed0 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0x456>
						return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e045      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800604e:	4b06      	ldr	r3, [pc, #24]	@ (8006068 <HAL_RCC_OscConfig+0x470>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1f0      	bne.n	800603c <HAL_RCC_OscConfig+0x444>
 800605a:	e03d      	b.n	80060d8 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d107      	bne.n	8006074 <HAL_RCC_OscConfig+0x47c>
				return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e038      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
 8006068:	40023800 	.word	0x40023800
 800606c:	40007000 	.word	0x40007000
 8006070:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 8006074:	4b1b      	ldr	r3, [pc, #108]	@ (80060e4 <HAL_RCC_OscConfig+0x4ec>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d028      	beq.n	80060d4 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 800608c:	429a      	cmp	r2, r3
 800608e:	d121      	bne.n	80060d4 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800609a:	429a      	cmp	r2, r3
 800609c:	d11a      	bne.n	80060d4 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060a4:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 80060aa:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d111      	bne.n	80060d4 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 80060be:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d107      	bne.n	80060d4 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 80060ce:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d001      	beq.n	80060d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
						{
					return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <HAL_RCC_OscConfig+0x4e2>
				}
			}
		}
	}
	return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40023800 	.word	0x40023800

080060e8 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0cc      	b.n	8006296 <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 80060fc:	4b68      	ldr	r3, [pc, #416]	@ (80062a0 <HAL_RCC_ClockConfig+0x1b8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d90c      	bls.n	8006124 <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800610a:	4b65      	ldr	r3, [pc, #404]	@ (80062a0 <HAL_RCC_ClockConfig+0x1b8>)
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8006112:	4b63      	ldr	r3, [pc, #396]	@ (80062a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d001      	beq.n	8006124 <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0b8      	b.n	8006296 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d020      	beq.n	8006172 <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800613c:	4b59      	ldr	r3, [pc, #356]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4a58      	ldr	r2, [pc, #352]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006142:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006146:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006154:	4b53      	ldr	r3, [pc, #332]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4a52      	ldr	r2, [pc, #328]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 800615a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800615e:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006160:	4b50      	ldr	r3, [pc, #320]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	494d      	ldr	r1, [pc, #308]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d044      	beq.n	8006208 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d107      	bne.n	8006196 <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8006186:	4b47      	ldr	r3, [pc, #284]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d119      	bne.n	80061c6 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e07f      	b.n	8006296 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d003      	beq.n	80061a6 <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d107      	bne.n	80061b6 <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80061a6:	4b3f      	ldr	r3, [pc, #252]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e06f      	b.n	8006296 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80061b6:	4b3b      	ldr	r3, [pc, #236]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e067      	b.n	8006296 <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061c6:	4b37      	ldr	r3, [pc, #220]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f023 0203 	bic.w	r2, r3, #3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4934      	ldr	r1, [pc, #208]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 80061d8:	f7fb fe7a 	bl	8001ed0 <HAL_GetTick>
 80061dc:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80061de:	e00a      	b.n	80061f6 <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80061e0:	f7fb fe76 	bl	8001ed0 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e04f      	b.n	8006296 <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80061f6:	4b2b      	ldr	r3, [pc, #172]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	429a      	cmp	r2, r3
 8006206:	d1eb      	bne.n	80061e0 <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8006208:	4b25      	ldr	r3, [pc, #148]	@ (80062a0 <HAL_RCC_ClockConfig+0x1b8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d20c      	bcs.n	8006230 <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8006216:	4b22      	ldr	r3, [pc, #136]	@ (80062a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800621e:	4b20      	ldr	r3, [pc, #128]	@ (80062a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e032      	b.n	8006296 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 800623c:	4b19      	ldr	r3, [pc, #100]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4916      	ldr	r1, [pc, #88]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 800625a:	4b12      	ldr	r3, [pc, #72]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	490e      	ldr	r1, [pc, #56]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	4313      	orrs	r3, r2
 800626c:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800626e:	f000 f821 	bl	80062b4 <HAL_RCC_GetSysClockFreq>
 8006272:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006274:	4b0b      	ldr	r3, [pc, #44]	@ (80062a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	490a      	ldr	r1, [pc, #40]	@ (80062a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006280:	5ccb      	ldrb	r3, [r1, r3]
 8006282:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8006286:	4a09      	ldr	r2, [pc, #36]	@ (80062ac <HAL_RCC_ClockConfig+0x1c4>)
 8006288:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 800628a:	4b09      	ldr	r3, [pc, #36]	@ (80062b0 <HAL_RCC_ClockConfig+0x1c8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f7fb fdda 	bl	8001e48 <HAL_InitTick>

	return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	40023c00 	.word	0x40023c00
 80062a4:	40023800 	.word	0x40023800
 80062a8:	0800c8e0 	.word	0x0800c8e0
 80062ac:	20000010 	.word	0x20000010
 80062b0:	20000014 	.word	0x20000014

080062b4 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 80062b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062b8:	b094      	sub	sp, #80	@ 0x50
 80062ba:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t pllvco = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t pllp = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t sysclockfreq = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	64bb      	str	r3, [r7, #72]	@ 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80062cc:	4b79      	ldr	r3, [pc, #484]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 030c 	and.w	r3, r3, #12
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d00d      	beq.n	80062f4 <HAL_RCC_GetSysClockFreq+0x40>
 80062d8:	2b08      	cmp	r3, #8
 80062da:	f200 80e1 	bhi.w	80064a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <HAL_RCC_GetSysClockFreq+0x34>
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d003      	beq.n	80062ee <HAL_RCC_GetSysClockFreq+0x3a>
 80062e6:	e0db      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0x1ec>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 80062e8:	4b73      	ldr	r3, [pc, #460]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80062ea:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 80062ec:	e0db      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 80062ee:	4b73      	ldr	r3, [pc, #460]	@ (80064bc <HAL_RCC_GetSysClockFreq+0x208>)
 80062f0:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 80062f2:	e0d8      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062f4:	4b6f      	ldr	r3, [pc, #444]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062fc:	647b      	str	r3, [r7, #68]	@ 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 80062fe:	4b6d      	ldr	r3, [pc, #436]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d063      	beq.n	80063d2 <HAL_RCC_GetSysClockFreq+0x11e>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800630a:	4b6a      	ldr	r3, [pc, #424]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800630c:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800630e:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8006310:	2200      	movs	r2, #0
 8006312:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006314:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631c:	633b      	str	r3, [r7, #48]	@ 0x30
 800631e:	2300      	movs	r3, #0
 8006320:	637b      	str	r3, [r7, #52]	@ 0x34
 8006322:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	f04f 0000 	mov.w	r0, #0
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	0159      	lsls	r1, r3, #5
 8006334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006338:	0150      	lsls	r0, r2, #5
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4621      	mov	r1, r4
 8006340:	1a51      	subs	r1, r2, r1
 8006342:	6139      	str	r1, [r7, #16]
 8006344:	4629      	mov	r1, r5
 8006346:	eb63 0301 	sbc.w	r3, r3, r1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006358:	4659      	mov	r1, fp
 800635a:	018b      	lsls	r3, r1, #6
 800635c:	4651      	mov	r1, sl
 800635e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006362:	4651      	mov	r1, sl
 8006364:	018a      	lsls	r2, r1, #6
 8006366:	4651      	mov	r1, sl
 8006368:	ebb2 0801 	subs.w	r8, r2, r1
 800636c:	4659      	mov	r1, fp
 800636e:	eb63 0901 	sbc.w	r9, r3, r1
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800637e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006386:	4690      	mov	r8, r2
 8006388:	4699      	mov	r9, r3
 800638a:	4623      	mov	r3, r4
 800638c:	eb18 0303 	adds.w	r3, r8, r3
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	462b      	mov	r3, r5
 8006394:	eb49 0303 	adc.w	r3, r9, r3
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063a6:	4629      	mov	r1, r5
 80063a8:	024b      	lsls	r3, r1, #9
 80063aa:	4621      	mov	r1, r4
 80063ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063b0:	4621      	mov	r1, r4
 80063b2:	024a      	lsls	r2, r1, #9
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80063b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ba:	2200      	movs	r2, #0
 80063bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063c4:	f7fa fb42 	bl	8000a4c <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80063cc:	4613      	mov	r3, r2
 80063ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063d0:	e058      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x1d0>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80063d2:	4b38      	ldr	r3, [pc, #224]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80063d4:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80063d6:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80063d8:	2200      	movs	r2, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	4611      	mov	r1, r2
 80063de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063e2:	623b      	str	r3, [r7, #32]
 80063e4:	2300      	movs	r3, #0
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	f04f 0000 	mov.w	r0, #0
 80063f4:	f04f 0100 	mov.w	r1, #0
 80063f8:	0159      	lsls	r1, r3, #5
 80063fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063fe:	0150      	lsls	r0, r2, #5
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4641      	mov	r1, r8
 8006406:	ebb2 0a01 	subs.w	sl, r2, r1
 800640a:	4649      	mov	r1, r9
 800640c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	f04f 0300 	mov.w	r3, #0
 8006418:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800641c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006420:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006424:	ebb2 040a 	subs.w	r4, r2, sl
 8006428:	eb63 050b 	sbc.w	r5, r3, fp
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	00eb      	lsls	r3, r5, #3
 8006436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800643a:	00e2      	lsls	r2, r4, #3
 800643c:	4614      	mov	r4, r2
 800643e:	461d      	mov	r5, r3
 8006440:	4643      	mov	r3, r8
 8006442:	18e3      	adds	r3, r4, r3
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	464b      	mov	r3, r9
 8006448:	eb45 0303 	adc.w	r3, r5, r3
 800644c:	607b      	str	r3, [r7, #4]
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800645a:	4629      	mov	r1, r5
 800645c:	028b      	lsls	r3, r1, #10
 800645e:	4621      	mov	r1, r4
 8006460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006464:	4621      	mov	r1, r4
 8006466:	028a      	lsls	r2, r1, #10
 8006468:	4610      	mov	r0, r2
 800646a:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800646c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800646e:	2200      	movs	r2, #0
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	61fa      	str	r2, [r7, #28]
 8006474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006478:	f7fa fae8 	bl	8000a4c <__aeabi_uldivmod>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8006480:	4613      	mov	r3, r2
 8006482:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8006484:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	0c1b      	lsrs	r3, r3, #16
 800648a:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 800648e:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	643b      	str	r3, [r7, #64]	@ 0x40

		sysclockfreq = pllvco / pllp;
 8006494:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006498:	fbb2 f3f3 	udiv	r3, r2, r3
 800649c:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 800649e:	e002      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 80064a0:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80064a2:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 80064a4:	bf00      	nop
	}
	}
	return sysclockfreq;
 80064a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3750      	adds	r7, #80	@ 0x50
 80064ac:	46bd      	mov	sp, r7
 80064ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064b2:	bf00      	nop
 80064b4:	40023800 	.word	0x40023800
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	007a1200 	.word	0x007a1200

080064c0 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 80064c4:	4b03      	ldr	r3, [pc, #12]	@ (80064d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064c6:	681b      	ldr	r3, [r3, #0]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000010 	.word	0x20000010

080064d8 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 80064dc:	f7ff fff0 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80064e0:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064e2:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	0a9b      	lsrs	r3, r3, #10
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4903      	ldr	r1, [pc, #12]	@ (80064fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ee:	5ccb      	ldrb	r3, [r1, r3]
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40023800 	.word	0x40023800
 80064fc:	0800c8f0 	.word	0x0800c8f0

08006500 <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg1 = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d105      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x28>
			== RCC_PERIPHCLK_I2S)
			|| (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d035      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x94>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8006528:	4b62      	ldr	r3, [pc, #392]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 800652e:	f7fb fccf 	bl	8001ed0 <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8006534:	e008      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x48>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8006536:	f7fb fccb 	bl	8001ed0 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x48>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e0b0      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8006548:	4b5b      	ldr	r3, [pc, #364]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f0      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	019a      	lsls	r2, r3, #6
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	071b      	lsls	r3, r3, #28
 8006560:	4955      	ldr	r1, [pc, #340]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
				PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 8006568:	4b52      	ldr	r3, [pc, #328]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800656a:	2201      	movs	r2, #1
 800656c:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 800656e:	f7fb fcaf 	bl	8001ed0 <HAL_GetTick>
 8006572:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8006574:	e008      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x88>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8006576:	f7fb fcab 	bl	8001ed0 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x88>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e090      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8006588:	4b4b      	ldr	r3, [pc, #300]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0f0      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x76>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8083 	beq.w	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
			== (RCC_PERIPHCLK_RTC)) {
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	4b44      	ldr	r3, [pc, #272]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	4a43      	ldr	r2, [pc, #268]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80065b2:	4b41      	ldr	r3, [pc, #260]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 80065be:	4b3f      	ldr	r3, [pc, #252]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a3e      	ldr	r2, [pc, #248]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c8:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 80065ca:	f7fb fc81 	bl	8001ed0 <HAL_GetTick>
 80065ce:	6178      	str	r0, [r7, #20]

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 80065d0:	e008      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80065d2:	f7fb fc7d 	bl	8001ed0 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
				return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e062      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 80065e4:	4b35      	ldr	r3, [pc, #212]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065f0:	4b31      	ldr	r3, [pc, #196]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065f8:	613b      	str	r3, [r7, #16]
		if ((tmpreg1 != 0x00000000U)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02f      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x160>
				&& ((tmpreg1)
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f403 7340 	and.w	r3, r3, #768	@ 0x300
				&& ((tmpreg1)
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	429a      	cmp	r2, r3
 800660c:	d028      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x160>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800660e:	4b2a      	ldr	r3, [pc, #168]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006616:	613b      	str	r3, [r7, #16]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8006618:	4b29      	ldr	r3, [pc, #164]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 800661e:	4b28      	ldr	r3, [pc, #160]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 8006624:	4a24      	ldr	r2, [pc, #144]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	6713      	str	r3, [r2, #112]	@ 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 800662a:	4b23      	ldr	r3, [pc, #140]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d114      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x160>
				/* Get tick */
				tickstart = HAL_GetTick();
 8006636:	f7fb fc4b 	bl	8001ed0 <HAL_GetTick>
 800663a:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800663c:	e00a      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x154>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800663e:	f7fb fc47 	bl	8001ed0 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664c:	4293      	cmp	r3, r2
 800664e:	d901      	bls.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x154>
						return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e02a      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8006654:	4b18      	ldr	r3, [pc, #96]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0ee      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x13e>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006668:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800666c:	d10d      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800666e:	4b12      	ldr	r3, [pc, #72]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800667e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006682:	490d      	ldr	r1, [pc, #52]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006684:	4313      	orrs	r3, r2
 8006686:	608b      	str	r3, [r1, #8]
 8006688:	e005      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800668a:	4b0b      	ldr	r3, [pc, #44]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4a0a      	ldr	r2, [pc, #40]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006690:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006694:	6093      	str	r3, [r2, #8]
 8006696:	4b08      	ldr	r3, [pc, #32]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006698:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a2:	4905      	ldr	r1, [pc, #20]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	42470068 	.word	0x42470068
 80066b8:	40023800 	.word	0x40023800
 80066bc:	40007000 	.word	0x40007000
 80066c0:	42470e40 	.word	0x42470e40

080066c4 <HAL_RCCEx_GetPeriphCLKFreq>:
 * @param  PeriphClk Peripheral clock identifier
 *         This parameter can be one of the following values:
 *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
 * @retval Frequency in KHz
 */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk) {
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
	/* This variable used to store the I2S clock frequency (value in Hz) */
	uint32_t frequency = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
	/* This variable used to store the VCO Input (value in Hz) */
	uint32_t vcoinput = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	613b      	str	r3, [r7, #16]
	uint32_t srcclk = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]
	/* This variable used to store the VCO Output (value in Hz) */
	uint32_t vcooutput = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60bb      	str	r3, [r7, #8]
	switch (PeriphClk) {
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d13f      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
	case RCC_PERIPHCLK_I2S: {
		/* Get the current I2S source */
		srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80066e2:	4b24      	ldr	r3, [pc, #144]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066ea:	60fb      	str	r3, [r7, #12]
		switch (srcclk) {
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d006      	beq.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066f8:	d12f      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
		/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
		case RCC_I2SCLKSOURCE_EXT: {
			/* Set the I2S clock to the external clock  value */
			frequency = EXTERNAL_CLOCK_VALUE;
 80066fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80066fc:	617b      	str	r3, [r7, #20]
			break;
 80066fe:	e02f      	b.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
			/* Configure the PLLI2S division factor */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE) {
 8006700:	4b1c      	ldr	r3, [pc, #112]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800670c:	d108      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSE_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800670e:	4b19      	ldr	r3, [pc, #100]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSE_VALUE
 8006716:	4a19      	ldr	r2, [pc, #100]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	613b      	str	r3, [r7, #16]
 800671e:	e007      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
			} else {
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSI_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006720:	4b14      	ldr	r3, [pc, #80]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSI_VALUE
 8006728:	4a15      	ldr	r2, [pc, #84]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800672a:	fbb2 f3f3 	udiv	r3, r2, r3
 800672e:	613b      	str	r3, [r7, #16]
			}
#endif /* STM32F411xE */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			vcooutput = (uint32_t) (vcoinput
					* (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)
 8006730:	4b10      	ldr	r3, [pc, #64]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006736:	099b      	lsrs	r3, r3, #6
							& (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006738:	f3c3 0208 	ubfx	r2, r3, #0, #9
			vcooutput = (uint32_t) (vcoinput
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	60bb      	str	r3, [r7, #8]
			/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
			frequency = (uint32_t) (vcooutput
					/ (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U)
 8006744:	4b0b      	ldr	r3, [pc, #44]	@ (8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800674a:	0f1b      	lsrs	r3, r3, #28
							& (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800674c:	f003 0307 	and.w	r3, r3, #7
			frequency = (uint32_t) (vcooutput
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	fbb2 f3f3 	udiv	r3, r2, r3
 8006756:	617b      	str	r3, [r7, #20]
			break;
 8006758:	e002      	b.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
		}
			/* Clock not enabled for I2S*/
		default: {
			frequency = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]
			break;
 800675e:	bf00      	nop
		}
		}
		break;
 8006760:	e000      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
	}
	default: {
		break;
 8006762:	bf00      	nop
	}
	}
	return frequency;
 8006764:	697b      	ldr	r3, [r7, #20]
}
 8006766:	4618      	mov	r0, r3
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40023800 	.word	0x40023800
 8006778:	00bb8000 	.word	0x00bb8000
 800677c:	007a1200 	.word	0x007a1200
 8006780:	00f42400 	.word	0x00f42400

08006784 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e07b      	b.n	800688e <HAL_SPI_Init+0x10a>
	assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	d108      	bne.n	80067b0 <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067a6:	d009      	beq.n	80067bc <HAL_SPI_Init+0x38>
			assert_param(
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
 80067ae:	e005      	b.n	80067bc <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fb f9c8 	bl	8001b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067f2:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006840:	ea42 0103 	orr.w	r1, r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006848:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	601a      	str	r2, [r3, #0]
			((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) | (hspi->Init.Direction & (SPI_CR1_RXONLY | SPI_CR1_BIDIMODE)) | (hspi->Init.DataSize & SPI_CR1_DFF) | (hspi->Init.CLKPolarity & SPI_CR1_CPOL) | (hspi->Init.CLKPhase & SPI_CR1_CPHA) | (hspi->Init.NSS & SPI_CR1_SSM) | (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) | (hspi->Init.FirstBit & SPI_CR1_LSBFIRST) | (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management, TI Mode */
	WRITE_REG(hspi->Instance->CR2,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	0c1b      	lsrs	r3, r3, #16
 800685a:	f003 0104 	and.w	r1, r3, #4
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	f003 0210 	and.w	r2, r3, #16
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800687c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->State = HAL_SPI_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e041      	b.n	800692c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d106      	bne.n	80068c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fb f99d 	bl	8001bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f000 fb73 	bl	8006fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	d001      	beq.n	800694c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e046      	b.n	80069da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a23      	ldr	r2, [pc, #140]	@ (80069e8 <HAL_TIM_Base_Start+0xb4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d022      	beq.n	80069a4 <HAL_TIM_Base_Start+0x70>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006966:	d01d      	beq.n	80069a4 <HAL_TIM_Base_Start+0x70>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1f      	ldr	r2, [pc, #124]	@ (80069ec <HAL_TIM_Base_Start+0xb8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d018      	beq.n	80069a4 <HAL_TIM_Base_Start+0x70>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1e      	ldr	r2, [pc, #120]	@ (80069f0 <HAL_TIM_Base_Start+0xbc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <HAL_TIM_Base_Start+0x70>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1c      	ldr	r2, [pc, #112]	@ (80069f4 <HAL_TIM_Base_Start+0xc0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00e      	beq.n	80069a4 <HAL_TIM_Base_Start+0x70>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1b      	ldr	r2, [pc, #108]	@ (80069f8 <HAL_TIM_Base_Start+0xc4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_TIM_Base_Start+0x70>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a19      	ldr	r2, [pc, #100]	@ (80069fc <HAL_TIM_Base_Start+0xc8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_TIM_Base_Start+0x70>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a18      	ldr	r2, [pc, #96]	@ (8006a00 <HAL_TIM_Base_Start+0xcc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d111      	bne.n	80069c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b06      	cmp	r3, #6
 80069b4:	d010      	beq.n	80069d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0201 	orr.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c6:	e007      	b.n	80069d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40000c00 	.word	0x40000c00
 80069f8:	40010400 	.word	0x40010400
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40001800 	.word	0x40001800

08006a04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e041      	b.n	8006a9a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f839 	bl	8006aa2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f000 fabc 	bl	8006fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d020      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01b      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f06f 0202 	mvn.w	r2, #2
 8006aea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa3f 	bl	8006f84 <HAL_TIM_IC_CaptureCallback>
 8006b06:	e005      	b.n	8006b14 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa31 	bl	8006f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa42 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d020      	beq.n	8006b66 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01b      	beq.n	8006b66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f06f 0204 	mvn.w	r2, #4
 8006b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa19 	bl	8006f84 <HAL_TIM_IC_CaptureCallback>
 8006b52:	e005      	b.n	8006b60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa0b 	bl	8006f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa1c 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d020      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f003 0308 	and.w	r3, r3, #8
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d01b      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f06f 0208 	mvn.w	r2, #8
 8006b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2204      	movs	r2, #4
 8006b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	f003 0303 	and.w	r3, r3, #3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f9f3 	bl	8006f84 <HAL_TIM_IC_CaptureCallback>
 8006b9e:	e005      	b.n	8006bac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f9e5 	bl	8006f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f9f6 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d020      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 0310 	and.w	r3, r3, #16
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01b      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f06f 0210 	mvn.w	r2, #16
 8006bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f9cd 	bl	8006f84 <HAL_TIM_IC_CaptureCallback>
 8006bea:	e005      	b.n	8006bf8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f9bf 	bl	8006f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f9d0 	bl	8006f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00c      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f06f 0201 	mvn.w	r2, #1
 8006c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f99d 	bl	8006f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00c      	beq.n	8006c46 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d007      	beq.n	8006c46 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fcb3 	bl	80075ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00c      	beq.n	8006c6a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f9a1 	bl	8006fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00c      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f06f 0220 	mvn.w	r2, #32
 8006c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fc85 	bl	8007598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c8e:	bf00      	nop
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e088      	b.n	8006dc6 <HAL_TIM_IC_ConfigChannel+0x130>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d11b      	bne.n	8006cfa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006cd2:	f000 fa21 	bl	8007118 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 020c 	bic.w	r2, r2, #12
 8006ce4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6999      	ldr	r1, [r3, #24]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	619a      	str	r2, [r3, #24]
 8006cf8:	e060      	b.n	8006dbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d11c      	bne.n	8006d3a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006d10:	f000 faa5 	bl	800725e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006d22:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6999      	ldr	r1, [r3, #24]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	021a      	lsls	r2, r3, #8
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	619a      	str	r2, [r3, #24]
 8006d38:	e040      	b.n	8006dbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d11b      	bne.n	8006d78 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006d50:	f000 faf2 	bl	8007338 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69da      	ldr	r2, [r3, #28]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 020c 	bic.w	r2, r2, #12
 8006d62:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69d9      	ldr	r1, [r3, #28]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	61da      	str	r2, [r3, #28]
 8006d76:	e021      	b.n	8006dbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b0c      	cmp	r3, #12
 8006d7c:	d11c      	bne.n	8006db8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006d8e:	f000 fb0f 	bl	80073b0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006da0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69d9      	ldr	r1, [r3, #28]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	021a      	lsls	r2, r3, #8
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	61da      	str	r2, [r3, #28]
 8006db6:	e001      	b.n	8006dbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <HAL_TIM_ConfigClockSource+0x1c>
 8006de6:	2302      	movs	r3, #2
 8006de8:	e0b4      	b.n	8006f54 <HAL_TIM_ConfigClockSource+0x186>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2202      	movs	r2, #2
 8006df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e22:	d03e      	beq.n	8006ea2 <HAL_TIM_ConfigClockSource+0xd4>
 8006e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e28:	f200 8087 	bhi.w	8006f3a <HAL_TIM_ConfigClockSource+0x16c>
 8006e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e30:	f000 8086 	beq.w	8006f40 <HAL_TIM_ConfigClockSource+0x172>
 8006e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e38:	d87f      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x16c>
 8006e3a:	2b70      	cmp	r3, #112	@ 0x70
 8006e3c:	d01a      	beq.n	8006e74 <HAL_TIM_ConfigClockSource+0xa6>
 8006e3e:	2b70      	cmp	r3, #112	@ 0x70
 8006e40:	d87b      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x16c>
 8006e42:	2b60      	cmp	r3, #96	@ 0x60
 8006e44:	d050      	beq.n	8006ee8 <HAL_TIM_ConfigClockSource+0x11a>
 8006e46:	2b60      	cmp	r3, #96	@ 0x60
 8006e48:	d877      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x16c>
 8006e4a:	2b50      	cmp	r3, #80	@ 0x50
 8006e4c:	d03c      	beq.n	8006ec8 <HAL_TIM_ConfigClockSource+0xfa>
 8006e4e:	2b50      	cmp	r3, #80	@ 0x50
 8006e50:	d873      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x16c>
 8006e52:	2b40      	cmp	r3, #64	@ 0x40
 8006e54:	d058      	beq.n	8006f08 <HAL_TIM_ConfigClockSource+0x13a>
 8006e56:	2b40      	cmp	r3, #64	@ 0x40
 8006e58:	d86f      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x16c>
 8006e5a:	2b30      	cmp	r3, #48	@ 0x30
 8006e5c:	d064      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0x15a>
 8006e5e:	2b30      	cmp	r3, #48	@ 0x30
 8006e60:	d86b      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x16c>
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d060      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0x15a>
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	d867      	bhi.n	8006f3a <HAL_TIM_ConfigClockSource+0x16c>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d05c      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0x15a>
 8006e6e:	2b10      	cmp	r3, #16
 8006e70:	d05a      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0x15a>
 8006e72:	e062      	b.n	8006f3a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e84:	f000 faec 	bl	8007460 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	609a      	str	r2, [r3, #8]
      break;
 8006ea0:	e04f      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eb2:	f000 fad5 	bl	8007460 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ec4:	609a      	str	r2, [r3, #8]
      break;
 8006ec6:	e03c      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f000 f993 	bl	8007200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2150      	movs	r1, #80	@ 0x50
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 faa2 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 8006ee6:	e02c      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f000 f9ef 	bl	80072d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2160      	movs	r1, #96	@ 0x60
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fa92 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 8006f06:	e01c      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f14:	461a      	mov	r2, r3
 8006f16:	f000 f973 	bl	8007200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2140      	movs	r1, #64	@ 0x40
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fa82 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 8006f26:	e00c      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f000 fa79 	bl	800742a <TIM_ITRx_SetConfig>
      break;
 8006f38:	e003      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3e:	e000      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a46      	ldr	r2, [pc, #280]	@ (80070ec <TIM_Base_SetConfig+0x12c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <TIM_Base_SetConfig+0x40>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fde:	d00f      	beq.n	8007000 <TIM_Base_SetConfig+0x40>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a43      	ldr	r2, [pc, #268]	@ (80070f0 <TIM_Base_SetConfig+0x130>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00b      	beq.n	8007000 <TIM_Base_SetConfig+0x40>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a42      	ldr	r2, [pc, #264]	@ (80070f4 <TIM_Base_SetConfig+0x134>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d007      	beq.n	8007000 <TIM_Base_SetConfig+0x40>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a41      	ldr	r2, [pc, #260]	@ (80070f8 <TIM_Base_SetConfig+0x138>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <TIM_Base_SetConfig+0x40>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a40      	ldr	r2, [pc, #256]	@ (80070fc <TIM_Base_SetConfig+0x13c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d108      	bne.n	8007012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a35      	ldr	r2, [pc, #212]	@ (80070ec <TIM_Base_SetConfig+0x12c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d02b      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007020:	d027      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a32      	ldr	r2, [pc, #200]	@ (80070f0 <TIM_Base_SetConfig+0x130>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d023      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a31      	ldr	r2, [pc, #196]	@ (80070f4 <TIM_Base_SetConfig+0x134>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d01f      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a30      	ldr	r2, [pc, #192]	@ (80070f8 <TIM_Base_SetConfig+0x138>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01b      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a2f      	ldr	r2, [pc, #188]	@ (80070fc <TIM_Base_SetConfig+0x13c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d017      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a2e      	ldr	r2, [pc, #184]	@ (8007100 <TIM_Base_SetConfig+0x140>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d013      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a2d      	ldr	r2, [pc, #180]	@ (8007104 <TIM_Base_SetConfig+0x144>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00f      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2c      	ldr	r2, [pc, #176]	@ (8007108 <TIM_Base_SetConfig+0x148>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00b      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2b      	ldr	r2, [pc, #172]	@ (800710c <TIM_Base_SetConfig+0x14c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d007      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a2a      	ldr	r2, [pc, #168]	@ (8007110 <TIM_Base_SetConfig+0x150>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d003      	beq.n	8007072 <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a29      	ldr	r2, [pc, #164]	@ (8007114 <TIM_Base_SetConfig+0x154>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d108      	bne.n	8007084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a10      	ldr	r2, [pc, #64]	@ (80070ec <TIM_Base_SetConfig+0x12c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d003      	beq.n	80070b8 <TIM_Base_SetConfig+0xf8>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a12      	ldr	r2, [pc, #72]	@ (80070fc <TIM_Base_SetConfig+0x13c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d103      	bne.n	80070c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	691a      	ldr	r2, [r3, #16]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d105      	bne.n	80070de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f023 0201 	bic.w	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	611a      	str	r2, [r3, #16]
  }
}
 80070de:	bf00      	nop
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40010000 	.word	0x40010000
 80070f0:	40000400 	.word	0x40000400
 80070f4:	40000800 	.word	0x40000800
 80070f8:	40000c00 	.word	0x40000c00
 80070fc:	40010400 	.word	0x40010400
 8007100:	40014000 	.word	0x40014000
 8007104:	40014400 	.word	0x40014400
 8007108:	40014800 	.word	0x40014800
 800710c:	40001800 	.word	0x40001800
 8007110:	40001c00 	.word	0x40001c00
 8007114:	40002000 	.word	0x40002000

08007118 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	f023 0201 	bic.w	r2, r3, #1
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4a28      	ldr	r2, [pc, #160]	@ (80071e4 <TIM_TI1_SetConfig+0xcc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01b      	beq.n	800717e <TIM_TI1_SetConfig+0x66>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714c:	d017      	beq.n	800717e <TIM_TI1_SetConfig+0x66>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4a25      	ldr	r2, [pc, #148]	@ (80071e8 <TIM_TI1_SetConfig+0xd0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <TIM_TI1_SetConfig+0x66>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4a24      	ldr	r2, [pc, #144]	@ (80071ec <TIM_TI1_SetConfig+0xd4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00f      	beq.n	800717e <TIM_TI1_SetConfig+0x66>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4a23      	ldr	r2, [pc, #140]	@ (80071f0 <TIM_TI1_SetConfig+0xd8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00b      	beq.n	800717e <TIM_TI1_SetConfig+0x66>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4a22      	ldr	r2, [pc, #136]	@ (80071f4 <TIM_TI1_SetConfig+0xdc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d007      	beq.n	800717e <TIM_TI1_SetConfig+0x66>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4a21      	ldr	r2, [pc, #132]	@ (80071f8 <TIM_TI1_SetConfig+0xe0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d003      	beq.n	800717e <TIM_TI1_SetConfig+0x66>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4a20      	ldr	r2, [pc, #128]	@ (80071fc <TIM_TI1_SetConfig+0xe4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d101      	bne.n	8007182 <TIM_TI1_SetConfig+0x6a>
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <TIM_TI1_SetConfig+0x6c>
 8007182:	2300      	movs	r3, #0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d008      	beq.n	800719a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4313      	orrs	r3, r2
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e003      	b.n	80071a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f043 0301 	orr.w	r3, r3, #1
 80071a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	011b      	lsls	r3, r3, #4
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f023 030a 	bic.w	r3, r3, #10
 80071bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f003 030a 	and.w	r3, r3, #10
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	621a      	str	r2, [r3, #32]
}
 80071d6:	bf00      	nop
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40000400 	.word	0x40000400
 80071ec:	40000800 	.word	0x40000800
 80071f0:	40000c00 	.word	0x40000c00
 80071f4:	40010400 	.word	0x40010400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40001800 	.word	0x40001800

08007200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f023 0201 	bic.w	r2, r3, #1
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800722a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f023 030a 	bic.w	r3, r3, #10
 800723c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800725e:	b480      	push	{r7}
 8007260:	b087      	sub	sp, #28
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
 800726a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f023 0210 	bic.w	r2, r3, #16
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800728a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	021b      	lsls	r3, r3, #8
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800729c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	031b      	lsls	r3, r3, #12
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	621a      	str	r2, [r3, #32]
}
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f023 0210 	bic.w	r2, r3, #16
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	031b      	lsls	r3, r3, #12
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007314:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	4313      	orrs	r3, r2
 800731e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	621a      	str	r2, [r3, #32]
}
 800732c:	bf00      	nop
 800732e:	371c      	adds	r7, #28
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f023 0303 	bic.w	r3, r3, #3
 8007364:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007374:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	b2db      	uxtb	r3, r3
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4313      	orrs	r3, r2
 8007380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007388:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	621a      	str	r2, [r3, #32]
}
 80073a4:	bf00      	nop
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	031b      	lsls	r3, r3, #12
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007402:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	031b      	lsls	r3, r3, #12
 8007408:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4313      	orrs	r3, r2
 8007448:	f043 0307 	orr.w	r3, r3, #7
 800744c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	609a      	str	r2, [r3, #8]
}
 8007454:	bf00      	nop
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800747a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	021a      	lsls	r2, r3, #8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	431a      	orrs	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4313      	orrs	r3, r2
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	609a      	str	r2, [r3, #8]
}
 8007494:	bf00      	nop
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e05a      	b.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a21      	ldr	r2, [pc, #132]	@ (800757c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d022      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007504:	d01d      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a1d      	ldr	r2, [pc, #116]	@ (8007580 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d018      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1b      	ldr	r2, [pc, #108]	@ (8007584 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d013      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a1a      	ldr	r2, [pc, #104]	@ (8007588 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00e      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a18      	ldr	r2, [pc, #96]	@ (800758c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d009      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a17      	ldr	r2, [pc, #92]	@ (8007590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a15      	ldr	r2, [pc, #84]	@ (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d10c      	bne.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	4313      	orrs	r3, r2
 8007552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40010000 	.word	0x40010000
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40010400 	.word	0x40010400
 8007590:	40014000 	.word	0x40014000
 8007594:	40001800 	.word	0x40001800

08007598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <USB_CoreInit>:
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 80075c0:	b084      	sub	sp, #16
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	f107 001c 	add.w	r0, r7, #28
 80075ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret;
	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 80075d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d123      	bne.n	8007622 <USB_CoreInit+0x62>
		USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Init The ULPI Interface */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80075ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	60d3      	str	r3, [r2, #12]
				| USB_OTG_GUSBCFG_PHYSEL);

		/* Select vbus source */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60da      	str	r2, [r3, #12]
				| USB_OTG_GUSBCFG_ULPIEVBUSI);
		if (cfg.use_external_vbus == 1U) {
 8007602:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007606:	2b01      	cmp	r3, #1
 8007608:	d105      	bne.n	8007616 <USB_CoreInit+0x56>
			USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	60da      	str	r2, [r3, #12]
		}

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9dc 	bl	80079d4 <USB_CoreReset>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]
 8007620:	e01b      	b.n	800765a <USB_CoreInit+0x9a>
	} else /* FS interface (embedded Phy) */
	{
		/* Select FS Embedded PHY */
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60da      	str	r2, [r3, #12]

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f9d0 	bl	80079d4 <USB_CoreReset>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]

		if (cfg.battery_charging_enable == 0U) {
 8007638:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800763c:	2b00      	cmp	r3, #0
 800763e:	d106      	bne.n	800764e <USB_CoreInit+0x8e>
			/* Activate the USB Transceiver */
			USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007644:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	639a      	str	r2, [r3, #56]	@ 0x38
 800764c:	e005      	b.n	800765a <USB_CoreInit+0x9a>
		} else {
			/* Deactivate the USB Transceiver */
			USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007652:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (cfg.dma_enable == 1U) {
 800765a:	7fbb      	ldrb	r3, [r7, #30]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d10b      	bne.n	8007678 <USB_CoreInit+0xb8>
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f043 0206 	orr.w	r2, r3, #6
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	609a      	str	r2, [r3, #8]
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f043 0220 	orr.w	r2, r3, #32
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	609a      	str	r2, [r3, #8]
	}

	return ret;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007684:	b004      	add	sp, #16
 8007686:	4770      	bx	lr

08007688 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f043 0201 	orr.w	r2, r3, #1
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f023 0201 	bic.w	r2, r3, #1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USB_SetCurrentMode>:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_ModeTypeDef mode) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
	uint32_t ms = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]

	USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	60da      	str	r2, [r3, #12]

	if (mode == USB_HOST_MODE) {
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d115      	bne.n	800771a <USB_SetCurrentMode+0x4e>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 80076fa:	200a      	movs	r0, #10
 80076fc:	f7fa fbf4 	bl	8001ee8 <HAL_Delay>
			ms += 10U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	330a      	adds	r3, #10
 8007704:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_HOST_MODE)
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f956 	bl	80079b8 <USB_GetMode>
 800770c:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800770e:	2b01      	cmp	r3, #1
 8007710:	d01e      	beq.n	8007750 <USB_SetCurrentMode+0x84>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2bc7      	cmp	r3, #199	@ 0xc7
 8007716:	d9f0      	bls.n	80076fa <USB_SetCurrentMode+0x2e>
 8007718:	e01a      	b.n	8007750 <USB_SetCurrentMode+0x84>
	} else if (mode == USB_DEVICE_MODE) {
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d115      	bne.n	800774c <USB_SetCurrentMode+0x80>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 800772c:	200a      	movs	r0, #10
 800772e:	f7fa fbdb 	bl	8001ee8 <HAL_Delay>
			ms += 10U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	330a      	adds	r3, #10
 8007736:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_DEVICE_MODE)
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f93d 	bl	80079b8 <USB_GetMode>
 800773e:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <USB_SetCurrentMode+0x84>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2bc7      	cmp	r3, #199	@ 0xc7
 8007748:	d9f0      	bls.n	800772c <USB_SetCurrentMode+0x60>
 800774a:	e001      	b.n	8007750 <USB_SetCurrentMode+0x84>
	} else {
		return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e005      	b.n	800775c <USB_SetCurrentMode+0x90>
	}

	if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS) {
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2bc8      	cmp	r3, #200	@ 0xc8
 8007754:	d101      	bne.n	800775a <USB_SetCurrentMode+0x8e>
		return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e000      	b.n	800775c <USB_SetCurrentMode+0x90>
	}

	return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USB_FlushTxFifo>:
 * @param  num  FIFO number
 *         This parameter can be a value from 1 to 15
 15 means Flush all Tx FIFOs
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num) {
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800777e:	d901      	bls.n	8007784 <USB_FlushTxFifo+0x20>
			return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e01b      	b.n	80077bc <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	daf2      	bge.n	8007772 <USB_FlushTxFifo+0xe>

	/* Flush TX Fifo */
	count = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	019b      	lsls	r3, r3, #6
 8007794:	f043 0220 	orr.w	r2, r3, #32
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	611a      	str	r2, [r3, #16]

	do {
		count++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3301      	adds	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077a8:	d901      	bls.n	80077ae <USB_FlushTxFifo+0x4a>
			return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e006      	b.n	80077bc <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f003 0320 	and.w	r3, r3, #32
			== USB_OTG_GRSTCTL_TXFFLSH);
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d0f0      	beq.n	800779c <USB_FlushTxFifo+0x38>

	return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx) {
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3301      	adds	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077e0:	d901      	bls.n	80077e6 <USB_FlushRxFifo+0x1e>
			return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e018      	b.n	8007818 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	daf2      	bge.n	80077d4 <USB_FlushRxFifo+0xc>

	/* Flush RX Fifo */
	count = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2210      	movs	r2, #16
 80077f6:	611a      	str	r2, [r3, #16]

	do {
		count++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007804:	d901      	bls.n	800780a <USB_FlushRxFifo+0x42>
			return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e006      	b.n	8007818 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0310 	and.w	r3, r3, #16
			== USB_OTG_GRSTCTL_RXFFLSH);
 8007812:	2b10      	cmp	r3, #16
 8007814:	d0f0      	beq.n	80077f8 <USB_FlushRxFifo+0x30>

	return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USB_WritePacket>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 8007824:	b480      	push	{r7}
 8007826:	b089      	sub	sp, #36	@ 0x24
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4611      	mov	r1, r2
 8007830:	461a      	mov	r2, r3
 8007832:	460b      	mov	r3, r1
 8007834:	71fb      	strb	r3, [r7, #7]
 8007836:	4613      	mov	r3, r2
 8007838:	80bb      	strh	r3, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	617b      	str	r3, [r7, #20]
	uint8_t *pSrc = src;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	61fb      	str	r3, [r7, #28]
	uint32_t count32b;
	uint32_t i;

	if (dma == 0U) {
 8007842:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007846:	2b00      	cmp	r3, #0
 8007848:	d123      	bne.n	8007892 <USB_WritePacket+0x6e>
		count32b = ((uint32_t) len + 3U) / 4U;
 800784a:	88bb      	ldrh	r3, [r7, #4]
 800784c:	3303      	adds	r3, #3
 800784e:	089b      	lsrs	r3, r3, #2
 8007850:	613b      	str	r3, [r7, #16]
		for (i = 0U; i < count32b; i++) {
 8007852:	2300      	movs	r3, #0
 8007854:	61bb      	str	r3, [r7, #24]
 8007856:	e018      	b.n	800788a <USB_WritePacket+0x66>
			USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	031a      	lsls	r2, r3, #12
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4413      	add	r3, r2
 8007860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007864:	461a      	mov	r2, r3
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6013      	str	r3, [r2, #0]
			pSrc++;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	3301      	adds	r3, #1
 8007870:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	3301      	adds	r3, #1
 8007876:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	3301      	adds	r3, #1
 800787c:	61fb      	str	r3, [r7, #28]
			pSrc++;
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	3301      	adds	r3, #1
 8007882:	61fb      	str	r3, [r7, #28]
		for (i = 0U; i < count32b; i++) {
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	3301      	adds	r3, #1
 8007888:	61bb      	str	r3, [r7, #24]
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	429a      	cmp	r2, r3
 8007890:	d3e2      	bcc.n	8007858 <USB_WritePacket+0x34>
		}
	}

	return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3724      	adds	r7, #36	@ 0x24
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USB_ReadPacket>:
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void* USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest,
		uint16_t len) {
 80078a0:	b480      	push	{r7}
 80078a2:	b08b      	sub	sp, #44	@ 0x2c
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	80fb      	strh	r3, [r7, #6]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	61bb      	str	r3, [r7, #24]
	uint8_t *pDest = dest;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t pData;
	uint32_t i;
	uint32_t count32b = (uint32_t) len >> 2U;
 80078b6:	88fb      	ldrh	r3, [r7, #6]
 80078b8:	089b      	lsrs	r3, r3, #2
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	617b      	str	r3, [r7, #20]
	uint16_t remaining_bytes = len % 4U;
 80078be:	88fb      	ldrh	r3, [r7, #6]
 80078c0:	f003 0303 	and.w	r3, r3, #3
 80078c4:	83fb      	strh	r3, [r7, #30]

	for (i = 0U; i < count32b; i++) {
 80078c6:	2300      	movs	r3, #0
 80078c8:	623b      	str	r3, [r7, #32]
 80078ca:	e014      	b.n	80078f6 <USB_ReadPacket+0x56>
		__UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	601a      	str	r2, [r3, #0]
		pDest++;
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	3301      	adds	r3, #1
 80078dc:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 80078de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e0:	3301      	adds	r3, #1
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	3301      	adds	r3, #1
 80078e8:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	3301      	adds	r3, #1
 80078ee:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0U; i < count32b; i++) {
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	3301      	adds	r3, #1
 80078f4:	623b      	str	r3, [r7, #32]
 80078f6:	6a3a      	ldr	r2, [r7, #32]
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d3e6      	bcc.n	80078cc <USB_ReadPacket+0x2c>
	}

	/* When Number of data is not word aligned, read the remaining byte */
	if (remaining_bytes != 0U) {
 80078fe:	8bfb      	ldrh	r3, [r7, #30]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d01e      	beq.n	8007942 <USB_ReadPacket+0xa2>
		i = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	623b      	str	r3, [r7, #32]
		__UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800790e:	461a      	mov	r2, r3
 8007910:	f107 0310 	add.w	r3, r7, #16
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	601a      	str	r2, [r3, #0]

		do {
			*(uint8_t*) pDest = (uint8_t) (pData >> (8U * (uint8_t) (i)));
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	fa22 f303 	lsr.w	r3, r2, r3
 8007924:	b2da      	uxtb	r2, r3
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	701a      	strb	r2, [r3, #0]
			i++;
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	3301      	adds	r3, #1
 800792e:	623b      	str	r3, [r7, #32]
			pDest++;
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	3301      	adds	r3, #1
 8007934:	627b      	str	r3, [r7, #36]	@ 0x24
			remaining_bytes--;
 8007936:	8bfb      	ldrh	r3, [r7, #30]
 8007938:	3b01      	subs	r3, #1
 800793a:	83fb      	strh	r3, [r7, #30]
		} while (remaining_bytes != 0U);
 800793c:	8bfb      	ldrh	r3, [r7, #30]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1ea      	bne.n	8007918 <USB_ReadPacket+0x78>
	}

	return ((void*) pDest);
 8007942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007944:	4618      	mov	r0, r3
 8007946:	372c      	adds	r7, #44	@ 0x2c
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval USB Global Interrupt status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx) {
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;

	tmpreg = USBx->GINTSTS;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	60fb      	str	r3, [r7, #12]
	tmpreg &= USBx->GINTMSK;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]

	return tmpreg;
 8007968:	68fb      	ldr	r3, [r7, #12]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USB_ReadChInterrupts>:
 * @brief  USB_ReadChInterrupts: return USB channel interrupt status
 * @param  USBx  Selected device
 * @param  chnum Channel number
 * @retval USB Channel Interrupt status
 */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum) {
 8007976:	b480      	push	{r7}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_HC(chnum)->HCINT;
 8007986:	78fb      	ldrb	r3, [r7, #3]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4413      	add	r3, r2
 800798e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007996:	78fb      	ldrb	r3, [r7, #3]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	4013      	ands	r3, r2
 80079a8:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 80079aa:	68bb      	ldr	r3, [r7, #8]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx) {
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	return ((USBx->GINTSTS) & 0x1U);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	f003 0301 	and.w	r3, r3, #1
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx) {
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079ec:	d901      	bls.n	80079f2 <USB_CoreReset+0x1e>
			return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e01b      	b.n	8007a2a <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	daf2      	bge.n	80079e0 <USB_CoreReset+0xc>

	/* Core Soft Reset */
	count = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f043 0201 	orr.w	r2, r3, #1
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a16:	d901      	bls.n	8007a1c <USB_CoreReset+0x48>
			return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e006      	b.n	8007a2a <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d0f0      	beq.n	8007a0a <USB_CoreReset+0x36>

	return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
	...

08007a38 <USB_HostInit>:
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 8007a38:	b084      	sub	sp, #16
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b086      	sub	sp, #24
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret = HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60fb      	str	r3, [r7, #12]
	uint32_t i;

	/* Restart the Phy Clock */
	USBx_PCGCCTL = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a58:	461a      	mov	r2, r3
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	6013      	str	r3, [r2, #0]
#else
	/*
	 * Disable HW VBUS sensing. VBUS is internally considered to be always
	 * at VBUS-Valid level (5V).
	 */
	USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	639a      	str	r2, [r3, #56]	@ 0x38
	USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	639a      	str	r2, [r3, #56]	@ 0x38
	USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

	if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U) {
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d119      	bne.n	8007ac2 <USB_HostInit+0x8a>
		if (cfg.speed == USBH_FSLS_SPEED) {
 8007a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d10a      	bne.n	8007aac <USB_HostInit+0x74>
			/* Force Device Enumeration to FS/LS mode only */
			USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007aa4:	f043 0304 	orr.w	r3, r3, #4
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	e014      	b.n	8007ad6 <USB_HostInit+0x9e>
		} else {
			/* Set default Max speed support */
			USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007aba:	f023 0304 	bic.w	r3, r3, #4
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	e009      	b.n	8007ad6 <USB_HostInit+0x9e>
		}
	} else {
		/* Set default Max speed support */
		USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ad0:	f023 0304 	bic.w	r3, r3, #4
 8007ad4:	6013      	str	r3, [r2, #0]
	}

	/* Make sure the FIFOs are flushed. */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ad6:	2110      	movs	r1, #16
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff fe43 	bl	8007764 <USB_FlushTxFifo>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <USB_HostInit+0xb0>
	{
		ret = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff fe6d 	bl	80077c8 <USB_FlushRxFifo>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <USB_HostInit+0xc0>
		ret = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	75fb      	strb	r3, [r7, #23]
	}

	/* Clear all pending HC Interrupts */
	for (i = 0U; i < cfg.Host_channels; i++) {
 8007af8:	2300      	movs	r3, #0
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	e015      	b.n	8007b2a <USB_HostInit+0xf2>
		USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b10:	6093      	str	r3, [r2, #8]
		USBx_HC(i)->HCINTMSK = 0U;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2300      	movs	r3, #0
 8007b22:	60d3      	str	r3, [r2, #12]
	for (i = 0U; i < cfg.Host_channels; i++) {
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	3301      	adds	r3, #1
 8007b28:	613b      	str	r3, [r7, #16]
 8007b2a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007b2e:	461a      	mov	r2, r3
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d3e3      	bcc.n	8007afe <USB_HostInit+0xc6>
	}

	/* Disable all interrupts. */
	USBx->GINTMSK = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	619a      	str	r2, [r3, #24]

	/* Clear any pending interrupts */
	USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b42:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
	if (USBx == USB_OTG_HS) {
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a18      	ldr	r2, [pc, #96]	@ (8007ba8 <USB_HostInit+0x170>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d10b      	bne.n	8007b64 <USB_HostInit+0x12c>
		/* set Rx FIFO size */
		USBx->GRXFSIZ = 0x200U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b52:	625a      	str	r2, [r3, #36]	@ 0x24
		USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t) (((0x100U << 16) & USB_OTG_NPTXFD)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a15      	ldr	r2, [pc, #84]	@ (8007bac <USB_HostInit+0x174>)
 8007b58:	629a      	str	r2, [r3, #40]	@ 0x28
				| 0x200U);
		USBx->HPTXFSIZ = (uint32_t) (((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a14      	ldr	r2, [pc, #80]	@ (8007bb0 <USB_HostInit+0x178>)
 8007b5e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007b62:	e009      	b.n	8007b78 <USB_HostInit+0x140>
				| 0x300U);
	} else
#endif /* defined (USB_OTG_HS) */
	{
		/* set Rx FIFO size */
		USBx->GRXFSIZ = 0x80U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2280      	movs	r2, #128	@ 0x80
 8007b68:	625a      	str	r2, [r3, #36]	@ 0x24
		USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t) (((0x60U << 16) & USB_OTG_NPTXFD)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a11      	ldr	r2, [pc, #68]	@ (8007bb4 <USB_HostInit+0x17c>)
 8007b6e:	629a      	str	r2, [r3, #40]	@ 0x28
				| 0x80U);
		USBx->HPTXFSIZ = (uint32_t) (((0x40U << 16) & USB_OTG_HPTXFSIZ_PTXFD)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a11      	ldr	r2, [pc, #68]	@ (8007bb8 <USB_HostInit+0x180>)
 8007b74:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
				| 0xE0U);
	}

	/* Enable the common interrupts */
	if (cfg.dma_enable == 0U) {
 8007b78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d105      	bne.n	8007b8c <USB_HostInit+0x154>
		USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	f043 0210 	orr.w	r2, r3, #16
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	619a      	str	r2, [r3, #24]
	}

	/* Enable interrupts matching to the Host mode ONLY */
	USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM | USB_OTG_GINTMSK_HCIM |
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699a      	ldr	r2, [r3, #24]
 8007b90:	4b0a      	ldr	r3, [pc, #40]	@ (8007bbc <USB_HostInit+0x184>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6193      	str	r3, [r2, #24]
	USB_OTG_GINTMSK_SOFM | USB_OTG_GINTSTS_DISCINT |
	USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

	return ret;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ba4:	b004      	add	sp, #16
 8007ba6:	4770      	bx	lr
 8007ba8:	40040000 	.word	0x40040000
 8007bac:	01000200 	.word	0x01000200
 8007bb0:	00e00300 	.word	0x00e00300
 8007bb4:	00600080 	.word	0x00600080
 8007bb8:	004000e0 	.word	0x004000e0
 8007bbc:	a3200008 	.word	0xa3200008

08007bc0 <USB_InitFSLSPClkSel>:
 *           HCFG_48_MHZ : Full Speed 48 MHz Clock
 *           HCFG_6_MHZ : Low Speed 6 MHz Clock
 * @retval HAL status
 */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t freq) {
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60fb      	str	r3, [r7, #12]

	USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007bde:	f023 0303 	bic.w	r3, r3, #3
 8007be2:	6013      	str	r3, [r2, #0]
	USBx_HOST->HCFG |= (uint32_t) freq & USB_OTG_HCFG_FSLSPCS;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	68f9      	ldr	r1, [r7, #12]
 8007bf4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	600b      	str	r3, [r1, #0]

	if (freq == HCFG_48_MHZ) {
 8007bfc:	78fb      	ldrb	r3, [r7, #3]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d107      	bne.n	8007c12 <USB_InitFSLSPClkSel+0x52>
		USBx_HOST->HFIR = HFIR_48_MHZ;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c08:	461a      	mov	r2, r3
 8007c0a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007c0e:	6053      	str	r3, [r2, #4]
 8007c10:	e00c      	b.n	8007c2c <USB_InitFSLSPClkSel+0x6c>
	} else if (freq == HCFG_6_MHZ) {
 8007c12:	78fb      	ldrb	r3, [r7, #3]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d107      	bne.n	8007c28 <USB_InitFSLSPClkSel+0x68>
		USBx_HOST->HFIR = HFIR_6_MHZ;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007c24:	6053      	str	r3, [r2, #4]
 8007c26:	e001      	b.n	8007c2c <USB_InitFSLSPClkSel+0x6c>
	} else {
		return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e000      	b.n	8007c2e <USB_InitFSLSPClkSel+0x6e>
	}

	return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USB_DriveVbus>:
 *           0 : Deactivate VBUS
 *           1 : Activate VBUS
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t state) {
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60fb      	str	r3, [r7, #12]
	__IO uint32_t hprt0 = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60bb      	str	r3, [r7, #8]

	hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007c5e:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U)) {
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <USB_DriveVbus+0x44>
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d106      	bne.n	8007c7e <USB_DriveVbus+0x44>
		USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007c78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007c7c:	6013      	str	r3, [r2, #0]
	}
	if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U)) {
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c88:	d109      	bne.n	8007c9e <USB_DriveVbus+0x64>
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <USB_DriveVbus+0x64>
		USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007c98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c9c:	6013      	str	r3, [r2, #0]
	}
	return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USB_GetHostSpeed>:
 *          This parameter can be one of these values:
 *            @arg HCD_SPEED_HIGH: High speed mode
 *            @arg HCD_SPEED_FULL: Full speed mode
 *            @arg HCD_SPEED_LOW: Low speed mode
 */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx) {
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]
	__IO uint32_t hprt0 = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60bb      	str	r3, [r7, #8]
	return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	0c5b      	lsrs	r3, r3, #17
 8007cca:	f003 0303 	and.w	r3, r3, #3
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <USB_GetCurrentFrame>:
/**
 * @brief  Return Host Current Frame number
 * @param  USBx  Selected device
 * @retval current frame number
 */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx) {
 8007cda:	b480      	push	{r7}
 8007cdc:	b085      	sub	sp, #20
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60fb      	str	r3, [r7, #12]

	return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	b29b      	uxth	r3, r3
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USB_HC_Init>:
 *          This parameter can be a value from 0 to 32K
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
		uint8_t epnum, uint8_t dev_address, uint8_t speed, uint8_t ep_type,
		uint16_t mps) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	70fb      	strb	r3, [r7, #3]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70bb      	strb	r3, [r7, #2]
 8007d12:	4613      	mov	r3, r2
 8007d14:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret = HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	77fb      	strb	r3, [r7, #31]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	613b      	str	r3, [r7, #16]
	uint32_t HCcharEpDir;
	uint32_t HCcharLowSpeed;
	uint32_t HostCoreSpeed;

	/* Clear old interrupt conditions for this host channel. */
	USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d30:	6093      	str	r3, [r2, #8]

	/* Enable channel interrupts required for this transfer. */
	switch (ep_type) {
 8007d32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d87c      	bhi.n	8007e34 <USB_HC_Init+0x138>
 8007d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <USB_HC_Init+0x44>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007df7 	.word	0x08007df7
 8007d48:	08007d51 	.word	0x08007d51
 8007d4c:	08007db9 	.word	0x08007db9
	case EP_TYPE_CTRL:
	case EP_TYPE_BULK:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007d62:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_TXERRM |
		USB_OTG_HCINTMSK_DTERRM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_NAKM;

		if ((epnum & 0x80U) == 0x80U) {
 8007d64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	da10      	bge.n	8007d8e <USB_HC_Init+0x92>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d8a:	60d3      	str	r3, [r2, #12]
						USB_OTG_HCINTMSK_NYET |
						USB_OTG_HCINTMSK_ACKM;
			}
#endif /* defined (USB_OTG_HS) */
		}
		break;
 8007d8c:	e055      	b.n	8007e3a <USB_HC_Init+0x13e>
			if (USBx == USB_OTG_HS) {
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a6f      	ldr	r2, [pc, #444]	@ (8007f50 <USB_HC_Init+0x254>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d151      	bne.n	8007e3a <USB_HC_Init+0x13e>
				USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	78fa      	ldrb	r2, [r7, #3]
 8007da6:	0151      	lsls	r1, r2, #5
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	440a      	add	r2, r1
 8007dac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007db0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007db4:	60d3      	str	r3, [r2, #12]
		break;
 8007db6:	e040      	b.n	8007e3a <USB_HC_Init+0x13e>

	case EP_TYPE_INTR:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007dca:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_DTERRM |
		USB_OTG_HCINTMSK_NAKM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_FRMORM;

		if ((epnum & 0x80U) == 0x80U) {
 8007dcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	da34      	bge.n	8007e3e <USB_HC_Init+0x142>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007df2:	60d3      	str	r3, [r2, #12]
					USB_OTG_HCINTMSK_BBERRM;
		}

		break;
 8007df4:	e023      	b.n	8007e3e <USB_HC_Init+0x142>

	case EP_TYPE_ISOC:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e02:	461a      	mov	r2, r3
 8007e04:	f240 2325 	movw	r3, #549	@ 0x225
 8007e08:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_ACKM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_FRMORM;

		if ((epnum & 0x80U) == 0x80U) {
 8007e0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	da17      	bge.n	8007e42 <USB_HC_Init+0x146>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8007e12:	78fb      	ldrb	r3, [r7, #3]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	78fa      	ldrb	r2, [r7, #3]
 8007e22:	0151      	lsls	r1, r2, #5
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	440a      	add	r2, r1
 8007e28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e2c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007e30:	60d3      	str	r3, [r2, #12]
					(USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
		}
		break;
 8007e32:	e006      	b.n	8007e42 <USB_HC_Init+0x146>

	default:
		ret = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	77fb      	strb	r3, [r7, #31]
		break;
 8007e38:	e004      	b.n	8007e44 <USB_HC_Init+0x148>
		break;
 8007e3a:	bf00      	nop
 8007e3c:	e002      	b.n	8007e44 <USB_HC_Init+0x148>
		break;
 8007e3e:	bf00      	nop
 8007e40:	e000      	b.n	8007e44 <USB_HC_Init+0x148>
		break;
 8007e42:	bf00      	nop
	}

	/* Clear Hub Start Split transaction */
	USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e50:	461a      	mov	r2, r3
 8007e52:	2300      	movs	r3, #0
 8007e54:	6053      	str	r3, [r2, #4]

	/* Enable host channel Halt interrupt */
	USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	78fa      	ldrb	r2, [r7, #3]
 8007e66:	0151      	lsls	r1, r2, #5
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	440a      	add	r2, r1
 8007e6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e70:	f043 0302 	orr.w	r3, r3, #2
 8007e74:	60d3      	str	r3, [r2, #12]

	/* Enable the top level host channel interrupt. */
	USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	78fb      	ldrb	r3, [r7, #3]
 8007e80:	f003 030f 	and.w	r3, r3, #15
 8007e84:	2101      	movs	r1, #1
 8007e86:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8a:	6939      	ldr	r1, [r7, #16]
 8007e8c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007e90:	4313      	orrs	r3, r2
 8007e92:	618b      	str	r3, [r1, #24]

	/* Make sure host channel interrupts are enabled. */
	USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	619a      	str	r2, [r3, #24]

	/* Program the HCCHAR register */
	if ((epnum & 0x80U) == 0x80U) {
 8007ea0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	da03      	bge.n	8007eb0 <USB_HC_Init+0x1b4>
		HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ea8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eac:	61bb      	str	r3, [r7, #24]
 8007eae:	e001      	b.n	8007eb4 <USB_HC_Init+0x1b8>
	} else {
		HCcharEpDir = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61bb      	str	r3, [r7, #24]
	}

	HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff fef9 	bl	8007cac <USB_GetHostSpeed>
 8007eba:	60f8      	str	r0, [r7, #12]

	/* LS device plugged to HUB */
	if ((speed == HPRT0_PRTSPD_LOW_SPEED)
 8007ebc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d106      	bne.n	8007ed2 <USB_HC_Init+0x1d6>
			&& (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED)) {
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d003      	beq.n	8007ed2 <USB_HC_Init+0x1d6>
		HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007eca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	e001      	b.n	8007ed6 <USB_HC_Init+0x1da>
	} else {
		HCcharLowSpeed = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
	}

	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8007ed6:	787b      	ldrb	r3, [r7, #1]
 8007ed8:	059b      	lsls	r3, r3, #22
			& USB_OTG_HCCHAR_DAD)
 8007eda:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
			| ((((uint32_t) epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM)
 8007ede:	78bb      	ldrb	r3, [r7, #2]
 8007ee0:	02db      	lsls	r3, r3, #11
 8007ee2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
 8007ee6:	431a      	orrs	r2, r3
			| (((uint32_t) ep_type << 18) & USB_OTG_HCCHAR_EPTYP)
 8007ee8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007eec:	049b      	lsls	r3, r3, #18
 8007eee:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007ef2:	431a      	orrs	r2, r3
			| ((uint32_t) mps & USB_OTG_HCCHAR_MPSIZ) |
 8007ef4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007efa:	431a      	orrs	r2, r3
			USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	431a      	orrs	r2, r3
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	4313      	orrs	r3, r2
	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	0151      	lsls	r1, r2, #5
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	440a      	add	r2, r1
 8007f0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
			USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007f10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8007f14:	6013      	str	r3, [r2, #0]

	if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC)) {
 8007f16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d003      	beq.n	8007f26 <USB_HC_Init+0x22a>
 8007f1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d10f      	bne.n	8007f46 <USB_HC_Init+0x24a>
		USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f44:	6013      	str	r3, [r2, #0]
	}

	return ret;
 8007f46:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3720      	adds	r7, #32
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	40040000 	.word	0x40040000

08007f54 <USB_HC_StartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_HCTypeDef *hc, uint8_t dma) {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08c      	sub	sp, #48	@ 0x30
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	71fb      	strb	r3, [r7, #7]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	623b      	str	r3, [r7, #32]
	uint32_t ch_num = (uint32_t) hc->ch_num;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	61fb      	str	r3, [r7, #28]
	__IO uint32_t tmpreg;
	uint8_t is_oddframe;
	uint16_t len_words;
	uint16_t num_packets;
	uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f70:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
	if (USBx == USB_OTG_HS) {
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a5d      	ldr	r2, [pc, #372]	@ (80080ec <USB_HC_StartXfer+0x198>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d12f      	bne.n	8007fda <USB_HC_StartXfer+0x86>
		/* in DMA mode host Core automatically issues ping in case of NYET/NAK */
		if (dma == 1U) {
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d11c      	bne.n	8007fba <USB_HC_StartXfer+0x66>
			if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	7c9b      	ldrb	r3, [r3, #18]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <USB_HC_StartXfer+0x3c>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	7c9b      	ldrb	r3, [r3, #18]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d124      	bne.n	8007fda <USB_HC_StartXfer+0x86>
					&& (hc->do_ssplit == 0U)) {
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	799b      	ldrb	r3, [r3, #6]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d120      	bne.n	8007fda <USB_HC_StartXfer+0x86>

				USBx_HC((uint32_t)ch_num)->HCINTMSK &=
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	69fa      	ldr	r2, [r7, #28]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	6a3a      	ldr	r2, [r7, #32]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb6:	60d3      	str	r3, [r2, #12]
 8007fb8:	e00f      	b.n	8007fda <USB_HC_StartXfer+0x86>
						~(USB_OTG_HCINTMSK_NYET |
						USB_OTG_HCINTMSK_ACKM |
						USB_OTG_HCINTMSK_NAKM);
			}
		} else {
			if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U)) {
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	791b      	ldrb	r3, [r3, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10b      	bne.n	8007fda <USB_HC_StartXfer+0x86>
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	795b      	ldrb	r3, [r3, #5]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d107      	bne.n	8007fda <USB_HC_StartXfer+0x86>
				(void) USB_DoPing(USBx, hc->ch_num);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 fb6b 	bl	80086ac <USB_DoPing>
				return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e232      	b.n	8008440 <USB_HC_StartXfer+0x4ec>
			}
		}
	}
#endif /* defined (USB_OTG_HS) */

	if (hc->do_ssplit == 1U) {
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	799b      	ldrb	r3, [r3, #6]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d158      	bne.n	8008094 <USB_HC_StartXfer+0x140>
		/* Set number of packet to 1 for Split transaction */
		num_packets = 1U;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (hc->ep_is_in != 0U) {
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	78db      	ldrb	r3, [r3, #3]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <USB_HC_StartXfer+0xaa>
			hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8007fee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	8a92      	ldrh	r2, [r2, #20]
 8007ff4:	fb03 f202 	mul.w	r2, r3, r2
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	61da      	str	r2, [r3, #28]
 8007ffc:	e07c      	b.n	80080f8 <USB_HC_StartXfer+0x1a4>
		} else {
			if (hc->ep_type == EP_TYPE_ISOC) {
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	7c9b      	ldrb	r3, [r3, #18]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d130      	bne.n	8008068 <USB_HC_StartXfer+0x114>
				if (hc->xfer_len > ISO_SPLT_MPS) {
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	2bbc      	cmp	r3, #188	@ 0xbc
 800800c:	d918      	bls.n	8008040 <USB_HC_StartXfer+0xec>
					/* Isochrone Max Packet Size for Split mode */
					hc->XferSize = hc->max_packet;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	8a9b      	ldrh	r3, [r3, #20]
 8008012:	461a      	mov	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	61da      	str	r2, [r3, #28]
					hc->xfer_len = hc->XferSize;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	621a      	str	r2, [r3, #32]

					if ((hc->iso_splt_xactPos == HCSPLT_BEGIN)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d003      	beq.n	8008030 <USB_HC_StartXfer+0xdc>
							|| (hc->iso_splt_xactPos == HCSPLT_MIDDLE)) {
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d103      	bne.n	8008038 <USB_HC_StartXfer+0xe4>
						hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2202      	movs	r2, #2
 8008034:	60da      	str	r2, [r3, #12]
 8008036:	e05f      	b.n	80080f8 <USB_HC_StartXfer+0x1a4>
					} else {
						hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2201      	movs	r2, #1
 800803c:	60da      	str	r2, [r3, #12]
 800803e:	e05b      	b.n	80080f8 <USB_HC_StartXfer+0x1a4>
					}
				} else {
					hc->XferSize = hc->xfer_len;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6a1a      	ldr	r2, [r3, #32]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	61da      	str	r2, [r3, #28]

					if ((hc->iso_splt_xactPos != HCSPLT_BEGIN)
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d007      	beq.n	8008060 <USB_HC_StartXfer+0x10c>
							&& (hc->iso_splt_xactPos != HCSPLT_MIDDLE)) {
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d003      	beq.n	8008060 <USB_HC_StartXfer+0x10c>
						hc->iso_splt_xactPos = HCSPLT_FULL;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2204      	movs	r2, #4
 800805c:	60da      	str	r2, [r3, #12]
 800805e:	e04b      	b.n	80080f8 <USB_HC_StartXfer+0x1a4>
					} else {
						hc->iso_splt_xactPos = HCSPLT_END;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2203      	movs	r2, #3
 8008064:	60da      	str	r2, [r3, #12]
 8008066:	e047      	b.n	80080f8 <USB_HC_StartXfer+0x1a4>
					}
				}
			} else {
				if ((dma == 1U) && (hc->xfer_len > hc->max_packet)) {
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d10d      	bne.n	800808a <USB_HC_StartXfer+0x136>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	8a92      	ldrh	r2, [r2, #20]
 8008076:	4293      	cmp	r3, r2
 8008078:	d907      	bls.n	800808a <USB_HC_StartXfer+0x136>
					hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 800807a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	8a92      	ldrh	r2, [r2, #20]
 8008080:	fb03 f202 	mul.w	r2, r3, r2
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	61da      	str	r2, [r3, #28]
 8008088:	e036      	b.n	80080f8 <USB_HC_StartXfer+0x1a4>
				} else {
					hc->XferSize = hc->xfer_len;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	6a1a      	ldr	r2, [r3, #32]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	61da      	str	r2, [r3, #28]
 8008092:	e031      	b.n	80080f8 <USB_HC_StartXfer+0x1a4>
				}
			}
		}
	} else {
		/* Compute the expected number of packets associated to the transfer */
		if (hc->xfer_len > 0U) {
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d018      	beq.n	80080ce <USB_HC_StartXfer+0x17a>
			num_packets = (uint16_t) ((hc->xfer_len + hc->max_packet - 1U)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	8a92      	ldrh	r2, [r2, #20]
 80080a4:	4413      	add	r3, r2
 80080a6:	3b01      	subs	r3, #1
					/ hc->max_packet);
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	8a92      	ldrh	r2, [r2, #20]
 80080ac:	fbb3 f3f2 	udiv	r3, r3, r2
			num_packets = (uint16_t) ((hc->xfer_len + hc->max_packet - 1U)
 80080b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

			if (num_packets > max_hc_pkt_count) {
 80080b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80080b4:	8b7b      	ldrh	r3, [r7, #26]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d90b      	bls.n	80080d2 <USB_HC_StartXfer+0x17e>
				num_packets = max_hc_pkt_count;
 80080ba:	8b7b      	ldrh	r3, [r7, #26]
 80080bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
				hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 80080be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	8a92      	ldrh	r2, [r2, #20]
 80080c4:	fb03 f202 	mul.w	r2, r3, r2
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	61da      	str	r2, [r3, #28]
 80080cc:	e001      	b.n	80080d2 <USB_HC_StartXfer+0x17e>
			}
		} else {
			num_packets = 1U;
 80080ce:	2301      	movs	r3, #1
 80080d0:	84fb      	strh	r3, [r7, #38]	@ 0x26

		/*
		 * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
		 * max_packet size.
		 */
		if (hc->ep_is_in != 0U) {
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	78db      	ldrb	r3, [r3, #3]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <USB_HC_StartXfer+0x19c>
			hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 80080da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	8a92      	ldrh	r2, [r2, #20]
 80080e0:	fb03 f202 	mul.w	r2, r3, r2
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	61da      	str	r2, [r3, #28]
 80080e8:	e006      	b.n	80080f8 <USB_HC_StartXfer+0x1a4>
 80080ea:	bf00      	nop
 80080ec:	40040000 	.word	0x40040000
		} else {
			hc->XferSize = hc->xfer_len;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	61da      	str	r2, [r3, #28]
		}
	}

	/* Initialize the HCTSIZn register */
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
			| (((uint32_t) num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT)
 8008100:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008102:	04d9      	lsls	r1, r3, #19
 8008104:	4ba3      	ldr	r3, [pc, #652]	@ (8008394 <USB_HC_StartXfer+0x440>)
 8008106:	400b      	ands	r3, r1
 8008108:	431a      	orrs	r2, r3
			| (((uint32_t) hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	7d9b      	ldrb	r3, [r3, #22]
 800810e:	075b      	lsls	r3, r3, #29
 8008110:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8008114:	69f9      	ldr	r1, [r7, #28]
 8008116:	0148      	lsls	r0, r1, #5
 8008118:	6a39      	ldr	r1, [r7, #32]
 800811a:	4401      	add	r1, r0
 800811c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
			| (((uint32_t) hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008120:	4313      	orrs	r3, r2
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8008122:	610b      	str	r3, [r1, #16]

	if (dma != 0U) {
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <USB_HC_StartXfer+0x1ea>
		/* xfer_buff MUST be 32-bits aligned */
		USBx_HC(ch_num)->HCDMA = (uint32_t) hc->xfer_buff;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	6999      	ldr	r1, [r3, #24]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800813a:	460a      	mov	r2, r1
 800813c:	615a      	str	r2, [r3, #20]
	}

	is_oddframe = (((uint32_t) USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	bf0c      	ite	eq
 800814e:	2301      	moveq	r3, #1
 8008150:	2300      	movne	r3, #0
 8008152:	b2db      	uxtb	r3, r3
 8008154:	767b      	strb	r3, [r7, #25]
	USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	4413      	add	r3, r2
 800815e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69fa      	ldr	r2, [r7, #28]
 8008166:	0151      	lsls	r1, r2, #5
 8008168:	6a3a      	ldr	r2, [r7, #32]
 800816a:	440a      	add	r2, r1
 800816c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008170:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008174:	6013      	str	r3, [r2, #0]
	USBx_HC(ch_num)->HCCHAR |= (uint32_t) is_oddframe << 29;
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	4413      	add	r3, r2
 800817e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	7e7b      	ldrb	r3, [r7, #25]
 8008186:	075b      	lsls	r3, r3, #29
 8008188:	69f9      	ldr	r1, [r7, #28]
 800818a:	0148      	lsls	r0, r1, #5
 800818c:	6a39      	ldr	r1, [r7, #32]
 800818e:	4401      	add	r1, r0
 8008190:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008194:	4313      	orrs	r3, r2
 8008196:	600b      	str	r3, [r1, #0]

	if (hc->do_ssplit == 1U) {
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	799b      	ldrb	r3, [r3, #6]
 800819c:	2b01      	cmp	r3, #1
 800819e:	f040 80c3 	bne.w	8008328 <USB_HC_StartXfer+0x3d4>
		/* Set Hub start Split transaction */
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	7c5b      	ldrb	r3, [r3, #17]
				<< USB_OTG_HCSPLT_HUBADDR_Pos) | (uint32_t) hc->hub_port_nbr
 80081a6:	01db      	lsls	r3, r3, #7
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	7c12      	ldrb	r2, [r2, #16]
 80081ac:	4313      	orrs	r3, r2
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 80081ae:	69fa      	ldr	r2, [r7, #28]
 80081b0:	0151      	lsls	r1, r2, #5
 80081b2:	6a3a      	ldr	r2, [r7, #32]
 80081b4:	440a      	add	r2, r1
 80081b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
				| USB_OTG_HCSPLT_SPLITEN;
 80081ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 80081be:	6053      	str	r3, [r2, #4]

		/* unmask ack & nyet for IN/OUT transactions */
		USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	0151      	lsls	r1, r2, #5
 80081d2:	6a3a      	ldr	r2, [r7, #32]
 80081d4:	440a      	add	r2, r1
 80081d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081da:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80081de:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_NYET);

		if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U)) {
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	79db      	ldrb	r3, [r3, #7]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d123      	bne.n	8008230 <USB_HC_StartXfer+0x2dc>
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	78db      	ldrb	r3, [r3, #3]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d11f      	bne.n	8008230 <USB_HC_StartXfer+0x2dc>
			USBx_HC((uint32_t)ch_num)->HCSPLT |=
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	69fa      	ldr	r2, [r7, #28]
 8008200:	0151      	lsls	r1, r2, #5
 8008202:	6a3a      	ldr	r2, [r7, #32]
 8008204:	440a      	add	r2, r1
 8008206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800820a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800820e:	6053      	str	r3, [r2, #4]
					USB_OTG_HCSPLT_COMPLSPLT;
			USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	4413      	add	r3, r2
 8008218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	0151      	lsls	r1, r2, #5
 8008222:	6a3a      	ldr	r2, [r7, #32]
 8008224:	440a      	add	r2, r1
 8008226:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800822a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800822e:	60d3      	str	r3, [r2, #12]
		}

		if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	7c9b      	ldrb	r3, [r3, #18]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d003      	beq.n	8008240 <USB_HC_StartXfer+0x2ec>
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	7c9b      	ldrb	r3, [r3, #18]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d117      	bne.n	8008270 <USB_HC_StartXfer+0x31c>
				&& (hc->do_csplit == 1U) && (hc->ep_is_in == 1U)) {
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	79db      	ldrb	r3, [r3, #7]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d113      	bne.n	8008270 <USB_HC_StartXfer+0x31c>
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	78db      	ldrb	r3, [r3, #3]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d10f      	bne.n	8008270 <USB_HC_StartXfer+0x31c>
			USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	4413      	add	r3, r2
 8008258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	6a3a      	ldr	r2, [r7, #32]
 8008264:	440a      	add	r2, r1
 8008266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800826a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800826e:	6053      	str	r3, [r2, #4]
					USB_OTG_HCSPLT_COMPLSPLT;
		}

		/* Position management for iso out transaction on split mode */
		if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U)) {
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	7c9b      	ldrb	r3, [r3, #18]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d162      	bne.n	800833e <USB_HC_StartXfer+0x3ea>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	78db      	ldrb	r3, [r3, #3]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d15e      	bne.n	800833e <USB_HC_StartXfer+0x3ea>
			/* Set data payload position */
			switch (hc->iso_splt_xactPos) {
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	3b01      	subs	r3, #1
 8008286:	2b03      	cmp	r3, #3
 8008288:	d858      	bhi.n	800833c <USB_HC_StartXfer+0x3e8>
 800828a:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <USB_HC_StartXfer+0x33c>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082c3 	.word	0x080082c3
 8008298:	080082e5 	.word	0x080082e5
 800829c:	08008307 	.word	0x08008307
			case HCSPLT_BEGIN:
				/* First data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	6a3a      	ldr	r2, [r7, #32]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082be:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_1;
				break;
 80082c0:	e03d      	b.n	800833e <USB_HC_StartXfer+0x3ea>

			case HCSPLT_MIDDLE:
				/* Middle data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	0151      	lsls	r1, r2, #5
 80082d4:	6a3a      	ldr	r2, [r7, #32]
 80082d6:	440a      	add	r2, r1
 80082d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082dc:	f043 030e 	orr.w	r3, r3, #14
 80082e0:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_Pos;
				break;
 80082e2:	e02c      	b.n	800833e <USB_HC_StartXfer+0x3ea>

			case HCSPLT_END:
				/* End data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	0151      	lsls	r1, r2, #5
 80082f6:	6a3a      	ldr	r2, [r7, #32]
 80082f8:	440a      	add	r2, r1
 80082fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008302:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_0;
				break;
 8008304:	e01b      	b.n	800833e <USB_HC_StartXfer+0x3ea>

			case HCSPLT_FULL:
				/* Entire data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	4413      	add	r3, r2
 800830e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	0151      	lsls	r1, r2, #5
 8008318:	6a3a      	ldr	r2, [r7, #32]
 800831a:	440a      	add	r2, r1
 800831c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008324:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS;
				break;
 8008326:	e00a      	b.n	800833e <USB_HC_StartXfer+0x3ea>
				break;
			}
		}
	} else {
		/* Clear Hub Start Split transaction */
		USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	4413      	add	r3, r2
 8008330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008334:	461a      	mov	r2, r3
 8008336:	2300      	movs	r3, #0
 8008338:	6053      	str	r3, [r2, #4]
 800833a:	e000      	b.n	800833e <USB_HC_StartXfer+0x3ea>
				break;
 800833c:	bf00      	nop
	}

	/* Set host channel enable */
	tmpreg = USBx_HC(ch_num)->HCCHAR;
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	4413      	add	r3, r2
 8008346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	613b      	str	r3, [r7, #16]
	tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008354:	613b      	str	r3, [r7, #16]

	/* make sure to set the correct ep direction */
	if (hc->ep_is_in != 0U) {
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	78db      	ldrb	r3, [r3, #3]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d004      	beq.n	8008368 <USB_HC_StartXfer+0x414>
		tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008364:	613b      	str	r3, [r7, #16]
 8008366:	e003      	b.n	8008370 <USB_HC_StartXfer+0x41c>
	} else {
		tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800836e:	613b      	str	r3, [r7, #16]
	}
	tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008376:	613b      	str	r3, [r7, #16]
	USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	4413      	add	r3, r2
 8008380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008384:	461a      	mov	r2, r3
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	6013      	str	r3, [r2, #0]

	if (dma != 0U) /* dma mode */
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <USB_HC_StartXfer+0x444>
	{
		return HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	e055      	b.n	8008440 <USB_HC_StartXfer+0x4ec>
 8008394:	1ff80000 	.word	0x1ff80000
	}

	if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U)) {
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	78db      	ldrb	r3, [r3, #3]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d14e      	bne.n	800843e <USB_HC_StartXfer+0x4ea>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d04a      	beq.n	800843e <USB_HC_StartXfer+0x4ea>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	79db      	ldrb	r3, [r3, #7]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d146      	bne.n	800843e <USB_HC_StartXfer+0x4ea>
		switch (hc->ep_type) {
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	7c9b      	ldrb	r3, [r3, #18]
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d831      	bhi.n	800841c <USB_HC_StartXfer+0x4c8>
 80083b8:	a201      	add	r2, pc, #4	@ (adr r2, 80083c0 <USB_HC_StartXfer+0x46c>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	080083d1 	.word	0x080083d1
 80083c4:	080083f5 	.word	0x080083f5
 80083c8:	080083d1 	.word	0x080083d1
 80083cc:	080083f5 	.word	0x080083f5
		/* Non periodic transfer */
		case EP_TYPE_CTRL:
		case EP_TYPE_BULK:

			len_words = (uint16_t) ((hc->xfer_len + 3U) / 4U);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	3303      	adds	r3, #3
 80083d6:	089b      	lsrs	r3, r3, #2
 80083d8:	82fb      	strh	r3, [r7, #22]

			/* check if there is enough space in FIFO space */
			if (len_words > (USBx->HNPTXSTS & 0xFFFFU)) {
 80083da:	8afa      	ldrh	r2, [r7, #22]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d91c      	bls.n	8008420 <USB_HC_StartXfer+0x4cc>
				/* need to process data in nptxfempty interrupt */
				USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	f043 0220 	orr.w	r2, r3, #32
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	619a      	str	r2, [r3, #24]
			}
			break;
 80083f2:	e015      	b.n	8008420 <USB_HC_StartXfer+0x4cc>

			/* Periodic transfer */
		case EP_TYPE_INTR:
		case EP_TYPE_ISOC:
			len_words = (uint16_t) ((hc->xfer_len + 3U) / 4U);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	3303      	adds	r3, #3
 80083fa:	089b      	lsrs	r3, r3, #2
 80083fc:	82fb      	strh	r3, [r7, #22]
			/* check if there is enough space in FIFO space */
			if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80083fe:	8afa      	ldrh	r2, [r7, #22]
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	b29b      	uxth	r3, r3
 800840a:	429a      	cmp	r2, r3
 800840c:	d90a      	bls.n	8008424 <USB_HC_StartXfer+0x4d0>
			{
				/* need to process data in ptxfempty interrupt */
				USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	619a      	str	r2, [r3, #24]
			}
			break;
 800841a:	e003      	b.n	8008424 <USB_HC_StartXfer+0x4d0>

		default:
			break;
 800841c:	bf00      	nop
 800841e:	e002      	b.n	8008426 <USB_HC_StartXfer+0x4d2>
			break;
 8008420:	bf00      	nop
 8008422:	e000      	b.n	8008426 <USB_HC_StartXfer+0x4d2>
			break;
 8008424:	bf00      	nop
		}

		/* Write packet into the Tx FIFO. */
		(void) USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num,
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	6999      	ldr	r1, [r3, #24]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	785a      	ldrb	r2, [r3, #1]
				(uint16_t) hc->xfer_len, 0);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6a1b      	ldr	r3, [r3, #32]
		(void) USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num,
 8008432:	b29b      	uxth	r3, r3
 8008434:	2000      	movs	r0, #0
 8008436:	9000      	str	r0, [sp, #0]
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f7ff f9f3 	bl	8007824 <USB_WritePacket>
	}

	return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3728      	adds	r7, #40	@ 0x28
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USB_HC_ReadInterrupt>:
/**
 * @brief Read all host channel interrupts status
 * @param  USBx  Selected device
 * @retval HAL state
 */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60fb      	str	r3, [r7, #12]

	return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	b29b      	uxth	r3, r3
}
 800845e:	4618      	mov	r0, r3
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <USB_HC_Halt>:
 * @param  USBx  Selected device
 * @param  hc_num  Host Channel number
 *         This parameter can be a value from 1 to 15
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num) {
 800846a:	b480      	push	{r7}
 800846c:	b089      	sub	sp, #36	@ 0x24
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	61fb      	str	r3, [r7, #28]
	uint32_t hcnum = (uint32_t) hc_num;
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	61bb      	str	r3, [r7, #24]
	__IO uint32_t count = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]
	uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	0c9b      	lsrs	r3, r3, #18
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	617b      	str	r3, [r7, #20]
	uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	0fdb      	lsrs	r3, r3, #31
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	613b      	str	r3, [r7, #16]
	uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	0fdb      	lsrs	r3, r3, #31
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	60fb      	str	r3, [r7, #12]

	/* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
	 At the end of the next uframe/frame (in the worst case), the core generates a channel halted
	 and disables the channel automatically. */

	if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0320 	and.w	r3, r3, #32
 80084cc:	2b20      	cmp	r3, #32
 80084ce:	d10d      	bne.n	80084ec <USB_HC_Halt+0x82>
			&& (SplitEna == 0U))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10a      	bne.n	80084ec <USB_HC_Halt+0x82>
			&& ((ChannelEna == 0U)
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <USB_HC_Halt+0x7e>
					|| (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR))))) {
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d002      	beq.n	80084e8 <USB_HC_Halt+0x7e>
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d101      	bne.n	80084ec <USB_HC_Halt+0x82>
		return HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	e0d8      	b.n	800869e <USB_HC_Halt+0x234>
	}

	/* Check for space in the request queue to issue the halt. */
	if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK)) {
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <USB_HC_Halt+0x8e>
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d173      	bne.n	80085e0 <USB_HC_Halt+0x176>
		USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	440a      	add	r2, r1
 800850e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008512:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008516:	6013      	str	r3, [r2, #0]

		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	d14a      	bne.n	80085ba <USB_HC_Halt+0x150>
			if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U) {
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008528:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d133      	bne.n	8008598 <USB_HC_Halt+0x12e>
				USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	4413      	add	r3, r2
 8008538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	0151      	lsls	r1, r2, #5
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	440a      	add	r2, r1
 8008546:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800854a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800854e:	6013      	str	r3, [r2, #0]
				USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	4413      	add	r3, r2
 8008558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	440a      	add	r2, r1
 8008566:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800856a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800856e:	6013      	str	r3, [r2, #0]
				do {
					count++;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	3301      	adds	r3, #1
 8008574:	60bb      	str	r3, [r7, #8]

					if (count > 1000U) {
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800857c:	d82e      	bhi.n	80085dc <USB_HC_Halt+0x172>
						break;
					}
				} while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	4413      	add	r3, r2
 8008586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
						== USB_OTG_HCCHAR_CHENA);
 8008590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008594:	d0ec      	beq.n	8008570 <USB_HC_Halt+0x106>
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8008596:	e081      	b.n	800869c <USB_HC_Halt+0x232>
			} else {
				USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	0151      	lsls	r1, r2, #5
 80085aa:	69fa      	ldr	r2, [r7, #28]
 80085ac:	440a      	add	r2, r1
 80085ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085b6:	6013      	str	r3, [r2, #0]
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 80085b8:	e070      	b.n	800869c <USB_HC_Halt+0x232>
			}
		} else {
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	0151      	lsls	r1, r2, #5
 80085cc:	69fa      	ldr	r2, [r7, #28]
 80085ce:	440a      	add	r2, r1
 80085d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085d8:	6013      	str	r3, [r2, #0]
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 80085da:	e05f      	b.n	800869c <USB_HC_Halt+0x232>
						break;
 80085dc:	bf00      	nop
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 80085de:	e05d      	b.n	800869c <USB_HC_Halt+0x232>
		}
	} else {
		USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	0151      	lsls	r1, r2, #5
 80085f2:	69fa      	ldr	r2, [r7, #28]
 80085f4:	440a      	add	r2, r1
 80085f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085fe:	6013      	str	r3, [r2, #0]

		if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U) {
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d133      	bne.n	8008678 <USB_HC_Halt+0x20e>
			USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	4413      	add	r3, r2
 8008618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	0151      	lsls	r1, r2, #5
 8008622:	69fa      	ldr	r2, [r7, #28]
 8008624:	440a      	add	r2, r1
 8008626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800862a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800862e:	6013      	str	r3, [r2, #0]
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	4413      	add	r3, r2
 8008638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	440a      	add	r2, r1
 8008646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800864a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800864e:	6013      	str	r3, [r2, #0]
			do {
				count++;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	3301      	adds	r3, #1
 8008654:	60bb      	str	r3, [r7, #8]

				if (count > 1000U) {
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800865c:	d81d      	bhi.n	800869a <USB_HC_Halt+0x230>
					break;
				}
			} while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	4413      	add	r3, r2
 8008666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_HCCHAR_CHENA);
 8008670:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008674:	d0ec      	beq.n	8008650 <USB_HC_Halt+0x1e6>
 8008676:	e011      	b.n	800869c <USB_HC_Halt+0x232>
		} else {
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	4413      	add	r3, r2
 8008680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	0151      	lsls	r1, r2, #5
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	440a      	add	r2, r1
 800868e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008692:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	e000      	b.n	800869c <USB_HC_Halt+0x232>
					break;
 800869a:	bf00      	nop
		}
	}

	return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3724      	adds	r7, #36	@ 0x24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
	...

080086ac <USB_DoPing>:
 * @param  USBx  Selected device
 * @param  hc_num  Host Channel number
 *         This parameter can be a value from 1 to 15
 * @retval HAL state
 */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num) {
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	617b      	str	r3, [r7, #20]
	uint32_t chnum = (uint32_t) ch_num;
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	613b      	str	r3, [r7, #16]
	uint32_t num_packets = 1U;
 80086c0:	2301      	movs	r3, #1
 80086c2:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	04da      	lsls	r2, r3, #19
 80086c8:	4b15      	ldr	r3, [pc, #84]	@ (8008720 <USB_DoPing+0x74>)
 80086ca:	4013      	ands	r3, r2
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086dc:	6113      	str	r3, [r2, #16]
	USB_OTG_HCTSIZ_DOPING;

	/* Set host channel enable */
	tmpreg = USBx_HC(chnum)->HCCHAR;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	60bb      	str	r3, [r7, #8]
	tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80086f4:	60bb      	str	r3, [r7, #8]
	tmpreg |= USB_OTG_HCCHAR_CHENA;
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086fc:	60bb      	str	r3, [r7, #8]
	USBx_HC(chnum)->HCCHAR = tmpreg;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870a:	461a      	mov	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	1ff80000 	.word	0x1ff80000

08008724 <USB_StopHost>:
/**
 * @brief  Stop Host Core
 * @param  USBx  Selected device
 * @retval HAL state
 */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx) {
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	77fb      	strb	r3, [r7, #31]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	617b      	str	r3, [r7, #20]
	__IO uint32_t count = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	60fb      	str	r3, [r7, #12]
	uint32_t value;
	uint32_t i;

	(void) USB_DisableGlobalInt(USBx);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7fe ffb6 	bl	80076aa <USB_DisableGlobalInt>

	/* Flush USB FIFO */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800873e:	2110      	movs	r1, #16
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff f80f 	bl	8007764 <USB_FlushTxFifo>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <USB_StopHost+0x2c>
	{
		ret = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	77fb      	strb	r3, [r7, #31]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff f839 	bl	80077c8 <USB_FlushRxFifo>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <USB_StopHost+0x3c>
		ret = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	77fb      	strb	r3, [r7, #31]
	}

	/* Flush out any leftover queued requests. */
	for (i = 0U; i <= 15U; i++) {
 8008760:	2300      	movs	r3, #0
 8008762:	61bb      	str	r3, [r7, #24]
 8008764:	e01f      	b.n	80087a6 <USB_StopHost+0x82>
		value = USBx_HC(i)->HCCHAR;
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	4413      	add	r3, r2
 800876e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHDIS;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800877c:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_CHENA;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008784:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_EPDIR;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800878c:	613b      	str	r3, [r7, #16]
		USBx_HC(i)->HCCHAR = value;
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	4413      	add	r3, r2
 8008796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800879a:	461a      	mov	r2, r3
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	6013      	str	r3, [r2, #0]
	for (i = 0U; i <= 15U; i++) {
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	3301      	adds	r3, #1
 80087a4:	61bb      	str	r3, [r7, #24]
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	2b0f      	cmp	r3, #15
 80087aa:	d9dc      	bls.n	8008766 <USB_StopHost+0x42>
	}

	/* Halt all channels to put them into a known state. */
	for (i = 0U; i <= 15U; i++) {
 80087ac:	2300      	movs	r3, #0
 80087ae:	61bb      	str	r3, [r7, #24]
 80087b0:	e034      	b.n	800881c <USB_StopHost+0xf8>
		value = USBx_HC(i)->HCCHAR;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHDIS;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087c8:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHENA;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087d0:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_EPDIR;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087d8:	613b      	str	r3, [r7, #16]
		USBx_HC(i)->HCCHAR = value;
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e6:	461a      	mov	r2, r3
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	6013      	str	r3, [r2, #0]

		do {
			count++;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]

			if (count > 1000U) {
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80087f8:	d80c      	bhi.n	8008814 <USB_StopHost+0xf0>
				break;
			}
		} while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
				== USB_OTG_HCCHAR_CHENA);
 800880c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008810:	d0ec      	beq.n	80087ec <USB_StopHost+0xc8>
 8008812:	e000      	b.n	8008816 <USB_StopHost+0xf2>
				break;
 8008814:	bf00      	nop
	for (i = 0U; i <= 15U; i++) {
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	3301      	adds	r3, #1
 800881a:	61bb      	str	r3, [r7, #24]
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	2b0f      	cmp	r3, #15
 8008820:	d9c7      	bls.n	80087b2 <USB_StopHost+0x8e>
	}

	/* Clear any pending Host interrupts */
	USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008828:	461a      	mov	r2, r3
 800882a:	f04f 33ff 	mov.w	r3, #4294967295
 800882e:	6153      	str	r3, [r2, #20]
	USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f04f 32ff 	mov.w	r2, #4294967295
 8008836:	615a      	str	r2, [r3, #20]

	(void) USB_EnableGlobalInt(USBx);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fe ff25 	bl	8007688 <USB_EnableGlobalInt>

	return ret;
 800883e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3720      	adds	r7, #32
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008848:	b590      	push	{r4, r7, lr}
 800884a:	b089      	sub	sp, #36	@ 0x24
 800884c:	af04      	add	r7, sp, #16
 800884e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008850:	2301      	movs	r3, #1
 8008852:	2202      	movs	r2, #2
 8008854:	2102      	movs	r1, #2
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fc85 	bl	8009166 <USBH_FindInterface>
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	2bff      	cmp	r3, #255	@ 0xff
 8008864:	d002      	beq.n	800886c <USBH_CDC_InterfaceInit+0x24>
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d901      	bls.n	8008870 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800886c:	2302      	movs	r3, #2
 800886e:	e13d      	b.n	8008aec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fc5a 	bl	800912e <USBH_SelectInterface>
 800887a:	4603      	mov	r3, r0
 800887c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800887e:	7bbb      	ldrb	r3, [r7, #14]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008884:	2302      	movs	r3, #2
 8008886:	e131      	b.n	8008aec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800888e:	2050      	movs	r0, #80	@ 0x50
 8008890:	f001 fb0a 	bl	8009ea8 <malloc>
 8008894:	4603      	mov	r3, r0
 8008896:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80088a8:	2302      	movs	r3, #2
 80088aa:	e11f      	b.n	8008aec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80088ac:	2250      	movs	r2, #80	@ 0x50
 80088ae:	2100      	movs	r1, #0
 80088b0:	68b8      	ldr	r0, [r7, #8]
 80088b2:	f001 fbd9 	bl	800a068 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	211a      	movs	r1, #26
 80088bc:	fb01 f303 	mul.w	r3, r1, r3
 80088c0:	4413      	add	r3, r2
 80088c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	b25b      	sxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da15      	bge.n	80088fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	211a      	movs	r1, #26
 80088d4:	fb01 f303 	mul.w	r3, r1, r3
 80088d8:	4413      	add	r3, r2
 80088da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80088de:	781a      	ldrb	r2, [r3, #0]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	211a      	movs	r1, #26
 80088ea:	fb01 f303 	mul.w	r3, r1, r3
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80088f4:	881a      	ldrh	r2, [r3, #0]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	785b      	ldrb	r3, [r3, #1]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 ffba 	bl	800987a <USBH_AllocPipe>
 8008906:	4603      	mov	r3, r0
 8008908:	461a      	mov	r2, r3
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	7819      	ldrb	r1, [r3, #0]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	7858      	ldrb	r0, [r3, #1]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	8952      	ldrh	r2, [r2, #10]
 8008926:	9202      	str	r2, [sp, #8]
 8008928:	2203      	movs	r2, #3
 800892a:	9201      	str	r2, [sp, #4]
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	4623      	mov	r3, r4
 8008930:	4602      	mov	r2, r0
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 ff72 	bl	800981c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2200      	movs	r2, #0
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 fa35 	bl	8009db0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008946:	2300      	movs	r3, #0
 8008948:	2200      	movs	r2, #0
 800894a:	210a      	movs	r1, #10
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fc0a 	bl	8009166 <USBH_FindInterface>
 8008952:	4603      	mov	r3, r0
 8008954:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008956:	7bfb      	ldrb	r3, [r7, #15]
 8008958:	2bff      	cmp	r3, #255	@ 0xff
 800895a:	d002      	beq.n	8008962 <USBH_CDC_InterfaceInit+0x11a>
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d901      	bls.n	8008966 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008962:	2302      	movs	r3, #2
 8008964:	e0c2      	b.n	8008aec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	211a      	movs	r1, #26
 800896c:	fb01 f303 	mul.w	r3, r1, r3
 8008970:	4413      	add	r3, r2
 8008972:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	b25b      	sxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	da16      	bge.n	80089ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	211a      	movs	r1, #26
 8008984:	fb01 f303 	mul.w	r3, r1, r3
 8008988:	4413      	add	r3, r2
 800898a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800898e:	781a      	ldrb	r2, [r3, #0]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	211a      	movs	r1, #26
 800899a:	fb01 f303 	mul.w	r3, r1, r3
 800899e:	4413      	add	r3, r2
 80089a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80089a4:	881a      	ldrh	r2, [r3, #0]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	835a      	strh	r2, [r3, #26]
 80089aa:	e015      	b.n	80089d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	211a      	movs	r1, #26
 80089b2:	fb01 f303 	mul.w	r3, r1, r3
 80089b6:	4413      	add	r3, r2
 80089b8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	211a      	movs	r1, #26
 80089c8:	fb01 f303 	mul.w	r3, r1, r3
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80089d2:	881a      	ldrh	r2, [r3, #0]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	211a      	movs	r1, #26
 80089de:	fb01 f303 	mul.w	r3, r1, r3
 80089e2:	4413      	add	r3, r2
 80089e4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	b25b      	sxtb	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da16      	bge.n	8008a1e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	211a      	movs	r1, #26
 80089f6:	fb01 f303 	mul.w	r3, r1, r3
 80089fa:	4413      	add	r3, r2
 80089fc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008a00:	781a      	ldrb	r2, [r3, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	211a      	movs	r1, #26
 8008a0c:	fb01 f303 	mul.w	r3, r1, r3
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008a16:	881a      	ldrh	r2, [r3, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	835a      	strh	r2, [r3, #26]
 8008a1c:	e015      	b.n	8008a4a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	211a      	movs	r1, #26
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	4413      	add	r3, r2
 8008a2a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008a2e:	781a      	ldrb	r2, [r3, #0]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	211a      	movs	r1, #26
 8008a3a:	fb01 f303 	mul.w	r3, r1, r3
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008a44:	881a      	ldrh	r2, [r3, #0]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	7b9b      	ldrb	r3, [r3, #14]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 ff12 	bl	800987a <USBH_AllocPipe>
 8008a56:	4603      	mov	r3, r0
 8008a58:	461a      	mov	r2, r3
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	7bdb      	ldrb	r3, [r3, #15]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 ff08 	bl	800987a <USBH_AllocPipe>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	7b59      	ldrb	r1, [r3, #13]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	7b98      	ldrb	r0, [r3, #14]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	8b12      	ldrh	r2, [r2, #24]
 8008a8a:	9202      	str	r2, [sp, #8]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	9201      	str	r2, [sp, #4]
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	4623      	mov	r3, r4
 8008a94:	4602      	mov	r2, r0
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fec0 	bl	800981c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	7b19      	ldrb	r1, [r3, #12]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	7bd8      	ldrb	r0, [r3, #15]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	8b52      	ldrh	r2, [r2, #26]
 8008ab4:	9202      	str	r2, [sp, #8]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	9201      	str	r2, [sp, #4]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	4623      	mov	r3, r4
 8008abe:	4602      	mov	r2, r0
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 feab 	bl	800981c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	7b5b      	ldrb	r3, [r3, #13]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 f96a 	bl	8009db0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	7b1b      	ldrb	r3, [r3, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 f963 	bl	8009db0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd90      	pop	{r4, r7, pc}

08008af4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00e      	beq.n	8008b2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fea0 	bl	800985a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fecb 	bl	80098bc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	7b1b      	ldrb	r3, [r3, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00e      	beq.n	8008b52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	7b1b      	ldrb	r3, [r3, #12]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fe8d 	bl	800985a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	7b1b      	ldrb	r3, [r3, #12]
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 feb8 	bl	80098bc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	7b5b      	ldrb	r3, [r3, #13]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00e      	beq.n	8008b78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	7b5b      	ldrb	r3, [r3, #13]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fe7a 	bl	800985a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	7b5b      	ldrb	r3, [r3, #13]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fea5 	bl	80098bc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 f993 	bl	8009eb8 <free>
    phost->pActiveClass->pData = 0U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b98:	2200      	movs	r2, #0
 8008b9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3340      	adds	r3, #64	@ 0x40
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f8b1 	bl	8008d26 <GetLineCoding>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008bc8:	7afb      	ldrb	r3, [r7, #11]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d105      	bne.n	8008bda <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008bda:	7afb      	ldrb	r3, [r7, #11]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008bec:	2301      	movs	r3, #1
 8008bee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	d877      	bhi.n	8008cf8 <USBH_CDC_Process+0x114>
 8008c08:	a201      	add	r2, pc, #4	@ (adr r2, 8008c10 <USBH_CDC_Process+0x2c>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c25 	.word	0x08008c25
 8008c14:	08008c2b 	.word	0x08008c2b
 8008c18:	08008c5b 	.word	0x08008c5b
 8008c1c:	08008ccf 	.word	0x08008ccf
 8008c20:	08008cdd 	.word	0x08008cdd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
      break;
 8008c28:	e06d      	b.n	8008d06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f897 	bl	8008d64 <SetLineCoding>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d104      	bne.n	8008c4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008c48:	e058      	b.n	8008cfc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d055      	beq.n	8008cfc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2204      	movs	r2, #4
 8008c54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008c58:	e050      	b.n	8008cfc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	3340      	adds	r3, #64	@ 0x40
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f860 	bl	8008d26 <GetLineCoding>
 8008c66:	4603      	mov	r3, r0
 8008c68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d126      	bne.n	8008cbe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c82:	791b      	ldrb	r3, [r3, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d13b      	bne.n	8008d00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d133      	bne.n	8008d00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ca2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d12b      	bne.n	8008d00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cb0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d124      	bne.n	8008d00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f958 	bl	8008f6c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008cbc:	e020      	b.n	8008d00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d01d      	beq.n	8008d00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2204      	movs	r2, #4
 8008cc8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008ccc:	e018      	b.n	8008d00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f867 	bl	8008da2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f8da 	bl	8008e8e <CDC_ProcessReception>
      break;
 8008cda:	e014      	b.n	8008d06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008cdc:	2100      	movs	r1, #0
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fb27 	bl	8009332 <USBH_ClrFeature>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008cf6:	e005      	b.n	8008d04 <USBH_CDC_Process+0x120>

    default:
      break;
 8008cf8:	bf00      	nop
 8008cfa:	e004      	b.n	8008d06 <USBH_CDC_Process+0x122>
      break;
 8008cfc:	bf00      	nop
 8008cfe:	e002      	b.n	8008d06 <USBH_CDC_Process+0x122>
      break;
 8008d00:	bf00      	nop
 8008d02:	e000      	b.n	8008d06 <USBH_CDC_Process+0x122>
      break;
 8008d04:	bf00      	nop

  }

  return status;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	22a1      	movs	r2, #161	@ 0xa1
 8008d34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2221      	movs	r2, #33	@ 0x21
 8008d3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2207      	movs	r2, #7
 8008d4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2207      	movs	r2, #7
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fb10 	bl	800937a <USBH_CtlReq>
 8008d5a:	4603      	mov	r3, r0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2221      	movs	r2, #33	@ 0x21
 8008d72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2220      	movs	r2, #32
 8008d78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2207      	movs	r2, #7
 8008d8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2207      	movs	r2, #7
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 faf1 	bl	800937a <USBH_CtlReq>
 8008d98:	4603      	mov	r3, r0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b086      	sub	sp, #24
 8008da6:	af02      	add	r7, sp, #8
 8008da8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d002      	beq.n	8008dc8 <CDC_ProcessTransmission+0x26>
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d023      	beq.n	8008e0e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008dc6:	e05e      	b.n	8008e86 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	8b12      	ldrh	r2, [r2, #24]
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d90b      	bls.n	8008dec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	69d9      	ldr	r1, [r3, #28]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8b1a      	ldrh	r2, [r3, #24]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	7b5b      	ldrb	r3, [r3, #13]
 8008de0:	2001      	movs	r0, #1
 8008de2:	9000      	str	r0, [sp, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fcd6 	bl	8009796 <USBH_BulkSendData>
 8008dea:	e00b      	b.n	8008e04 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	7b5b      	ldrb	r3, [r3, #13]
 8008dfa:	2001      	movs	r0, #1
 8008dfc:	9000      	str	r0, [sp, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fcc9 	bl	8009796 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008e0c:	e03b      	b.n	8008e86 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	7b5b      	ldrb	r3, [r3, #13]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 ffa1 	bl	8009d5c <USBH_LL_GetURBState>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008e1e:	7afb      	ldrb	r3, [r7, #11]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d128      	bne.n	8008e76 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	8b12      	ldrh	r2, [r2, #24]
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d90e      	bls.n	8008e4e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	8b12      	ldrh	r2, [r2, #24]
 8008e38:	1a9a      	subs	r2, r3, r2
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	8b12      	ldrh	r2, [r2, #24]
 8008e46:	441a      	add	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	61da      	str	r2, [r3, #28]
 8008e4c:	e002      	b.n	8008e54 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d004      	beq.n	8008e66 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008e64:	e00e      	b.n	8008e84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f868 	bl	8008f44 <USBH_CDC_TransmitCallback>
      break;
 8008e74:	e006      	b.n	8008e84 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008e76:	7afb      	ldrb	r3, [r7, #11]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d103      	bne.n	8008e84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008e84:	bf00      	nop
  }
}
 8008e86:	bf00      	nop
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b086      	sub	sp, #24
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d002      	beq.n	8008eb4 <CDC_ProcessReception+0x26>
 8008eae:	2b04      	cmp	r3, #4
 8008eb0:	d00e      	beq.n	8008ed0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008eb2:	e043      	b.n	8008f3c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	6a19      	ldr	r1, [r3, #32]
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	8b5a      	ldrh	r2, [r3, #26]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	7b1b      	ldrb	r3, [r3, #12]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fc8d 	bl	80097e0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2204      	movs	r2, #4
 8008eca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008ece:	e035      	b.n	8008f3c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	7b1b      	ldrb	r3, [r3, #12]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 ff40 	bl	8009d5c <USBH_LL_GetURBState>
 8008edc:	4603      	mov	r3, r0
 8008ede:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008ee0:	7cfb      	ldrb	r3, [r7, #19]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d129      	bne.n	8008f3a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	7b1b      	ldrb	r3, [r3, #12]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fea3 	bl	8009c38 <USBH_LL_GetLastXferSize>
 8008ef2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d016      	beq.n	8008f2c <CDC_ProcessReception+0x9e>
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	8b5b      	ldrh	r3, [r3, #26]
 8008f02:	461a      	mov	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d110      	bne.n	8008f2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	1ad2      	subs	r2, r2, r3
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	6a1a      	ldr	r2, [r3, #32]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	441a      	add	r2, r3
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2203      	movs	r2, #3
 8008f26:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008f2a:	e006      	b.n	8008f3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f80f 	bl	8008f58 <USBH_CDC_ReceiveCallback>
      break;
 8008f3a:	bf00      	nop
  }
}
 8008f3c:	bf00      	nop
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008f94:	2302      	movs	r3, #2
 8008f96:	e029      	b.n	8008fec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	79fa      	ldrb	r2, [r7, #7]
 8008f9c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f81f 	bl	8008ff4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 fdb5 	bl	8009b54 <USBH_LL_Init>

  return USBH_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	e009      	b.n	800901a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	33e0      	adds	r3, #224	@ 0xe0
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	2200      	movs	r2, #0
 8009012:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2b0f      	cmp	r3, #15
 800901e:	d9f2      	bls.n	8009006 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	e009      	b.n	800903a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009030:	2200      	movs	r2, #0
 8009032:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	3301      	adds	r3, #1
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009040:	d3f1      	bcc.n	8009026 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2240      	movs	r2, #64	@ 0x40
 8009066:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	331c      	adds	r3, #28
 8009092:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009096:	2100      	movs	r1, #0
 8009098:	4618      	mov	r0, r3
 800909a:	f000 ffe5 	bl	800a068 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80090a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090a8:	2100      	movs	r1, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 ffdc 	bl	800a068 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80090b6:	2212      	movs	r2, #18
 80090b8:	2100      	movs	r1, #0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 ffd4 	bl	800a068 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80090c6:	223e      	movs	r2, #62	@ 0x3e
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 ffcc 	bl	800a068 <memset>

  return USBH_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d016      	beq.n	800911c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10e      	bne.n	8009116 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80090fe:	1c59      	adds	r1, r3, #1
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	33de      	adds	r3, #222	@ 0xde
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
 8009114:	e004      	b.n	8009120 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009116:	2302      	movs	r3, #2
 8009118:	73fb      	strb	r3, [r7, #15]
 800911a:	e001      	b.n	8009120 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800911c:	2302      	movs	r3, #2
 800911e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009120:	7bfb      	ldrb	r3, [r7, #15]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800912e:	b480      	push	{r7}
 8009130:	b085      	sub	sp, #20
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	460b      	mov	r3, r1
 8009138:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009144:	78fa      	ldrb	r2, [r7, #3]
 8009146:	429a      	cmp	r2, r3
 8009148:	d204      	bcs.n	8009154 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009152:	e001      	b.n	8009158 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009154:	2302      	movs	r3, #2
 8009156:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009158:	7bfb      	ldrb	r3, [r7, #15]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009166:	b480      	push	{r7}
 8009168:	b087      	sub	sp, #28
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	4608      	mov	r0, r1
 8009170:	4611      	mov	r1, r2
 8009172:	461a      	mov	r2, r3
 8009174:	4603      	mov	r3, r0
 8009176:	70fb      	strb	r3, [r7, #3]
 8009178:	460b      	mov	r3, r1
 800917a:	70bb      	strb	r3, [r7, #2]
 800917c:	4613      	mov	r3, r2
 800917e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009184:	2300      	movs	r3, #0
 8009186:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800918e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009190:	e025      	b.n	80091de <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	221a      	movs	r2, #26
 8009196:	fb02 f303 	mul.w	r3, r2, r3
 800919a:	3308      	adds	r3, #8
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	3302      	adds	r3, #2
 80091a2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	795b      	ldrb	r3, [r3, #5]
 80091a8:	78fa      	ldrb	r2, [r7, #3]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d002      	beq.n	80091b4 <USBH_FindInterface+0x4e>
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	2bff      	cmp	r3, #255	@ 0xff
 80091b2:	d111      	bne.n	80091d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80091b8:	78ba      	ldrb	r2, [r7, #2]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d002      	beq.n	80091c4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091be:	78bb      	ldrb	r3, [r7, #2]
 80091c0:	2bff      	cmp	r3, #255	@ 0xff
 80091c2:	d109      	bne.n	80091d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091c8:	787a      	ldrb	r2, [r7, #1]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d002      	beq.n	80091d4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80091ce:	787b      	ldrb	r3, [r7, #1]
 80091d0:	2bff      	cmp	r3, #255	@ 0xff
 80091d2:	d101      	bne.n	80091d8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	e006      	b.n	80091e6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	3301      	adds	r3, #1
 80091dc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80091de:	7dfb      	ldrb	r3, [r7, #23]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d9d6      	bls.n	8009192 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80091e4:	23ff      	movs	r3, #255	@ 0xff
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b082      	sub	sp, #8
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fce6 	bl	8009bcc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009200:	2101      	movs	r1, #1
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fdbd 	bl	8009d82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f804 	bl	8009254 <USBH_HandleSof>
}
 800924c:	bf00      	nop
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b0b      	cmp	r3, #11
 8009264:	d10a      	bne.n	800927c <USBH_HandleSof+0x28>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	4798      	blx	r3
  }
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009294:	bf00      	nop
}
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80092b0:	bf00      	nop
}
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b082      	sub	sp, #8
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fc79 	bl	8009c02 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	791b      	ldrb	r3, [r3, #4]
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fad0 	bl	80098bc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	795b      	ldrb	r3, [r3, #5]
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 faca 	bl	80098bc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	460b      	mov	r3, r1
 800933c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	789b      	ldrb	r3, [r3, #2]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d10f      	bne.n	8009366 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2202      	movs	r2, #2
 800934a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f805 	bl	800937a <USBH_CtlReq>
 8009370:	4603      	mov	r3, r0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b086      	sub	sp, #24
 800937e:	af00      	add	r7, sp, #0
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	4613      	mov	r3, r2
 8009386:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009388:	2301      	movs	r3, #1
 800938a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	789b      	ldrb	r3, [r3, #2]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d002      	beq.n	800939a <USBH_CtlReq+0x20>
 8009394:	2b02      	cmp	r3, #2
 8009396:	d00f      	beq.n	80093b8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009398:	e027      	b.n	80093ea <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	88fa      	ldrh	r2, [r7, #6]
 80093a4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2201      	movs	r2, #1
 80093aa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2202      	movs	r2, #2
 80093b0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
      break;
 80093b6:	e018      	b.n	80093ea <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 f81b 	bl	80093f4 <USBH_HandleControl>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <USBH_CtlReq+0x54>
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d106      	bne.n	80093dc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2201      	movs	r2, #1
 80093d2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	761a      	strb	r2, [r3, #24]
      break;
 80093da:	e005      	b.n	80093e8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d102      	bne.n	80093e8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	709a      	strb	r2, [r3, #2]
      break;
 80093e8:	bf00      	nop
  }
  return status;
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af02      	add	r7, sp, #8
 80093fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80093fc:	2301      	movs	r3, #1
 80093fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7e1b      	ldrb	r3, [r3, #24]
 8009408:	3b01      	subs	r3, #1
 800940a:	2b0a      	cmp	r3, #10
 800940c:	f200 8156 	bhi.w	80096bc <USBH_HandleControl+0x2c8>
 8009410:	a201      	add	r2, pc, #4	@ (adr r2, 8009418 <USBH_HandleControl+0x24>)
 8009412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009416:	bf00      	nop
 8009418:	08009445 	.word	0x08009445
 800941c:	0800945f 	.word	0x0800945f
 8009420:	080094c9 	.word	0x080094c9
 8009424:	080094ef 	.word	0x080094ef
 8009428:	08009527 	.word	0x08009527
 800942c:	08009551 	.word	0x08009551
 8009430:	080095a3 	.word	0x080095a3
 8009434:	080095c5 	.word	0x080095c5
 8009438:	08009601 	.word	0x08009601
 800943c:	08009627 	.word	0x08009627
 8009440:	08009665 	.word	0x08009665
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f103 0110 	add.w	r1, r3, #16
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	795b      	ldrb	r3, [r3, #5]
 800944e:	461a      	mov	r2, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f943 	bl	80096dc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2202      	movs	r2, #2
 800945a:	761a      	strb	r2, [r3, #24]
      break;
 800945c:	e139      	b.n	80096d2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	795b      	ldrb	r3, [r3, #5]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fc79 	bl	8009d5c <USBH_LL_GetURBState>
 800946a:	4603      	mov	r3, r0
 800946c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d11e      	bne.n	80094b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	7c1b      	ldrb	r3, [r3, #16]
 8009478:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800947c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	8adb      	ldrh	r3, [r3, #22]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009486:	7b7b      	ldrb	r3, [r7, #13]
 8009488:	2b80      	cmp	r3, #128	@ 0x80
 800948a:	d103      	bne.n	8009494 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2203      	movs	r2, #3
 8009490:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009492:	e115      	b.n	80096c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2205      	movs	r2, #5
 8009498:	761a      	strb	r2, [r3, #24]
      break;
 800949a:	e111      	b.n	80096c0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800949c:	7b7b      	ldrb	r3, [r7, #13]
 800949e:	2b80      	cmp	r3, #128	@ 0x80
 80094a0:	d103      	bne.n	80094aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2209      	movs	r2, #9
 80094a6:	761a      	strb	r2, [r3, #24]
      break;
 80094a8:	e10a      	b.n	80096c0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2207      	movs	r2, #7
 80094ae:	761a      	strb	r2, [r3, #24]
      break;
 80094b0:	e106      	b.n	80096c0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b04      	cmp	r3, #4
 80094b6:	d003      	beq.n	80094c0 <USBH_HandleControl+0xcc>
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	f040 8100 	bne.w	80096c0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	220b      	movs	r2, #11
 80094c4:	761a      	strb	r2, [r3, #24]
      break;
 80094c6:	e0fb      	b.n	80096c0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6899      	ldr	r1, [r3, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	899a      	ldrh	r2, [r3, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	791b      	ldrb	r3, [r3, #4]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f93a 	bl	800975a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2204      	movs	r2, #4
 80094ea:	761a      	strb	r2, [r3, #24]
      break;
 80094ec:	e0f1      	b.n	80096d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	791b      	ldrb	r3, [r3, #4]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fc31 	bl	8009d5c <USBH_LL_GetURBState>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d102      	bne.n	800950a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2209      	movs	r2, #9
 8009508:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800950a:	7bbb      	ldrb	r3, [r7, #14]
 800950c:	2b05      	cmp	r3, #5
 800950e:	d102      	bne.n	8009516 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009510:	2303      	movs	r3, #3
 8009512:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009514:	e0d6      	b.n	80096c4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009516:	7bbb      	ldrb	r3, [r7, #14]
 8009518:	2b04      	cmp	r3, #4
 800951a:	f040 80d3 	bne.w	80096c4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	220b      	movs	r2, #11
 8009522:	761a      	strb	r2, [r3, #24]
      break;
 8009524:	e0ce      	b.n	80096c4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6899      	ldr	r1, [r3, #8]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	899a      	ldrh	r2, [r3, #12]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	795b      	ldrb	r3, [r3, #5]
 8009532:	2001      	movs	r0, #1
 8009534:	9000      	str	r0, [sp, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f8ea 	bl	8009710 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009542:	b29a      	uxth	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2206      	movs	r2, #6
 800954c:	761a      	strb	r2, [r3, #24]
      break;
 800954e:	e0c0      	b.n	80096d2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	795b      	ldrb	r3, [r3, #5]
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fc00 	bl	8009d5c <USBH_LL_GetURBState>
 800955c:	4603      	mov	r3, r0
 800955e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d103      	bne.n	800956e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2207      	movs	r2, #7
 800956a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800956c:	e0ac      	b.n	80096c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	2b05      	cmp	r3, #5
 8009572:	d105      	bne.n	8009580 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	220c      	movs	r2, #12
 8009578:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800957a:	2303      	movs	r3, #3
 800957c:	73fb      	strb	r3, [r7, #15]
      break;
 800957e:	e0a3      	b.n	80096c8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d103      	bne.n	800958e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2205      	movs	r2, #5
 800958a:	761a      	strb	r2, [r3, #24]
      break;
 800958c:	e09c      	b.n	80096c8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	2b04      	cmp	r3, #4
 8009592:	f040 8099 	bne.w	80096c8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	220b      	movs	r2, #11
 800959a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800959c:	2302      	movs	r3, #2
 800959e:	73fb      	strb	r3, [r7, #15]
      break;
 80095a0:	e092      	b.n	80096c8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	791b      	ldrb	r3, [r3, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	2100      	movs	r1, #0
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f8d5 	bl	800975a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2208      	movs	r2, #8
 80095c0:	761a      	strb	r2, [r3, #24]

      break;
 80095c2:	e086      	b.n	80096d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	791b      	ldrb	r3, [r3, #4]
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fbc6 	bl	8009d5c <USBH_LL_GetURBState>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d105      	bne.n	80095e6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	220d      	movs	r2, #13
 80095de:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095e4:	e072      	b.n	80096cc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	d103      	bne.n	80095f4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	220b      	movs	r2, #11
 80095f0:	761a      	strb	r2, [r3, #24]
      break;
 80095f2:	e06b      	b.n	80096cc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	2b05      	cmp	r3, #5
 80095f8:	d168      	bne.n	80096cc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80095fa:	2303      	movs	r3, #3
 80095fc:	73fb      	strb	r3, [r7, #15]
      break;
 80095fe:	e065      	b.n	80096cc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	795b      	ldrb	r3, [r3, #5]
 8009604:	2201      	movs	r2, #1
 8009606:	9200      	str	r2, [sp, #0]
 8009608:	2200      	movs	r2, #0
 800960a:	2100      	movs	r1, #0
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f87f 	bl	8009710 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009618:	b29a      	uxth	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	220a      	movs	r2, #10
 8009622:	761a      	strb	r2, [r3, #24]
      break;
 8009624:	e055      	b.n	80096d2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	795b      	ldrb	r3, [r3, #5]
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fb95 	bl	8009d5c <USBH_LL_GetURBState>
 8009632:	4603      	mov	r3, r0
 8009634:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d105      	bne.n	8009648 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	220d      	movs	r2, #13
 8009644:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009646:	e043      	b.n	80096d0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d103      	bne.n	8009656 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2209      	movs	r2, #9
 8009652:	761a      	strb	r2, [r3, #24]
      break;
 8009654:	e03c      	b.n	80096d0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	2b04      	cmp	r3, #4
 800965a:	d139      	bne.n	80096d0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	220b      	movs	r2, #11
 8009660:	761a      	strb	r2, [r3, #24]
      break;
 8009662:	e035      	b.n	80096d0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	7e5b      	ldrb	r3, [r3, #25]
 8009668:	3301      	adds	r3, #1
 800966a:	b2da      	uxtb	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	765a      	strb	r2, [r3, #25]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7e5b      	ldrb	r3, [r3, #25]
 8009674:	2b02      	cmp	r3, #2
 8009676:	d806      	bhi.n	8009686 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009684:	e025      	b.n	80096d2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800968c:	2106      	movs	r1, #6
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	795b      	ldrb	r3, [r3, #5]
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f90c 	bl	80098bc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	791b      	ldrb	r3, [r3, #4]
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f906 	bl	80098bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80096b6:	2302      	movs	r3, #2
 80096b8:	73fb      	strb	r3, [r7, #15]
      break;
 80096ba:	e00a      	b.n	80096d2 <USBH_HandleControl+0x2de>

    default:
      break;
 80096bc:	bf00      	nop
 80096be:	e008      	b.n	80096d2 <USBH_HandleControl+0x2de>
      break;
 80096c0:	bf00      	nop
 80096c2:	e006      	b.n	80096d2 <USBH_HandleControl+0x2de>
      break;
 80096c4:	bf00      	nop
 80096c6:	e004      	b.n	80096d2 <USBH_HandleControl+0x2de>
      break;
 80096c8:	bf00      	nop
 80096ca:	e002      	b.n	80096d2 <USBH_HandleControl+0x2de>
      break;
 80096cc:	bf00      	nop
 80096ce:	e000      	b.n	80096d2 <USBH_HandleControl+0x2de>
      break;
 80096d0:	bf00      	nop
  }

  return status;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af04      	add	r7, sp, #16
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	4613      	mov	r3, r2
 80096e8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096ea:	79f9      	ldrb	r1, [r7, #7]
 80096ec:	2300      	movs	r3, #0
 80096ee:	9303      	str	r3, [sp, #12]
 80096f0:	2308      	movs	r3, #8
 80096f2:	9302      	str	r3, [sp, #8]
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	2300      	movs	r3, #0
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	2300      	movs	r3, #0
 80096fe:	2200      	movs	r2, #0
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 fafa 	bl	8009cfa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af04      	add	r7, sp, #16
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	4611      	mov	r1, r2
 800971c:	461a      	mov	r2, r3
 800971e:	460b      	mov	r3, r1
 8009720:	80fb      	strh	r3, [r7, #6]
 8009722:	4613      	mov	r3, r2
 8009724:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009734:	7979      	ldrb	r1, [r7, #5]
 8009736:	7e3b      	ldrb	r3, [r7, #24]
 8009738:	9303      	str	r3, [sp, #12]
 800973a:	88fb      	ldrh	r3, [r7, #6]
 800973c:	9302      	str	r3, [sp, #8]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	2301      	movs	r3, #1
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	2300      	movs	r3, #0
 8009748:	2200      	movs	r2, #0
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 fad5 	bl	8009cfa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b088      	sub	sp, #32
 800975e:	af04      	add	r7, sp, #16
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	4611      	mov	r1, r2
 8009766:	461a      	mov	r2, r3
 8009768:	460b      	mov	r3, r1
 800976a:	80fb      	strh	r3, [r7, #6]
 800976c:	4613      	mov	r3, r2
 800976e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009770:	7979      	ldrb	r1, [r7, #5]
 8009772:	2300      	movs	r3, #0
 8009774:	9303      	str	r3, [sp, #12]
 8009776:	88fb      	ldrh	r3, [r7, #6]
 8009778:	9302      	str	r3, [sp, #8]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	2301      	movs	r3, #1
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	2300      	movs	r3, #0
 8009784:	2201      	movs	r2, #1
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 fab7 	bl	8009cfa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800978c:	2300      	movs	r3, #0

}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b088      	sub	sp, #32
 800979a:	af04      	add	r7, sp, #16
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	4611      	mov	r1, r2
 80097a2:	461a      	mov	r2, r3
 80097a4:	460b      	mov	r3, r1
 80097a6:	80fb      	strh	r3, [r7, #6]
 80097a8:	4613      	mov	r3, r2
 80097aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097ba:	7979      	ldrb	r1, [r7, #5]
 80097bc:	7e3b      	ldrb	r3, [r7, #24]
 80097be:	9303      	str	r3, [sp, #12]
 80097c0:	88fb      	ldrh	r3, [r7, #6]
 80097c2:	9302      	str	r3, [sp, #8]
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	9301      	str	r3, [sp, #4]
 80097c8:	2301      	movs	r3, #1
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	2302      	movs	r3, #2
 80097ce:	2200      	movs	r2, #0
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 fa92 	bl	8009cfa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af04      	add	r7, sp, #16
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	4611      	mov	r1, r2
 80097ec:	461a      	mov	r2, r3
 80097ee:	460b      	mov	r3, r1
 80097f0:	80fb      	strh	r3, [r7, #6]
 80097f2:	4613      	mov	r3, r2
 80097f4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097f6:	7979      	ldrb	r1, [r7, #5]
 80097f8:	2300      	movs	r3, #0
 80097fa:	9303      	str	r3, [sp, #12]
 80097fc:	88fb      	ldrh	r3, [r7, #6]
 80097fe:	9302      	str	r3, [sp, #8]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	9301      	str	r3, [sp, #4]
 8009804:	2301      	movs	r3, #1
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	2302      	movs	r3, #2
 800980a:	2201      	movs	r2, #1
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 fa74 	bl	8009cfa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af04      	add	r7, sp, #16
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	4608      	mov	r0, r1
 8009826:	4611      	mov	r1, r2
 8009828:	461a      	mov	r2, r3
 800982a:	4603      	mov	r3, r0
 800982c:	70fb      	strb	r3, [r7, #3]
 800982e:	460b      	mov	r3, r1
 8009830:	70bb      	strb	r3, [r7, #2]
 8009832:	4613      	mov	r3, r2
 8009834:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009836:	7878      	ldrb	r0, [r7, #1]
 8009838:	78ba      	ldrb	r2, [r7, #2]
 800983a:	78f9      	ldrb	r1, [r7, #3]
 800983c:	8b3b      	ldrh	r3, [r7, #24]
 800983e:	9302      	str	r3, [sp, #8]
 8009840:	7d3b      	ldrb	r3, [r7, #20]
 8009842:	9301      	str	r3, [sp, #4]
 8009844:	7c3b      	ldrb	r3, [r7, #16]
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	4603      	mov	r3, r0
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fa07 	bl	8009c5e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b082      	sub	sp, #8
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009866:	78fb      	ldrb	r3, [r7, #3]
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fa26 	bl	8009cbc <USBH_LL_ClosePipe>

  return USBH_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	460b      	mov	r3, r1
 8009884:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f836 	bl	80098f8 <USBH_GetFreePipe>
 800988c:	4603      	mov	r3, r0
 800988e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009890:	89fb      	ldrh	r3, [r7, #14]
 8009892:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009896:	4293      	cmp	r3, r2
 8009898:	d00a      	beq.n	80098b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800989a:	78fa      	ldrb	r2, [r7, #3]
 800989c:	89fb      	ldrh	r3, [r7, #14]
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	33e0      	adds	r3, #224	@ 0xe0
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80098b0:	89fb      	ldrh	r3, [r7, #14]
 80098b2:	b2db      	uxtb	r3, r3
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	2b0f      	cmp	r3, #15
 80098cc:	d80d      	bhi.n	80098ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	33e0      	adds	r3, #224	@ 0xe0
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	78fb      	ldrb	r3, [r7, #3]
 80098dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	33e0      	adds	r3, #224	@ 0xe0
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	440b      	add	r3, r1
 80098e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009904:	2300      	movs	r3, #0
 8009906:	73fb      	strb	r3, [r7, #15]
 8009908:	e00f      	b.n	800992a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	33e0      	adds	r3, #224	@ 0xe0
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d102      	bne.n	8009924 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	b29b      	uxth	r3, r3
 8009922:	e007      	b.n	8009934 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009924:	7bfb      	ldrb	r3, [r7, #15]
 8009926:	3301      	adds	r3, #1
 8009928:	73fb      	strb	r3, [r7, #15]
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	2b0f      	cmp	r3, #15
 800992e:	d9ec      	bls.n	800990a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009930:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009944:	2201      	movs	r2, #1
 8009946:	490e      	ldr	r1, [pc, #56]	@ (8009980 <MX_USB_HOST_Init+0x40>)
 8009948:	480e      	ldr	r0, [pc, #56]	@ (8009984 <MX_USB_HOST_Init+0x44>)
 800994a:	f7ff fb19 	bl	8008f80 <USBH_Init>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009954:	f7f7 fd56 	bl	8001404 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009958:	490b      	ldr	r1, [pc, #44]	@ (8009988 <MX_USB_HOST_Init+0x48>)
 800995a:	480a      	ldr	r0, [pc, #40]	@ (8009984 <MX_USB_HOST_Init+0x44>)
 800995c:	f7ff fbbd 	bl	80090da <USBH_RegisterClass>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009966:	f7f7 fd4d 	bl	8001404 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800996a:	4806      	ldr	r0, [pc, #24]	@ (8009984 <MX_USB_HOST_Init+0x44>)
 800996c:	f7ff fc41 	bl	80091f2 <USBH_Start>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009976:	f7f7 fd45 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800997a:	bf00      	nop
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	0800998d 	.word	0x0800998d
 8009984:	20000614 	.word	0x20000614
 8009988:	2000001c 	.word	0x2000001c

0800998c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	3b01      	subs	r3, #1
 800999c:	2b04      	cmp	r3, #4
 800999e:	d819      	bhi.n	80099d4 <USBH_UserProcess+0x48>
 80099a0:	a201      	add	r2, pc, #4	@ (adr r2, 80099a8 <USBH_UserProcess+0x1c>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099d5 	.word	0x080099d5
 80099ac:	080099c5 	.word	0x080099c5
 80099b0:	080099d5 	.word	0x080099d5
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	080099bd 	.word	0x080099bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80099bc:	4b09      	ldr	r3, [pc, #36]	@ (80099e4 <USBH_UserProcess+0x58>)
 80099be:	2203      	movs	r2, #3
 80099c0:	701a      	strb	r2, [r3, #0]
  break;
 80099c2:	e008      	b.n	80099d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80099c4:	4b07      	ldr	r3, [pc, #28]	@ (80099e4 <USBH_UserProcess+0x58>)
 80099c6:	2202      	movs	r2, #2
 80099c8:	701a      	strb	r2, [r3, #0]
  break;
 80099ca:	e004      	b.n	80099d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80099cc:	4b05      	ldr	r3, [pc, #20]	@ (80099e4 <USBH_UserProcess+0x58>)
 80099ce:	2201      	movs	r2, #1
 80099d0:	701a      	strb	r2, [r3, #0]
  break;
 80099d2:	e000      	b.n	80099d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80099d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	200009ec 	.word	0x200009ec

080099e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08a      	sub	sp, #40	@ 0x28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099f0:	f107 0314 	add.w	r3, r7, #20
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	605a      	str	r2, [r3, #4]
 80099fa:	609a      	str	r2, [r3, #8]
 80099fc:	60da      	str	r2, [r3, #12]
 80099fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a08:	d147      	bne.n	8009a9a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	613b      	str	r3, [r7, #16]
 8009a0e:	4b25      	ldr	r3, [pc, #148]	@ (8009aa4 <HAL_HCD_MspInit+0xbc>)
 8009a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a12:	4a24      	ldr	r2, [pc, #144]	@ (8009aa4 <HAL_HCD_MspInit+0xbc>)
 8009a14:	f043 0301 	orr.w	r3, r3, #1
 8009a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a1a:	4b22      	ldr	r3, [pc, #136]	@ (8009aa4 <HAL_HCD_MspInit+0xbc>)
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	613b      	str	r3, [r7, #16]
 8009a24:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009a26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a30:	2300      	movs	r3, #0
 8009a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009a34:	f107 0314 	add.w	r3, r7, #20
 8009a38:	4619      	mov	r1, r3
 8009a3a:	481b      	ldr	r0, [pc, #108]	@ (8009aa8 <HAL_HCD_MspInit+0xc0>)
 8009a3c:	f7f8 fb8a 	bl	8002154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009a40:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a46:	2302      	movs	r3, #2
 8009a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a52:	230a      	movs	r3, #10
 8009a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a56:	f107 0314 	add.w	r3, r7, #20
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	4812      	ldr	r0, [pc, #72]	@ (8009aa8 <HAL_HCD_MspInit+0xc0>)
 8009a5e:	f7f8 fb79 	bl	8002154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a62:	4b10      	ldr	r3, [pc, #64]	@ (8009aa4 <HAL_HCD_MspInit+0xbc>)
 8009a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a66:	4a0f      	ldr	r2, [pc, #60]	@ (8009aa4 <HAL_HCD_MspInit+0xbc>)
 8009a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a6c:	6353      	str	r3, [r2, #52]	@ 0x34
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60fb      	str	r3, [r7, #12]
 8009a72:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa4 <HAL_HCD_MspInit+0xbc>)
 8009a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a76:	4a0b      	ldr	r2, [pc, #44]	@ (8009aa4 <HAL_HCD_MspInit+0xbc>)
 8009a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8009a7e:	4b09      	ldr	r3, [pc, #36]	@ (8009aa4 <HAL_HCD_MspInit+0xbc>)
 8009a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	2043      	movs	r0, #67	@ 0x43
 8009a90:	f7f8 fb29 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a94:	2043      	movs	r0, #67	@ 0x43
 8009a96:	f7f8 fb42 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a9a:	bf00      	nop
 8009a9c:	3728      	adds	r7, #40	@ 0x28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	40023800 	.word	0x40023800
 8009aa8:	40020000 	.word	0x40020000

08009aac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff fbb8 	bl	8009230 <USBH_LL_IncTimer>
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff fbf0 	bl	80092bc <USBH_LL_Connect>
}
 8009adc:	bf00      	nop
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff fbf9 	bl	80092ea <USBH_LL_Disconnect>
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff fbaa 	bl	8009284 <USBH_LL_PortEnabled>
}
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fbaa 	bl	80092a0 <USBH_LL_PortDisabled>
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d12a      	bne.n	8009bbc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009b66:	4a18      	ldr	r2, [pc, #96]	@ (8009bc8 <USBH_LL_Init+0x74>)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a15      	ldr	r2, [pc, #84]	@ (8009bc8 <USBH_LL_Init+0x74>)
 8009b72:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b76:	4b14      	ldr	r3, [pc, #80]	@ (8009bc8 <USBH_LL_Init+0x74>)
 8009b78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009b7c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009b7e:	4b12      	ldr	r3, [pc, #72]	@ (8009bc8 <USBH_LL_Init+0x74>)
 8009b80:	2208      	movs	r2, #8
 8009b82:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009b84:	4b10      	ldr	r3, [pc, #64]	@ (8009bc8 <USBH_LL_Init+0x74>)
 8009b86:	2201      	movs	r2, #1
 8009b88:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc8 <USBH_LL_Init+0x74>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009b90:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc8 <USBH_LL_Init+0x74>)
 8009b92:	2202      	movs	r2, #2
 8009b94:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b96:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc8 <USBH_LL_Init+0x74>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009b9c:	480a      	ldr	r0, [pc, #40]	@ (8009bc8 <USBH_LL_Init+0x74>)
 8009b9e:	f7f8 fca6 	bl	80024ee <HAL_HCD_Init>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009ba8:	f7f7 fc2c 	bl	8001404 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009bac:	4806      	ldr	r0, [pc, #24]	@ (8009bc8 <USBH_LL_Init+0x74>)
 8009bae:	f7f9 f8f9 	bl	8002da4 <HAL_HCD_GetCurrentFrame>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fb2b 	bl	8009212 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	200009f0 	.word	0x200009f0

08009bcc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f9 f874 	bl	8002cd0 <HAL_HCD_Start>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 f912 	bl	8009e18 <USBH_Get_USB_Status>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7f9 f87c 	bl	8002d16 <HAL_HCD_Stop>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 f8f7 	bl	8009e18 <USBH_Get_USB_Status>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c4a:	78fa      	ldrb	r2, [r7, #3]
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7f9 f893 	bl	8002d7a <HAL_HCD_HC_GetXferCount>
 8009c54:	4603      	mov	r3, r0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c5e:	b590      	push	{r4, r7, lr}
 8009c60:	b089      	sub	sp, #36	@ 0x24
 8009c62:	af04      	add	r7, sp, #16
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	4608      	mov	r0, r1
 8009c68:	4611      	mov	r1, r2
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	70fb      	strb	r3, [r7, #3]
 8009c70:	460b      	mov	r3, r1
 8009c72:	70bb      	strb	r3, [r7, #2]
 8009c74:	4613      	mov	r3, r2
 8009c76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009c86:	787c      	ldrb	r4, [r7, #1]
 8009c88:	78ba      	ldrb	r2, [r7, #2]
 8009c8a:	78f9      	ldrb	r1, [r7, #3]
 8009c8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	f7f8 fc8d 	bl	80025bc <HAL_HCD_HC_Init>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 f8b5 	bl	8009e18 <USBH_Get_USB_Status>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd90      	pop	{r4, r7, pc}

08009cbc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009cd6:	78fa      	ldrb	r2, [r7, #3]
 8009cd8:	4611      	mov	r1, r2
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7f8 fd26 	bl	800272c <HAL_HCD_HC_Halt>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 f896 	bl	8009e18 <USBH_Get_USB_Status>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009cfa:	b590      	push	{r4, r7, lr}
 8009cfc:	b089      	sub	sp, #36	@ 0x24
 8009cfe:	af04      	add	r7, sp, #16
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	4608      	mov	r0, r1
 8009d04:	4611      	mov	r1, r2
 8009d06:	461a      	mov	r2, r3
 8009d08:	4603      	mov	r3, r0
 8009d0a:	70fb      	strb	r3, [r7, #3]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70bb      	strb	r3, [r7, #2]
 8009d10:	4613      	mov	r3, r2
 8009d12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009d22:	787c      	ldrb	r4, [r7, #1]
 8009d24:	78ba      	ldrb	r2, [r7, #2]
 8009d26:	78f9      	ldrb	r1, [r7, #3]
 8009d28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009d2c:	9303      	str	r3, [sp, #12]
 8009d2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d30:	9302      	str	r3, [sp, #8]
 8009d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	4623      	mov	r3, r4
 8009d3e:	f7f8 fd19 	bl	8002774 <HAL_HCD_HC_SubmitRequest>
 8009d42:	4603      	mov	r3, r0
 8009d44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 f865 	bl	8009e18 <USBH_Get_USB_Status>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd90      	pop	{r4, r7, pc}

08009d5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d6e:	78fa      	ldrb	r2, [r7, #3]
 8009d70:	4611      	mov	r1, r2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7f8 ffec 	bl	8002d50 <HAL_HCD_HC_GetURBState>
 8009d78:	4603      	mov	r3, r0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d103      	bne.n	8009da0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009d98:	78fb      	ldrb	r3, [r7, #3]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f868 	bl	8009e70 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009da0:	20c8      	movs	r0, #200	@ 0xc8
 8009da2:	f7f8 f8a1 	bl	8001ee8 <HAL_Delay>
  return USBH_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	460b      	mov	r3, r1
 8009dba:	70fb      	strb	r3, [r7, #3]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009dc6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	68f9      	ldr	r1, [r7, #12]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	1a9b      	subs	r3, r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	440b      	add	r3, r1
 8009dd6:	3317      	adds	r3, #23
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009dde:	78fa      	ldrb	r2, [r7, #3]
 8009de0:	68f9      	ldr	r1, [r7, #12]
 8009de2:	4613      	mov	r3, r2
 8009de4:	011b      	lsls	r3, r3, #4
 8009de6:	1a9b      	subs	r3, r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	440b      	add	r3, r1
 8009dec:	333c      	adds	r3, #60	@ 0x3c
 8009dee:	78ba      	ldrb	r2, [r7, #2]
 8009df0:	701a      	strb	r2, [r3, #0]
 8009df2:	e009      	b.n	8009e08 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	68f9      	ldr	r1, [r7, #12]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	011b      	lsls	r3, r3, #4
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	333d      	adds	r3, #61	@ 0x3d
 8009e04:	78ba      	ldrb	r2, [r7, #2]
 8009e06:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
	...

08009e18 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d817      	bhi.n	8009e5c <USBH_Get_USB_Status+0x44>
 8009e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e34 <USBH_Get_USB_Status+0x1c>)
 8009e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e32:	bf00      	nop
 8009e34:	08009e45 	.word	0x08009e45
 8009e38:	08009e4b 	.word	0x08009e4b
 8009e3c:	08009e51 	.word	0x08009e51
 8009e40:	08009e57 	.word	0x08009e57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73fb      	strb	r3, [r7, #15]
    break;
 8009e48:	e00b      	b.n	8009e62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4e:	e008      	b.n	8009e62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009e50:	2301      	movs	r3, #1
 8009e52:	73fb      	strb	r3, [r7, #15]
    break;
 8009e54:	e005      	b.n	8009e62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009e56:	2302      	movs	r3, #2
 8009e58:	73fb      	strb	r3, [r7, #15]
    break;
 8009e5a:	e002      	b.n	8009e62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e60:	bf00      	nop
  }
  return usb_status;
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4603      	mov	r3, r0
 8009e78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009e7a:	79fb      	ldrb	r3, [r7, #7]
 8009e7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009e7e:	79fb      	ldrb	r3, [r7, #7]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d102      	bne.n	8009e8a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73fb      	strb	r3, [r7, #15]
 8009e88:	e001      	b.n	8009e8e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
 8009e90:	461a      	mov	r2, r3
 8009e92:	2101      	movs	r1, #1
 8009e94:	4803      	ldr	r0, [pc, #12]	@ (8009ea4 <MX_DriverVbusFS+0x34>)
 8009e96:	f7f8 fb11 	bl	80024bc <HAL_GPIO_WritePin>
}
 8009e9a:	bf00      	nop
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	40020800 	.word	0x40020800

08009ea8 <malloc>:
 8009ea8:	4b02      	ldr	r3, [pc, #8]	@ (8009eb4 <malloc+0xc>)
 8009eaa:	4601      	mov	r1, r0
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	f000 b82d 	b.w	8009f0c <_malloc_r>
 8009eb2:	bf00      	nop
 8009eb4:	2000003c 	.word	0x2000003c

08009eb8 <free>:
 8009eb8:	4b02      	ldr	r3, [pc, #8]	@ (8009ec4 <free+0xc>)
 8009eba:	4601      	mov	r1, r0
 8009ebc:	6818      	ldr	r0, [r3, #0]
 8009ebe:	f000 b917 	b.w	800a0f0 <_free_r>
 8009ec2:	bf00      	nop
 8009ec4:	2000003c 	.word	0x2000003c

08009ec8 <sbrk_aligned>:
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	4e0f      	ldr	r6, [pc, #60]	@ (8009f08 <sbrk_aligned+0x40>)
 8009ecc:	460c      	mov	r4, r1
 8009ece:	6831      	ldr	r1, [r6, #0]
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	b911      	cbnz	r1, 8009eda <sbrk_aligned+0x12>
 8009ed4:	f000 f8d0 	bl	800a078 <_sbrk_r>
 8009ed8:	6030      	str	r0, [r6, #0]
 8009eda:	4621      	mov	r1, r4
 8009edc:	4628      	mov	r0, r5
 8009ede:	f000 f8cb 	bl	800a078 <_sbrk_r>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	d103      	bne.n	8009eee <sbrk_aligned+0x26>
 8009ee6:	f04f 34ff 	mov.w	r4, #4294967295
 8009eea:	4620      	mov	r0, r4
 8009eec:	bd70      	pop	{r4, r5, r6, pc}
 8009eee:	1cc4      	adds	r4, r0, #3
 8009ef0:	f024 0403 	bic.w	r4, r4, #3
 8009ef4:	42a0      	cmp	r0, r4
 8009ef6:	d0f8      	beq.n	8009eea <sbrk_aligned+0x22>
 8009ef8:	1a21      	subs	r1, r4, r0
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 f8bc 	bl	800a078 <_sbrk_r>
 8009f00:	3001      	adds	r0, #1
 8009f02:	d1f2      	bne.n	8009eea <sbrk_aligned+0x22>
 8009f04:	e7ef      	b.n	8009ee6 <sbrk_aligned+0x1e>
 8009f06:	bf00      	nop
 8009f08:	20000dd0 	.word	0x20000dd0

08009f0c <_malloc_r>:
 8009f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f10:	1ccd      	adds	r5, r1, #3
 8009f12:	f025 0503 	bic.w	r5, r5, #3
 8009f16:	3508      	adds	r5, #8
 8009f18:	2d0c      	cmp	r5, #12
 8009f1a:	bf38      	it	cc
 8009f1c:	250c      	movcc	r5, #12
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	4606      	mov	r6, r0
 8009f22:	db01      	blt.n	8009f28 <_malloc_r+0x1c>
 8009f24:	42a9      	cmp	r1, r5
 8009f26:	d904      	bls.n	8009f32 <_malloc_r+0x26>
 8009f28:	230c      	movs	r3, #12
 8009f2a:	6033      	str	r3, [r6, #0]
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a008 <_malloc_r+0xfc>
 8009f36:	f000 f869 	bl	800a00c <__malloc_lock>
 8009f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f3e:	461c      	mov	r4, r3
 8009f40:	bb44      	cbnz	r4, 8009f94 <_malloc_r+0x88>
 8009f42:	4629      	mov	r1, r5
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff ffbf 	bl	8009ec8 <sbrk_aligned>
 8009f4a:	1c43      	adds	r3, r0, #1
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	d158      	bne.n	800a002 <_malloc_r+0xf6>
 8009f50:	f8d8 4000 	ldr.w	r4, [r8]
 8009f54:	4627      	mov	r7, r4
 8009f56:	2f00      	cmp	r7, #0
 8009f58:	d143      	bne.n	8009fe2 <_malloc_r+0xd6>
 8009f5a:	2c00      	cmp	r4, #0
 8009f5c:	d04b      	beq.n	8009ff6 <_malloc_r+0xea>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	4639      	mov	r1, r7
 8009f62:	4630      	mov	r0, r6
 8009f64:	eb04 0903 	add.w	r9, r4, r3
 8009f68:	f000 f886 	bl	800a078 <_sbrk_r>
 8009f6c:	4581      	cmp	r9, r0
 8009f6e:	d142      	bne.n	8009ff6 <_malloc_r+0xea>
 8009f70:	6821      	ldr	r1, [r4, #0]
 8009f72:	1a6d      	subs	r5, r5, r1
 8009f74:	4629      	mov	r1, r5
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7ff ffa6 	bl	8009ec8 <sbrk_aligned>
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	d03a      	beq.n	8009ff6 <_malloc_r+0xea>
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	442b      	add	r3, r5
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	f8d8 3000 	ldr.w	r3, [r8]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	bb62      	cbnz	r2, 8009fe8 <_malloc_r+0xdc>
 8009f8e:	f8c8 7000 	str.w	r7, [r8]
 8009f92:	e00f      	b.n	8009fb4 <_malloc_r+0xa8>
 8009f94:	6822      	ldr	r2, [r4, #0]
 8009f96:	1b52      	subs	r2, r2, r5
 8009f98:	d420      	bmi.n	8009fdc <_malloc_r+0xd0>
 8009f9a:	2a0b      	cmp	r2, #11
 8009f9c:	d917      	bls.n	8009fce <_malloc_r+0xc2>
 8009f9e:	1961      	adds	r1, r4, r5
 8009fa0:	42a3      	cmp	r3, r4
 8009fa2:	6025      	str	r5, [r4, #0]
 8009fa4:	bf18      	it	ne
 8009fa6:	6059      	strne	r1, [r3, #4]
 8009fa8:	6863      	ldr	r3, [r4, #4]
 8009faa:	bf08      	it	eq
 8009fac:	f8c8 1000 	streq.w	r1, [r8]
 8009fb0:	5162      	str	r2, [r4, r5]
 8009fb2:	604b      	str	r3, [r1, #4]
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f000 f82f 	bl	800a018 <__malloc_unlock>
 8009fba:	f104 000b 	add.w	r0, r4, #11
 8009fbe:	1d23      	adds	r3, r4, #4
 8009fc0:	f020 0007 	bic.w	r0, r0, #7
 8009fc4:	1ac2      	subs	r2, r0, r3
 8009fc6:	bf1c      	itt	ne
 8009fc8:	1a1b      	subne	r3, r3, r0
 8009fca:	50a3      	strne	r3, [r4, r2]
 8009fcc:	e7af      	b.n	8009f2e <_malloc_r+0x22>
 8009fce:	6862      	ldr	r2, [r4, #4]
 8009fd0:	42a3      	cmp	r3, r4
 8009fd2:	bf0c      	ite	eq
 8009fd4:	f8c8 2000 	streq.w	r2, [r8]
 8009fd8:	605a      	strne	r2, [r3, #4]
 8009fda:	e7eb      	b.n	8009fb4 <_malloc_r+0xa8>
 8009fdc:	4623      	mov	r3, r4
 8009fde:	6864      	ldr	r4, [r4, #4]
 8009fe0:	e7ae      	b.n	8009f40 <_malloc_r+0x34>
 8009fe2:	463c      	mov	r4, r7
 8009fe4:	687f      	ldr	r7, [r7, #4]
 8009fe6:	e7b6      	b.n	8009f56 <_malloc_r+0x4a>
 8009fe8:	461a      	mov	r2, r3
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	42a3      	cmp	r3, r4
 8009fee:	d1fb      	bne.n	8009fe8 <_malloc_r+0xdc>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	6053      	str	r3, [r2, #4]
 8009ff4:	e7de      	b.n	8009fb4 <_malloc_r+0xa8>
 8009ff6:	230c      	movs	r3, #12
 8009ff8:	6033      	str	r3, [r6, #0]
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f000 f80c 	bl	800a018 <__malloc_unlock>
 800a000:	e794      	b.n	8009f2c <_malloc_r+0x20>
 800a002:	6005      	str	r5, [r0, #0]
 800a004:	e7d6      	b.n	8009fb4 <_malloc_r+0xa8>
 800a006:	bf00      	nop
 800a008:	20000dd4 	.word	0x20000dd4

0800a00c <__malloc_lock>:
 800a00c:	4801      	ldr	r0, [pc, #4]	@ (800a014 <__malloc_lock+0x8>)
 800a00e:	f000 b86d 	b.w	800a0ec <__retarget_lock_acquire_recursive>
 800a012:	bf00      	nop
 800a014:	20000f14 	.word	0x20000f14

0800a018 <__malloc_unlock>:
 800a018:	4801      	ldr	r0, [pc, #4]	@ (800a020 <__malloc_unlock+0x8>)
 800a01a:	f000 b868 	b.w	800a0ee <__retarget_lock_release_recursive>
 800a01e:	bf00      	nop
 800a020:	20000f14 	.word	0x20000f14

0800a024 <siprintf>:
 800a024:	b40e      	push	{r1, r2, r3}
 800a026:	b510      	push	{r4, lr}
 800a028:	b09d      	sub	sp, #116	@ 0x74
 800a02a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a02c:	9002      	str	r0, [sp, #8]
 800a02e:	9006      	str	r0, [sp, #24]
 800a030:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a034:	480a      	ldr	r0, [pc, #40]	@ (800a060 <siprintf+0x3c>)
 800a036:	9107      	str	r1, [sp, #28]
 800a038:	9104      	str	r1, [sp, #16]
 800a03a:	490a      	ldr	r1, [pc, #40]	@ (800a064 <siprintf+0x40>)
 800a03c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a040:	9105      	str	r1, [sp, #20]
 800a042:	2400      	movs	r4, #0
 800a044:	a902      	add	r1, sp, #8
 800a046:	6800      	ldr	r0, [r0, #0]
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a04c:	f000 f8f6 	bl	800a23c <_svfiprintf_r>
 800a050:	9b02      	ldr	r3, [sp, #8]
 800a052:	701c      	strb	r4, [r3, #0]
 800a054:	b01d      	add	sp, #116	@ 0x74
 800a056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a05a:	b003      	add	sp, #12
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	2000003c 	.word	0x2000003c
 800a064:	ffff0208 	.word	0xffff0208

0800a068 <memset>:
 800a068:	4402      	add	r2, r0
 800a06a:	4603      	mov	r3, r0
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d100      	bne.n	800a072 <memset+0xa>
 800a070:	4770      	bx	lr
 800a072:	f803 1b01 	strb.w	r1, [r3], #1
 800a076:	e7f9      	b.n	800a06c <memset+0x4>

0800a078 <_sbrk_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4d06      	ldr	r5, [pc, #24]	@ (800a094 <_sbrk_r+0x1c>)
 800a07c:	2300      	movs	r3, #0
 800a07e:	4604      	mov	r4, r0
 800a080:	4608      	mov	r0, r1
 800a082:	602b      	str	r3, [r5, #0]
 800a084:	f7f7 fe4c 	bl	8001d20 <_sbrk>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_sbrk_r+0x1a>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_sbrk_r+0x1a>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	20000f10 	.word	0x20000f10

0800a098 <__errno>:
 800a098:	4b01      	ldr	r3, [pc, #4]	@ (800a0a0 <__errno+0x8>)
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	2000003c 	.word	0x2000003c

0800a0a4 <__libc_init_array>:
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	4d0d      	ldr	r5, [pc, #52]	@ (800a0dc <__libc_init_array+0x38>)
 800a0a8:	4c0d      	ldr	r4, [pc, #52]	@ (800a0e0 <__libc_init_array+0x3c>)
 800a0aa:	1b64      	subs	r4, r4, r5
 800a0ac:	10a4      	asrs	r4, r4, #2
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	42a6      	cmp	r6, r4
 800a0b2:	d109      	bne.n	800a0c8 <__libc_init_array+0x24>
 800a0b4:	4d0b      	ldr	r5, [pc, #44]	@ (800a0e4 <__libc_init_array+0x40>)
 800a0b6:	4c0c      	ldr	r4, [pc, #48]	@ (800a0e8 <__libc_init_array+0x44>)
 800a0b8:	f000 fba6 	bl	800a808 <_init>
 800a0bc:	1b64      	subs	r4, r4, r5
 800a0be:	10a4      	asrs	r4, r4, #2
 800a0c0:	2600      	movs	r6, #0
 800a0c2:	42a6      	cmp	r6, r4
 800a0c4:	d105      	bne.n	800a0d2 <__libc_init_array+0x2e>
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
 800a0c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0cc:	4798      	blx	r3
 800a0ce:	3601      	adds	r6, #1
 800a0d0:	e7ee      	b.n	800a0b0 <__libc_init_array+0xc>
 800a0d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d6:	4798      	blx	r3
 800a0d8:	3601      	adds	r6, #1
 800a0da:	e7f2      	b.n	800a0c2 <__libc_init_array+0x1e>
 800a0dc:	0800c934 	.word	0x0800c934
 800a0e0:	0800c934 	.word	0x0800c934
 800a0e4:	0800c934 	.word	0x0800c934
 800a0e8:	0800c938 	.word	0x0800c938

0800a0ec <__retarget_lock_acquire_recursive>:
 800a0ec:	4770      	bx	lr

0800a0ee <__retarget_lock_release_recursive>:
 800a0ee:	4770      	bx	lr

0800a0f0 <_free_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4605      	mov	r5, r0
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	d041      	beq.n	800a17c <_free_r+0x8c>
 800a0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fc:	1f0c      	subs	r4, r1, #4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bfb8      	it	lt
 800a102:	18e4      	addlt	r4, r4, r3
 800a104:	f7ff ff82 	bl	800a00c <__malloc_lock>
 800a108:	4a1d      	ldr	r2, [pc, #116]	@ (800a180 <_free_r+0x90>)
 800a10a:	6813      	ldr	r3, [r2, #0]
 800a10c:	b933      	cbnz	r3, 800a11c <_free_r+0x2c>
 800a10e:	6063      	str	r3, [r4, #4]
 800a110:	6014      	str	r4, [r2, #0]
 800a112:	4628      	mov	r0, r5
 800a114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a118:	f7ff bf7e 	b.w	800a018 <__malloc_unlock>
 800a11c:	42a3      	cmp	r3, r4
 800a11e:	d908      	bls.n	800a132 <_free_r+0x42>
 800a120:	6820      	ldr	r0, [r4, #0]
 800a122:	1821      	adds	r1, r4, r0
 800a124:	428b      	cmp	r3, r1
 800a126:	bf01      	itttt	eq
 800a128:	6819      	ldreq	r1, [r3, #0]
 800a12a:	685b      	ldreq	r3, [r3, #4]
 800a12c:	1809      	addeq	r1, r1, r0
 800a12e:	6021      	streq	r1, [r4, #0]
 800a130:	e7ed      	b.n	800a10e <_free_r+0x1e>
 800a132:	461a      	mov	r2, r3
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	b10b      	cbz	r3, 800a13c <_free_r+0x4c>
 800a138:	42a3      	cmp	r3, r4
 800a13a:	d9fa      	bls.n	800a132 <_free_r+0x42>
 800a13c:	6811      	ldr	r1, [r2, #0]
 800a13e:	1850      	adds	r0, r2, r1
 800a140:	42a0      	cmp	r0, r4
 800a142:	d10b      	bne.n	800a15c <_free_r+0x6c>
 800a144:	6820      	ldr	r0, [r4, #0]
 800a146:	4401      	add	r1, r0
 800a148:	1850      	adds	r0, r2, r1
 800a14a:	4283      	cmp	r3, r0
 800a14c:	6011      	str	r1, [r2, #0]
 800a14e:	d1e0      	bne.n	800a112 <_free_r+0x22>
 800a150:	6818      	ldr	r0, [r3, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	6053      	str	r3, [r2, #4]
 800a156:	4408      	add	r0, r1
 800a158:	6010      	str	r0, [r2, #0]
 800a15a:	e7da      	b.n	800a112 <_free_r+0x22>
 800a15c:	d902      	bls.n	800a164 <_free_r+0x74>
 800a15e:	230c      	movs	r3, #12
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	e7d6      	b.n	800a112 <_free_r+0x22>
 800a164:	6820      	ldr	r0, [r4, #0]
 800a166:	1821      	adds	r1, r4, r0
 800a168:	428b      	cmp	r3, r1
 800a16a:	bf04      	itt	eq
 800a16c:	6819      	ldreq	r1, [r3, #0]
 800a16e:	685b      	ldreq	r3, [r3, #4]
 800a170:	6063      	str	r3, [r4, #4]
 800a172:	bf04      	itt	eq
 800a174:	1809      	addeq	r1, r1, r0
 800a176:	6021      	streq	r1, [r4, #0]
 800a178:	6054      	str	r4, [r2, #4]
 800a17a:	e7ca      	b.n	800a112 <_free_r+0x22>
 800a17c:	bd38      	pop	{r3, r4, r5, pc}
 800a17e:	bf00      	nop
 800a180:	20000dd4 	.word	0x20000dd4

0800a184 <__ssputs_r>:
 800a184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a188:	688e      	ldr	r6, [r1, #8]
 800a18a:	461f      	mov	r7, r3
 800a18c:	42be      	cmp	r6, r7
 800a18e:	680b      	ldr	r3, [r1, #0]
 800a190:	4682      	mov	sl, r0
 800a192:	460c      	mov	r4, r1
 800a194:	4690      	mov	r8, r2
 800a196:	d82d      	bhi.n	800a1f4 <__ssputs_r+0x70>
 800a198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a19c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a1a0:	d026      	beq.n	800a1f0 <__ssputs_r+0x6c>
 800a1a2:	6965      	ldr	r5, [r4, #20]
 800a1a4:	6909      	ldr	r1, [r1, #16]
 800a1a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1aa:	eba3 0901 	sub.w	r9, r3, r1
 800a1ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1b2:	1c7b      	adds	r3, r7, #1
 800a1b4:	444b      	add	r3, r9
 800a1b6:	106d      	asrs	r5, r5, #1
 800a1b8:	429d      	cmp	r5, r3
 800a1ba:	bf38      	it	cc
 800a1bc:	461d      	movcc	r5, r3
 800a1be:	0553      	lsls	r3, r2, #21
 800a1c0:	d527      	bpl.n	800a212 <__ssputs_r+0x8e>
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	f7ff fea2 	bl	8009f0c <_malloc_r>
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	b360      	cbz	r0, 800a226 <__ssputs_r+0xa2>
 800a1cc:	6921      	ldr	r1, [r4, #16]
 800a1ce:	464a      	mov	r2, r9
 800a1d0:	f000 fad6 	bl	800a780 <memcpy>
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1de:	81a3      	strh	r3, [r4, #12]
 800a1e0:	6126      	str	r6, [r4, #16]
 800a1e2:	6165      	str	r5, [r4, #20]
 800a1e4:	444e      	add	r6, r9
 800a1e6:	eba5 0509 	sub.w	r5, r5, r9
 800a1ea:	6026      	str	r6, [r4, #0]
 800a1ec:	60a5      	str	r5, [r4, #8]
 800a1ee:	463e      	mov	r6, r7
 800a1f0:	42be      	cmp	r6, r7
 800a1f2:	d900      	bls.n	800a1f6 <__ssputs_r+0x72>
 800a1f4:	463e      	mov	r6, r7
 800a1f6:	6820      	ldr	r0, [r4, #0]
 800a1f8:	4632      	mov	r2, r6
 800a1fa:	4641      	mov	r1, r8
 800a1fc:	f000 faa6 	bl	800a74c <memmove>
 800a200:	68a3      	ldr	r3, [r4, #8]
 800a202:	1b9b      	subs	r3, r3, r6
 800a204:	60a3      	str	r3, [r4, #8]
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	4433      	add	r3, r6
 800a20a:	6023      	str	r3, [r4, #0]
 800a20c:	2000      	movs	r0, #0
 800a20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a212:	462a      	mov	r2, r5
 800a214:	f000 fac2 	bl	800a79c <_realloc_r>
 800a218:	4606      	mov	r6, r0
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d1e0      	bne.n	800a1e0 <__ssputs_r+0x5c>
 800a21e:	6921      	ldr	r1, [r4, #16]
 800a220:	4650      	mov	r0, sl
 800a222:	f7ff ff65 	bl	800a0f0 <_free_r>
 800a226:	230c      	movs	r3, #12
 800a228:	f8ca 3000 	str.w	r3, [sl]
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a232:	81a3      	strh	r3, [r4, #12]
 800a234:	f04f 30ff 	mov.w	r0, #4294967295
 800a238:	e7e9      	b.n	800a20e <__ssputs_r+0x8a>
	...

0800a23c <_svfiprintf_r>:
 800a23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a240:	4698      	mov	r8, r3
 800a242:	898b      	ldrh	r3, [r1, #12]
 800a244:	061b      	lsls	r3, r3, #24
 800a246:	b09d      	sub	sp, #116	@ 0x74
 800a248:	4607      	mov	r7, r0
 800a24a:	460d      	mov	r5, r1
 800a24c:	4614      	mov	r4, r2
 800a24e:	d510      	bpl.n	800a272 <_svfiprintf_r+0x36>
 800a250:	690b      	ldr	r3, [r1, #16]
 800a252:	b973      	cbnz	r3, 800a272 <_svfiprintf_r+0x36>
 800a254:	2140      	movs	r1, #64	@ 0x40
 800a256:	f7ff fe59 	bl	8009f0c <_malloc_r>
 800a25a:	6028      	str	r0, [r5, #0]
 800a25c:	6128      	str	r0, [r5, #16]
 800a25e:	b930      	cbnz	r0, 800a26e <_svfiprintf_r+0x32>
 800a260:	230c      	movs	r3, #12
 800a262:	603b      	str	r3, [r7, #0]
 800a264:	f04f 30ff 	mov.w	r0, #4294967295
 800a268:	b01d      	add	sp, #116	@ 0x74
 800a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26e:	2340      	movs	r3, #64	@ 0x40
 800a270:	616b      	str	r3, [r5, #20]
 800a272:	2300      	movs	r3, #0
 800a274:	9309      	str	r3, [sp, #36]	@ 0x24
 800a276:	2320      	movs	r3, #32
 800a278:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a27c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a280:	2330      	movs	r3, #48	@ 0x30
 800a282:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a420 <_svfiprintf_r+0x1e4>
 800a286:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a28a:	f04f 0901 	mov.w	r9, #1
 800a28e:	4623      	mov	r3, r4
 800a290:	469a      	mov	sl, r3
 800a292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a296:	b10a      	cbz	r2, 800a29c <_svfiprintf_r+0x60>
 800a298:	2a25      	cmp	r2, #37	@ 0x25
 800a29a:	d1f9      	bne.n	800a290 <_svfiprintf_r+0x54>
 800a29c:	ebba 0b04 	subs.w	fp, sl, r4
 800a2a0:	d00b      	beq.n	800a2ba <_svfiprintf_r+0x7e>
 800a2a2:	465b      	mov	r3, fp
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff ff6b 	bl	800a184 <__ssputs_r>
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f000 80a7 	beq.w	800a402 <_svfiprintf_r+0x1c6>
 800a2b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2b6:	445a      	add	r2, fp
 800a2b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 809f 	beq.w	800a402 <_svfiprintf_r+0x1c6>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ce:	f10a 0a01 	add.w	sl, sl, #1
 800a2d2:	9304      	str	r3, [sp, #16]
 800a2d4:	9307      	str	r3, [sp, #28]
 800a2d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2da:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2dc:	4654      	mov	r4, sl
 800a2de:	2205      	movs	r2, #5
 800a2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e4:	484e      	ldr	r0, [pc, #312]	@ (800a420 <_svfiprintf_r+0x1e4>)
 800a2e6:	f7f5 ff73 	bl	80001d0 <memchr>
 800a2ea:	9a04      	ldr	r2, [sp, #16]
 800a2ec:	b9d8      	cbnz	r0, 800a326 <_svfiprintf_r+0xea>
 800a2ee:	06d0      	lsls	r0, r2, #27
 800a2f0:	bf44      	itt	mi
 800a2f2:	2320      	movmi	r3, #32
 800a2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2f8:	0711      	lsls	r1, r2, #28
 800a2fa:	bf44      	itt	mi
 800a2fc:	232b      	movmi	r3, #43	@ 0x2b
 800a2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a302:	f89a 3000 	ldrb.w	r3, [sl]
 800a306:	2b2a      	cmp	r3, #42	@ 0x2a
 800a308:	d015      	beq.n	800a336 <_svfiprintf_r+0xfa>
 800a30a:	9a07      	ldr	r2, [sp, #28]
 800a30c:	4654      	mov	r4, sl
 800a30e:	2000      	movs	r0, #0
 800a310:	f04f 0c0a 	mov.w	ip, #10
 800a314:	4621      	mov	r1, r4
 800a316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a31a:	3b30      	subs	r3, #48	@ 0x30
 800a31c:	2b09      	cmp	r3, #9
 800a31e:	d94b      	bls.n	800a3b8 <_svfiprintf_r+0x17c>
 800a320:	b1b0      	cbz	r0, 800a350 <_svfiprintf_r+0x114>
 800a322:	9207      	str	r2, [sp, #28]
 800a324:	e014      	b.n	800a350 <_svfiprintf_r+0x114>
 800a326:	eba0 0308 	sub.w	r3, r0, r8
 800a32a:	fa09 f303 	lsl.w	r3, r9, r3
 800a32e:	4313      	orrs	r3, r2
 800a330:	9304      	str	r3, [sp, #16]
 800a332:	46a2      	mov	sl, r4
 800a334:	e7d2      	b.n	800a2dc <_svfiprintf_r+0xa0>
 800a336:	9b03      	ldr	r3, [sp, #12]
 800a338:	1d19      	adds	r1, r3, #4
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	9103      	str	r1, [sp, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bfbb      	ittet	lt
 800a342:	425b      	neglt	r3, r3
 800a344:	f042 0202 	orrlt.w	r2, r2, #2
 800a348:	9307      	strge	r3, [sp, #28]
 800a34a:	9307      	strlt	r3, [sp, #28]
 800a34c:	bfb8      	it	lt
 800a34e:	9204      	strlt	r2, [sp, #16]
 800a350:	7823      	ldrb	r3, [r4, #0]
 800a352:	2b2e      	cmp	r3, #46	@ 0x2e
 800a354:	d10a      	bne.n	800a36c <_svfiprintf_r+0x130>
 800a356:	7863      	ldrb	r3, [r4, #1]
 800a358:	2b2a      	cmp	r3, #42	@ 0x2a
 800a35a:	d132      	bne.n	800a3c2 <_svfiprintf_r+0x186>
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	1d1a      	adds	r2, r3, #4
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	9203      	str	r2, [sp, #12]
 800a364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a368:	3402      	adds	r4, #2
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a430 <_svfiprintf_r+0x1f4>
 800a370:	7821      	ldrb	r1, [r4, #0]
 800a372:	2203      	movs	r2, #3
 800a374:	4650      	mov	r0, sl
 800a376:	f7f5 ff2b 	bl	80001d0 <memchr>
 800a37a:	b138      	cbz	r0, 800a38c <_svfiprintf_r+0x150>
 800a37c:	9b04      	ldr	r3, [sp, #16]
 800a37e:	eba0 000a 	sub.w	r0, r0, sl
 800a382:	2240      	movs	r2, #64	@ 0x40
 800a384:	4082      	lsls	r2, r0
 800a386:	4313      	orrs	r3, r2
 800a388:	3401      	adds	r4, #1
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a390:	4824      	ldr	r0, [pc, #144]	@ (800a424 <_svfiprintf_r+0x1e8>)
 800a392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a396:	2206      	movs	r2, #6
 800a398:	f7f5 ff1a 	bl	80001d0 <memchr>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d036      	beq.n	800a40e <_svfiprintf_r+0x1d2>
 800a3a0:	4b21      	ldr	r3, [pc, #132]	@ (800a428 <_svfiprintf_r+0x1ec>)
 800a3a2:	bb1b      	cbnz	r3, 800a3ec <_svfiprintf_r+0x1b0>
 800a3a4:	9b03      	ldr	r3, [sp, #12]
 800a3a6:	3307      	adds	r3, #7
 800a3a8:	f023 0307 	bic.w	r3, r3, #7
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	9303      	str	r3, [sp, #12]
 800a3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b2:	4433      	add	r3, r6
 800a3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3b6:	e76a      	b.n	800a28e <_svfiprintf_r+0x52>
 800a3b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3bc:	460c      	mov	r4, r1
 800a3be:	2001      	movs	r0, #1
 800a3c0:	e7a8      	b.n	800a314 <_svfiprintf_r+0xd8>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	3401      	adds	r4, #1
 800a3c6:	9305      	str	r3, [sp, #20]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	f04f 0c0a 	mov.w	ip, #10
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3d4:	3a30      	subs	r2, #48	@ 0x30
 800a3d6:	2a09      	cmp	r2, #9
 800a3d8:	d903      	bls.n	800a3e2 <_svfiprintf_r+0x1a6>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0c6      	beq.n	800a36c <_svfiprintf_r+0x130>
 800a3de:	9105      	str	r1, [sp, #20]
 800a3e0:	e7c4      	b.n	800a36c <_svfiprintf_r+0x130>
 800a3e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e7f0      	b.n	800a3ce <_svfiprintf_r+0x192>
 800a3ec:	ab03      	add	r3, sp, #12
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a42c <_svfiprintf_r+0x1f0>)
 800a3f4:	a904      	add	r1, sp, #16
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	f3af 8000 	nop.w
 800a3fc:	1c42      	adds	r2, r0, #1
 800a3fe:	4606      	mov	r6, r0
 800a400:	d1d6      	bne.n	800a3b0 <_svfiprintf_r+0x174>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	065b      	lsls	r3, r3, #25
 800a406:	f53f af2d 	bmi.w	800a264 <_svfiprintf_r+0x28>
 800a40a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a40c:	e72c      	b.n	800a268 <_svfiprintf_r+0x2c>
 800a40e:	ab03      	add	r3, sp, #12
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	462a      	mov	r2, r5
 800a414:	4b05      	ldr	r3, [pc, #20]	@ (800a42c <_svfiprintf_r+0x1f0>)
 800a416:	a904      	add	r1, sp, #16
 800a418:	4638      	mov	r0, r7
 800a41a:	f000 f879 	bl	800a510 <_printf_i>
 800a41e:	e7ed      	b.n	800a3fc <_svfiprintf_r+0x1c0>
 800a420:	0800c8f8 	.word	0x0800c8f8
 800a424:	0800c902 	.word	0x0800c902
 800a428:	00000000 	.word	0x00000000
 800a42c:	0800a185 	.word	0x0800a185
 800a430:	0800c8fe 	.word	0x0800c8fe

0800a434 <_printf_common>:
 800a434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a438:	4616      	mov	r6, r2
 800a43a:	4698      	mov	r8, r3
 800a43c:	688a      	ldr	r2, [r1, #8]
 800a43e:	690b      	ldr	r3, [r1, #16]
 800a440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a444:	4293      	cmp	r3, r2
 800a446:	bfb8      	it	lt
 800a448:	4613      	movlt	r3, r2
 800a44a:	6033      	str	r3, [r6, #0]
 800a44c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a450:	4607      	mov	r7, r0
 800a452:	460c      	mov	r4, r1
 800a454:	b10a      	cbz	r2, 800a45a <_printf_common+0x26>
 800a456:	3301      	adds	r3, #1
 800a458:	6033      	str	r3, [r6, #0]
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	0699      	lsls	r1, r3, #26
 800a45e:	bf42      	ittt	mi
 800a460:	6833      	ldrmi	r3, [r6, #0]
 800a462:	3302      	addmi	r3, #2
 800a464:	6033      	strmi	r3, [r6, #0]
 800a466:	6825      	ldr	r5, [r4, #0]
 800a468:	f015 0506 	ands.w	r5, r5, #6
 800a46c:	d106      	bne.n	800a47c <_printf_common+0x48>
 800a46e:	f104 0a19 	add.w	sl, r4, #25
 800a472:	68e3      	ldr	r3, [r4, #12]
 800a474:	6832      	ldr	r2, [r6, #0]
 800a476:	1a9b      	subs	r3, r3, r2
 800a478:	42ab      	cmp	r3, r5
 800a47a:	dc26      	bgt.n	800a4ca <_printf_common+0x96>
 800a47c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a480:	6822      	ldr	r2, [r4, #0]
 800a482:	3b00      	subs	r3, #0
 800a484:	bf18      	it	ne
 800a486:	2301      	movne	r3, #1
 800a488:	0692      	lsls	r2, r2, #26
 800a48a:	d42b      	bmi.n	800a4e4 <_printf_common+0xb0>
 800a48c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a490:	4641      	mov	r1, r8
 800a492:	4638      	mov	r0, r7
 800a494:	47c8      	blx	r9
 800a496:	3001      	adds	r0, #1
 800a498:	d01e      	beq.n	800a4d8 <_printf_common+0xa4>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	6922      	ldr	r2, [r4, #16]
 800a49e:	f003 0306 	and.w	r3, r3, #6
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	bf02      	ittt	eq
 800a4a6:	68e5      	ldreq	r5, [r4, #12]
 800a4a8:	6833      	ldreq	r3, [r6, #0]
 800a4aa:	1aed      	subeq	r5, r5, r3
 800a4ac:	68a3      	ldr	r3, [r4, #8]
 800a4ae:	bf0c      	ite	eq
 800a4b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4b4:	2500      	movne	r5, #0
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	bfc4      	itt	gt
 800a4ba:	1a9b      	subgt	r3, r3, r2
 800a4bc:	18ed      	addgt	r5, r5, r3
 800a4be:	2600      	movs	r6, #0
 800a4c0:	341a      	adds	r4, #26
 800a4c2:	42b5      	cmp	r5, r6
 800a4c4:	d11a      	bne.n	800a4fc <_printf_common+0xc8>
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	e008      	b.n	800a4dc <_printf_common+0xa8>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	4652      	mov	r2, sl
 800a4ce:	4641      	mov	r1, r8
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	47c8      	blx	r9
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d103      	bne.n	800a4e0 <_printf_common+0xac>
 800a4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e0:	3501      	adds	r5, #1
 800a4e2:	e7c6      	b.n	800a472 <_printf_common+0x3e>
 800a4e4:	18e1      	adds	r1, r4, r3
 800a4e6:	1c5a      	adds	r2, r3, #1
 800a4e8:	2030      	movs	r0, #48	@ 0x30
 800a4ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4ee:	4422      	add	r2, r4
 800a4f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4f8:	3302      	adds	r3, #2
 800a4fa:	e7c7      	b.n	800a48c <_printf_common+0x58>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	4622      	mov	r2, r4
 800a500:	4641      	mov	r1, r8
 800a502:	4638      	mov	r0, r7
 800a504:	47c8      	blx	r9
 800a506:	3001      	adds	r0, #1
 800a508:	d0e6      	beq.n	800a4d8 <_printf_common+0xa4>
 800a50a:	3601      	adds	r6, #1
 800a50c:	e7d9      	b.n	800a4c2 <_printf_common+0x8e>
	...

0800a510 <_printf_i>:
 800a510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a514:	7e0f      	ldrb	r7, [r1, #24]
 800a516:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a518:	2f78      	cmp	r7, #120	@ 0x78
 800a51a:	4691      	mov	r9, r2
 800a51c:	4680      	mov	r8, r0
 800a51e:	460c      	mov	r4, r1
 800a520:	469a      	mov	sl, r3
 800a522:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a526:	d807      	bhi.n	800a538 <_printf_i+0x28>
 800a528:	2f62      	cmp	r7, #98	@ 0x62
 800a52a:	d80a      	bhi.n	800a542 <_printf_i+0x32>
 800a52c:	2f00      	cmp	r7, #0
 800a52e:	f000 80d1 	beq.w	800a6d4 <_printf_i+0x1c4>
 800a532:	2f58      	cmp	r7, #88	@ 0x58
 800a534:	f000 80b8 	beq.w	800a6a8 <_printf_i+0x198>
 800a538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a53c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a540:	e03a      	b.n	800a5b8 <_printf_i+0xa8>
 800a542:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a546:	2b15      	cmp	r3, #21
 800a548:	d8f6      	bhi.n	800a538 <_printf_i+0x28>
 800a54a:	a101      	add	r1, pc, #4	@ (adr r1, 800a550 <_printf_i+0x40>)
 800a54c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a550:	0800a5a9 	.word	0x0800a5a9
 800a554:	0800a5bd 	.word	0x0800a5bd
 800a558:	0800a539 	.word	0x0800a539
 800a55c:	0800a539 	.word	0x0800a539
 800a560:	0800a539 	.word	0x0800a539
 800a564:	0800a539 	.word	0x0800a539
 800a568:	0800a5bd 	.word	0x0800a5bd
 800a56c:	0800a539 	.word	0x0800a539
 800a570:	0800a539 	.word	0x0800a539
 800a574:	0800a539 	.word	0x0800a539
 800a578:	0800a539 	.word	0x0800a539
 800a57c:	0800a6bb 	.word	0x0800a6bb
 800a580:	0800a5e7 	.word	0x0800a5e7
 800a584:	0800a675 	.word	0x0800a675
 800a588:	0800a539 	.word	0x0800a539
 800a58c:	0800a539 	.word	0x0800a539
 800a590:	0800a6dd 	.word	0x0800a6dd
 800a594:	0800a539 	.word	0x0800a539
 800a598:	0800a5e7 	.word	0x0800a5e7
 800a59c:	0800a539 	.word	0x0800a539
 800a5a0:	0800a539 	.word	0x0800a539
 800a5a4:	0800a67d 	.word	0x0800a67d
 800a5a8:	6833      	ldr	r3, [r6, #0]
 800a5aa:	1d1a      	adds	r2, r3, #4
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6032      	str	r2, [r6, #0]
 800a5b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e09c      	b.n	800a6f6 <_printf_i+0x1e6>
 800a5bc:	6833      	ldr	r3, [r6, #0]
 800a5be:	6820      	ldr	r0, [r4, #0]
 800a5c0:	1d19      	adds	r1, r3, #4
 800a5c2:	6031      	str	r1, [r6, #0]
 800a5c4:	0606      	lsls	r6, r0, #24
 800a5c6:	d501      	bpl.n	800a5cc <_printf_i+0xbc>
 800a5c8:	681d      	ldr	r5, [r3, #0]
 800a5ca:	e003      	b.n	800a5d4 <_printf_i+0xc4>
 800a5cc:	0645      	lsls	r5, r0, #25
 800a5ce:	d5fb      	bpl.n	800a5c8 <_printf_i+0xb8>
 800a5d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5d4:	2d00      	cmp	r5, #0
 800a5d6:	da03      	bge.n	800a5e0 <_printf_i+0xd0>
 800a5d8:	232d      	movs	r3, #45	@ 0x2d
 800a5da:	426d      	negs	r5, r5
 800a5dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5e0:	4858      	ldr	r0, [pc, #352]	@ (800a744 <_printf_i+0x234>)
 800a5e2:	230a      	movs	r3, #10
 800a5e4:	e011      	b.n	800a60a <_printf_i+0xfa>
 800a5e6:	6821      	ldr	r1, [r4, #0]
 800a5e8:	6833      	ldr	r3, [r6, #0]
 800a5ea:	0608      	lsls	r0, r1, #24
 800a5ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5f0:	d402      	bmi.n	800a5f8 <_printf_i+0xe8>
 800a5f2:	0649      	lsls	r1, r1, #25
 800a5f4:	bf48      	it	mi
 800a5f6:	b2ad      	uxthmi	r5, r5
 800a5f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5fa:	4852      	ldr	r0, [pc, #328]	@ (800a744 <_printf_i+0x234>)
 800a5fc:	6033      	str	r3, [r6, #0]
 800a5fe:	bf14      	ite	ne
 800a600:	230a      	movne	r3, #10
 800a602:	2308      	moveq	r3, #8
 800a604:	2100      	movs	r1, #0
 800a606:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a60a:	6866      	ldr	r6, [r4, #4]
 800a60c:	60a6      	str	r6, [r4, #8]
 800a60e:	2e00      	cmp	r6, #0
 800a610:	db05      	blt.n	800a61e <_printf_i+0x10e>
 800a612:	6821      	ldr	r1, [r4, #0]
 800a614:	432e      	orrs	r6, r5
 800a616:	f021 0104 	bic.w	r1, r1, #4
 800a61a:	6021      	str	r1, [r4, #0]
 800a61c:	d04b      	beq.n	800a6b6 <_printf_i+0x1a6>
 800a61e:	4616      	mov	r6, r2
 800a620:	fbb5 f1f3 	udiv	r1, r5, r3
 800a624:	fb03 5711 	mls	r7, r3, r1, r5
 800a628:	5dc7      	ldrb	r7, [r0, r7]
 800a62a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a62e:	462f      	mov	r7, r5
 800a630:	42bb      	cmp	r3, r7
 800a632:	460d      	mov	r5, r1
 800a634:	d9f4      	bls.n	800a620 <_printf_i+0x110>
 800a636:	2b08      	cmp	r3, #8
 800a638:	d10b      	bne.n	800a652 <_printf_i+0x142>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	07df      	lsls	r7, r3, #31
 800a63e:	d508      	bpl.n	800a652 <_printf_i+0x142>
 800a640:	6923      	ldr	r3, [r4, #16]
 800a642:	6861      	ldr	r1, [r4, #4]
 800a644:	4299      	cmp	r1, r3
 800a646:	bfde      	ittt	le
 800a648:	2330      	movle	r3, #48	@ 0x30
 800a64a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a64e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a652:	1b92      	subs	r2, r2, r6
 800a654:	6122      	str	r2, [r4, #16]
 800a656:	f8cd a000 	str.w	sl, [sp]
 800a65a:	464b      	mov	r3, r9
 800a65c:	aa03      	add	r2, sp, #12
 800a65e:	4621      	mov	r1, r4
 800a660:	4640      	mov	r0, r8
 800a662:	f7ff fee7 	bl	800a434 <_printf_common>
 800a666:	3001      	adds	r0, #1
 800a668:	d14a      	bne.n	800a700 <_printf_i+0x1f0>
 800a66a:	f04f 30ff 	mov.w	r0, #4294967295
 800a66e:	b004      	add	sp, #16
 800a670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	f043 0320 	orr.w	r3, r3, #32
 800a67a:	6023      	str	r3, [r4, #0]
 800a67c:	4832      	ldr	r0, [pc, #200]	@ (800a748 <_printf_i+0x238>)
 800a67e:	2778      	movs	r7, #120	@ 0x78
 800a680:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	6831      	ldr	r1, [r6, #0]
 800a688:	061f      	lsls	r7, r3, #24
 800a68a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a68e:	d402      	bmi.n	800a696 <_printf_i+0x186>
 800a690:	065f      	lsls	r7, r3, #25
 800a692:	bf48      	it	mi
 800a694:	b2ad      	uxthmi	r5, r5
 800a696:	6031      	str	r1, [r6, #0]
 800a698:	07d9      	lsls	r1, r3, #31
 800a69a:	bf44      	itt	mi
 800a69c:	f043 0320 	orrmi.w	r3, r3, #32
 800a6a0:	6023      	strmi	r3, [r4, #0]
 800a6a2:	b11d      	cbz	r5, 800a6ac <_printf_i+0x19c>
 800a6a4:	2310      	movs	r3, #16
 800a6a6:	e7ad      	b.n	800a604 <_printf_i+0xf4>
 800a6a8:	4826      	ldr	r0, [pc, #152]	@ (800a744 <_printf_i+0x234>)
 800a6aa:	e7e9      	b.n	800a680 <_printf_i+0x170>
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	f023 0320 	bic.w	r3, r3, #32
 800a6b2:	6023      	str	r3, [r4, #0]
 800a6b4:	e7f6      	b.n	800a6a4 <_printf_i+0x194>
 800a6b6:	4616      	mov	r6, r2
 800a6b8:	e7bd      	b.n	800a636 <_printf_i+0x126>
 800a6ba:	6833      	ldr	r3, [r6, #0]
 800a6bc:	6825      	ldr	r5, [r4, #0]
 800a6be:	6961      	ldr	r1, [r4, #20]
 800a6c0:	1d18      	adds	r0, r3, #4
 800a6c2:	6030      	str	r0, [r6, #0]
 800a6c4:	062e      	lsls	r6, r5, #24
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	d501      	bpl.n	800a6ce <_printf_i+0x1be>
 800a6ca:	6019      	str	r1, [r3, #0]
 800a6cc:	e002      	b.n	800a6d4 <_printf_i+0x1c4>
 800a6ce:	0668      	lsls	r0, r5, #25
 800a6d0:	d5fb      	bpl.n	800a6ca <_printf_i+0x1ba>
 800a6d2:	8019      	strh	r1, [r3, #0]
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	6123      	str	r3, [r4, #16]
 800a6d8:	4616      	mov	r6, r2
 800a6da:	e7bc      	b.n	800a656 <_printf_i+0x146>
 800a6dc:	6833      	ldr	r3, [r6, #0]
 800a6de:	1d1a      	adds	r2, r3, #4
 800a6e0:	6032      	str	r2, [r6, #0]
 800a6e2:	681e      	ldr	r6, [r3, #0]
 800a6e4:	6862      	ldr	r2, [r4, #4]
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f7f5 fd71 	bl	80001d0 <memchr>
 800a6ee:	b108      	cbz	r0, 800a6f4 <_printf_i+0x1e4>
 800a6f0:	1b80      	subs	r0, r0, r6
 800a6f2:	6060      	str	r0, [r4, #4]
 800a6f4:	6863      	ldr	r3, [r4, #4]
 800a6f6:	6123      	str	r3, [r4, #16]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6fe:	e7aa      	b.n	800a656 <_printf_i+0x146>
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	4632      	mov	r2, r6
 800a704:	4649      	mov	r1, r9
 800a706:	4640      	mov	r0, r8
 800a708:	47d0      	blx	sl
 800a70a:	3001      	adds	r0, #1
 800a70c:	d0ad      	beq.n	800a66a <_printf_i+0x15a>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	079b      	lsls	r3, r3, #30
 800a712:	d413      	bmi.n	800a73c <_printf_i+0x22c>
 800a714:	68e0      	ldr	r0, [r4, #12]
 800a716:	9b03      	ldr	r3, [sp, #12]
 800a718:	4298      	cmp	r0, r3
 800a71a:	bfb8      	it	lt
 800a71c:	4618      	movlt	r0, r3
 800a71e:	e7a6      	b.n	800a66e <_printf_i+0x15e>
 800a720:	2301      	movs	r3, #1
 800a722:	4632      	mov	r2, r6
 800a724:	4649      	mov	r1, r9
 800a726:	4640      	mov	r0, r8
 800a728:	47d0      	blx	sl
 800a72a:	3001      	adds	r0, #1
 800a72c:	d09d      	beq.n	800a66a <_printf_i+0x15a>
 800a72e:	3501      	adds	r5, #1
 800a730:	68e3      	ldr	r3, [r4, #12]
 800a732:	9903      	ldr	r1, [sp, #12]
 800a734:	1a5b      	subs	r3, r3, r1
 800a736:	42ab      	cmp	r3, r5
 800a738:	dcf2      	bgt.n	800a720 <_printf_i+0x210>
 800a73a:	e7eb      	b.n	800a714 <_printf_i+0x204>
 800a73c:	2500      	movs	r5, #0
 800a73e:	f104 0619 	add.w	r6, r4, #25
 800a742:	e7f5      	b.n	800a730 <_printf_i+0x220>
 800a744:	0800c909 	.word	0x0800c909
 800a748:	0800c91a 	.word	0x0800c91a

0800a74c <memmove>:
 800a74c:	4288      	cmp	r0, r1
 800a74e:	b510      	push	{r4, lr}
 800a750:	eb01 0402 	add.w	r4, r1, r2
 800a754:	d902      	bls.n	800a75c <memmove+0x10>
 800a756:	4284      	cmp	r4, r0
 800a758:	4623      	mov	r3, r4
 800a75a:	d807      	bhi.n	800a76c <memmove+0x20>
 800a75c:	1e43      	subs	r3, r0, #1
 800a75e:	42a1      	cmp	r1, r4
 800a760:	d008      	beq.n	800a774 <memmove+0x28>
 800a762:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a76a:	e7f8      	b.n	800a75e <memmove+0x12>
 800a76c:	4402      	add	r2, r0
 800a76e:	4601      	mov	r1, r0
 800a770:	428a      	cmp	r2, r1
 800a772:	d100      	bne.n	800a776 <memmove+0x2a>
 800a774:	bd10      	pop	{r4, pc}
 800a776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a77a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a77e:	e7f7      	b.n	800a770 <memmove+0x24>

0800a780 <memcpy>:
 800a780:	440a      	add	r2, r1
 800a782:	4291      	cmp	r1, r2
 800a784:	f100 33ff 	add.w	r3, r0, #4294967295
 800a788:	d100      	bne.n	800a78c <memcpy+0xc>
 800a78a:	4770      	bx	lr
 800a78c:	b510      	push	{r4, lr}
 800a78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a792:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a796:	4291      	cmp	r1, r2
 800a798:	d1f9      	bne.n	800a78e <memcpy+0xe>
 800a79a:	bd10      	pop	{r4, pc}

0800a79c <_realloc_r>:
 800a79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	4614      	mov	r4, r2
 800a7a4:	460d      	mov	r5, r1
 800a7a6:	b921      	cbnz	r1, 800a7b2 <_realloc_r+0x16>
 800a7a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	f7ff bbad 	b.w	8009f0c <_malloc_r>
 800a7b2:	b92a      	cbnz	r2, 800a7c0 <_realloc_r+0x24>
 800a7b4:	f7ff fc9c 	bl	800a0f0 <_free_r>
 800a7b8:	4625      	mov	r5, r4
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c0:	f000 f81a 	bl	800a7f8 <_malloc_usable_size_r>
 800a7c4:	4284      	cmp	r4, r0
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	d802      	bhi.n	800a7d0 <_realloc_r+0x34>
 800a7ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7ce:	d8f4      	bhi.n	800a7ba <_realloc_r+0x1e>
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	f7ff fb9a 	bl	8009f0c <_malloc_r>
 800a7d8:	4680      	mov	r8, r0
 800a7da:	b908      	cbnz	r0, 800a7e0 <_realloc_r+0x44>
 800a7dc:	4645      	mov	r5, r8
 800a7de:	e7ec      	b.n	800a7ba <_realloc_r+0x1e>
 800a7e0:	42b4      	cmp	r4, r6
 800a7e2:	4622      	mov	r2, r4
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	bf28      	it	cs
 800a7e8:	4632      	movcs	r2, r6
 800a7ea:	f7ff ffc9 	bl	800a780 <memcpy>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4638      	mov	r0, r7
 800a7f2:	f7ff fc7d 	bl	800a0f0 <_free_r>
 800a7f6:	e7f1      	b.n	800a7dc <_realloc_r+0x40>

0800a7f8 <_malloc_usable_size_r>:
 800a7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7fc:	1f18      	subs	r0, r3, #4
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfbc      	itt	lt
 800a802:	580b      	ldrlt	r3, [r1, r0]
 800a804:	18c0      	addlt	r0, r0, r3
 800a806:	4770      	bx	lr

0800a808 <_init>:
 800a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80a:	bf00      	nop
 800a80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80e:	bc08      	pop	{r3}
 800a810:	469e      	mov	lr, r3
 800a812:	4770      	bx	lr

0800a814 <_fini>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	bf00      	nop
 800a818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81a:	bc08      	pop	{r3}
 800a81c:	469e      	mov	lr, r3
 800a81e:	4770      	bx	lr
