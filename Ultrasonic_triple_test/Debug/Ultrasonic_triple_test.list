
Ultrasonic_triple_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c90  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009e18  08009e18  0000ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e34  08009e34  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009e34  08009e34  0000ae34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e3c  08009e3c  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e3c  08009e3c  0000ae3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e40  08009e40  0000ae40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009e44  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a8c  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b08  20000b08  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001912b  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dff  00000000  00000000  000241d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  00027fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001178  00000000  00000000  00029670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243f2  00000000  00000000  0002a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d9a0  00000000  00000000  0004ebda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d427a  00000000  00000000  0006c57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001407f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000647c  00000000  00000000  00140838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00146cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e00 	.word	0x08009e00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009e00 	.word	0x08009e00

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b988 	b.w	8000ccc <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	468e      	mov	lr, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	4688      	mov	r8, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d962      	bls.n	8000ab0 <__udivmoddi4+0xdc>
 80009ea:	fab2 f682 	clz	r6, r2
 80009ee:	b14e      	cbz	r6, 8000a04 <__udivmoddi4+0x30>
 80009f0:	f1c6 0320 	rsb	r3, r6, #32
 80009f4:	fa01 f806 	lsl.w	r8, r1, r6
 80009f8:	fa20 f303 	lsr.w	r3, r0, r3
 80009fc:	40b7      	lsls	r7, r6
 80009fe:	ea43 0808 	orr.w	r8, r3, r8
 8000a02:	40b4      	lsls	r4, r6
 8000a04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a08:	fa1f fc87 	uxth.w	ip, r7
 8000a0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a10:	0c23      	lsrs	r3, r4, #16
 8000a12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d909      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a28:	f080 80ea 	bcs.w	8000c00 <__udivmoddi4+0x22c>
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	f240 80e7 	bls.w	8000c00 <__udivmoddi4+0x22c>
 8000a32:	3902      	subs	r1, #2
 8000a34:	443b      	add	r3, r7
 8000a36:	1a9a      	subs	r2, r3, r2
 8000a38:	b2a3      	uxth	r3, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a4a:	459c      	cmp	ip, r3
 8000a4c:	d909      	bls.n	8000a62 <__udivmoddi4+0x8e>
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a54:	f080 80d6 	bcs.w	8000c04 <__udivmoddi4+0x230>
 8000a58:	459c      	cmp	ip, r3
 8000a5a:	f240 80d3 	bls.w	8000c04 <__udivmoddi4+0x230>
 8000a5e:	443b      	add	r3, r7
 8000a60:	3802      	subs	r0, #2
 8000a62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a66:	eba3 030c 	sub.w	r3, r3, ip
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11d      	cbz	r5, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40f3      	lsrs	r3, r6
 8000a70:	2200      	movs	r2, #0
 8000a72:	e9c5 3200 	strd	r3, r2, [r5]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d905      	bls.n	8000a8a <__udivmoddi4+0xb6>
 8000a7e:	b10d      	cbz	r5, 8000a84 <__udivmoddi4+0xb0>
 8000a80:	e9c5 0100 	strd	r0, r1, [r5]
 8000a84:	2100      	movs	r1, #0
 8000a86:	4608      	mov	r0, r1
 8000a88:	e7f5      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000a8a:	fab3 f183 	clz	r1, r3
 8000a8e:	2900      	cmp	r1, #0
 8000a90:	d146      	bne.n	8000b20 <__udivmoddi4+0x14c>
 8000a92:	4573      	cmp	r3, lr
 8000a94:	d302      	bcc.n	8000a9c <__udivmoddi4+0xc8>
 8000a96:	4282      	cmp	r2, r0
 8000a98:	f200 8105 	bhi.w	8000ca6 <__udivmoddi4+0x2d2>
 8000a9c:	1a84      	subs	r4, r0, r2
 8000a9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	4690      	mov	r8, r2
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d0e5      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000aaa:	e9c5 4800 	strd	r4, r8, [r5]
 8000aae:	e7e2      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	f000 8090 	beq.w	8000bd6 <__udivmoddi4+0x202>
 8000ab6:	fab2 f682 	clz	r6, r2
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	f040 80a4 	bne.w	8000c08 <__udivmoddi4+0x234>
 8000ac0:	1a8a      	subs	r2, r1, r2
 8000ac2:	0c03      	lsrs	r3, r0, #16
 8000ac4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	b2bc      	uxth	r4, r7
 8000acc:	2101      	movs	r1, #1
 8000ace:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ad2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ada:	fb04 f20c 	mul.w	r2, r4, ip
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d907      	bls.n	8000af2 <__udivmoddi4+0x11e>
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x11c>
 8000aea:	429a      	cmp	r2, r3
 8000aec:	f200 80e0 	bhi.w	8000cb0 <__udivmoddi4+0x2dc>
 8000af0:	46c4      	mov	ip, r8
 8000af2:	1a9b      	subs	r3, r3, r2
 8000af4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000af8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000afc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b00:	fb02 f404 	mul.w	r4, r2, r4
 8000b04:	429c      	cmp	r4, r3
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0x144>
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x142>
 8000b10:	429c      	cmp	r4, r3
 8000b12:	f200 80ca 	bhi.w	8000caa <__udivmoddi4+0x2d6>
 8000b16:	4602      	mov	r2, r0
 8000b18:	1b1b      	subs	r3, r3, r4
 8000b1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b1e:	e7a5      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b20:	f1c1 0620 	rsb	r6, r1, #32
 8000b24:	408b      	lsls	r3, r1
 8000b26:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2a:	431f      	orrs	r7, r3
 8000b2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b30:	fa20 f306 	lsr.w	r3, r0, r6
 8000b34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b3c:	4323      	orrs	r3, r4
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	fa1f fc87 	uxth.w	ip, r7
 8000b46:	fbbe f0f9 	udiv	r0, lr, r9
 8000b4a:	0c1c      	lsrs	r4, r3, #16
 8000b4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b58:	45a6      	cmp	lr, r4
 8000b5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b5e:	d909      	bls.n	8000b74 <__udivmoddi4+0x1a0>
 8000b60:	193c      	adds	r4, r7, r4
 8000b62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b66:	f080 809c 	bcs.w	8000ca2 <__udivmoddi4+0x2ce>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f240 8099 	bls.w	8000ca2 <__udivmoddi4+0x2ce>
 8000b70:	3802      	subs	r0, #2
 8000b72:	443c      	add	r4, r7
 8000b74:	eba4 040e 	sub.w	r4, r4, lr
 8000b78:	fa1f fe83 	uxth.w	lr, r3
 8000b7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b80:	fb09 4413 	mls	r4, r9, r3, r4
 8000b84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x1ce>
 8000b90:	193c      	adds	r4, r7, r4
 8000b92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b96:	f080 8082 	bcs.w	8000c9e <__udivmoddi4+0x2ca>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	d97f      	bls.n	8000c9e <__udivmoddi4+0x2ca>
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	443c      	add	r4, r7
 8000ba2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ba6:	eba4 040c 	sub.w	r4, r4, ip
 8000baa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bae:	4564      	cmp	r4, ip
 8000bb0:	4673      	mov	r3, lr
 8000bb2:	46e1      	mov	r9, ip
 8000bb4:	d362      	bcc.n	8000c7c <__udivmoddi4+0x2a8>
 8000bb6:	d05f      	beq.n	8000c78 <__udivmoddi4+0x2a4>
 8000bb8:	b15d      	cbz	r5, 8000bd2 <__udivmoddi4+0x1fe>
 8000bba:	ebb8 0203 	subs.w	r2, r8, r3
 8000bbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000bc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bca:	431e      	orrs	r6, r3
 8000bcc:	40cc      	lsrs	r4, r1
 8000bce:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	e74f      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000bd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bda:	0c01      	lsrs	r1, r0, #16
 8000bdc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000be0:	b280      	uxth	r0, r0
 8000be2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000be6:	463b      	mov	r3, r7
 8000be8:	4638      	mov	r0, r7
 8000bea:	463c      	mov	r4, r7
 8000bec:	46b8      	mov	r8, r7
 8000bee:	46be      	mov	lr, r7
 8000bf0:	2620      	movs	r6, #32
 8000bf2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bf6:	eba2 0208 	sub.w	r2, r2, r8
 8000bfa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bfe:	e766      	b.n	8000ace <__udivmoddi4+0xfa>
 8000c00:	4601      	mov	r1, r0
 8000c02:	e718      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c04:	4610      	mov	r0, r2
 8000c06:	e72c      	b.n	8000a62 <__udivmoddi4+0x8e>
 8000c08:	f1c6 0220 	rsb	r2, r6, #32
 8000c0c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	40b1      	lsls	r1, r6
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2e:	fb08 f904 	mul.w	r9, r8, r4
 8000c32:	40b0      	lsls	r0, r6
 8000c34:	4589      	cmp	r9, r1
 8000c36:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c3a:	b280      	uxth	r0, r0
 8000c3c:	d93e      	bls.n	8000cbc <__udivmoddi4+0x2e8>
 8000c3e:	1879      	adds	r1, r7, r1
 8000c40:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c44:	d201      	bcs.n	8000c4a <__udivmoddi4+0x276>
 8000c46:	4589      	cmp	r9, r1
 8000c48:	d81f      	bhi.n	8000c8a <__udivmoddi4+0x2b6>
 8000c4a:	eba1 0109 	sub.w	r1, r1, r9
 8000c4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c52:	fb09 f804 	mul.w	r8, r9, r4
 8000c56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c5a:	b292      	uxth	r2, r2
 8000c5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d229      	bcs.n	8000cb8 <__udivmoddi4+0x2e4>
 8000c64:	18ba      	adds	r2, r7, r2
 8000c66:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c6a:	d2c4      	bcs.n	8000bf6 <__udivmoddi4+0x222>
 8000c6c:	4542      	cmp	r2, r8
 8000c6e:	d2c2      	bcs.n	8000bf6 <__udivmoddi4+0x222>
 8000c70:	f1a9 0102 	sub.w	r1, r9, #2
 8000c74:	443a      	add	r2, r7
 8000c76:	e7be      	b.n	8000bf6 <__udivmoddi4+0x222>
 8000c78:	45f0      	cmp	r8, lr
 8000c7a:	d29d      	bcs.n	8000bb8 <__udivmoddi4+0x1e4>
 8000c7c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c80:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c84:	3801      	subs	r0, #1
 8000c86:	46e1      	mov	r9, ip
 8000c88:	e796      	b.n	8000bb8 <__udivmoddi4+0x1e4>
 8000c8a:	eba7 0909 	sub.w	r9, r7, r9
 8000c8e:	4449      	add	r1, r9
 8000c90:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c98:	fb09 f804 	mul.w	r8, r9, r4
 8000c9c:	e7db      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c9e:	4673      	mov	r3, lr
 8000ca0:	e77f      	b.n	8000ba2 <__udivmoddi4+0x1ce>
 8000ca2:	4650      	mov	r0, sl
 8000ca4:	e766      	b.n	8000b74 <__udivmoddi4+0x1a0>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e6fd      	b.n	8000aa6 <__udivmoddi4+0xd2>
 8000caa:	443b      	add	r3, r7
 8000cac:	3a02      	subs	r2, #2
 8000cae:	e733      	b.n	8000b18 <__udivmoddi4+0x144>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	443b      	add	r3, r7
 8000cb6:	e71c      	b.n	8000af2 <__udivmoddi4+0x11e>
 8000cb8:	4649      	mov	r1, r9
 8000cba:	e79c      	b.n	8000bf6 <__udivmoddi4+0x222>
 8000cbc:	eba1 0109 	sub.w	r1, r1, r9
 8000cc0:	46c4      	mov	ip, r8
 8000cc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc6:	fb09 f804 	mul.w	r8, r9, r4
 8000cca:	e7c4      	b.n	8000c56 <__udivmoddi4+0x282>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b598      	push	{r3, r4, r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd4:	f000 fe32 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd8:	f000 f9ca 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cdc:	f000 fb16 	bl	800130c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ce0:	f000 fa30 	bl	8001144 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ce4:	f000 fa5c 	bl	80011a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ce8:	f000 fa8a 	bl	8001200 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000cec:	f008 fc32 	bl	8009554 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000cf0:	f000 fabc 	bl	800126c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000cf4:	48b4      	ldr	r0, [pc, #720]	@ (8000fc8 <main+0x2f8>)
 8000cf6:	f004 ff4d 	bl	8005b94 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);  // pull the TRIG pin for sensor 1 low
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d00:	48b2      	ldr	r0, [pc, #712]	@ (8000fcc <main+0x2fc>)
 8000d02:	f001 f977 	bl	8001ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET);  // pull the TRIG pin for sensor 2 low
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d0c:	48af      	ldr	r0, [pc, #700]	@ (8000fcc <main+0x2fc>)
 8000d0e:	f001 f971 	bl	8001ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_RESET);  // pull the TRIG pin for sensor 3 low
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d18:	48ac      	ldr	r0, [pc, #688]	@ (8000fcc <main+0x2fc>)
 8000d1a:	f001 f96b 	bl	8001ff4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET);  // pull the TRIG_1 pin HIGH
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d24:	48a9      	ldr	r0, [pc, #676]	@ (8000fcc <main+0x2fc>)
 8000d26:	f001 f965 	bl	8001ff4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d2a:	4ba7      	ldr	r3, [pc, #668]	@ (8000fc8 <main+0x2f8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 40);  // wait for 40 us
 8000d32:	bf00      	nop
 8000d34:	4ba4      	ldr	r3, [pc, #656]	@ (8000fc8 <main+0x2f8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3a:	2b27      	cmp	r3, #39	@ 0x27
 8000d3c:	d9fa      	bls.n	8000d34 <main+0x64>
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_RESET);  // pull the TRIG_1 pin low
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d44:	48a1      	ldr	r0, [pc, #644]	@ (8000fcc <main+0x2fc>)
 8000d46:	f001 f955 	bl	8001ff4 <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000d4a:	f000 fe5d 	bl	8001a08 <HAL_GetTick>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a9f      	ldr	r2, [pc, #636]	@ (8000fd0 <main+0x300>)
 8000d52:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT_1, ECHO_PIN_1)) && pMillis + 100 >  HAL_GetTick());
 8000d54:	bf00      	nop
 8000d56:	2180      	movs	r1, #128	@ 0x80
 8000d58:	489c      	ldr	r0, [pc, #624]	@ (8000fcc <main+0x2fc>)
 8000d5a:	f001 f933 	bl	8001fc4 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d108      	bne.n	8000d76 <main+0xa6>
 8000d64:	4b9a      	ldr	r3, [pc, #616]	@ (8000fd0 <main+0x300>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8000d6c:	f000 fe4c 	bl	8001a08 <HAL_GetTick>
 8000d70:	4603      	mov	r3, r0
 8000d72:	429c      	cmp	r4, r3
 8000d74:	d8ef      	bhi.n	8000d56 <main+0x86>
	Value1_Sensor1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000d76:	4b94      	ldr	r3, [pc, #592]	@ (8000fc8 <main+0x2f8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7c:	4a95      	ldr	r2, [pc, #596]	@ (8000fd4 <main+0x304>)
 8000d7e:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000d80:	f000 fe42 	bl	8001a08 <HAL_GetTick>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a92      	ldr	r2, [pc, #584]	@ (8000fd0 <main+0x300>)
 8000d88:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT_1, ECHO_PIN_1)) && pMillis + 500 > HAL_GetTick());
 8000d8a:	bf00      	nop
 8000d8c:	2180      	movs	r1, #128	@ 0x80
 8000d8e:	488f      	ldr	r0, [pc, #572]	@ (8000fcc <main+0x2fc>)
 8000d90:	f001 f918 	bl	8001fc4 <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d008      	beq.n	8000dac <main+0xdc>
 8000d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8000fd0 <main+0x300>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f503 74fa 	add.w	r4, r3, #500	@ 0x1f4
 8000da2:	f000 fe31 	bl	8001a08 <HAL_GetTick>
 8000da6:	4603      	mov	r3, r0
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d8ef      	bhi.n	8000d8c <main+0xbc>
	Value2_Sensor1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000dac:	4b86      	ldr	r3, [pc, #536]	@ (8000fc8 <main+0x2f8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db2:	4a89      	ldr	r2, [pc, #548]	@ (8000fd8 <main+0x308>)
 8000db4:	6013      	str	r3, [r2, #0]
	Distance_Sensor1 = (Value2_Sensor1 - Value1_Sensor1) * 0.034/2;
 8000db6:	4b88      	ldr	r3, [pc, #544]	@ (8000fd8 <main+0x308>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b86      	ldr	r3, [pc, #536]	@ (8000fd4 <main+0x304>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fb43 	bl	800044c <__aeabi_ui2d>
 8000dc6:	a37e      	add	r3, pc, #504	@ (adr r3, 8000fc0 <main+0x2f0>)
 8000dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dcc:	f7ff fbb8 	bl	8000540 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000de0:	f7ff fcd8 	bl	8000794 <__aeabi_ddiv>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f7ff fdba 	bl	8000964 <__aeabi_d2uiz>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	4b79      	ldr	r3, [pc, #484]	@ (8000fdc <main+0x30c>)
 8000df6:	801a      	strh	r2, [r3, #0]


	HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_SET);  // pull the TRIG_1 pin HIGH
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dfe:	4873      	ldr	r0, [pc, #460]	@ (8000fcc <main+0x2fc>)
 8000e00:	f001 f8f8 	bl	8001ff4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e04:	4b70      	ldr	r3, [pc, #448]	@ (8000fc8 <main+0x2f8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 40);  // wait for 40 us
 8000e0c:	bf00      	nop
 8000e0e:	4b6e      	ldr	r3, [pc, #440]	@ (8000fc8 <main+0x2f8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e14:	2b27      	cmp	r3, #39	@ 0x27
 8000e16:	d9fa      	bls.n	8000e0e <main+0x13e>
	HAL_GPIO_WritePin(TRIG_PORT_2, TRIG_PIN_2, GPIO_PIN_RESET);  // pull the TRIG_1 pin low
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e1e:	486b      	ldr	r0, [pc, #428]	@ (8000fcc <main+0x2fc>)
 8000e20:	f001 f8e8 	bl	8001ff4 <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000e24:	f000 fdf0 	bl	8001a08 <HAL_GetTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a69      	ldr	r2, [pc, #420]	@ (8000fd0 <main+0x300>)
 8000e2c:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT_2, ECHO_PIN_2)) && pMillis + 100 >  HAL_GetTick());
 8000e2e:	bf00      	nop
 8000e30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e34:	4865      	ldr	r0, [pc, #404]	@ (8000fcc <main+0x2fc>)
 8000e36:	f001 f8c5 	bl	8001fc4 <HAL_GPIO_ReadPin>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d108      	bne.n	8000e52 <main+0x182>
 8000e40:	4b63      	ldr	r3, [pc, #396]	@ (8000fd0 <main+0x300>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8000e48:	f000 fdde 	bl	8001a08 <HAL_GetTick>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	429c      	cmp	r4, r3
 8000e50:	d8ee      	bhi.n	8000e30 <main+0x160>
	Value1_Sensor2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e52:	4b5d      	ldr	r3, [pc, #372]	@ (8000fc8 <main+0x2f8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e58:	4a61      	ldr	r2, [pc, #388]	@ (8000fe0 <main+0x310>)
 8000e5a:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000e5c:	f000 fdd4 	bl	8001a08 <HAL_GetTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4a5b      	ldr	r2, [pc, #364]	@ (8000fd0 <main+0x300>)
 8000e64:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT_2, ECHO_PIN_2)) && pMillis + 500 > HAL_GetTick());
 8000e66:	bf00      	nop
 8000e68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6c:	4857      	ldr	r0, [pc, #348]	@ (8000fcc <main+0x2fc>)
 8000e6e:	f001 f8a9 	bl	8001fc4 <HAL_GPIO_ReadPin>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d008      	beq.n	8000e8a <main+0x1ba>
 8000e78:	4b55      	ldr	r3, [pc, #340]	@ (8000fd0 <main+0x300>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f503 74fa 	add.w	r4, r3, #500	@ 0x1f4
 8000e80:	f000 fdc2 	bl	8001a08 <HAL_GetTick>
 8000e84:	4603      	mov	r3, r0
 8000e86:	429c      	cmp	r4, r3
 8000e88:	d8ee      	bhi.n	8000e68 <main+0x198>
	Value2_Sensor2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e8a:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc8 <main+0x2f8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e90:	4a54      	ldr	r2, [pc, #336]	@ (8000fe4 <main+0x314>)
 8000e92:	6013      	str	r3, [r2, #0]
	Distance_Sensor2 = (Value2_Sensor2 - Value1_Sensor2) * 0.034/2;
 8000e94:	4b53      	ldr	r3, [pc, #332]	@ (8000fe4 <main+0x314>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b51      	ldr	r3, [pc, #324]	@ (8000fe0 <main+0x310>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fad4 	bl	800044c <__aeabi_ui2d>
 8000ea4:	a346      	add	r3, pc, #280	@ (adr r3, 8000fc0 <main+0x2f0>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff fb49 	bl	8000540 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ebe:	f7ff fc69 	bl	8000794 <__aeabi_ddiv>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f7ff fd4b 	bl	8000964 <__aeabi_d2uiz>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b45      	ldr	r3, [pc, #276]	@ (8000fe8 <main+0x318>)
 8000ed4:	801a      	strh	r2, [r3, #0]


	HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_SET);  // pull the TRIG_1 pin HIGH
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000edc:	483b      	ldr	r0, [pc, #236]	@ (8000fcc <main+0x2fc>)
 8000ede:	f001 f889 	bl	8001ff4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ee2:	4b39      	ldr	r3, [pc, #228]	@ (8000fc8 <main+0x2f8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 40);  // wait for 40 us
 8000eea:	bf00      	nop
 8000eec:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <main+0x2f8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	2b27      	cmp	r3, #39	@ 0x27
 8000ef4:	d9fa      	bls.n	8000eec <main+0x21c>
	HAL_GPIO_WritePin(TRIG_PORT_3, TRIG_PIN_3, GPIO_PIN_RESET);  // pull the TRIG_1 pin low
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000efc:	4833      	ldr	r0, [pc, #204]	@ (8000fcc <main+0x2fc>)
 8000efe:	f001 f879 	bl	8001ff4 <HAL_GPIO_WritePin>
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000f02:	f000 fd81 	bl	8001a08 <HAL_GetTick>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a31      	ldr	r2, [pc, #196]	@ (8000fd0 <main+0x300>)
 8000f0a:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT_3, ECHO_PIN_3)) && pMillis + 100 >  HAL_GetTick());
 8000f0c:	bf00      	nop
 8000f0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f12:	482e      	ldr	r0, [pc, #184]	@ (8000fcc <main+0x2fc>)
 8000f14:	f001 f856 	bl	8001fc4 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d108      	bne.n	8000f30 <main+0x260>
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd0 <main+0x300>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8000f26:	f000 fd6f 	bl	8001a08 <HAL_GetTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	d8ee      	bhi.n	8000f0e <main+0x23e>
	Value1_Sensor3 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f30:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <main+0x2f8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f36:	4a2d      	ldr	r2, [pc, #180]	@ (8000fec <main+0x31c>)
 8000f38:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000f3a:	f000 fd65 	bl	8001a08 <HAL_GetTick>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a23      	ldr	r2, [pc, #140]	@ (8000fd0 <main+0x300>)
 8000f42:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT_3, ECHO_PIN_3)) && pMillis + 500 > HAL_GetTick());
 8000f44:	bf00      	nop
 8000f46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f4a:	4820      	ldr	r0, [pc, #128]	@ (8000fcc <main+0x2fc>)
 8000f4c:	f001 f83a 	bl	8001fc4 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d008      	beq.n	8000f68 <main+0x298>
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <main+0x300>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f503 74fa 	add.w	r4, r3, #500	@ 0x1f4
 8000f5e:	f000 fd53 	bl	8001a08 <HAL_GetTick>
 8000f62:	4603      	mov	r3, r0
 8000f64:	429c      	cmp	r4, r3
 8000f66:	d8ee      	bhi.n	8000f46 <main+0x276>
	Value2_Sensor3 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f68:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <main+0x2f8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6e:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <main+0x320>)
 8000f70:	6013      	str	r3, [r2, #0]
	Distance_Sensor3 = (Value2_Sensor3 - Value1_Sensor3) * 0.034/2;
 8000f72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <main+0x320>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <main+0x31c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa65 	bl	800044c <__aeabi_ui2d>
 8000f82:	a30f      	add	r3, pc, #60	@ (adr r3, 8000fc0 <main+0x2f0>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff fada 	bl	8000540 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f9c:	f7ff fbfa 	bl	8000794 <__aeabi_ddiv>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f7ff fcdc 	bl	8000964 <__aeabi_d2uiz>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <main+0x324>)
 8000fb2:	801a      	strh	r2, [r3, #0]


	if(Distance_Sensor1 <= 5){
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <main+0x30c>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	d824      	bhi.n	8001006 <main+0x336>
 8000fbc:	e01c      	b.n	8000ff8 <main+0x328>
 8000fbe:	bf00      	nop
 8000fc0:	b020c49c 	.word	0xb020c49c
 8000fc4:	3fa16872 	.word	0x3fa16872
 8000fc8:	2000018c 	.word	0x2000018c
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	200001d4 	.word	0x200001d4
 8000fd4:	200001d8 	.word	0x200001d8
 8000fd8:	200001dc 	.word	0x200001dc
 8000fdc:	200001e0 	.word	0x200001e0
 8000fe0:	200001e4 	.word	0x200001e4
 8000fe4:	200001e8 	.word	0x200001e8
 8000fe8:	200001ec 	.word	0x200001ec
 8000fec:	200001f0 	.word	0x200001f0
 8000ff0:	200001f4 	.word	0x200001f4
 8000ff4:	200001f8 	.word	0x200001f8
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ffe:	4819      	ldr	r0, [pc, #100]	@ (8001064 <main+0x394>)
 8001000:	f000 fff8 	bl	8001ff4 <HAL_GPIO_WritePin>
 8001004:	e005      	b.n	8001012 <main+0x342>
	}
	else{
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100c:	4815      	ldr	r0, [pc, #84]	@ (8001064 <main+0x394>)
 800100e:	f000 fff1 	bl	8001ff4 <HAL_GPIO_WritePin>
	}
	if(Distance_Sensor2 <= 5){
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <main+0x398>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	2b05      	cmp	r3, #5
 8001018:	d806      	bhi.n	8001028 <main+0x358>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001020:	4810      	ldr	r0, [pc, #64]	@ (8001064 <main+0x394>)
 8001022:	f000 ffe7 	bl	8001ff4 <HAL_GPIO_WritePin>
 8001026:	e005      	b.n	8001034 <main+0x364>
	}
	else{
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800102e:	480d      	ldr	r0, [pc, #52]	@ (8001064 <main+0x394>)
 8001030:	f000 ffe0 	bl	8001ff4 <HAL_GPIO_WritePin>
	}
	if(Distance_Sensor3 <= 5){
 8001034:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <main+0x39c>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b05      	cmp	r3, #5
 800103a:	d806      	bhi.n	800104a <main+0x37a>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001042:	4808      	ldr	r0, [pc, #32]	@ (8001064 <main+0x394>)
 8001044:	f000 ffd6 	bl	8001ff4 <HAL_GPIO_WritePin>
 8001048:	e005      	b.n	8001056 <main+0x386>
	}
	else{
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <main+0x394>)
 8001052:	f000 ffcf 	bl	8001ff4 <HAL_GPIO_WritePin>
	}

	HAL_Delay(500);
 8001056:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800105a:	f000 fce1 	bl	8001a20 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800105e:	f008 fa9f 	bl	80095a0 <MX_USB_HOST_Process>
	HAL_GPIO_WritePin(TRIG_PORT_1, TRIG_PIN_1, GPIO_PIN_SET);  // pull the TRIG_1 pin HIGH
 8001062:	e65c      	b.n	8000d1e <main+0x4e>
 8001064:	40020c00 	.word	0x40020c00
 8001068:	200001ec 	.word	0x200001ec
 800106c:	200001f8 	.word	0x200001f8

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	@ 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	@ 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f008 fe30 	bl	8009ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	4a27      	ldr	r2, [pc, #156]	@ (800113c <SystemClock_Config+0xcc>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a21      	ldr	r2, [pc, #132]	@ (8001140 <SystemClock_Config+0xd0>)
 80010ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <SystemClock_Config+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e0:	2308      	movs	r3, #8
 80010e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ee:	2307      	movs	r3, #7
 80010f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 feae 	bl	8004e58 <HAL_RCC_OscConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001102:	f000 fa0f 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001106:	230f      	movs	r3, #15
 8001108:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	2302      	movs	r3, #2
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001112:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2105      	movs	r1, #5
 8001124:	4618      	mov	r0, r3
 8001126:	f004 f90f 	bl	8005348 <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001130:	f000 f9f8 	bl	8001524 <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3750      	adds	r7, #80	@ 0x50
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <MX_I2C1_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <MX_I2C1_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <MX_I2C1_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001182:	f003 f885 	bl	8004290 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f9ca 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000098 	.word	0x20000098
 8001198:	40005400 	.word	0x40005400
 800119c:	000186a0 	.word	0x000186a0

080011a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <MX_I2S3_Init+0x54>)
 80011a6:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <MX_I2S3_Init+0x58>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011aa:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <MX_I2S3_Init+0x54>)
 80011ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <MX_I2S3_Init+0x54>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_I2S3_Init+0x54>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <MX_I2S3_Init+0x54>)
 80011c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <MX_I2S3_Init+0x54>)
 80011c8:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <MX_I2S3_Init+0x5c>)
 80011ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_I2S3_Init+0x54>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <MX_I2S3_Init+0x54>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_I2S3_Init+0x54>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <MX_I2S3_Init+0x54>)
 80011e0:	f003 f99a 	bl	8004518 <HAL_I2S_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80011ea:	f000 f99b 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200000ec 	.word	0x200000ec
 80011f8:	40003c00 	.word	0x40003c00
 80011fc:	00017700 	.word	0x00017700

08001200 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001206:	4a18      	ldr	r2, [pc, #96]	@ (8001268 <MX_SPI1_Init+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <MX_SPI1_Init+0x64>)
 800120c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001210:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_SPI1_Init+0x64>)
 800122c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001230:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_SPI1_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_SPI1_Init+0x64>)
 800124c:	220a      	movs	r2, #10
 800124e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001252:	f004 fbc7 	bl	80059e4 <HAL_SPI_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800125c:	f000 f962 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000134 	.word	0x20000134
 8001268:	40013000 	.word	0x40013000

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	463b      	mov	r3, r7
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001288:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <MX_TIM1_Init+0x98>)
 800128a:	4a1f      	ldr	r2, [pc, #124]	@ (8001308 <MX_TIM1_Init+0x9c>)
 800128c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <MX_TIM1_Init+0x98>)
 8001290:	22a7      	movs	r2, #167	@ 0xa7
 8001292:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <MX_TIM1_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <MX_TIM1_Init+0x98>)
 800129c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <MX_TIM1_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a8:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_TIM1_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <MX_TIM1_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012b4:	4813      	ldr	r0, [pc, #76]	@ (8001304 <MX_TIM1_Init+0x98>)
 80012b6:	f004 fc1e 	bl	8005af6 <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012c0:	f000 f930 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <MX_TIM1_Init+0x98>)
 80012d2:	f004 fcc7 	bl	8005c64 <HAL_TIM_ConfigClockSource>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012dc:	f000 f922 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_TIM1_Init+0x98>)
 80012ee:	f004 fec7 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012f8:	f000 f914 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000018c 	.word	0x2000018c
 8001308:	40010000 	.word	0x40010000

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	@ 0x30
 8001310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	4b79      	ldr	r3, [pc, #484]	@ (800150c <MX_GPIO_Init+0x200>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a78      	ldr	r2, [pc, #480]	@ (800150c <MX_GPIO_Init+0x200>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b76      	ldr	r3, [pc, #472]	@ (800150c <MX_GPIO_Init+0x200>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	4b72      	ldr	r3, [pc, #456]	@ (800150c <MX_GPIO_Init+0x200>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a71      	ldr	r2, [pc, #452]	@ (800150c <MX_GPIO_Init+0x200>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b6f      	ldr	r3, [pc, #444]	@ (800150c <MX_GPIO_Init+0x200>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b6b      	ldr	r3, [pc, #428]	@ (800150c <MX_GPIO_Init+0x200>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a6a      	ldr	r2, [pc, #424]	@ (800150c <MX_GPIO_Init+0x200>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b68      	ldr	r3, [pc, #416]	@ (800150c <MX_GPIO_Init+0x200>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b64      	ldr	r3, [pc, #400]	@ (800150c <MX_GPIO_Init+0x200>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a63      	ldr	r2, [pc, #396]	@ (800150c <MX_GPIO_Init+0x200>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b61      	ldr	r3, [pc, #388]	@ (800150c <MX_GPIO_Init+0x200>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b5d      	ldr	r3, [pc, #372]	@ (800150c <MX_GPIO_Init+0x200>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a5c      	ldr	r2, [pc, #368]	@ (800150c <MX_GPIO_Init+0x200>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b5a      	ldr	r3, [pc, #360]	@ (800150c <MX_GPIO_Init+0x200>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b56      	ldr	r3, [pc, #344]	@ (800150c <MX_GPIO_Init+0x200>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a55      	ldr	r2, [pc, #340]	@ (800150c <MX_GPIO_Init+0x200>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b53      	ldr	r3, [pc, #332]	@ (800150c <MX_GPIO_Init+0x200>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f241 5108 	movw	r1, #5384	@ 0x1508
 80013d0:	484f      	ldr	r0, [pc, #316]	@ (8001510 <MX_GPIO_Init+0x204>)
 80013d2:	f000 fe0f 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2101      	movs	r1, #1
 80013da:	484e      	ldr	r0, [pc, #312]	@ (8001514 <MX_GPIO_Init+0x208>)
 80013dc:	f000 fe0a 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013e0:	2200      	movs	r2, #0
 80013e2:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80013e6:	484c      	ldr	r0, [pc, #304]	@ (8001518 <MX_GPIO_Init+0x20c>)
 80013e8:	f000 fe04 	bl	8001ff4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE8 PE10 PE12 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 80013ec:	f241 5308 	movw	r3, #5384	@ 0x1508
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	4842      	ldr	r0, [pc, #264]	@ (8001510 <MX_GPIO_Init+0x204>)
 8001406:	f000 fc41 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800140a:	2301      	movs	r3, #1
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	483c      	ldr	r0, [pc, #240]	@ (8001514 <MX_GPIO_Init+0x208>)
 8001422:	f000 fc33 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001426:	2308      	movs	r3, #8
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001436:	2305      	movs	r3, #5
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4834      	ldr	r0, [pc, #208]	@ (8001514 <MX_GPIO_Init+0x208>)
 8001442:	f000 fc23 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001446:	2301      	movs	r3, #1
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800144a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4830      	ldr	r0, [pc, #192]	@ (800151c <MX_GPIO_Init+0x210>)
 800145c:	f000 fc16 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001460:	2304      	movs	r3, #4
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	482b      	ldr	r0, [pc, #172]	@ (8001520 <MX_GPIO_Init+0x214>)
 8001474:	f000 fc0a 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 8001478:	f44f 6328 	mov.w	r3, #2688	@ 0xa80
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	4820      	ldr	r0, [pc, #128]	@ (8001510 <MX_GPIO_Init+0x204>)
 800148e:	f000 fbfd 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014a4:	2305      	movs	r3, #5
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	481c      	ldr	r0, [pc, #112]	@ (8001520 <MX_GPIO_Init+0x214>)
 80014b0:	f000 fbec 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014b4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80014b8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	4812      	ldr	r0, [pc, #72]	@ (8001518 <MX_GPIO_Init+0x20c>)
 80014ce:	f000 fbdd 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014d2:	2320      	movs	r3, #32
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <MX_GPIO_Init+0x20c>)
 80014e6:	f000 fbd1 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014ee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4804      	ldr	r0, [pc, #16]	@ (8001510 <MX_GPIO_Init+0x204>)
 8001500:	f000 fbc4 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001504:	bf00      	nop
 8001506:	3730      	adds	r7, #48	@ 0x30
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40023800 	.word	0x40023800
 8001510:	40021000 	.word	0x40021000
 8001514:	40020800 	.word	0x40020800
 8001518:	40020c00 	.word	0x40020c00
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <Error_Handler+0x8>

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	4a0f      	ldr	r2, [pc, #60]	@ (800157c <HAL_MspInit+0x4c>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001544:	6453      	str	r3, [r2, #68]	@ 0x44
 8001546:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a08      	ldr	r2, [pc, #32]	@ (800157c <HAL_MspInit+0x4c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800156e:	2007      	movs	r0, #7
 8001570:	f000 fb4a 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	@ 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a19      	ldr	r2, [pc, #100]	@ (8001604 <HAL_I2C_MspInit+0x84>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12c      	bne.n	80015fc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <HAL_I2C_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a17      	ldr	r2, [pc, #92]	@ (8001608 <HAL_I2C_MspInit+0x88>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_I2C_MspInit+0x88>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015be:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c4:	2312      	movs	r3, #18
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d0:	2304      	movs	r3, #4
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	480c      	ldr	r0, [pc, #48]	@ (800160c <HAL_I2C_MspInit+0x8c>)
 80015dc:	f000 fb56 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <HAL_I2C_MspInit+0x88>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	4a07      	ldr	r2, [pc, #28]	@ (8001608 <HAL_I2C_MspInit+0x88>)
 80015ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f0:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <HAL_I2C_MspInit+0x88>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	@ 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40005400 	.word	0x40005400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400

08001610 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	@ 0x38
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a31      	ldr	r2, [pc, #196]	@ (8001700 <HAL_I2S_MspInit+0xf0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d15a      	bne.n	80016f6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001640:	2301      	movs	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001644:	23c0      	movs	r3, #192	@ 0xc0
 8001646:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4618      	mov	r0, r3
 8001652:	f004 f885 	bl	8005760 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800165c:	f7ff ff62 	bl	8001524 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HAL_I2S_MspInit+0xf4>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <HAL_I2S_MspInit+0xf4>)
 800166a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800166e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <HAL_I2S_MspInit+0xf4>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_I2S_MspInit+0xf4>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001684:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <HAL_I2S_MspInit+0xf4>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6313      	str	r3, [r2, #48]	@ 0x30
 800168c:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <HAL_I2S_MspInit+0xf4>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_I2S_MspInit+0xf4>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	4a18      	ldr	r2, [pc, #96]	@ (8001704 <HAL_I2S_MspInit+0xf4>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a8:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <HAL_I2S_MspInit+0xf4>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80016b4:	2310      	movs	r3, #16
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016c4:	2306      	movs	r3, #6
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	480e      	ldr	r0, [pc, #56]	@ (8001708 <HAL_I2S_MspInit+0xf8>)
 80016d0:	f000 fadc 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80016d4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016e6:	2306      	movs	r3, #6
 80016e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4806      	ldr	r0, [pc, #24]	@ (800170c <HAL_I2S_MspInit+0xfc>)
 80016f2:	f000 facb 	bl	8001c8c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80016f6:	bf00      	nop
 80016f8:	3738      	adds	r7, #56	@ 0x38
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40003c00 	.word	0x40003c00
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020800 	.word	0x40020800

08001710 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	@ (8001794 <HAL_SPI_MspInit+0x84>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12b      	bne.n	800178a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <HAL_SPI_MspInit+0x88>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <HAL_SPI_MspInit+0x88>)
 800173c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001740:	6453      	str	r3, [r2, #68]	@ 0x44
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_SPI_MspInit+0x88>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <HAL_SPI_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a10      	ldr	r2, [pc, #64]	@ (8001798 <HAL_SPI_MspInit+0x88>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_SPI_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800176a:	23e0      	movs	r3, #224	@ 0xe0
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800177a:	2305      	movs	r3, #5
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <HAL_SPI_MspInit+0x8c>)
 8001786:	f000 fa81 	bl	8001c8c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	@ 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40013000 	.word	0x40013000
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000

080017a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	@ (80017dc <HAL_TIM_Base_MspInit+0x3c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10d      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <HAL_TIM_Base_MspInit+0x40>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a09      	ldr	r2, [pc, #36]	@ (80017e0 <HAL_TIM_Base_MspInit+0x40>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <HAL_TIM_Base_MspInit+0x40>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40023800 	.word	0x40023800

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <NMI_Handler+0x4>

080017ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <MemManage_Handler+0x4>

080017fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <UsageFault_Handler+0x4>

0800180c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183a:	f000 f8d1 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <OTG_FS_IRQHandler+0x10>)
 800184a:	f000 fecd 	bl	80025e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200005e0 	.word	0x200005e0

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	@ (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f008 fa44 	bl	8009d14 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20020000 	.word	0x20020000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	200001fc 	.word	0x200001fc
 80018c0:	20000b08 	.word	0x20000b08

080018c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	@ (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001920 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018ec:	f7ff ffea 	bl	80018c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	@ (8001928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	@ (8001934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001916:	f008 fa03 	bl	8009d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff f9d9 	bl	8000cd0 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800192c:	08009e44 	.word	0x08009e44
  ldr r2, =_sbss
 8001930:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001934:	20000b08 	.word	0x20000b08

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>
	...

0800193c <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	@ (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f94f 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8001970:	f7ff fdde 	bl	8001530 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f967 	bl	8001c72 <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
		return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 f92f 	bl	8001c1e <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	@ (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
		return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000200 	.word	0x20000200

08001a08 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
	return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000200 	.word	0x20000200

08001a20 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
	}
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	@ (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	@ (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff29 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff3e 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff8e 	bl	8001b5c <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5d 	bl	8001b08 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff31 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa2 	bl	8001bc4 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e16b      	b.n	8001f80 <HAL_GPIO_Init+0x2f4>
		/* Get the IO position */
		ioposition = 0x01U << position;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 815a 	bne.w	8001f7a <HAL_GPIO_Init+0x2ee>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d005      	beq.n	8001cde <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d130      	bne.n	8001d40 <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d017      	beq.n	8001d7c <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d123      	bne.n	8001dd0 <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0203 	and.w	r2, r3, #3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80b4 	beq.w	8001f7a <HAL_GPIO_Init+0x2ee>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b60      	ldr	r3, [pc, #384]	@ (8001f98 <HAL_GPIO_Init+0x30c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001f98 <HAL_GPIO_Init+0x30c>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e22:	4b5d      	ldr	r3, [pc, #372]	@ (8001f98 <HAL_GPIO_Init+0x30c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 8001e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001f9c <HAL_GPIO_Init+0x310>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a52      	ldr	r2, [pc, #328]	@ (8001fa0 <HAL_GPIO_Init+0x314>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d02b      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a51      	ldr	r2, [pc, #324]	@ (8001fa4 <HAL_GPIO_Init+0x318>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d025      	beq.n	8001eae <HAL_GPIO_Init+0x222>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a50      	ldr	r2, [pc, #320]	@ (8001fa8 <HAL_GPIO_Init+0x31c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <HAL_GPIO_Init+0x21e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001fac <HAL_GPIO_Init+0x320>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4e      	ldr	r2, [pc, #312]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x216>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb4 <HAL_GPIO_Init+0x328>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_Init+0x212>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb8 <HAL_GPIO_Init+0x32c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x20e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001fbc <HAL_GPIO_Init+0x330>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_Init+0x20a>
 8001e92:	2307      	movs	r3, #7
 8001e94:	e00e      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001e96:	2308      	movs	r3, #8
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001eb2:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	@ (8001f9c <HAL_GPIO_Init+0x310>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x26a>
					temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 8001ef6:	4a32      	ldr	r2, [pc, #200]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8001efc:	4b30      	ldr	r3, [pc, #192]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x294>
					temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 8001f20:	4a27      	ldr	r2, [pc, #156]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 8001f26:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2be>
					temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2e8>
					temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 8001f74:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae90 	bls.w	8001ca8 <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3724      	adds	r7, #36	@ 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021400 	.word	0x40021400
 8001fb8:	40021800 	.word	0x40021800
 8001fbc:	40021c00 	.word	0x40021c00
 8001fc0:	40013c00 	.word	0x40013c00

08001fc4 <HAL_GPIO_ReadPin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e001      	b.n	8001fe6 <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
 8002000:	4613      	mov	r3, r2
 8002002:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8002004:	787b      	ldrb	r3, [r7, #1]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 8002010:	e003      	b.n	800201a <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	041a      	lsls	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	619a      	str	r2, [r3, #24]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_HCD_Init>:
/**
 * @brief  Initialize the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd) {
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af02      	add	r7, sp, #8
 800202c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
	const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

	/* Check the HCD handle allocation */
	if (hhcd == NULL) {
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_HCD_Init+0x12>
		return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e059      	b.n	80020ec <HAL_HCD_Init+0xc6>

	/* Check the parameters */
	assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
	USBx = hhcd->Instance;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

	if (hhcd->State == HAL_HCD_STATE_RESET) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_HCD_Init+0x32>
		/* Allocate lock resource and initialize it */
		hhcd->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_HCD_MspInit(hhcd);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f007 fadc 	bl	8009610 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
	}

	hhcd->State = HAL_HCD_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2203      	movs	r2, #3
 800205c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
	/* Disable DMA mode for FS instance */
	if (USBx == USB_OTG_FS) {
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002066:	d102      	bne.n	800206e <HAL_HCD_Init+0x48>
		hhcd->Init.dma_enable = 0U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	719a      	strb	r2, [r3, #6]
	}
#endif /* defined (USB_OTG_FS) */

	/* Disable the Interrupts */
	__HAL_HCD_DISABLE(hhcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f004 f8f5 	bl	8006262 <USB_DisableGlobalInt>

	/* Init the Core (common init.) */
	if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK) {
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7c1a      	ldrb	r2, [r3, #16]
 8002080:	f88d 2000 	strb.w	r2, [sp]
 8002084:	3304      	adds	r3, #4
 8002086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002088:	f004 f876 	bl	8006178 <USB_CoreInit>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_HCD_Init+0x78>
		hhcd->State = HAL_HCD_STATE_ERROR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e026      	b.n	80020ec <HAL_HCD_Init+0xc6>
	}

	/* Force Host Mode */
	if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK) {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f004 f8ed 	bl	8006284 <USB_SetCurrentMode>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_HCD_Init+0x96>
		hhcd->State = HAL_HCD_STATE_ERROR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e017      	b.n	80020ec <HAL_HCD_Init+0xc6>
	}

	/* Init Host */
	if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK) {
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7c1a      	ldrb	r2, [r3, #16]
 80020c4:	f88d 2000 	strb.w	r2, [sp]
 80020c8:	3304      	adds	r3, #4
 80020ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020cc:	f004 fa90 	bl	80065f0 <USB_HostInit>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_HCD_Init+0xbc>
		hhcd->State = HAL_HCD_STATE_ERROR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e004      	b.n	80020ec <HAL_HCD_Init+0xc6>
	}

	hhcd->State = HAL_HCD_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

	return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_HCD_HC_Init>:
 *          This parameter can be a value from 0 to32K
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
		uint8_t epnum, uint8_t dev_address, uint8_t speed, uint8_t ep_type,
		uint16_t mps) {
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b08b      	sub	sp, #44	@ 0x2c
 80020f8:	af04      	add	r7, sp, #16
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4603      	mov	r3, r0
 8002104:	70fb      	strb	r3, [r7, #3]
 8002106:	460b      	mov	r3, r1
 8002108:	70bb      	strb	r3, [r7, #2]
 800210a:	4613      	mov	r3, r2
 800210c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status;
	uint32_t HostCoreSpeed;
	uint32_t HCcharMps = mps;
 800210e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002110:	617b      	str	r3, [r7, #20]

	__HAL_LOCK(hhcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_HCD_HC_Init+0x2c>
 800211c:	2302      	movs	r3, #2
 800211e:	e09d      	b.n	800225c <HAL_HCD_HC_Init+0x168>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	hhcd->hc[ch_num].do_ping = 0U;
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3319      	adds	r3, #25
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].dev_addr = dev_address;
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3314      	adds	r3, #20
 800214c:	787a      	ldrb	r2, [r7, #1]
 800214e:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ch_num = ch_num;
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3315      	adds	r3, #21
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_type = ep_type;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3326      	adds	r3, #38	@ 0x26
 8002174:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002178:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	78bb      	ldrb	r3, [r7, #2]
 800217e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002182:	b2d8      	uxtb	r0, r3
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	3316      	adds	r3, #22
 8002192:	4602      	mov	r2, r0
 8002194:	701a      	strb	r2, [r3, #0]

	(void) HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	4619      	mov	r1, r3
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fbc8 	bl	8002930 <HAL_HCD_HC_ClearHubInfo>

	if ((epnum & 0x80U) == 0x80U) {
 80021a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da0a      	bge.n	80021be <HAL_HCD_HC_Init+0xca>
		hhcd->hc[ch_num].ep_is_in = 1U;
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	3317      	adds	r3, #23
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e009      	b.n	80021d2 <HAL_HCD_HC_Init+0xde>
	} else {
		hhcd->hc[ch_num].ep_is_in = 0U;
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	3317      	adds	r3, #23
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
	}

	HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fb6e 	bl	80068b8 <USB_GetHostSpeed>
 80021dc:	6138      	str	r0, [r7, #16]

	if (ep_type == EP_TYPE_ISOC) {
 80021de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d10b      	bne.n	80021fe <HAL_HCD_HC_Init+0x10a>
		/* FS device plugged to HS HUB */
		if ((speed == HCD_DEVICE_SPEED_FULL)
 80021e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d107      	bne.n	80021fe <HAL_HCD_HC_Init+0x10a>
				&& (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED)) {
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <HAL_HCD_HC_Init+0x10a>
			if (HCcharMps > ISO_SPLT_MPS) {
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2bbc      	cmp	r3, #188	@ 0xbc
 80021f8:	d901      	bls.n	80021fe <HAL_HCD_HC_Init+0x10a>
				/* ISO Max Packet Size for Split mode */
				HCcharMps = ISO_SPLT_MPS;
 80021fa:	23bc      	movs	r3, #188	@ 0xbc
 80021fc:	617b      	str	r3, [r7, #20]
			}
		}
	}

	hhcd->hc[ch_num].speed = speed;
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	3318      	adds	r3, #24
 800220e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002212:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].max_packet = (uint16_t) HCcharMps;
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	b298      	uxth	r0, r3
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	3328      	adds	r3, #40	@ 0x28
 8002228:	4602      	mov	r2, r0
 800222a:	801a      	strh	r2, [r3, #0]

	status = USB_HC_Init(hhcd->Instance, ch_num, epnum, dev_address, speed,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	b29b      	uxth	r3, r3
 8002234:	787c      	ldrb	r4, [r7, #1]
 8002236:	78ba      	ldrb	r2, [r7, #2]
 8002238:	78f9      	ldrb	r1, [r7, #3]
 800223a:	9302      	str	r3, [sp, #8]
 800223c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	4623      	mov	r3, r4
 800224a:	f004 fb5d 	bl	8006908 <USB_HC_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	73fb      	strb	r3, [r7, #15]
			ep_type, (uint16_t) HCcharMps);

	__HAL_UNLOCK(hhcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return status;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd90      	pop	{r4, r7, pc}

08002264 <HAL_HCD_HC_Halt>:
 * @param  hhcd HCD handle
 * @param  ch_num Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]

	__HAL_LOCK(hhcd);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_HCD_HC_Halt+0x1e>
 800227e:	2302      	movs	r3, #2
 8002280:	e00f      	b.n	80022a2 <HAL_HCD_HC_Halt+0x3e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	(void) USB_HC_Halt(hhcd->Instance, ch_num);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f004 feef 	bl	8007076 <USB_HC_Halt>
	__HAL_UNLOCK(hhcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return status;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_HCD_HC_SubmitRequest>:
 *           0 : do ping inactive / 1 : do ping active
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_SubmitRequest(HCD_HandleTypeDef *hhcd,
		uint8_t ch_num, uint8_t direction, uint8_t ep_type, uint8_t token,
		uint8_t *pbuff, uint16_t length, uint8_t do_ping) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	4608      	mov	r0, r1
 80022b6:	4611      	mov	r1, r2
 80022b8:	461a      	mov	r2, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	70fb      	strb	r3, [r7, #3]
 80022be:	460b      	mov	r3, r1
 80022c0:	70bb      	strb	r3, [r7, #2]
 80022c2:	4613      	mov	r3, r2
 80022c4:	707b      	strb	r3, [r7, #1]
	hhcd->hc[ch_num].ep_is_in = direction;
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3317      	adds	r3, #23
 80022d6:	78ba      	ldrb	r2, [r7, #2]
 80022d8:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_type = ep_type;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	3326      	adds	r3, #38	@ 0x26
 80022ea:	787a      	ldrb	r2, [r7, #1]
 80022ec:	701a      	strb	r2, [r3, #0]

	if (token == 0U) {
 80022ee:	7c3b      	ldrb	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d114      	bne.n	800231e <HAL_HCD_HC_SubmitRequest+0x72>
		hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	332a      	adds	r3, #42	@ 0x2a
 8002304:	2203      	movs	r2, #3
 8002306:	701a      	strb	r2, [r3, #0]
		hhcd->hc[ch_num].do_ping = do_ping;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	3319      	adds	r3, #25
 8002318:	7f3a      	ldrb	r2, [r7, #28]
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e009      	b.n	8002332 <HAL_HCD_HC_SubmitRequest+0x86>
	} else {
		hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	332a      	adds	r3, #42	@ 0x2a
 800232e:	2202      	movs	r2, #2
 8002330:	701a      	strb	r2, [r3, #0]
	}

	/* Manage Data Toggle */
	switch (ep_type) {
 8002332:	787b      	ldrb	r3, [r7, #1]
 8002334:	2b03      	cmp	r3, #3
 8002336:	f200 8102 	bhi.w	800253e <HAL_HCD_HC_SubmitRequest+0x292>
 800233a:	a201      	add	r2, pc, #4	@ (adr r2, 8002340 <HAL_HCD_HC_SubmitRequest+0x94>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002351 	.word	0x08002351
 8002344:	08002529 	.word	0x08002529
 8002348:	08002415 	.word	0x08002415
 800234c:	0800249f 	.word	0x0800249f
	case EP_TYPE_CTRL:
		if (token == 1U) /* send data */
 8002350:	7c3b      	ldrb	r3, [r7, #16]
 8002352:	2b01      	cmp	r3, #1
 8002354:	f040 80f5 	bne.w	8002542 <HAL_HCD_HC_SubmitRequest+0x296>
		{
			if (direction == 0U) {
 8002358:	78bb      	ldrb	r3, [r7, #2]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d12d      	bne.n	80023ba <HAL_HCD_HC_SubmitRequest+0x10e>
				if (length == 0U) {
 800235e:	8b3b      	ldrh	r3, [r7, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_HCD_HC_SubmitRequest+0xcc>
					/* For Status OUT stage, Length == 0U, Status Out PID = 1 */
					hhcd->hc[ch_num].toggle_out = 1U;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	333d      	adds	r3, #61	@ 0x3d
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
				}

				/* Set the Data Toggle bit as per the Flag */
				if (hhcd->hc[ch_num].toggle_out == 0U) {
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	333d      	adds	r3, #61	@ 0x3d
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <HAL_HCD_HC_SubmitRequest+0xf8>
					/* Put the PID 0 */
					hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	332a      	adds	r3, #42	@ 0x2a
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
						hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
					}
				}
			}
		}
		break;
 80023a2:	e0ce      	b.n	8002542 <HAL_HCD_HC_SubmitRequest+0x296>
					hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	332a      	adds	r3, #42	@ 0x2a
 80023b4:	2202      	movs	r2, #2
 80023b6:	701a      	strb	r2, [r3, #0]
		break;
 80023b8:	e0c3      	b.n	8002542 <HAL_HCD_HC_SubmitRequest+0x296>
				if (hhcd->hc[ch_num].do_ssplit == 1U) {
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	331a      	adds	r3, #26
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 80b8 	bne.w	8002542 <HAL_HCD_HC_SubmitRequest+0x296>
					if (hhcd->hc[ch_num].toggle_in == 0U) {
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	333c      	adds	r3, #60	@ 0x3c
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <HAL_HCD_HC_SubmitRequest+0x152>
						hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	332a      	adds	r3, #42	@ 0x2a
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
		break;
 80023fc:	e0a1      	b.n	8002542 <HAL_HCD_HC_SubmitRequest+0x296>
						hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	332a      	adds	r3, #42	@ 0x2a
 800240e:	2202      	movs	r2, #2
 8002410:	701a      	strb	r2, [r3, #0]
		break;
 8002412:	e096      	b.n	8002542 <HAL_HCD_HC_SubmitRequest+0x296>

	case EP_TYPE_BULK:
		if (direction == 0U) {
 8002414:	78bb      	ldrb	r3, [r7, #2]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d120      	bne.n	800245c <HAL_HCD_HC_SubmitRequest+0x1b0>
			/* Set the Data Toggle bit as per the Flag */
			if (hhcd->hc[ch_num].toggle_out == 0U) {
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	333d      	adds	r3, #61	@ 0x3d
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <HAL_HCD_HC_SubmitRequest+0x19a>
				/* Put the PID 0 */
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	332a      	adds	r3, #42	@ 0x2a
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
			} else {
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
			}
		}

		break;
 8002444:	e07e      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	332a      	adds	r3, #42	@ 0x2a
 8002456:	2202      	movs	r2, #2
 8002458:	701a      	strb	r2, [r3, #0]
		break;
 800245a:	e073      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x298>
			if (hhcd->hc[ch_num].toggle_in == 0U) {
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	333c      	adds	r3, #60	@ 0x3c
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <HAL_HCD_HC_SubmitRequest+0x1dc>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	332a      	adds	r3, #42	@ 0x2a
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
		break;
 8002486:	e05d      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	332a      	adds	r3, #42	@ 0x2a
 8002498:	2202      	movs	r2, #2
 800249a:	701a      	strb	r2, [r3, #0]
		break;
 800249c:	e052      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x298>
	case EP_TYPE_INTR:
		if (direction == 0U) {
 800249e:	78bb      	ldrb	r3, [r7, #2]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d120      	bne.n	80024e6 <HAL_HCD_HC_SubmitRequest+0x23a>
			/* Set the Data Toggle bit as per the Flag */
			if (hhcd->hc[ch_num].toggle_out == 0U) {
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	333d      	adds	r3, #61	@ 0x3d
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_HCD_HC_SubmitRequest+0x224>
				/* Put the PID 0 */
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	332a      	adds	r3, #42	@ 0x2a
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
			} else {
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
			}
		}
		break;
 80024ce:	e039      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	332a      	adds	r3, #42	@ 0x2a
 80024e0:	2202      	movs	r2, #2
 80024e2:	701a      	strb	r2, [r3, #0]
		break;
 80024e4:	e02e      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x298>
			if (hhcd->hc[ch_num].toggle_in == 0U) {
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	333c      	adds	r3, #60	@ 0x3c
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <HAL_HCD_HC_SubmitRequest+0x266>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	332a      	adds	r3, #42	@ 0x2a
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
		break;
 8002510:	e018      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	332a      	adds	r3, #42	@ 0x2a
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
		break;
 8002526:	e00d      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x298>

	case EP_TYPE_ISOC:
		hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	332a      	adds	r3, #42	@ 0x2a
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
		break;
 800253c:	e002      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x298>

	default:
		break;
 800253e:	bf00      	nop
 8002540:	e000      	b.n	8002544 <HAL_HCD_HC_SubmitRequest+0x298>
		break;
 8002542:	bf00      	nop
	}

	hhcd->hc[ch_num].xfer_buff = pbuff;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	332c      	adds	r3, #44	@ 0x2c
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	601a      	str	r2, [r3, #0]
	hhcd->hc[ch_num].xfer_len = length;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	8b39      	ldrh	r1, [r7, #24]
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4403      	add	r3, r0
 8002568:	3334      	adds	r3, #52	@ 0x34
 800256a:	6019      	str	r1, [r3, #0]
	hhcd->hc[ch_num].urb_state = URB_IDLE;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334c      	adds	r3, #76	@ 0x4c
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].xfer_count = 0U;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3338      	adds	r3, #56	@ 0x38
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
	hhcd->hc[ch_num].ch_num = ch_num;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3315      	adds	r3, #21
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].state = HC_IDLE;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	334d      	adds	r3, #77	@ 0x4d
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]

	return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num],
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	4613      	mov	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	3310      	adds	r3, #16
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	1d19      	adds	r1, r3, #4
			(uint8_t) hhcd->Init.dma_enable);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	799b      	ldrb	r3, [r3, #6]
	return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num],
 80025d6:	461a      	mov	r2, r3
 80025d8:	f004 fac2 	bl	8006b60 <USB_HC_StartXfer>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop

080025e8 <HAL_HCD_IRQHandler>:
/**
 * @brief  Handle HCD interrupt request.
 * @param  hhcd HCD handle
 * @retval None
 */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	613b      	str	r3, [r7, #16]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	60fb      	str	r3, [r7, #12]
	uint32_t i;
	uint32_t interrupt;

	/* Ensure that we are in device mode */
	if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 ffb6 	bl	8006570 <USB_GetMode>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	f040 80fb 	bne.w	8002802 <HAL_HCD_IRQHandler+0x21a>
		/* Avoid spurious interrupt */
		if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) {
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f003 ff79 	bl	8006508 <USB_ReadInterrupts>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80f1 	beq.w	8002800 <HAL_HCD_IRQHandler+0x218>
			return;
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f003 ff70 	bl	8006508 <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800262e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002632:	d104      	bne.n	800263e <HAL_HCD_IRQHandler+0x56>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800263c:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR)) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 ff60 	bl	8006508 <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002652:	d104      	bne.n	800265e <HAL_HCD_IRQHandler+0x76>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800265c:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE)) {
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f003 ff50 	bl	8006508 <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800266e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002672:	d104      	bne.n	800267e <HAL_HCD_IRQHandler+0x96>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800267c:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS)) {
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f003 ff40 	bl	8006508 <USB_ReadInterrupts>
 8002688:	4603      	mov	r3, r0
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d103      	bne.n	800269a <HAL_HCD_IRQHandler+0xb2>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2202      	movs	r2, #2
 8002698:	615a      	str	r2, [r3, #20]
		}

		/* Handle Host Disconnect Interrupts */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT)) {
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 ff32 	bl	8006508 <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026ae:	d120      	bne.n	80026f2 <HAL_HCD_IRQHandler+0x10a>
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80026b8:	615a      	str	r2, [r3, #20]

			if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U) {
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d113      	bne.n	80026f2 <HAL_HCD_IRQHandler+0x10a>
				/* Flush USB Fifo */
				(void) USB_FlushTxFifo(USBx, 0x10U);
 80026ca:	2110      	movs	r1, #16
 80026cc:	6938      	ldr	r0, [r7, #16]
 80026ce:	f003 fe25 	bl	800631c <USB_FlushTxFifo>
				(void) USB_FlushRxFifo(USBx);
 80026d2:	6938      	ldr	r0, [r7, #16]
 80026d4:	f003 fe54 	bl	8006380 <USB_FlushRxFifo>

				if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7a5b      	ldrb	r3, [r3, #9]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d105      	bne.n	80026ec <HAL_HCD_IRQHandler+0x104>
					/* Restore FS Clock */
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2101      	movs	r1, #1
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 f846 	bl	8006778 <USB_InitFSLSPClkSel>

				/* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
				HAL_HCD_Disconnect_Callback(hhcd);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f007 f80d 	bl	800970c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
			}
		}

		/* Handle Host Port Interrupts */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT)) {
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 ff06 	bl	8006508 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002706:	d102      	bne.n	800270e <HAL_HCD_IRQHandler+0x126>
			HCD_Port_IRQHandler(hhcd);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f001 fd4d 	bl	80041a8 <HCD_Port_IRQHandler>
		}

		/* Handle Host SOF Interrupt */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF)) {
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f003 fef8 	bl	8006508 <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b08      	cmp	r3, #8
 8002720:	d106      	bne.n	8002730 <HAL_HCD_IRQHandler+0x148>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
			HAL_HCD_SOF_Callback(hhcd);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f006 ffd6 	bl	80096d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2208      	movs	r2, #8
 800272e:	615a      	str	r2, [r3, #20]
		}

		/* Handle Host channel Interrupt */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT)) {
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f003 fee7 	bl	8006508 <USB_ReadInterrupts>
 800273a:	4603      	mov	r3, r0
 800273c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002744:	d139      	bne.n	80027ba <HAL_HCD_IRQHandler+0x1d2>
			interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f004 fc82 	bl	8007054 <USB_HC_ReadInterrupt>
 8002750:	60b8      	str	r0, [r7, #8]
			for (i = 0U; i < hhcd->Init.Host_channels; i++) {
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e025      	b.n	80027a4 <HAL_HCD_IRQHandler+0x1bc>
				if ((interrupt & (1UL << (i & 0xFU))) != 0U) {
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d018      	beq.n	800279e <HAL_HCD_IRQHandler+0x1b6>
					if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800277e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002782:	d106      	bne.n	8002792 <HAL_HCD_IRQHandler+0x1aa>
							== USB_OTG_HCCHAR_EPDIR) {
						HCD_HC_IN_IRQHandler(hhcd, (uint8_t) i);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4619      	mov	r1, r3
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f905 	bl	800299a <HCD_HC_IN_IRQHandler>
 8002790:	e005      	b.n	800279e <HAL_HCD_IRQHandler+0x1b6>
					} else {
						HCD_HC_OUT_IRQHandler(hhcd, (uint8_t) i);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	4619      	mov	r1, r3
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 ff67 	bl	800366c <HCD_HC_OUT_IRQHandler>
			for (i = 0U; i < hhcd->Init.Host_channels; i++) {
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	795b      	ldrb	r3, [r3, #5]
 80027a8:	461a      	mov	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d3d3      	bcc.n	8002758 <HAL_HCD_IRQHandler+0x170>
					}
				}
			}
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b8:	615a      	str	r2, [r3, #20]
		}

		/* Handle Rx Queue Level Interrupts */
		if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U) {
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fea2 	bl	8006508 <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d101      	bne.n	80027d2 <HAL_HCD_IRQHandler+0x1ea>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_HCD_IRQHandler+0x1ec>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d014      	beq.n	8002802 <HAL_HCD_IRQHandler+0x21a>
			USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0210 	bic.w	r2, r2, #16
 80027e6:	619a      	str	r2, [r3, #24]

			HCD_RXQLVL_IRQHandler(hhcd);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f001 fbfe 	bl	8003fea <HCD_RXQLVL_IRQHandler>

			USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0210 	orr.w	r2, r2, #16
 80027fc:	619a      	str	r2, [r3, #24]
 80027fe:	e000      	b.n	8002802 <HAL_HCD_IRQHandler+0x21a>
			return;
 8002800:	bf00      	nop
		}
	}
}
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_HCD_Start>:
/**
 * @brief  Start the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	__HAL_LOCK(hhcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_HCD_Start+0x16>
 800281a:	2302      	movs	r3, #2
 800281c:	e013      	b.n	8002846 <HAL_HCD_Start+0x3e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	/* Enable port power */
	(void) USB_DriveVbus(hhcd->Instance, 1U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f004 f80a 	bl	8006846 <USB_DriveVbus>

	/* Enable global interrupt */
	__HAL_HCD_ENABLE(hhcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fd02 	bl	8006240 <USB_EnableGlobalInt>
	__HAL_UNLOCK(hhcd);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_HCD_Stop>:
 * @brief  Stop the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd) {
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
	__HAL_LOCK(hhcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_HCD_Stop+0x16>
 8002860:	2302      	movs	r3, #2
 8002862:	e00d      	b.n	8002880 <HAL_HCD_Stop+0x32>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	(void) USB_StopHost(hhcd->Instance);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f004 fd5d 	bl	8007330 <USB_StopHost>
	__HAL_UNLOCK(hhcd);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_HCD_ResetPort>:
/**
 * @brief  Reset the host port.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	return (USB_ResetPort(hhcd->Instance));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f003 ffac 	bl	80067f2 <USB_ResetPort>
 800289a:	4603      	mov	r3, r0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_HCD_HC_GetURBState>:
 *            URB_NYET/
 *            URB_ERROR/
 *            URB_STALL
 */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd,
		uint8_t chnum) {
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
	return hhcd->hc[chnum].urb_state;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	334c      	adds	r3, #76	@ 0x4c
 80028c0:	781b      	ldrb	r3, [r3, #0]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_HCD_HC_GetXferCount>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval last transfer size in byte
 */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum) {
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	70fb      	strb	r3, [r7, #3]
	return hhcd->hc[chnum].xfer_count;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3338      	adds	r3, #56	@ 0x38
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_HCD_GetCurrentFrame>:
/**
 * @brief  Return the current Host frame number.
 * @param  hhcd HCD handle
 * @retval Current Host frame number
 */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	return (USB_GetCurrentFrame(hhcd->Instance));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f003 ffee 	bl	80068e6 <USB_GetCurrentFrame>
 800290a:	4603      	mov	r3, r0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_HCD_GetCurrentSpeed>:
/**
 * @brief  Return the Host enumeration speed.
 * @param  hhcd HCD handle
 * @retval Enumeration speed
 */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	return (USB_GetHostSpeed(hhcd->Instance));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 ffc9 	bl	80068b8 <USB_GetHostSpeed>
 8002926:	4603      	mov	r3, r0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_HCD_HC_ClearHubInfo>:
 * @param  ch_num Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd,
		uint8_t ch_num) {
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	70fb      	strb	r3, [r7, #3]
	hhcd->hc[ch_num].do_ssplit = 0U;
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	331a      	adds	r3, #26
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].do_csplit = 0U;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	331b      	adds	r3, #27
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].hub_addr = 0U;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3325      	adds	r3, #37	@ 0x25
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3324      	adds	r3, #36	@ 0x24
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HCD_HC_IN_IRQHandler>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval none
 */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum) {
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	70fb      	strb	r3, [r7, #3]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg;

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR)) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 fdb8 	bl	800652e <USB_ReadChInterrupts>
 80029be:	4603      	mov	r3, r0
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d11a      	bne.n	80029fe <HCD_HC_IN_IRQHandler+0x64>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2304      	movs	r3, #4
 80029d8:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	334d      	adds	r3, #77	@ 0x4d
 80029ea:	2207      	movs	r2, #7
 80029ec:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f004 fb3d 	bl	8007076 <USB_HC_Halt>
 80029fc:	e09e      	b.n	8002b3c <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR)) {
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 fd91 	bl	800652e <USB_ReadChInterrupts>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a16:	d11b      	bne.n	8002a50 <HCD_HC_IN_IRQHandler+0xb6>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a2a:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_BBLERR;
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	334d      	adds	r3, #77	@ 0x4d
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 fb14 	bl	8007076 <USB_HC_Halt>
 8002a4e:	e075      	b.n	8002b3c <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL)) {
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f003 fd68 	bl	800652e <USB_ReadChInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d11a      	bne.n	8002a9e <HCD_HC_IN_IRQHandler+0x104>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a74:	461a      	mov	r2, r3
 8002a76:	2308      	movs	r3, #8
 8002a78:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_STALL;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	334d      	adds	r3, #77	@ 0x4d
 8002a8a:	2206      	movs	r2, #6
 8002a8c:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 faed 	bl	8007076 <USB_HC_Halt>
 8002a9c:	e04e      	b.n	8002b3c <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR)) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f003 fd41 	bl	800652e <USB_ReadChInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab6:	d11b      	bne.n	8002af0 <HCD_HC_IN_IRQHandler+0x156>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aca:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_DATATGLERR;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	334d      	adds	r3, #77	@ 0x4d
 8002adc:	2209      	movs	r2, #9
 8002ade:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 fac4 	bl	8007076 <USB_HC_Halt>
 8002aee:	e025      	b.n	8002b3c <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR)) {
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f003 fd18 	bl	800652e <USB_ReadChInterrupts>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b04:	2b80      	cmp	r3, #128	@ 0x80
 8002b06:	d119      	bne.n	8002b3c <HCD_HC_IN_IRQHandler+0x1a2>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	334d      	adds	r3, #77	@ 0x4d
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f004 fa9d 	bl	8007076 <USB_HC_Halt>
	} else {
		/* ... */
	}

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR)) {
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 fcf2 	bl	800652e <USB_ReadChInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b54:	d112      	bne.n	8002b7c <HCD_HC_IN_IRQHandler+0x1e2>
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f004 fa89 	bl	8007076 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b70:	461a      	mov	r2, r3
 8002b72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b76:	6093      	str	r3, [r2, #8]
 8002b78:	f000 bd75 	b.w	8003666 <HCD_HC_IN_IRQHandler+0xccc>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC)) {
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fcd2 	bl	800652e <USB_ReadChInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	f040 8128 	bne.w	8002de6 <HCD_HC_IN_IRQHandler+0x44c>
		/* Clear any pending ACK IT */
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_csplit == 1U) {
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	331b      	adds	r3, #27
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d119      	bne.n	8002bf2 <HCD_HC_IN_IRQHandler+0x258>
			hhcd->hc[chnum].do_csplit = 0U;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	331b      	adds	r3, #27
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	0151      	lsls	r1, r2, #5
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	440a      	add	r2, r1
 8002be8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6053      	str	r3, [r2, #4]
		}

		if (hhcd->Init.dma_enable != 0U) {
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	799b      	ldrb	r3, [r3, #6]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01b      	beq.n	8002c32 <HCD_HC_IN_IRQHandler+0x298>
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	3330      	adds	r3, #48	@ 0x30
 8002c0a:	6819      	ldr	r1, [r3, #0]
					- (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
					- (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c20:	1ac9      	subs	r1, r1, r3
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4403      	add	r3, r0
 8002c2e:	3338      	adds	r3, #56	@ 0x38
 8002c30:	6019      	str	r1, [r3, #0]
		}

		hhcd->hc[chnum].state = HC_XFRC;
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	334d      	adds	r3, #77	@ 0x4d
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
		hhcd->hc[chnum].ErrCnt = 0U;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3344      	adds	r3, #68	@ 0x44
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c66:	461a      	mov	r2, r3
 8002c68:	2301      	movs	r3, #1
 8002c6a:	6093      	str	r3, [r2, #8]

		if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3326      	adds	r3, #38	@ 0x26
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HCD_HC_IN_IRQHandler+0x2fe>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	3326      	adds	r3, #38	@ 0x26
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d110      	bne.n	8002cba <HCD_HC_IN_IRQHandler+0x320>
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 f9e8 	bl	8007076 <USB_HC_Halt>
			__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	6093      	str	r3, [r2, #8]
 8002cb8:	e03d      	b.n	8002d36 <HCD_HC_IN_IRQHandler+0x39c>
		} else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3326      	adds	r3, #38	@ 0x26
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d00a      	beq.n	8002ce6 <HCD_HC_IN_IRQHandler+0x34c>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC)) {
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3326      	adds	r3, #38	@ 0x26
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d127      	bne.n	8002d36 <HCD_HC_IN_IRQHandler+0x39c>
			USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	0151      	lsls	r1, r2, #5
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	440a      	add	r2, r1
 8002cfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d04:	6013      	str	r3, [r2, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	334c      	adds	r3, #76	@ 0x4c
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
			HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	334c      	adds	r3, #76	@ 0x4c
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f006 fcf9 	bl	8009728 <HAL_HCD_HC_NotifyURBChange_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		} else {
			/* ... */
		}

		if (hhcd->Init.dma_enable == 1U) {
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	799b      	ldrb	r3, [r3, #6]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d13b      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0x41c>
			if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U)
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3338      	adds	r3, #56	@ 0x38
 8002d4e:	6819      	ldr	r1, [r3, #0]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4403      	add	r3, r0
 8002d5e:	3328      	adds	r3, #40	@ 0x28
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	440b      	add	r3, r1
 8002d64:	1e59      	subs	r1, r3, #1
					/ hhcd->hc[chnum].max_packet) & 1U) != 0U) {
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4403      	add	r3, r0
 8002d74:	3328      	adds	r3, #40	@ 0x28
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d7c:	f003 0301 	and.w	r3, r3, #1
			if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U)
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8470 	beq.w	8003666 <HCD_HC_IN_IRQHandler+0xccc>
				hhcd->hc[chnum].toggle_in ^= 1U;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	333c      	adds	r3, #60	@ 0x3c
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	f083 0301 	eor.w	r3, r3, #1
 8002d9e:	b2d8      	uxtb	r0, r3
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	333c      	adds	r3, #60	@ 0x3c
 8002dae:	4602      	mov	r2, r0
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	f000 bc58 	b.w	8003666 <HCD_HC_IN_IRQHandler+0xccc>
			}
		} else {
			hhcd->hc[chnum].toggle_in ^= 1U;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	333c      	adds	r3, #60	@ 0x3c
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	f083 0301 	eor.w	r3, r3, #1
 8002dce:	b2d8      	uxtb	r0, r3
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	333c      	adds	r3, #60	@ 0x3c
 8002dde:	4602      	mov	r2, r0
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	f000 bc40 	b.w	8003666 <HCD_HC_IN_IRQHandler+0xccc>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK)) {
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fb9d 	bl	800652e <USB_ReadChInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d131      	bne.n	8002e62 <HCD_HC_IN_IRQHandler+0x4c8>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_ssplit == 1U) {
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	331a      	adds	r3, #26
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	f040 841f 	bne.w	8003666 <HCD_HC_IN_IRQHandler+0xccc>
			hhcd->hc[chnum].do_csplit = 1U;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	331b      	adds	r3, #27
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_ACK;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	334d      	adds	r3, #77	@ 0x4d
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	701a      	strb	r2, [r3, #0]

			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f004 f90c 	bl	8007076 <USB_HC_Halt>
 8002e5e:	f000 bc02 	b.w	8003666 <HCD_HC_IN_IRQHandler+0xccc>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH)) {
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fb5f 	bl	800652e <USB_ReadChInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	f040 8305 	bne.w	8003486 <HCD_HC_IN_IRQHandler+0xaec>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].state == HC_XFRC) {
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	334d      	adds	r3, #77	@ 0x4d
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d114      	bne.n	8002ece <HCD_HC_IN_IRQHandler+0x534>
			hhcd->hc[chnum].state = HC_HALTED;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334d      	adds	r3, #77	@ 0x4d
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334c      	adds	r3, #76	@ 0x4c
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e2cc      	b.n	8003468 <HCD_HC_IN_IRQHandler+0xace>
		} else if (hhcd->hc[chnum].state == HC_STALL) {
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	334d      	adds	r3, #77	@ 0x4d
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b06      	cmp	r3, #6
 8002ee2:	d114      	bne.n	8002f0e <HCD_HC_IN_IRQHandler+0x574>
			hhcd->hc[chnum].state = HC_HALTED;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	334d      	adds	r3, #77	@ 0x4d
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_STALL;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334c      	adds	r3, #76	@ 0x4c
 8002f08:	2205      	movs	r2, #5
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e2ac      	b.n	8003468 <HCD_HC_IN_IRQHandler+0xace>
		} else if ((hhcd->hc[chnum].state == HC_XACTERR)
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	334d      	adds	r3, #77	@ 0x4d
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b07      	cmp	r3, #7
 8002f22:	d00b      	beq.n	8002f3c <HCD_HC_IN_IRQHandler+0x5a2>
				|| (hhcd->hc[chnum].state == HC_DATATGLERR)) {
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	334d      	adds	r3, #77	@ 0x4d
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b09      	cmp	r3, #9
 8002f38:	f040 80a6 	bne.w	8003088 <HCD_HC_IN_IRQHandler+0x6ee>
			hhcd->hc[chnum].state = HC_HALTED;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334d      	adds	r3, #77	@ 0x4d
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3344      	adds	r3, #68	@ 0x44
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	1c59      	adds	r1, r3, #1
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4403      	add	r3, r0
 8002f70:	3344      	adds	r3, #68	@ 0x44
 8002f72:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3344      	adds	r3, #68	@ 0x44
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d943      	bls.n	8003012 <HCD_HC_IN_IRQHandler+0x678>
				hhcd->hc[chnum].ErrCnt = 0U;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3344      	adds	r3, #68	@ 0x44
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

				if (hhcd->hc[chnum].do_ssplit == 1U) {
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	331a      	adds	r3, #26
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d123      	bne.n	8002ffc <HCD_HC_IN_IRQHandler+0x662>
					hhcd->hc[chnum].do_csplit = 0U;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	331b      	adds	r3, #27
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
					hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	331c      	adds	r3, #28
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
					__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	0151      	lsls	r1, r2, #5
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	440a      	add	r2, r1
 8002ff2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffa:	6053      	str	r3, [r2, #4]
				}

				hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	334c      	adds	r3, #76	@ 0x4c
 800300c:	2204      	movs	r2, #4
 800300e:	701a      	strb	r2, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003010:	e229      	b.n	8003466 <HCD_HC_IN_IRQHandler+0xacc>
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	334c      	adds	r3, #76	@ 0x4c
 8003022:	2202      	movs	r2, #2
 8003024:	701a      	strb	r2, [r3, #0]

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	3326      	adds	r3, #38	@ 0x26
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HCD_HC_IN_IRQHandler+0x6ba>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3326      	adds	r3, #38	@ 0x26
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b02      	cmp	r3, #2
 8003050:	f040 8209 	bne.w	8003466 <HCD_HC_IN_IRQHandler+0xacc>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800306a:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003072:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003080:	461a      	mov	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6013      	str	r3, [r2, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003086:	e1ee      	b.n	8003466 <HCD_HC_IN_IRQHandler+0xacc>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_NYET) {
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	334d      	adds	r3, #77	@ 0x4d
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b05      	cmp	r3, #5
 800309c:	f040 80c8 	bne.w	8003230 <HCD_HC_IN_IRQHandler+0x896>
			hhcd->hc[chnum].state = HC_HALTED;
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	334d      	adds	r3, #77	@ 0x4d
 80030b0:	2202      	movs	r2, #2
 80030b2:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	331b      	adds	r3, #27
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	f040 81ce 	bne.w	8003468 <HCD_HC_IN_IRQHandler+0xace>
				if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR) {
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	3326      	adds	r3, #38	@ 0x26
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d16b      	bne.n	80031ba <HCD_HC_IN_IRQHandler+0x820>
					hhcd->hc[chnum].NyetErrCnt++;
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3348      	adds	r3, #72	@ 0x48
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1c59      	adds	r1, r3, #1
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4403      	add	r3, r0
 8003102:	3348      	adds	r3, #72	@ 0x48
 8003104:	6019      	str	r1, [r3, #0]
					if (hhcd->hc[chnum].NyetErrCnt > 2U) {
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3348      	adds	r3, #72	@ 0x48
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d943      	bls.n	80031a4 <HCD_HC_IN_IRQHandler+0x80a>
						hhcd->hc[chnum].NyetErrCnt = 0U;
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	3348      	adds	r3, #72	@ 0x48
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
						hhcd->hc[chnum].do_csplit = 0U;
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	331b      	adds	r3, #27
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]

						if (hhcd->hc[chnum].ErrCnt < 3U) {
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3344      	adds	r3, #68	@ 0x44
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d809      	bhi.n	800316e <HCD_HC_IN_IRQHandler+0x7d4>
							hhcd->hc[chnum].ep_ss_schedule = 1U;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	331c      	adds	r3, #28
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
						}
						__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4413      	add	r3, r2
 8003176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	0151      	lsls	r1, r2, #5
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	440a      	add	r2, r1
 8003184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800318c:	6053      	str	r3, [r2, #4]
						hhcd->hc[chnum].urb_state = URB_ERROR;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	334c      	adds	r3, #76	@ 0x4c
 800319e:	2204      	movs	r2, #4
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e014      	b.n	80031ce <HCD_HC_IN_IRQHandler+0x834>
					} else {
						hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	334c      	adds	r3, #76	@ 0x4c
 80031b4:	2202      	movs	r2, #2
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	e009      	b.n	80031ce <HCD_HC_IN_IRQHandler+0x834>
					}
				} else {
					hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	334c      	adds	r3, #76	@ 0x4c
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
				}

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3326      	adds	r3, #38	@ 0x26
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00b      	beq.n	80031fc <HCD_HC_IN_IRQHandler+0x862>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	3326      	adds	r3, #38	@ 0x26
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	f040 8136 	bne.w	8003468 <HCD_HC_IN_IRQHandler+0xace>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003212:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800321a:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e11b      	b.n	8003468 <HCD_HC_IN_IRQHandler+0xace>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_ACK) {
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	334d      	adds	r3, #77	@ 0x4d
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b03      	cmp	r3, #3
 8003244:	f040 8081 	bne.w	800334a <HCD_HC_IN_IRQHandler+0x9b0>
			hhcd->hc[chnum].state = HC_HALTED;
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	334d      	adds	r3, #77	@ 0x4d
 8003258:	2202      	movs	r2, #2
 800325a:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	331b      	adds	r3, #27
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	f040 80fa 	bne.w	8003468 <HCD_HC_IN_IRQHandler+0xace>
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	334c      	adds	r3, #76	@ 0x4c
 8003284:	2202      	movs	r2, #2
 8003286:	701a      	strb	r2, [r3, #0]

				/* Set Complete split and re-activate the channel */
				USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	0151      	lsls	r1, r2, #5
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	440a      	add	r2, r1
 800329e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a6:	6053      	str	r3, [r2, #4]
				USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	0151      	lsls	r1, r2, #5
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	440a      	add	r2, r1
 80032be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c6:	60d3      	str	r3, [r2, #12]
				USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032e2:	f023 0320 	bic.w	r3, r3, #32
 80032e6:	60d3      	str	r3, [r2, #12]

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3326      	adds	r3, #38	@ 0x26
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HCD_HC_IN_IRQHandler+0x97c>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3326      	adds	r3, #38	@ 0x26
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b02      	cmp	r3, #2
 8003312:	f040 80a9 	bne.w	8003468 <HCD_HC_IN_IRQHandler+0xace>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800332c:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003334:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	e08e      	b.n	8003468 <HCD_HC_IN_IRQHandler+0xace>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_NAK) {
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	334d      	adds	r3, #77	@ 0x4d
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b04      	cmp	r3, #4
 800335e:	d143      	bne.n	80033e8 <HCD_HC_IN_IRQHandler+0xa4e>
			hhcd->hc[chnum].state = HC_HALTED;
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	334d      	adds	r3, #77	@ 0x4d
 8003370:	2202      	movs	r2, #2
 8003372:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	334c      	adds	r3, #76	@ 0x4c
 8003384:	2202      	movs	r2, #2
 8003386:	701a      	strb	r2, [r3, #0]

			if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3326      	adds	r3, #38	@ 0x26
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HCD_HC_IN_IRQHandler+0xa1a>
					|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3326      	adds	r3, #38	@ 0x26
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d159      	bne.n	8003468 <HCD_HC_IN_IRQHandler+0xace>
				/* re-activate the channel */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033ca:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033d2:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e0:	461a      	mov	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e03f      	b.n	8003468 <HCD_HC_IN_IRQHandler+0xace>
			}
		} else if (hhcd->hc[chnum].state == HC_BBLERR) {
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334d      	adds	r3, #77	@ 0x4d
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d126      	bne.n	800344c <HCD_HC_IN_IRQHandler+0xab2>
			hhcd->hc[chnum].state = HC_HALTED;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	334d      	adds	r3, #77	@ 0x4d
 800340e:	2202      	movs	r2, #2
 8003410:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3344      	adds	r3, #68	@ 0x44
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	1c59      	adds	r1, r3, #1
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4403      	add	r3, r0
 8003432:	3344      	adds	r3, #68	@ 0x44
 8003434:	6019      	str	r1, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_ERROR;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	334c      	adds	r3, #76	@ 0x4c
 8003446:	2204      	movs	r2, #4
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e00d      	b.n	8003468 <HCD_HC_IN_IRQHandler+0xace>
		} else {
			if (hhcd->hc[chnum].state == HC_HALTED) {
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334d      	adds	r3, #77	@ 0x4d
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b02      	cmp	r3, #2
 8003460:	f000 8100 	beq.w	8003664 <HCD_HC_IN_IRQHandler+0xcca>
 8003464:	e000      	b.n	8003468 <HCD_HC_IN_IRQHandler+0xace>
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003466:	bf00      	nop
		}

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
		HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	334c      	adds	r3, #76	@ 0x4c
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f006 f952 	bl	8009728 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003484:	e0ef      	b.n	8003666 <HCD_HC_IN_IRQHandler+0xccc>
				hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f003 f84d 	bl	800652e <USB_ReadChInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349a:	2b40      	cmp	r3, #64	@ 0x40
 800349c:	d12f      	bne.n	80034fe <HCD_HC_IN_IRQHandler+0xb64>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034aa:	461a      	mov	r2, r3
 80034ac:	2340      	movs	r3, #64	@ 0x40
 80034ae:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_NYET;
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	334d      	adds	r3, #77	@ 0x4d
 80034c0:	2205      	movs	r2, #5
 80034c2:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ssplit == 0U) {
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	331a      	adds	r3, #26
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HCD_HC_IN_IRQHandler+0xb54>
			hhcd->hc[chnum].ErrCnt = 0U;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3344      	adds	r3, #68	@ 0x44
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
		}

		(void) USB_HC_Halt(hhcd->Instance, chnum);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f003 fdbd 	bl	8007076 <USB_HC_Halt>
 80034fc:	e0b3      	b.n	8003666 <HCD_HC_IN_IRQHandler+0xccc>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK)) {
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f003 f811 	bl	800652e <USB_ReadChInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b10      	cmp	r3, #16
 8003514:	f040 80a7 	bne.w	8003666 <HCD_HC_IN_IRQHandler+0xccc>
		if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR) {
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3326      	adds	r3, #38	@ 0x26
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d11b      	bne.n	8003566 <HCD_HC_IN_IRQHandler+0xbcc>
			hhcd->hc[chnum].ErrCnt = 0U;
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3344      	adds	r3, #68	@ 0x44
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_NAK;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	334d      	adds	r3, #77	@ 0x4d
 8003552:	2204      	movs	r2, #4
 8003554:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	4611      	mov	r1, r2
 800355e:	4618      	mov	r0, r3
 8003560:	f003 fd89 	bl	8007076 <USB_HC_Halt>
 8003564:	e03f      	b.n	80035e6 <HCD_HC_IN_IRQHandler+0xc4c>
		} else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3326      	adds	r3, #38	@ 0x26
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HCD_HC_IN_IRQHandler+0xbf8>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3326      	adds	r3, #38	@ 0x26
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d129      	bne.n	80035e6 <HCD_HC_IN_IRQHandler+0xc4c>
			hhcd->hc[chnum].ErrCnt = 0U;
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3344      	adds	r3, #68	@ 0x44
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

			if ((hhcd->Init.dma_enable == 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	799b      	ldrb	r3, [r3, #6]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HCD_HC_IN_IRQHandler+0xc2a>
					|| (hhcd->hc[chnum].do_csplit == 1U)) {
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	331b      	adds	r3, #27
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d110      	bne.n	80035e6 <HCD_HC_IN_IRQHandler+0xc4c>
				hhcd->hc[chnum].state = HC_NAK;
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	334d      	adds	r3, #77	@ 0x4d
 80035d4:	2204      	movs	r2, #4
 80035d6:	701a      	strb	r2, [r3, #0]
				(void) USB_HC_Halt(hhcd->Instance, chnum);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f003 fd48 	bl	8007076 <USB_HC_Halt>
			}
		} else {
			/* ... */
		}

		if (hhcd->hc[chnum].do_csplit == 1U) {
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	331b      	adds	r3, #27
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d129      	bne.n	8003650 <HCD_HC_IN_IRQHandler+0xcb6>
			hhcd->hc[chnum].do_csplit = 0U;
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	331b      	adds	r3, #27
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	440a      	add	r2, r1
 8003626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800362a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362e:	6053      	str	r3, [r2, #4]
			__HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	0151      	lsls	r1, r2, #5
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	440a      	add	r2, r1
 8003646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800364a:	f043 0320 	orr.w	r3, r3, #32
 800364e:	60d3      	str	r3, [r2, #12]
		}

		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365c:	461a      	mov	r2, r3
 800365e:	2310      	movs	r3, #16
 8003660:	6093      	str	r3, [r2, #8]
 8003662:	e000      	b.n	8003666 <HCD_HC_IN_IRQHandler+0xccc>
				return;
 8003664:	bf00      	nop
	} else {
		/* ... */
	}
}
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HCD_HC_OUT_IRQHandler>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval none
 */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg;
	uint32_t num_packets;

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR)) {
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	4611      	mov	r1, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f002 ff4f 	bl	800652e <USB_ReadChInterrupts>
 8003690:	4603      	mov	r3, r0
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b04      	cmp	r3, #4
 8003698:	d11b      	bne.n	80036d2 <HCD_HC_OUT_IRQHandler+0x66>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800369a:	78fb      	ldrb	r3, [r7, #3]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a6:	461a      	mov	r2, r3
 80036a8:	2304      	movs	r3, #4
 80036aa:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	334d      	adds	r3, #77	@ 0x4d
 80036bc:	2207      	movs	r2, #7
 80036be:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 fcd4 	bl	8007076 <USB_HC_Halt>
 80036ce:	f000 bc89 	b.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK)) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 ff27 	bl	800652e <USB_ReadChInterrupts>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	f040 8082 	bne.w	80037f0 <HCD_HC_OUT_IRQHandler+0x184>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f8:	461a      	mov	r2, r3
 80036fa:	2320      	movs	r3, #32
 80036fc:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_ping == 1U) {
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	3319      	adds	r3, #25
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d124      	bne.n	800375e <HCD_HC_OUT_IRQHandler+0xf2>
			hhcd->hc[chnum].do_ping = 0U;
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3319      	adds	r3, #25
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	334c      	adds	r3, #76	@ 0x4c
 8003738:	2202      	movs	r2, #2
 800373a:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_ACK;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334d      	adds	r3, #77	@ 0x4d
 800374c:	2203      	movs	r2, #3
 800374e:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f003 fc8c 	bl	8007076 <USB_HC_Halt>
		}

		if ((hhcd->hc[chnum].do_ssplit == 1U)
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	331a      	adds	r3, #26
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	f040 8437 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
				&& (hhcd->hc[chnum].do_csplit == 0U)) {
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	331b      	adds	r3, #27
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f040 842b 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
			if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC) {
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3326      	adds	r3, #38	@ 0x26
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d009      	beq.n	80037b8 <HCD_HC_OUT_IRQHandler+0x14c>
				hhcd->hc[chnum].do_csplit = 1U;
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	331b      	adds	r3, #27
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
			}

			hhcd->hc[chnum].state = HC_ACK;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	334d      	adds	r3, #77	@ 0x4d
 80037c8:	2203      	movs	r2, #3
 80037ca:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f003 fc4e 	bl	8007076 <USB_HC_Halt>

			/* reset error_count */
			hhcd->hc[chnum].ErrCnt = 0U;
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3344      	adds	r3, #68	@ 0x44
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e3f9      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR)) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 fe98 	bl	800652e <USB_ReadChInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003808:	d111      	bne.n	800382e <HCD_HC_OUT_IRQHandler+0x1c2>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4413      	add	r3, r2
 8003812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003816:	461a      	mov	r2, r3
 8003818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800381c:	6093      	str	r3, [r2, #8]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f003 fc25 	bl	8007076 <USB_HC_Halt>
 800382c:	e3da      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC)) {
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f002 fe79 	bl	800652e <USB_ReadChInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d168      	bne.n	8003918 <HCD_HC_OUT_IRQHandler+0x2ac>
		hhcd->hc[chnum].ErrCnt = 0U;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	3344      	adds	r3, #68	@ 0x44
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

		/* transaction completed with NYET state, update do ping state */
		if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f002 fe63 	bl	800652e <USB_ReadChInterrupts>
 8003868:	4603      	mov	r3, r0
 800386a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	d112      	bne.n	8003898 <HCD_HC_OUT_IRQHandler+0x22c>
			hhcd->hc[chnum].do_ping = 1U;
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3319      	adds	r3, #25
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4413      	add	r3, r2
 800388e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003892:	461a      	mov	r2, r3
 8003894:	2340      	movs	r3, #64	@ 0x40
 8003896:	6093      	str	r3, [r2, #8]
		}

		if (hhcd->hc[chnum].do_csplit != 0U) {
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	331b      	adds	r3, #27
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d019      	beq.n	80038e2 <HCD_HC_OUT_IRQHandler+0x276>
			hhcd->hc[chnum].do_csplit = 0U;
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	331b      	adds	r3, #27
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	0151      	lsls	r1, r2, #5
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	440a      	add	r2, r1
 80038d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e0:	6053      	str	r3, [r2, #4]
		}

		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ee:	461a      	mov	r2, r3
 80038f0:	2301      	movs	r3, #1
 80038f2:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XFRC;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	334d      	adds	r3, #77	@ 0x4d
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f003 fbb0 	bl	8007076 <USB_HC_Halt>
 8003916:	e365      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f002 fe04 	bl	800652e <USB_ReadChInterrupts>
 8003926:	4603      	mov	r3, r0
 8003928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392c:	2b40      	cmp	r3, #64	@ 0x40
 800392e:	d139      	bne.n	80039a4 <HCD_HC_OUT_IRQHandler+0x338>
		hhcd->hc[chnum].state = HC_NYET;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	334d      	adds	r3, #77	@ 0x4d
 8003940:	2205      	movs	r2, #5
 8003942:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ssplit == 0U) {
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	331a      	adds	r3, #26
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HCD_HC_OUT_IRQHandler+0x302>
			hhcd->hc[chnum].do_ping = 1U;
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	3319      	adds	r3, #25
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
		}

		hhcd->hc[chnum].ErrCnt = 0U;
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	3344      	adds	r3, #68	@ 0x44
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	4611      	mov	r1, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f003 fb73 	bl	8007076 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4413      	add	r3, r2
 8003998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800399c:	461a      	mov	r2, r3
 800399e:	2340      	movs	r3, #64	@ 0x40
 80039a0:	6093      	str	r3, [r2, #8]
 80039a2:	e31f      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL)) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f002 fdbe 	bl	800652e <USB_ReadChInterrupts>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d11a      	bne.n	80039f2 <HCD_HC_OUT_IRQHandler+0x386>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c8:	461a      	mov	r2, r3
 80039ca:	2308      	movs	r3, #8
 80039cc:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_STALL;
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	334d      	adds	r3, #77	@ 0x4d
 80039de:	2206      	movs	r2, #6
 80039e0:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 fb43 	bl	8007076 <USB_HC_Halt>
 80039f0:	e2f8      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK)) {
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f002 fd97 	bl	800652e <USB_ReadChInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d144      	bne.n	8003a94 <HCD_HC_OUT_IRQHandler+0x428>
		hhcd->hc[chnum].ErrCnt = 0U;
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3344      	adds	r3, #68	@ 0x44
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
		hhcd->hc[chnum].state = HC_NAK;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	334d      	adds	r3, #77	@ 0x4d
 8003a2e:	2204      	movs	r2, #4
 8003a30:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ping == 0U) {
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3319      	adds	r3, #25
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d114      	bne.n	8003a72 <HCD_HC_OUT_IRQHandler+0x406>
			if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH) {
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3318      	adds	r3, #24
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HCD_HC_OUT_IRQHandler+0x406>
				hhcd->hc[chnum].do_ping = 1U;
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3319      	adds	r3, #25
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
			}
		}

		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f003 fafb 	bl	8007076 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2310      	movs	r3, #16
 8003a90:	6093      	str	r3, [r2, #8]
 8003a92:	e2a7      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR)) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f002 fd46 	bl	800652e <USB_ReadChInterrupts>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa8:	2b80      	cmp	r3, #128	@ 0x80
 8003aaa:	f040 8083 	bne.w	8003bb4 <HCD_HC_OUT_IRQHandler+0x548>
		if (hhcd->Init.dma_enable == 0U) {
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	799b      	ldrb	r3, [r3, #6]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d111      	bne.n	8003ada <HCD_HC_OUT_IRQHandler+0x46e>
			hhcd->hc[chnum].state = HC_XACTERR;
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	334d      	adds	r3, #77	@ 0x4d
 8003ac6:	2207      	movs	r2, #7
 8003ac8:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f003 facf 	bl	8007076 <USB_HC_Halt>
 8003ad8:	e062      	b.n	8003ba0 <HCD_HC_OUT_IRQHandler+0x534>
		} else {
			hhcd->hc[chnum].ErrCnt++;
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	3344      	adds	r3, #68	@ 0x44
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	1c59      	adds	r1, r3, #1
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4403      	add	r3, r0
 8003afa:	3344      	adds	r3, #68	@ 0x44
 8003afc:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3344      	adds	r3, #68	@ 0x44
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d922      	bls.n	8003b5a <HCD_HC_OUT_IRQHandler+0x4ee>
				hhcd->hc[chnum].ErrCnt = 0U;
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3344      	adds	r3, #68	@ 0x44
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
				hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	334c      	adds	r3, #76	@ 0x4c
 8003b38:	2204      	movs	r2, #4
 8003b3a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
				HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	334c      	adds	r3, #76	@ 0x4c
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f005 fde8 	bl	8009728 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b58:	e022      	b.n	8003ba0 <HCD_HC_OUT_IRQHandler+0x534>
						hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	334c      	adds	r3, #76	@ 0x4c
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	701a      	strb	r2, [r3, #0]

				/* Re-activate the channel  */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b84:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b8c:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6013      	str	r3, [r2, #0]
			}
		}
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bac:	461a      	mov	r2, r3
 8003bae:	2380      	movs	r3, #128	@ 0x80
 8003bb0:	6093      	str	r3, [r2, #8]
 8003bb2:	e217      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR)) {
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 fcb6 	bl	800652e <USB_ReadChInterrupts>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bcc:	d11b      	bne.n	8003c06 <HCD_HC_OUT_IRQHandler+0x59a>
		hhcd->hc[chnum].state = HC_DATATGLERR;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	334d      	adds	r3, #77	@ 0x4d
 8003bde:	2209      	movs	r2, #9
 8003be0:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f003 fa43 	bl	8007076 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c02:	6093      	str	r3, [r2, #8]
 8003c04:	e1ee      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH)) {
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f002 fc8d 	bl	800652e <USB_ReadChInterrupts>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	f040 81df 	bne.w	8003fde <HCD_HC_OUT_IRQHandler+0x972>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2302      	movs	r3, #2
 8003c30:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].state == HC_XFRC) {
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	334d      	adds	r3, #77	@ 0x4d
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	f040 8093 	bne.w	8003d70 <HCD_HC_OUT_IRQHandler+0x704>
			hhcd->hc[chnum].state = HC_HALTED;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	334d      	adds	r3, #77	@ 0x4d
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	334c      	adds	r3, #76	@ 0x4c
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]

			if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	3326      	adds	r3, #38	@ 0x26
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d00b      	beq.n	8003ca0 <HCD_HC_OUT_IRQHandler+0x634>
					|| (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)) {
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	3326      	adds	r3, #38	@ 0x26
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	f040 8190 	bne.w	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
				if (hhcd->Init.dma_enable == 0U) {
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	799b      	ldrb	r3, [r3, #6]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d115      	bne.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x668>
					hhcd->hc[chnum].toggle_out ^= 1U;
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	333d      	adds	r3, #61	@ 0x3d
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	f083 0301 	eor.w	r3, r3, #1
 8003cc0:	b2d8      	uxtb	r0, r3
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	333d      	adds	r3, #61	@ 0x3d
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	701a      	strb	r2, [r3, #0]
				}

				if ((hhcd->Init.dma_enable == 1U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	799b      	ldrb	r3, [r3, #6]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f040 8171 	bne.w	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
						&& (hhcd->hc[chnum].xfer_len > 0U)) {
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	3334      	adds	r3, #52	@ 0x34
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8165 	beq.w	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
					num_packets = (hhcd->hc[chnum].xfer_len
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3334      	adds	r3, #52	@ 0x34
 8003d06:	6819      	ldr	r1, [r3, #0]
							+ hhcd->hc[chnum].max_packet - 1U)
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4403      	add	r3, r0
 8003d16:	3328      	adds	r3, #40	@ 0x28
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	440b      	add	r3, r1
 8003d1c:	1e59      	subs	r1, r3, #1
							/ hhcd->hc[chnum].max_packet;
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4403      	add	r3, r0
 8003d2c:	3328      	adds	r3, #40	@ 0x28
 8003d2e:	881b      	ldrh	r3, [r3, #0]
					num_packets = (hhcd->hc[chnum].xfer_len
 8003d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d34:	60bb      	str	r3, [r7, #8]

					if ((num_packets & 1U) != 0U) {
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 813f 	beq.w	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
						hhcd->hc[chnum].toggle_out ^= 1U;
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	333d      	adds	r3, #61	@ 0x3d
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	f083 0301 	eor.w	r3, r3, #1
 8003d5a:	b2d8      	uxtb	r0, r3
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	333d      	adds	r3, #61	@ 0x3d
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e127      	b.n	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
					}
				}
			}
		} else if (hhcd->hc[chnum].state == HC_ACK) {
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	334d      	adds	r3, #77	@ 0x4d
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d120      	bne.n	8003dc8 <HCD_HC_OUT_IRQHandler+0x75c>
			hhcd->hc[chnum].state = HC_HALTED;
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	334d      	adds	r3, #77	@ 0x4d
 8003d96:	2202      	movs	r2, #2
 8003d98:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	331b      	adds	r3, #27
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f040 8107 	bne.w	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	334c      	adds	r3, #76	@ 0x4c
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e0fb      	b.n	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
			}
		} else if (hhcd->hc[chnum].state == HC_NAK) {
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	334d      	adds	r3, #77	@ 0x4d
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d13a      	bne.n	8003e54 <HCD_HC_OUT_IRQHandler+0x7e8>
			hhcd->hc[chnum].state = HC_HALTED;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	334d      	adds	r3, #77	@ 0x4d
 8003dee:	2202      	movs	r2, #2
 8003df0:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	334c      	adds	r3, #76	@ 0x4c
 8003e02:	2202      	movs	r2, #2
 8003e04:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	331b      	adds	r3, #27
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	f040 80d1 	bne.w	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
				hhcd->hc[chnum].do_csplit = 0U;
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	331b      	adds	r3, #27
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
				__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e50:	6053      	str	r3, [r2, #4]
 8003e52:	e0b5      	b.n	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
			}
		} else if (hhcd->hc[chnum].state == HC_NYET) {
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	334d      	adds	r3, #77	@ 0x4d
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d114      	bne.n	8003e94 <HCD_HC_OUT_IRQHandler+0x828>
			hhcd->hc[chnum].state = HC_HALTED;
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	334d      	adds	r3, #77	@ 0x4d
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	334c      	adds	r3, #76	@ 0x4c
 8003e8e:	2202      	movs	r2, #2
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e095      	b.n	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
		} else if (hhcd->hc[chnum].state == HC_STALL) {
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	334d      	adds	r3, #77	@ 0x4d
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d114      	bne.n	8003ed4 <HCD_HC_OUT_IRQHandler+0x868>
			hhcd->hc[chnum].state = HC_HALTED;
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	334d      	adds	r3, #77	@ 0x4d
 8003eba:	2202      	movs	r2, #2
 8003ebc:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_STALL;
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	334c      	adds	r3, #76	@ 0x4c
 8003ece:	2205      	movs	r2, #5
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	e075      	b.n	8003fc0 <HCD_HC_OUT_IRQHandler+0x954>
		} else if ((hhcd->hc[chnum].state == HC_XACTERR)
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	334d      	adds	r3, #77	@ 0x4d
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b07      	cmp	r3, #7
 8003ee8:	d00a      	beq.n	8003f00 <HCD_HC_OUT_IRQHandler+0x894>
				|| (hhcd->hc[chnum].state == HC_DATATGLERR)) {
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	334d      	adds	r3, #77	@ 0x4d
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b09      	cmp	r3, #9
 8003efe:	d170      	bne.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x976>
			hhcd->hc[chnum].state = HC_HALTED;
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	334d      	adds	r3, #77	@ 0x4d
 8003f10:	2202      	movs	r2, #2
 8003f12:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	3344      	adds	r3, #68	@ 0x44
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	1c59      	adds	r1, r3, #1
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4403      	add	r3, r0
 8003f34:	3344      	adds	r3, #68	@ 0x44
 8003f36:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3344      	adds	r3, #68	@ 0x44
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d914      	bls.n	8003f78 <HCD_HC_OUT_IRQHandler+0x90c>
				hhcd->hc[chnum].ErrCnt = 0U;
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3344      	adds	r3, #68	@ 0x44
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
				hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	334c      	adds	r3, #76	@ 0x4c
 8003f72:	2204      	movs	r2, #4
 8003f74:	701a      	strb	r2, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003f76:	e022      	b.n	8003fbe <HCD_HC_OUT_IRQHandler+0x952>
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	334c      	adds	r3, #76	@ 0x4c
 8003f88:	2202      	movs	r2, #2
 8003f8a:	701a      	strb	r2, [r3, #0]

				/* re-activate the channel  */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fa2:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003faa:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6013      	str	r3, [r2, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003fbe:	bf00      	nop
		}

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
		HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	334c      	adds	r3, #76	@ 0x4c
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f005 fba6 	bl	8009728 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003fdc:	e002      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
				hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
	} else {
		return;
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x978>
			return;
 8003fe2:	bf00      	nop
	}
}
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HCD_RXQLVL_IRQHandler>:
/**
 * @brief  Handle Rx Queue Level interrupt requests.
 * @param  hhcd HCD handle
 * @retval none
 */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd) {
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b08a      	sub	sp, #40	@ 0x28
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t USBx_BASE = (uint32_t) USBx;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	623b      	str	r3, [r7, #32]
	uint32_t GrxstspReg;
	uint32_t xferSizePktCnt;
	uint32_t tmpreg;
	uint32_t chnum;

	GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	61fb      	str	r3, [r7, #28]
	chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	61bb      	str	r3, [r7, #24]
	pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	0c5b      	lsrs	r3, r3, #17
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	617b      	str	r3, [r7, #20]
	pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800401e:	613b      	str	r3, [r7, #16]

	switch (pktsts) {
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d004      	beq.n	8004030 <HCD_RXQLVL_IRQHandler+0x46>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b05      	cmp	r3, #5
 800402a:	f000 80b6 	beq.w	800419a <HCD_RXQLVL_IRQHandler+0x1b0>
		break;

	case GRXSTS_PKTSTS_IN_XFER_COMP:
	case GRXSTS_PKTSTS_CH_HALTED:
	default:
		break;
 800402e:	e0b7      	b.n	80041a0 <HCD_RXQLVL_IRQHandler+0x1b6>
		if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void*) 0)) {
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80b3 	beq.w	800419e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	332c      	adds	r3, #44	@ 0x2c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80a7 	beq.w	800419e <HCD_RXQLVL_IRQHandler+0x1b4>
			if ((hhcd->hc[chnum].xfer_count + pktcnt)
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3338      	adds	r3, #56	@ 0x38
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	18d1      	adds	r1, r2, r3
					<= hhcd->hc[chnum].xfer_len) {
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4403      	add	r3, r0
 8004074:	3334      	adds	r3, #52	@ 0x34
 8004076:	681b      	ldr	r3, [r3, #0]
			if ((hhcd->hc[chnum].xfer_count + pktcnt)
 8004078:	4299      	cmp	r1, r3
 800407a:	f200 8083 	bhi.w	8004184 <HCD_RXQLVL_IRQHandler+0x19a>
				(void) USB_ReadPacket(hhcd->Instance, hhcd->hc[chnum].xfer_buff,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4613      	mov	r3, r2
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	332c      	adds	r3, #44	@ 0x2c
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	b292      	uxth	r2, r2
 8004098:	4619      	mov	r1, r3
 800409a:	f002 f9dd 	bl	8006458 <USB_ReadPacket>
				hhcd->hc[chnum].xfer_buff += pktcnt;
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	332c      	adds	r3, #44	@ 0x2c
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	18d1      	adds	r1, r2, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4613      	mov	r3, r2
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4403      	add	r3, r0
 80040c2:	332c      	adds	r3, #44	@ 0x2c
 80040c4:	6019      	str	r1, [r3, #0]
				hhcd->hc[chnum].xfer_count += pktcnt;
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	3338      	adds	r3, #56	@ 0x38
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	18d1      	adds	r1, r2, r3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4403      	add	r3, r0
 80040ea:	3338      	adds	r3, #56	@ 0x38
 80040ec:	6019      	str	r1, [r3, #0]
						(USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	0cdb      	lsrs	r3, r3, #19
				xferSizePktCnt =
 80040fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004102:	60fb      	str	r3, [r7, #12]
				if ((hhcd->hc[chnum].max_packet == pktcnt)
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	3328      	adds	r3, #40	@ 0x28
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4293      	cmp	r3, r2
 800411c:	d13f      	bne.n	800419e <HCD_RXQLVL_IRQHandler+0x1b4>
						&& (xferSizePktCnt > 0U)) {
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03c      	beq.n	800419e <HCD_RXQLVL_IRQHandler+0x1b4>
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60bb      	str	r3, [r7, #8]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800413a:	60bb      	str	r3, [r7, #8]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004142:	60bb      	str	r3, [r7, #8]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6013      	str	r3, [r2, #0]
					hhcd->hc[chnum].toggle_in ^= 1U;
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	333c      	adds	r3, #60	@ 0x3c
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	f083 0301 	eor.w	r3, r3, #1
 800416c:	b2d8      	uxtb	r0, r3
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	333c      	adds	r3, #60	@ 0x3c
 800417e:	4602      	mov	r2, r0
 8004180:	701a      	strb	r2, [r3, #0]
		break;
 8004182:	e00c      	b.n	800419e <HCD_RXQLVL_IRQHandler+0x1b4>
				hhcd->hc[chnum].urb_state = URB_ERROR;
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	334c      	adds	r3, #76	@ 0x4c
 8004194:	2204      	movs	r2, #4
 8004196:	701a      	strb	r2, [r3, #0]
		break;
 8004198:	e001      	b.n	800419e <HCD_RXQLVL_IRQHandler+0x1b4>
		break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HCD_RXQLVL_IRQHandler+0x1b6>
		break;
 800419e:	bf00      	nop
	}
}
 80041a0:	bf00      	nop
 80041a2:	3728      	adds	r7, #40	@ 0x28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HCD_Port_IRQHandler>:
/**
 * @brief  Handle Host Port interrupt requests.
 * @param  hhcd HCD handle
 * @retval None
 */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	613b      	str	r3, [r7, #16]
	__IO uint32_t hprt0;
	__IO uint32_t hprt0_dup;

	/* Handle Host Port Interrupts */
	hprt0 = USBx_HPRT0;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]
	hprt0_dup = USBx_HPRT0;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60bb      	str	r3, [r7, #8]

	hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80041d4:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	/* Check whether Port Connect detected */
	if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET) {
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d10b      	bne.n	80041f8 <HCD_Port_IRQHandler+0x50>
		if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS) {
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d102      	bne.n	80041f0 <HCD_Port_IRQHandler+0x48>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
			HAL_HCD_Connect_Callback(hhcd);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f005 fa80 	bl	80096f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		}
		hprt0_dup |= USB_OTG_HPRT_PCDET;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	60bb      	str	r3, [r7, #8]
	}

	/* Check whether Port Enable Changed */
	if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG) {
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d132      	bne.n	8004268 <HCD_Port_IRQHandler+0xc0>
		hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f043 0308 	orr.w	r3, r3, #8
 8004208:	60bb      	str	r3, [r7, #8]

		if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA) {
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d126      	bne.n	8004262 <HCD_Port_IRQHandler+0xba>
			if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	7a5b      	ldrb	r3, [r3, #9]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d113      	bne.n	8004244 <HCD_Port_IRQHandler+0x9c>
				if ((hprt0 & USB_OTG_HPRT_PSPD)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004222:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004226:	d106      	bne.n	8004236 <HCD_Port_IRQHandler+0x8e>
						== (HPRT0_PRTSPD_LOW_SPEED << 17)) {
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2102      	movs	r1, #2
 800422e:	4618      	mov	r0, r3
 8004230:	f002 faa2 	bl	8006778 <USB_InitFSLSPClkSel>
 8004234:	e011      	b.n	800425a <HCD_Port_IRQHandler+0xb2>
				} else {
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2101      	movs	r1, #1
 800423c:	4618      	mov	r0, r3
 800423e:	f002 fa9b 	bl	8006778 <USB_InitFSLSPClkSel>
 8004242:	e00a      	b.n	800425a <HCD_Port_IRQHandler+0xb2>
				}
			} else {
				if (hhcd->Init.speed == HCD_SPEED_FULL) {
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	79db      	ldrb	r3, [r3, #7]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d106      	bne.n	800425a <HCD_Port_IRQHandler+0xb2>
					USBx_HOST->HFIR = HFIR_60_MHZ;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004252:	461a      	mov	r2, r3
 8004254:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004258:	6053      	str	r3, [r2, #4]
				}
			}
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
			HAL_HCD_PortEnabled_Callback(hhcd);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f005 fa72 	bl	8009744 <HAL_HCD_PortEnabled_Callback>
 8004260:	e002      	b.n	8004268 <HCD_Port_IRQHandler+0xc0>

		} else {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
			HAL_HCD_PortDisabled_Callback(hhcd);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f005 fa7c 	bl	8009760 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		}
	}

	/* Check for an overcurrent */
	if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG) {
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b20      	cmp	r3, #32
 8004270:	d103      	bne.n	800427a <HCD_Port_IRQHandler+0xd2>
		hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f043 0320 	orr.w	r3, r3, #32
 8004278:	60bb      	str	r3, [r7, #8]
	}

	/* Clear Port Interrupts */
	USBx_HPRT0 = hprt0_dup;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6013      	str	r3, [r2, #0]
}
 8004286:	bf00      	nop
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e12b      	b.n	80044fa <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fd f962 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	@ 0x24
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042e2:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042f2:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 80042f4:	f001 fa20 	bl	8005738 <HAL_RCC_GetPCLK1Freq>
 80042f8:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4a81      	ldr	r2, [pc, #516]	@ (8004504 <HAL_I2C_Init+0x274>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d807      	bhi.n	8004314 <HAL_I2C_Init+0x84>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a80      	ldr	r2, [pc, #512]	@ (8004508 <HAL_I2C_Init+0x278>)
 8004308:	4293      	cmp	r3, r2
 800430a:	bf94      	ite	ls
 800430c:	2301      	movls	r3, #1
 800430e:	2300      	movhi	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	e006      	b.n	8004322 <HAL_I2C_Init+0x92>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a7d      	ldr	r2, [pc, #500]	@ (800450c <HAL_I2C_Init+0x27c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	bf94      	ite	ls
 800431c:	2301      	movls	r3, #1
 800431e:	2300      	movhi	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e0e7      	b.n	80044fa <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a78      	ldr	r2, [pc, #480]	@ (8004510 <HAL_I2C_Init+0x280>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	0c9b      	lsrs	r3, r3, #18
 8004334:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a6a      	ldr	r2, [pc, #424]	@ (8004504 <HAL_I2C_Init+0x274>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d802      	bhi.n	8004364 <HAL_I2C_Init+0xd4>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3301      	adds	r3, #1
 8004362:	e009      	b.n	8004378 <HAL_I2C_Init+0xe8>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	4a69      	ldr	r2, [pc, #420]	@ (8004514 <HAL_I2C_Init+0x284>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	099b      	lsrs	r3, r3, #6
 8004376:	3301      	adds	r3, #1
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	430b      	orrs	r3, r1
 800437e:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800438a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	495c      	ldr	r1, [pc, #368]	@ (8004504 <HAL_I2C_Init+0x274>)
 8004394:	428b      	cmp	r3, r1
 8004396:	d819      	bhi.n	80043cc <HAL_I2C_Init+0x13c>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1e59      	subs	r1, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043a6:	1c59      	adds	r1, r3, #1
 80043a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043ac:	400b      	ands	r3, r1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_I2C_Init+0x138>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1e59      	subs	r1, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c6:	e051      	b.n	800446c <HAL_I2C_Init+0x1dc>
 80043c8:	2304      	movs	r3, #4
 80043ca:	e04f      	b.n	800446c <HAL_I2C_Init+0x1dc>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d111      	bne.n	80043f8 <HAL_I2C_Init+0x168>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1e58      	subs	r0, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	440b      	add	r3, r1
 80043e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e6:	3301      	adds	r3, #1
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	e012      	b.n	800441e <HAL_I2C_Init+0x18e>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e58      	subs	r0, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	0099      	lsls	r1, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	fbb0 f3f3 	udiv	r3, r0, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_I2C_Init+0x196>
 8004422:	2301      	movs	r3, #1
 8004424:	e022      	b.n	800446c <HAL_I2C_Init+0x1dc>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10e      	bne.n	800444c <HAL_I2C_Init+0x1bc>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1e58      	subs	r0, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	440b      	add	r3, r1
 800443c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004440:	3301      	adds	r3, #1
 8004442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800444a:	e00f      	b.n	800446c <HAL_I2C_Init+0x1dc>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1e58      	subs	r0, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	0099      	lsls	r1, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004462:	3301      	adds	r3, #1
 8004464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004468:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	6809      	ldr	r1, [r1, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800449a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6911      	ldr	r1, [r2, #16]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68d2      	ldr	r2, [r2, #12]
 80044a6:	4311      	orrs	r1, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	@ 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	000186a0 	.word	0x000186a0
 8004508:	001e847f 	.word	0x001e847f
 800450c:	003d08ff 	.word	0x003d08ff
 8004510:	431bde83 	.word	0x431bde83
 8004514:	10624dd3 	.word	0x10624dd3

08004518 <HAL_I2S_Init>:
 *         in the I2S_InitTypeDef and create the associated handle.
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
	uint16_t tmpreg;
#endif

	/* Check the I2S handle allocation */
	if (hi2s == NULL) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_I2S_Init+0x12>
		return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e128      	b.n	800477c <HAL_I2S_Init+0x264>
	assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
	assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
	assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
	assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

	if (hi2s->State == HAL_I2S_STATE_RESET) {
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_I2S_Init+0x32>
		/* Allocate lock resource and initialize it */
		hi2s->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

		/* Initialize Default I2S IrqHandler ISR */
		hi2s->IrqHandlerISR = I2S_IRQHandler;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a90      	ldr	r2, [pc, #576]	@ (8004784 <HAL_I2S_Init+0x26c>)
 8004542:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
		/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
		HAL_I2S_MspInit(hi2s);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fd f863 	bl	8001610 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}

	hi2s->State = HAL_I2S_STATE_BUSY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	CLEAR_BIT(hi2s->Instance->I2SCFGR,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004560:	f023 030f 	bic.w	r3, r3, #15
 8004564:	61d3      	str	r3, [r2, #28]
			(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
	hi2s->Instance->I2SPR = 0x0002U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2202      	movs	r2, #2
 800456c:	621a      	str	r2, [r3, #32]

	/*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
	/* If the requested audio frequency is not the default, compute the prescaler */
	if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT) {
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d060      	beq.n	8004638 <HAL_I2S_Init+0x120>
		/* Check the frame length (For the Prescaler computing) ********************/
		if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <HAL_I2S_Init+0x6c>
			/* Packet length is 16 bits */
			packetlength = 16U;
 800457e:	2310      	movs	r3, #16
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e001      	b.n	8004588 <HAL_I2S_Init+0x70>
		} else {
			/* Packet length is 32 bits */
			packetlength = 32U;
 8004584:	2320      	movs	r3, #32
 8004586:	617b      	str	r3, [r7, #20]
		}

		/* I2S standard */
		if (hi2s->Init.Standard <= I2S_STANDARD_LSB) {
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b20      	cmp	r3, #32
 800458e:	d802      	bhi.n	8004596 <HAL_I2S_Init+0x7e>
			/* In I2S standard packet length is multiplied by 2 */
			packetlength = packetlength * 2U;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
		i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004596:	2001      	movs	r0, #1
 8004598:	f001 f9c4 	bl	8005924 <HAL_RCCEx_GetPeriphCLKFreq>
 800459c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

		/* Compute the Real divider depending on the MCLK output state, with a floating point */
		if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a6:	d125      	bne.n	80045f4 <HAL_I2S_Init+0xdc>
			/* MCLK output is enabled */
			if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d010      	beq.n	80045d2 <HAL_I2S_Init+0xba>
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 80045cc:	3305      	adds	r3, #5
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e01f      	b.n	8004612 <HAL_I2S_Init+0xfa>
			} else {
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 80045ee:	3305      	adds	r3, #5
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	e00e      	b.n	8004612 <HAL_I2S_Init+0xfa>
			}
		} else {
			/* MCLK output is disabled */
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	461a      	mov	r2, r3
					/ hi2s->Init.AudioFreq)) + 5U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 800460e:	3305      	adds	r3, #5
 8004610:	613b      	str	r3, [r7, #16]
		}

		/* Remove the flatting point */
		tmp = tmp / 10U;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4a5c      	ldr	r2, [pc, #368]	@ (8004788 <HAL_I2S_Init+0x270>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	08db      	lsrs	r3, r3, #3
 800461c:	613b      	str	r3, [r7, #16]

		/* Check the parity of the divider */
		i2sodd = (uint32_t) (tmp & (uint32_t) 1U);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	61bb      	str	r3, [r7, #24]

		/* Compute the i2sdiv prescaler */
		i2sdiv = (uint32_t) ((tmp - i2sodd) / 2U);
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	61fb      	str	r3, [r7, #28]

		/* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
		i2sodd = (uint32_t) (i2sodd << 8U);
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e003      	b.n	8004640 <HAL_I2S_Init+0x128>
	} else {
		/* Set the default values */
		i2sdiv = 2U;
 8004638:	2302      	movs	r3, #2
 800463a:	61fb      	str	r3, [r7, #28]
		i2sodd = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]
	}

	/* Test if the divider is 1 or 0 or greater than 0xFF */
	if ((i2sdiv < 2U) || (i2sdiv > 0xFFU)) {
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d902      	bls.n	800464c <HAL_I2S_Init+0x134>
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2bff      	cmp	r3, #255	@ 0xff
 800464a:	d907      	bls.n	800465c <HAL_I2S_Init+0x144>
		/* Set the error code and execute error callback*/
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	f043 0210 	orr.w	r2, r3, #16
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	645a      	str	r2, [r3, #68]	@ 0x44
		return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e08f      	b.n	800477c <HAL_I2S_Init+0x264>

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

	/* Write to SPIx I2SPR register the computed value */
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
			| (uint32_t) (i2sodd | (uint32_t) hi2s->Init.MCLKOutput));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	ea42 0103 	orr.w	r1, r2, r3
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	430a      	orrs	r2, r1
 800466e:	621a      	str	r2, [r3, #32]

	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	/* And configure the I2S with the I2S_InitStruct values                      */
	MODIFY_REG(hi2s->Instance->I2SCFGR,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800467a:	f023 030f 	bic.w	r3, r3, #15
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6851      	ldr	r1, [r2, #4]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6892      	ldr	r2, [r2, #8]
 8004686:	4311      	orrs	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68d2      	ldr	r2, [r2, #12]
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6992      	ldr	r2, [r2, #24]
 8004692:	430a      	orrs	r2, r1
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800469e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

	/* Configure the I2S extended if the full duplex mode is enabled */
	assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

	if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE) {
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d161      	bne.n	800476c <HAL_I2S_Init+0x254>
		/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
		hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a38      	ldr	r2, [pc, #224]	@ (800478c <HAL_I2S_Init+0x274>)
 80046ac:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
		CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a37      	ldr	r2, [pc, #220]	@ (8004790 <HAL_I2S_Init+0x278>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <HAL_I2S_Init+0x1a4>
 80046b8:	4b36      	ldr	r3, [pc, #216]	@ (8004794 <HAL_I2S_Init+0x27c>)
 80046ba:	e001      	b.n	80046c0 <HAL_I2S_Init+0x1a8>
 80046bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	4932      	ldr	r1, [pc, #200]	@ (8004790 <HAL_I2S_Init+0x278>)
 80046c8:	428a      	cmp	r2, r1
 80046ca:	d101      	bne.n	80046d0 <HAL_I2S_Init+0x1b8>
 80046cc:	4a31      	ldr	r2, [pc, #196]	@ (8004794 <HAL_I2S_Init+0x27c>)
 80046ce:	e001      	b.n	80046d4 <HAL_I2S_Init+0x1bc>
 80046d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80046d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80046d8:	f023 030f 	bic.w	r3, r3, #15
 80046dc:	61d3      	str	r3, [r2, #28]
				(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
		I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004790 <HAL_I2S_Init+0x278>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <HAL_I2S_Init+0x1d4>
 80046e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004794 <HAL_I2S_Init+0x27c>)
 80046ea:	e001      	b.n	80046f0 <HAL_I2S_Init+0x1d8>
 80046ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046f0:	2202      	movs	r2, #2
 80046f2:	621a      	str	r2, [r3, #32]

		/* Get the I2SCFGR register value */
		tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a25      	ldr	r2, [pc, #148]	@ (8004790 <HAL_I2S_Init+0x278>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <HAL_I2S_Init+0x1ea>
 80046fe:	4b25      	ldr	r3, [pc, #148]	@ (8004794 <HAL_I2S_Init+0x27c>)
 8004700:	e001      	b.n	8004706 <HAL_I2S_Init+0x1ee>
 8004702:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	817b      	strh	r3, [r7, #10]

		/* Get the mode to be configured for the extended I2S */
		if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004712:	d003      	beq.n	800471c <HAL_I2S_Init+0x204>
				|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d103      	bne.n	8004724 <HAL_I2S_Init+0x20c>
			tmp = I2S_MODE_SLAVE_RX;
 800471c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e001      	b.n	8004728 <HAL_I2S_Init+0x210>
		} else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
		{
			tmp = I2S_MODE_SLAVE_TX;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
		}

		/* Configure the I2S Slave with the I2S Master parameter values */
		tmpreg |=
				(uint16_t) ((uint16_t) SPI_I2SCFGR_I2SMOD | (uint16_t) tmp
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.Standard
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	b29b      	uxth	r3, r3
		tmpreg |=
 8004732:	4313      	orrs	r3, r2
 8004734:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.DataFormat
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	b29b      	uxth	r3, r3
		tmpreg |=
 800473c:	4313      	orrs	r3, r2
 800473e:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.CPOL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	b29b      	uxth	r3, r3
		tmpreg |=
 8004746:	4313      	orrs	r3, r2
 8004748:	b29a      	uxth	r2, r3
 800474a:	897b      	ldrh	r3, [r7, #10]
 800474c:	4313      	orrs	r3, r2
 800474e:	b29b      	uxth	r3, r3
 8004750:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004754:	817b      	strh	r3, [r7, #10]

		/* Write to SPIx I2SCFGR */
		WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a0d      	ldr	r2, [pc, #52]	@ (8004790 <HAL_I2S_Init+0x278>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d101      	bne.n	8004764 <HAL_I2S_Init+0x24c>
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <HAL_I2S_Init+0x27c>)
 8004762:	e001      	b.n	8004768 <HAL_I2S_Init+0x250>
 8004764:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004768:	897a      	ldrh	r2, [r7, #10]
 800476a:	61da      	str	r2, [r3, #28]
	}
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	645a      	str	r2, [r3, #68]	@ 0x44
	hi2s->State = HAL_I2S_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	0800488f 	.word	0x0800488f
 8004788:	cccccccd 	.word	0xcccccccd
 800478c:	080049a5 	.word	0x080049a5
 8004790:	40003800 	.word	0x40003800
 8004794:	40003400 	.word	0x40003400

08004798 <HAL_I2S_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_TxCpltCallback could be implemented in the user file
	 */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_I2S_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_I2S_ErrorCallback>:
 * @brief  I2S error callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_ErrorCallback could be implemented in the user file
	 */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <I2S_Transmit_IT>:
 * @brief  Transmit an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	/* Transmit data */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	881a      	ldrh	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60da      	str	r2, [r3, #12]
	hi2s->pTxBuffPtr++;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	1c9a      	adds	r2, r3, #2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	625a      	str	r2, [r3, #36]	@ 0x24
	hi2s->TxXferCount--;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10e      	bne.n	8004828 <I2S_Transmit_IT+0x54>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004818:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
		HAL_I2S_TxCpltCallback(hi2s);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffb8 	bl	8004798 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <I2S_Receive_IT>:
 * @brief  Receive an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	/* Receive data */
	(*hi2s->pRxBuffPtr) = (uint16_t) hi2s->Instance->DR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004842:	b292      	uxth	r2, r2
 8004844:	801a      	strh	r2, [r3, #0]
	hi2s->pRxBuffPtr++;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484a:	1c9a      	adds	r2, r3, #2
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hi2s->RxXferCount--;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10e      	bne.n	8004886 <I2S_Receive_IT+0x56>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004876:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
		HAL_I2S_RxCpltCallback(hi2s);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff93 	bl	80047ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <I2S_IRQHandler>:
 * @brief  This function handles I2S interrupt request.
 * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s) {
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	617b      	str	r3, [r7, #20]

	if (hi2s->State == HAL_I2S_STATE_BUSY_RX) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d13a      	bne.n	8004920 <I2S_IRQHandler+0x92>
		/* I2S in mode Receiver ------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d109      	bne.n	80048c8 <I2S_IRQHandler+0x3a>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET)) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048be:	2b40      	cmp	r3, #64	@ 0x40
 80048c0:	d102      	bne.n	80048c8 <I2S_IRQHandler+0x3a>
			I2S_Receive_IT(hi2s);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff ffb4 	bl	8004830 <I2S_Receive_IT>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ce:	2b40      	cmp	r3, #64	@ 0x40
 80048d0:	d126      	bne.n	8004920 <I2S_IRQHandler+0x92>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d11f      	bne.n	8004920 <I2S_IRQHandler+0x92>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048ee:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048f0:	2300      	movs	r3, #0
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	f043 0202 	orr.w	r2, r3, #2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff ff50 	bl	80047c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}

	if (hi2s->State == HAL_I2S_STATE_BUSY_TX) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b03      	cmp	r3, #3
 800492a:	d136      	bne.n	800499a <I2S_IRQHandler+0x10c>
		/* I2S in mode Transmitter -----------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b02      	cmp	r3, #2
 8004934:	d109      	bne.n	800494a <I2S_IRQHandler+0xbc>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET)) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004940:	2b80      	cmp	r3, #128	@ 0x80
 8004942:	d102      	bne.n	800494a <I2S_IRQHandler+0xbc>
			I2S_Transmit_IT(hi2s);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ff45 	bl	80047d4 <I2S_Transmit_IT>
		}

		/* I2S Underrun error interrupt occurred --------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b08      	cmp	r3, #8
 8004952:	d122      	bne.n	800499a <I2S_IRQHandler+0x10c>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b20      	cmp	r3, #32
 8004960:	d11b      	bne.n	800499a <I2S_IRQHandler+0x10c>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004970:	605a      	str	r2, [r3, #4]

			/* Clear Underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498c:	f043 0204 	orr.w	r2, r3, #4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff ff13 	bl	80047c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
/**
 * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
 * @param  hi2s I2S handle
 * @retval HAL status
 */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a92      	ldr	r2, [pc, #584]	@ (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80049be:	4b92      	ldr	r3, [pc, #584]	@ (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049c0:	e001      	b.n	80049c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80049c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	61bb      	str	r3, [r7, #24]
	__IO uint32_t i2scr2 = hi2s->Instance->CR2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	617b      	str	r3, [r7, #20]
	__IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a8b      	ldr	r2, [pc, #556]	@ (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d101      	bne.n	80049e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80049dc:	4b8a      	ldr	r3, [pc, #552]	@ (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049de:	e001      	b.n	80049e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80049e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	613b      	str	r3, [r7, #16]

	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f0:	d004      	beq.n	80049fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
			|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f040 8099 	bne.w	8004b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
		/* I2S in mode Transmitter -------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d107      	bne.n	8004a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
				&& ((i2scr2 & I2S_IT_TXE) != RESET)) {
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2S(hi2s);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f925 	bl	8004c60 <I2SEx_TxISR_I2S>
		}

		/* I2Sext in mode Receiver -----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d107      	bne.n	8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
				&& ((i2sextcr2 & I2S_IT_RXNE) != RESET)) {
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2SExt(hi2s);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9c8 	bl	8004dc0 <I2SEx_RxISR_I2SExt>
		}

		/* I2Sext Overrun error interrupt occurred --------------------------------*/
		if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a36:	2b40      	cmp	r3, #64	@ 0x40
 8004a38:	d13a      	bne.n	8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d035      	beq.n	8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6e      	ldr	r2, [pc, #440]	@ (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a50:	e001      	b.n	8004a56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004a52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4969      	ldr	r1, [pc, #420]	@ (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a5e:	428b      	cmp	r3, r1
 8004a60:	d101      	bne.n	8004a66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004a62:	4b69      	ldr	r3, [pc, #420]	@ (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a64:	e001      	b.n	8004a6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004a66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a6e:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a7e:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa2:	f043 0202 	orr.w	r2, r3, #2
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fe88 	bl	80047c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2S Underrun error interrupt occurred ----------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	f040 80c3 	bne.w	8004c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 80bd 	beq.w	8004c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ad6:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a49      	ldr	r2, [pc, #292]	@ (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004ae2:	4b49      	ldr	r3, [pc, #292]	@ (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ae4:	e001      	b.n	8004aea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004ae6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4944      	ldr	r1, [pc, #272]	@ (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004af2:	428b      	cmp	r3, r1
 8004af4:	d101      	bne.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004af6:	4b44      	ldr	r3, [pc, #272]	@ (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004af8:	e001      	b.n	8004afe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004afa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004afe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b02:	605a      	str	r2, [r3, #4]

			/* Clear underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b04:	2300      	movs	r3, #0
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fe4a 	bl	80047c0 <HAL_I2S_ErrorCallback>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8004b2c:	e089      	b.n	8004c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
		}
	}
	/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
	else {
		/* I2Sext in mode Transmitter ----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d107      	bne.n	8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
				&& ((i2sextcr2 & I2S_IT_TXE) != RESET)) {
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2SExt(hi2s);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f8be 	bl	8004cc4 <I2SEx_TxISR_I2SExt>
		}

		/* I2S in mode Receiver --------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
				&& ((i2scr2 & I2S_IT_RXNE) != RESET)) {
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2S(hi2s);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8fd 	bl	8004d5c <I2SEx_RxISR_I2S>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b68:	2b40      	cmp	r3, #64	@ 0x40
 8004b6a:	d12f      	bne.n	8004bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d02a      	beq.n	8004bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b84:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d101      	bne.n	8004b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004b90:	4b1d      	ldr	r3, [pc, #116]	@ (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b92:	e001      	b.n	8004b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004b94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4919      	ldr	r1, [pc, #100]	@ (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ba4:	4b18      	ldr	r3, [pc, #96]	@ (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ba6:	e001      	b.n	8004bac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004ba8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bb0:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbe:	f043 0202 	orr.w	r2, r3, #2
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff fdfa 	bl	80047c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2Sext Underrun error interrupt occurred -------------------------------*/
		if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d136      	bne.n	8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d031      	beq.n	8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a07      	ldr	r2, [pc, #28]	@ (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d101      	bne.n	8004bee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004bea:	4b07      	ldr	r3, [pc, #28]	@ (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bec:	e001      	b.n	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004bee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4902      	ldr	r1, [pc, #8]	@ (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bfa:	428b      	cmp	r3, r1
 8004bfc:	d106      	bne.n	8004c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004bfe:	4b02      	ldr	r3, [pc, #8]	@ (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c00:	e006      	b.n	8004c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004c02:	bf00      	nop
 8004c04:	40003800 	.word	0x40003800
 8004c08:	40003400 	.word	0x40003400
 8004c0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c14:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c24:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c32:	f043 0204 	orr.w	r2, r3, #4
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff fdc0 	bl	80047c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8004c40:	e000      	b.n	8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8004c42:	bf00      	nop
}
 8004c44:	bf00      	nop
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_I2SEx_TxRxCpltCallback>:
/**
 * @brief  Tx and Rx Transfer completed callback
 * @param  hi2s I2S handle
 * @retval None
 */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
	 */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <I2SEx_TxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	1c99      	adds	r1, r3, #2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6251      	str	r1, [r2, #36]	@ 0x24
 8004c72:	881a      	ldrh	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d113      	bne.n	8004cba <I2SEx_TxISR_I2S+0x5a>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ca0:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <I2SEx_TxISR_I2S+0x5a>
			hi2s->State = HAL_I2S_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ffc9 	bl	8004c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <I2SEx_TxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	1c99      	adds	r1, r3, #2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6251      	str	r1, [r2, #36]	@ 0x24
 8004cd6:	8819      	ldrh	r1, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d54 <I2SEx_TxISR_I2SExt+0x90>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d101      	bne.n	8004ce6 <I2SEx_TxISR_I2SExt+0x22>
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <I2SEx_TxISR_I2SExt+0x94>)
 8004ce4:	e001      	b.n	8004cea <I2SEx_TxISR_I2SExt+0x26>
 8004ce6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cea:	460a      	mov	r2, r1
 8004cec:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d121      	bne.n	8004d4a <I2SEx_TxISR_I2SExt+0x86>
		/* Disable I2Sext TXE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a12      	ldr	r2, [pc, #72]	@ (8004d54 <I2SEx_TxISR_I2SExt+0x90>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d101      	bne.n	8004d14 <I2SEx_TxISR_I2SExt+0x50>
 8004d10:	4b11      	ldr	r3, [pc, #68]	@ (8004d58 <I2SEx_TxISR_I2SExt+0x94>)
 8004d12:	e001      	b.n	8004d18 <I2SEx_TxISR_I2SExt+0x54>
 8004d14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	490d      	ldr	r1, [pc, #52]	@ (8004d54 <I2SEx_TxISR_I2SExt+0x90>)
 8004d20:	428b      	cmp	r3, r1
 8004d22:	d101      	bne.n	8004d28 <I2SEx_TxISR_I2SExt+0x64>
 8004d24:	4b0c      	ldr	r3, [pc, #48]	@ (8004d58 <I2SEx_TxISR_I2SExt+0x94>)
 8004d26:	e001      	b.n	8004d2c <I2SEx_TxISR_I2SExt+0x68>
 8004d28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d30:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <I2SEx_TxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff ff81 	bl	8004c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40003800 	.word	0x40003800
 8004d58:	40003400 	.word	0x40003400

08004d5c <I2SEx_RxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68d8      	ldr	r0, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	1c99      	adds	r1, r3, #2
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004d74:	b282      	uxth	r2, r0
 8004d76:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d113      	bne.n	8004db8 <I2SEx_RxISR_I2S+0x5c>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d9e:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <I2SEx_RxISR_I2S+0x5c>
			hi2s->State = HAL_I2S_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff4a 	bl	8004c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <I2SEx_RxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a20      	ldr	r2, [pc, #128]	@ (8004e50 <I2SEx_RxISR_I2SExt+0x90>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <I2SEx_RxISR_I2SExt+0x16>
 8004dd2:	4b20      	ldr	r3, [pc, #128]	@ (8004e54 <I2SEx_RxISR_I2SExt+0x94>)
 8004dd4:	e001      	b.n	8004dda <I2SEx_RxISR_I2SExt+0x1a>
 8004dd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dda:	68d8      	ldr	r0, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	1c99      	adds	r1, r3, #2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004de6:	b282      	uxth	r2, r0
 8004de8:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d121      	bne.n	8004e46 <I2SEx_RxISR_I2SExt+0x86>
		/* Disable I2Sext RXNE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a12      	ldr	r2, [pc, #72]	@ (8004e50 <I2SEx_RxISR_I2SExt+0x90>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d101      	bne.n	8004e10 <I2SEx_RxISR_I2SExt+0x50>
 8004e0c:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <I2SEx_RxISR_I2SExt+0x94>)
 8004e0e:	e001      	b.n	8004e14 <I2SEx_RxISR_I2SExt+0x54>
 8004e10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	490d      	ldr	r1, [pc, #52]	@ (8004e50 <I2SEx_RxISR_I2SExt+0x90>)
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	d101      	bne.n	8004e24 <I2SEx_RxISR_I2SExt+0x64>
 8004e20:	4b0c      	ldr	r3, [pc, #48]	@ (8004e54 <I2SEx_RxISR_I2SExt+0x94>)
 8004e22:	e001      	b.n	8004e28 <I2SEx_RxISR_I2SExt+0x68>
 8004e24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e2c:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <I2SEx_RxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ff03 	bl	8004c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40003800 	.word	0x40003800
 8004e54:	40003400 	.word	0x40003400

08004e58 <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e267      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d075      	beq.n	8004f62 <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e76:	4b88      	ldr	r3, [pc, #544]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d00c      	beq.n	8004e9c <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e82:	4b85      	ldr	r3, [pc, #532]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d112      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8004e8e:	4b82      	ldr	r3, [pc, #520]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9c:	4b7e      	ldr	r3, [pc, #504]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d05b      	beq.n	8004f60 <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d157      	bne.n	8004f60 <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e242      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ebc:	d106      	bne.n	8004ecc <HAL_RCC_OscConfig+0x74>
 8004ebe:	4b76      	ldr	r3, [pc, #472]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a75      	ldr	r2, [pc, #468]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e01d      	b.n	8004f08 <HAL_RCC_OscConfig+0xb0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x98>
 8004ed6:	4b70      	ldr	r3, [pc, #448]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a6f      	ldr	r2, [pc, #444]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a6c      	ldr	r2, [pc, #432]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0xb0>
 8004ef0:	4b69      	ldr	r3, [pc, #420]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a68      	ldr	r2, [pc, #416]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b66      	ldr	r3, [pc, #408]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a65      	ldr	r2, [pc, #404]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f06:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004f10:	f7fc fd7a 	bl	8001a08 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004f18:	f7fc fd76 	bl	8001a08 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	@ 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e207      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0xc0>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004f38:	f7fc fd66 	bl	8001a08 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004f40:	f7fc fd62 	bl	8001a08 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	@ 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e1f3      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8004f52:	4b51      	ldr	r3, [pc, #324]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0xe8>
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f60:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d063      	beq.n	8005036 <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f7a:	4b47      	ldr	r3, [pc, #284]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d11c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8004f86:	4b44      	ldr	r3, [pc, #272]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d116      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f92:	4b41      	ldr	r3, [pc, #260]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d001      	beq.n	8004faa <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e1c7      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004faa:	4b3b      	ldr	r3, [pc, #236]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4937      	ldr	r1, [pc, #220]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fbe:	e03a      	b.n	8005036 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d020      	beq.n	800500a <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8004fc8:	4b34      	ldr	r3, [pc, #208]	@ (800509c <HAL_RCC_OscConfig+0x244>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8004fce:	f7fc fd1b 	bl	8001a08 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004fd6:	f7fc fd17 	bl	8001a08 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e1a8      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004ff4:	4b28      	ldr	r3, [pc, #160]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	4925      	ldr	r1, [pc, #148]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]
 8005008:	e015      	b.n	8005036 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 800500a:	4b24      	ldr	r3, [pc, #144]	@ (800509c <HAL_RCC_OscConfig+0x244>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8005010:	f7fc fcfa 	bl	8001a08 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8005018:	f7fc fcf6 	bl	8001a08 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e187      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800502a:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d036      	beq.n	80050b0 <HAL_RCC_OscConfig+0x258>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d016      	beq.n	8005078 <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800504a:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <HAL_RCC_OscConfig+0x248>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005050:	f7fc fcda 	bl	8001a08 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8005058:	f7fc fcd6 	bl	8001a08 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e167      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800506a:	4b0b      	ldr	r3, [pc, #44]	@ (8005098 <HAL_RCC_OscConfig+0x240>)
 800506c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x200>
 8005076:	e01b      	b.n	80050b0 <HAL_RCC_OscConfig+0x258>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8005078:	4b09      	ldr	r3, [pc, #36]	@ (80050a0 <HAL_RCC_OscConfig+0x248>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 800507e:	f7fc fcc3 	bl	8001a08 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8005084:	e00e      	b.n	80050a4 <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8005086:	f7fc fcbf 	bl	8001a08 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d907      	bls.n	80050a4 <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e150      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
 8005098:	40023800 	.word	0x40023800
 800509c:	42470000 	.word	0x42470000
 80050a0:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80050a4:	4b88      	ldr	r3, [pc, #544]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80050a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1ea      	bne.n	8005086 <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8097 	beq.w	80051ec <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 80050be:	2300      	movs	r3, #0
 80050c0:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80050c2:	4b81      	ldr	r3, [pc, #516]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10f      	bne.n	80050ee <HAL_RCC_OscConfig+0x296>
			__HAL_RCC_PWR_CLK_ENABLE();
 80050ce:	2300      	movs	r3, #0
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	4b7d      	ldr	r3, [pc, #500]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	4a7c      	ldr	r2, [pc, #496]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80050d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80050de:	4b7a      	ldr	r3, [pc, #488]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80050ee:	4b77      	ldr	r3, [pc, #476]	@ (80052cc <HAL_RCC_OscConfig+0x474>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d118      	bne.n	800512c <HAL_RCC_OscConfig+0x2d4>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 80050fa:	4b74      	ldr	r3, [pc, #464]	@ (80052cc <HAL_RCC_OscConfig+0x474>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a73      	ldr	r2, [pc, #460]	@ (80052cc <HAL_RCC_OscConfig+0x474>)
 8005100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005104:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8005106:	f7fc fc7f 	bl	8001a08 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x2c8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800510e:	f7fc fc7b 	bl	8001a08 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x2c8>
					return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e10c      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8005120:	4b6a      	ldr	r3, [pc, #424]	@ (80052cc <HAL_RCC_OscConfig+0x474>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d106      	bne.n	8005142 <HAL_RCC_OscConfig+0x2ea>
 8005134:	4b64      	ldr	r3, [pc, #400]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005138:	4a63      	ldr	r2, [pc, #396]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005140:	e01c      	b.n	800517c <HAL_RCC_OscConfig+0x324>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b05      	cmp	r3, #5
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x30c>
 800514a:	4b5f      	ldr	r3, [pc, #380]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514e:	4a5e      	ldr	r2, [pc, #376]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 8005150:	f043 0304 	orr.w	r3, r3, #4
 8005154:	6713      	str	r3, [r2, #112]	@ 0x70
 8005156:	4b5c      	ldr	r3, [pc, #368]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515a:	4a5b      	ldr	r2, [pc, #364]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	6713      	str	r3, [r2, #112]	@ 0x70
 8005162:	e00b      	b.n	800517c <HAL_RCC_OscConfig+0x324>
 8005164:	4b58      	ldr	r3, [pc, #352]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005168:	4a57      	ldr	r2, [pc, #348]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005170:	4b55      	ldr	r3, [pc, #340]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005174:	4a54      	ldr	r2, [pc, #336]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 8005176:	f023 0304 	bic.w	r3, r3, #4
 800517a:	6713      	str	r3, [r2, #112]	@ 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d015      	beq.n	80051b0 <HAL_RCC_OscConfig+0x358>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8005184:	f7fc fc40 	bl	8001a08 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800518a:	e00a      	b.n	80051a2 <HAL_RCC_OscConfig+0x34a>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800518c:	f7fc fc3c 	bl	8001a08 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x34a>
					return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e0cb      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80051a2:	4b49      	ldr	r3, [pc, #292]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0ee      	beq.n	800518c <HAL_RCC_OscConfig+0x334>
 80051ae:	e014      	b.n	80051da <HAL_RCC_OscConfig+0x382>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80051b0:	f7fc fc2a 	bl	8001a08 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80051b6:	e00a      	b.n	80051ce <HAL_RCC_OscConfig+0x376>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80051b8:	f7fc fc26 	bl	8001a08 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x376>
					return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e0b5      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80051ce:	4b3e      	ldr	r3, [pc, #248]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1ee      	bne.n	80051b8 <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d105      	bne.n	80051ec <HAL_RCC_OscConfig+0x394>
			__HAL_RCC_PWR_CLK_DISABLE();
 80051e0:	4b39      	ldr	r3, [pc, #228]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	4a38      	ldr	r2, [pc, #224]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80051e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	6413      	str	r3, [r2, #64]	@ 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80a1 	beq.w	8005338 <HAL_RCC_OscConfig+0x4e0>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 80051f6:	4b34      	ldr	r3, [pc, #208]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d05c      	beq.n	80052bc <HAL_RCC_OscConfig+0x464>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d141      	bne.n	800528e <HAL_RCC_OscConfig+0x436>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800520a:	4b31      	ldr	r3, [pc, #196]	@ (80052d0 <HAL_RCC_OscConfig+0x478>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8005210:	f7fc fbfa 	bl	8001a08 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x3d2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8005218:	f7fc fbf6 	bl	8001a08 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x3d2>
						return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e087      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800522a:	4b27      	ldr	r3, [pc, #156]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69da      	ldr	r2, [r3, #28]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	019b      	lsls	r3, r3, #6
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	3b01      	subs	r3, #1
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	061b      	lsls	r3, r3, #24
 800525a:	491b      	ldr	r1, [pc, #108]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 800525c:	4313      	orrs	r3, r2
 800525e:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8005260:	4b1b      	ldr	r3, [pc, #108]	@ (80052d0 <HAL_RCC_OscConfig+0x478>)
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8005266:	f7fc fbcf 	bl	8001a08 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x428>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800526e:	f7fc fbcb 	bl	8001a08 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x428>
						return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e05c      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8005280:	4b11      	ldr	r3, [pc, #68]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCC_OscConfig+0x416>
 800528c:	e054      	b.n	8005338 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800528e:	4b10      	ldr	r3, [pc, #64]	@ (80052d0 <HAL_RCC_OscConfig+0x478>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8005294:	f7fc fbb8 	bl	8001a08 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x456>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800529c:	f7fc fbb4 	bl	8001a08 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x456>
						return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e045      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80052ae:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <HAL_RCC_OscConfig+0x470>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x444>
 80052ba:	e03d      	b.n	8005338 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d107      	bne.n	80052d4 <HAL_RCC_OscConfig+0x47c>
				return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e038      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
 80052c8:	40023800 	.word	0x40023800
 80052cc:	40007000 	.word	0x40007000
 80052d0:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 80052d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005344 <HAL_RCC_OscConfig+0x4ec>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d028      	beq.n	8005334 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d121      	bne.n	8005334 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d11a      	bne.n	8005334 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005304:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 800530a:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 800530c:	4293      	cmp	r3, r2
 800530e:	d111      	bne.n	8005334 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 800531e:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8005320:	429a      	cmp	r2, r3
 8005322:	d107      	bne.n	8005334 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 800532e:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
						{
					return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x4e2>
				}
			}
		}
	}
	return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800

08005348 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0cc      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 800535c:	4b68      	ldr	r3, [pc, #416]	@ (8005500 <HAL_RCC_ClockConfig+0x1b8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d90c      	bls.n	8005384 <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800536a:	4b65      	ldr	r3, [pc, #404]	@ (8005500 <HAL_RCC_ClockConfig+0x1b8>)
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8005372:	4b63      	ldr	r3, [pc, #396]	@ (8005500 <HAL_RCC_ClockConfig+0x1b8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0b8      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d020      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800539c:	4b59      	ldr	r3, [pc, #356]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	4a58      	ldr	r2, [pc, #352]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053a6:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b4:	4b53      	ldr	r3, [pc, #332]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a52      	ldr	r2, [pc, #328]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053be:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c0:	4b50      	ldr	r3, [pc, #320]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	494d      	ldr	r1, [pc, #308]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d044      	beq.n	8005468 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d107      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80053e6:	4b47      	ldr	r3, [pc, #284]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d119      	bne.n	8005426 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e07f      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d003      	beq.n	8005406 <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d107      	bne.n	8005416 <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8005406:	4b3f      	ldr	r3, [pc, #252]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e06f      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8005416:	4b3b      	ldr	r3, [pc, #236]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e067      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005426:	4b37      	ldr	r3, [pc, #220]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f023 0203 	bic.w	r2, r3, #3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	4934      	ldr	r1, [pc, #208]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	4313      	orrs	r3, r2
 8005436:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8005438:	f7fc fae6 	bl	8001a08 <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800543e:	e00a      	b.n	8005456 <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8005440:	f7fc fae2 	bl	8001a08 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544e:	4293      	cmp	r3, r2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e04f      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8005456:	4b2b      	ldr	r3, [pc, #172]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	429a      	cmp	r2, r3
 8005466:	d1eb      	bne.n	8005440 <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8005468:	4b25      	ldr	r3, [pc, #148]	@ (8005500 <HAL_RCC_ClockConfig+0x1b8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d20c      	bcs.n	8005490 <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8005476:	4b22      	ldr	r3, [pc, #136]	@ (8005500 <HAL_RCC_ClockConfig+0x1b8>)
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800547e:	4b20      	ldr	r3, [pc, #128]	@ (8005500 <HAL_RCC_ClockConfig+0x1b8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e032      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 800549c:	4b19      	ldr	r3, [pc, #100]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4916      	ldr	r1, [pc, #88]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80054ba:	4b12      	ldr	r3, [pc, #72]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	490e      	ldr	r1, [pc, #56]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80054ce:	f000 f821 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 80054d2:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005504 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	490a      	ldr	r1, [pc, #40]	@ (8005508 <HAL_RCC_ClockConfig+0x1c0>)
 80054e0:	5ccb      	ldrb	r3, [r1, r3]
 80054e2:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80054e6:	4a09      	ldr	r2, [pc, #36]	@ (800550c <HAL_RCC_ClockConfig+0x1c4>)
 80054e8:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 80054ea:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <HAL_RCC_ClockConfig+0x1c8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fc fa46 	bl	8001980 <HAL_InitTick>

	return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40023c00 	.word	0x40023c00
 8005504:	40023800 	.word	0x40023800
 8005508:	08009e1c 	.word	0x08009e1c
 800550c:	20000000 	.word	0x20000000
 8005510:	20000004 	.word	0x20000004

08005514 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8005514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005518:	b094      	sub	sp, #80	@ 0x50
 800551a:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t pllvco = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t pllp = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t sysclockfreq = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	64bb      	str	r3, [r7, #72]	@ 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 800552c:	4b79      	ldr	r3, [pc, #484]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b08      	cmp	r3, #8
 8005536:	d00d      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0x40>
 8005538:	2b08      	cmp	r3, #8
 800553a:	f200 80e1 	bhi.w	8005700 <HAL_RCC_GetSysClockFreq+0x1ec>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0x34>
 8005542:	2b04      	cmp	r3, #4
 8005544:	d003      	beq.n	800554e <HAL_RCC_GetSysClockFreq+0x3a>
 8005546:	e0db      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x1ec>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8005548:	4b73      	ldr	r3, [pc, #460]	@ (8005718 <HAL_RCC_GetSysClockFreq+0x204>)
 800554a:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 800554c:	e0db      	b.n	8005706 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 800554e:	4b73      	ldr	r3, [pc, #460]	@ (800571c <HAL_RCC_GetSysClockFreq+0x208>)
 8005550:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8005552:	e0d8      	b.n	8005706 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005554:	4b6f      	ldr	r3, [pc, #444]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800555c:	647b      	str	r3, [r7, #68]	@ 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 800555e:	4b6d      	ldr	r3, [pc, #436]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d063      	beq.n	8005632 <HAL_RCC_GetSysClockFreq+0x11e>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800556a:	4b6a      	ldr	r3, [pc, #424]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 800556c:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800556e:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8005570:	2200      	movs	r2, #0
 8005572:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005574:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557c:	633b      	str	r3, [r7, #48]	@ 0x30
 800557e:	2300      	movs	r3, #0
 8005580:	637b      	str	r3, [r7, #52]	@ 0x34
 8005582:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005586:	4622      	mov	r2, r4
 8005588:	462b      	mov	r3, r5
 800558a:	f04f 0000 	mov.w	r0, #0
 800558e:	f04f 0100 	mov.w	r1, #0
 8005592:	0159      	lsls	r1, r3, #5
 8005594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005598:	0150      	lsls	r0, r2, #5
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4621      	mov	r1, r4
 80055a0:	1a51      	subs	r1, r2, r1
 80055a2:	6139      	str	r1, [r7, #16]
 80055a4:	4629      	mov	r1, r5
 80055a6:	eb63 0301 	sbc.w	r3, r3, r1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055b8:	4659      	mov	r1, fp
 80055ba:	018b      	lsls	r3, r1, #6
 80055bc:	4651      	mov	r1, sl
 80055be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055c2:	4651      	mov	r1, sl
 80055c4:	018a      	lsls	r2, r1, #6
 80055c6:	4651      	mov	r1, sl
 80055c8:	ebb2 0801 	subs.w	r8, r2, r1
 80055cc:	4659      	mov	r1, fp
 80055ce:	eb63 0901 	sbc.w	r9, r3, r1
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055e6:	4690      	mov	r8, r2
 80055e8:	4699      	mov	r9, r3
 80055ea:	4623      	mov	r3, r4
 80055ec:	eb18 0303 	adds.w	r3, r8, r3
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	462b      	mov	r3, r5
 80055f4:	eb49 0303 	adc.w	r3, r9, r3
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005606:	4629      	mov	r1, r5
 8005608:	024b      	lsls	r3, r1, #9
 800560a:	4621      	mov	r1, r4
 800560c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005610:	4621      	mov	r1, r4
 8005612:	024a      	lsls	r2, r1, #9
 8005614:	4610      	mov	r0, r2
 8005616:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8005618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561a:	2200      	movs	r2, #0
 800561c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800561e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005624:	f7fb f9be 	bl	80009a4 <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 800562c:	4613      	mov	r3, r2
 800562e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005630:	e058      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0x1d0>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8005632:	4b38      	ldr	r3, [pc, #224]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 8005634:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8005636:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8005638:	2200      	movs	r2, #0
 800563a:	4618      	mov	r0, r3
 800563c:	4611      	mov	r1, r2
 800563e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	2300      	movs	r3, #0
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
 8005648:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	f04f 0000 	mov.w	r0, #0
 8005654:	f04f 0100 	mov.w	r1, #0
 8005658:	0159      	lsls	r1, r3, #5
 800565a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800565e:	0150      	lsls	r0, r2, #5
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4641      	mov	r1, r8
 8005666:	ebb2 0a01 	subs.w	sl, r2, r1
 800566a:	4649      	mov	r1, r9
 800566c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800567c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005680:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005684:	ebb2 040a 	subs.w	r4, r2, sl
 8005688:	eb63 050b 	sbc.w	r5, r3, fp
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	00eb      	lsls	r3, r5, #3
 8005696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800569a:	00e2      	lsls	r2, r4, #3
 800569c:	4614      	mov	r4, r2
 800569e:	461d      	mov	r5, r3
 80056a0:	4643      	mov	r3, r8
 80056a2:	18e3      	adds	r3, r4, r3
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	464b      	mov	r3, r9
 80056a8:	eb45 0303 	adc.w	r3, r5, r3
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056ba:	4629      	mov	r1, r5
 80056bc:	028b      	lsls	r3, r1, #10
 80056be:	4621      	mov	r1, r4
 80056c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056c4:	4621      	mov	r1, r4
 80056c6:	028a      	lsls	r2, r1, #10
 80056c8:	4610      	mov	r0, r2
 80056ca:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80056cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ce:	2200      	movs	r2, #0
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	61fa      	str	r2, [r7, #28]
 80056d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d8:	f7fb f964 	bl	80009a4 <__aeabi_uldivmod>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 80056e0:	4613      	mov	r3, r2
 80056e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80056e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	0c1b      	lsrs	r3, r3, #16
 80056ea:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 80056ee:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	643b      	str	r3, [r7, #64]	@ 0x40

		sysclockfreq = pllvco / pllp;
 80056f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 80056fe:	e002      	b.n	8005706 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 8005700:	4b05      	ldr	r3, [pc, #20]	@ (8005718 <HAL_RCC_GetSysClockFreq+0x204>)
 8005702:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8005704:	bf00      	nop
	}
	}
	return sysclockfreq;
 8005706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005708:	4618      	mov	r0, r3
 800570a:	3750      	adds	r7, #80	@ 0x50
 800570c:	46bd      	mov	sp, r7
 800570e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005712:	bf00      	nop
 8005714:	40023800 	.word	0x40023800
 8005718:	00f42400 	.word	0x00f42400
 800571c:	007a1200 	.word	0x007a1200

08005720 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8005724:	4b03      	ldr	r3, [pc, #12]	@ (8005734 <HAL_RCC_GetHCLKFreq+0x14>)
 8005726:	681b      	ldr	r3, [r3, #0]
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000000 	.word	0x20000000

08005738 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 800573c:	f7ff fff0 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 8005740:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005742:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	0a9b      	lsrs	r3, r3, #10
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	4903      	ldr	r1, [pc, #12]	@ (800575c <HAL_RCC_GetPCLK1Freq+0x24>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40023800 	.word	0x40023800
 800575c:	08009e2c 	.word	0x08009e2c

08005760 <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg1 = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x28>
			== RCC_PERIPHCLK_I2S)
			|| (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d035      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8005788:	4b62      	ldr	r3, [pc, #392]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 800578e:	f7fc f93b 	bl	8001a08 <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8005794:	e008      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8005796:	f7fc f937 	bl	8001a08 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e0b0      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 80057a8:	4b5b      	ldr	r3, [pc, #364]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f0      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	019a      	lsls	r2, r3, #6
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	071b      	lsls	r3, r3, #28
 80057c0:	4955      	ldr	r1, [pc, #340]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
				PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 80057c8:	4b52      	ldr	r3, [pc, #328]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 80057ce:	f7fc f91b 	bl	8001a08 <HAL_GetTick>
 80057d2:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 80057d4:	e008      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 80057d6:	f7fc f917 	bl	8001a08 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e090      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 80057e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8083 	beq.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
			== (RCC_PERIPHCLK_RTC)) {
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	4b44      	ldr	r3, [pc, #272]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	4a43      	ldr	r2, [pc, #268]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800580c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005810:	6413      	str	r3, [r2, #64]	@ 0x40
 8005812:	4b41      	ldr	r3, [pc, #260]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 800581e:	4b3f      	ldr	r3, [pc, #252]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a3e      	ldr	r2, [pc, #248]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005828:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 800582a:	f7fc f8ed 	bl	8001a08 <HAL_GetTick>
 800582e:	6178      	str	r0, [r7, #20]

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8005830:	e008      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xe4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8005832:	f7fc f8e9 	bl	8001a08 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xe4>
				return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e062      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8005844:	4b35      	ldr	r3, [pc, #212]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xd2>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005850:	4b31      	ldr	r3, [pc, #196]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005854:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005858:	613b      	str	r3, [r7, #16]
		if ((tmpreg1 != 0x00000000U)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02f      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
				&& ((tmpreg1)
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f403 7340 	and.w	r3, r3, #768	@ 0x300
				&& ((tmpreg1)
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	429a      	cmp	r2, r3
 800586c:	d028      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800586e:	4b2a      	ldr	r3, [pc, #168]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005876:	613b      	str	r3, [r7, #16]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8005878:	4b29      	ldr	r3, [pc, #164]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 800587e:	4b28      	ldr	r3, [pc, #160]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 8005884:	4a24      	ldr	r2, [pc, #144]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6713      	str	r3, [r2, #112]	@ 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 800588a:	4b23      	ldr	r3, [pc, #140]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b01      	cmp	r3, #1
 8005894:	d114      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
				/* Get tick */
				tickstart = HAL_GetTick();
 8005896:	f7fc f8b7 	bl	8001a08 <HAL_GetTick>
 800589a:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800589c:	e00a      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 800589e:	f7fc f8b3 	bl	8001a08 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
						return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e02a      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80058b4:	4b18      	ldr	r3, [pc, #96]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ee      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x13e>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058cc:	d10d      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80058ce:	4b12      	ldr	r3, [pc, #72]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80058de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e2:	490d      	ldr	r1, [pc, #52]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	608b      	str	r3, [r1, #8]
 80058e8:	e005      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80058ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80058f4:	6093      	str	r3, [r2, #8]
 80058f6:	4b08      	ldr	r3, [pc, #32]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005902:	4905      	ldr	r1, [pc, #20]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005904:	4313      	orrs	r3, r2
 8005906:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	42470068 	.word	0x42470068
 8005918:	40023800 	.word	0x40023800
 800591c:	40007000 	.word	0x40007000
 8005920:	42470e40 	.word	0x42470e40

08005924 <HAL_RCCEx_GetPeriphCLKFreq>:
 * @param  PeriphClk Peripheral clock identifier
 *         This parameter can be one of the following values:
 *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
 * @retval Frequency in KHz
 */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk) {
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	/* This variable used to store the I2S clock frequency (value in Hz) */
	uint32_t frequency = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
	/* This variable used to store the VCO Input (value in Hz) */
	uint32_t vcoinput = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
	uint32_t srcclk = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
	/* This variable used to store the VCO Output (value in Hz) */
	uint32_t vcooutput = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60bb      	str	r3, [r7, #8]
	switch (PeriphClk) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d13f      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
	case RCC_PERIPHCLK_I2S: {
		/* Get the current I2S source */
		srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005942:	4b24      	ldr	r3, [pc, #144]	@ (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800594a:	60fb      	str	r3, [r7, #12]
		switch (srcclk) {
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d006      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005958:	d12f      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
		/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
		case RCC_I2SCLKSOURCE_EXT: {
			/* Set the I2S clock to the external clock  value */
			frequency = EXTERNAL_CLOCK_VALUE;
 800595a:	4b1f      	ldr	r3, [pc, #124]	@ (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800595c:	617b      	str	r3, [r7, #20]
			break;
 800595e:	e02f      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
			/* Configure the PLLI2S division factor */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE) {
 8005960:	4b1c      	ldr	r3, [pc, #112]	@ (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800596c:	d108      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSE_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800596e:	4b19      	ldr	r3, [pc, #100]	@ (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSE_VALUE
 8005976:	4a19      	ldr	r2, [pc, #100]	@ (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	e007      	b.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
			} else {
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSI_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005980:	4b14      	ldr	r3, [pc, #80]	@ (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSI_VALUE
 8005988:	4a15      	ldr	r2, [pc, #84]	@ (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	613b      	str	r3, [r7, #16]
			}
#endif /* STM32F411xE */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			vcooutput = (uint32_t) (vcoinput
					* (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)
 8005990:	4b10      	ldr	r3, [pc, #64]	@ (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005996:	099b      	lsrs	r3, r3, #6
							& (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005998:	f3c3 0208 	ubfx	r2, r3, #0, #9
			vcooutput = (uint32_t) (vcoinput
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	60bb      	str	r3, [r7, #8]
			/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
			frequency = (uint32_t) (vcooutput
					/ (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U)
 80059a4:	4b0b      	ldr	r3, [pc, #44]	@ (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059aa:	0f1b      	lsrs	r3, r3, #28
							& (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80059ac:	f003 0307 	and.w	r3, r3, #7
			frequency = (uint32_t) (vcooutput
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b6:	617b      	str	r3, [r7, #20]
			break;
 80059b8:	e002      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
		}
			/* Clock not enabled for I2S*/
		default: {
			frequency = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
			break;
 80059be:	bf00      	nop
		}
		}
		break;
 80059c0:	e000      	b.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
	}
	default: {
		break;
 80059c2:	bf00      	nop
	}
	}
	return frequency;
 80059c4:	697b      	ldr	r3, [r7, #20]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800
 80059d8:	00bb8000 	.word	0x00bb8000
 80059dc:	007a1200 	.word	0x007a1200
 80059e0:	00f42400 	.word	0x00f42400

080059e4 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e07b      	b.n	8005aee <HAL_SPI_Init+0x10a>
	assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d108      	bne.n	8005a10 <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a06:	d009      	beq.n	8005a1c <HAL_SPI_Init+0x38>
			assert_param(
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	61da      	str	r2, [r3, #28]
 8005a0e:	e005      	b.n	8005a1c <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fb fe6a 	bl	8001710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a52:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa0:	ea42 0103 	orr.w	r1, r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]
			((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) | (hspi->Init.Direction & (SPI_CR1_RXONLY | SPI_CR1_BIDIMODE)) | (hspi->Init.DataSize & SPI_CR1_DFF) | (hspi->Init.CLKPolarity & SPI_CR1_CPOL) | (hspi->Init.CLKPhase & SPI_CR1_CPHA) | (hspi->Init.NSS & SPI_CR1_SSM) | (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) | (hspi->Init.FirstBit & SPI_CR1_LSBFIRST) | (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management, TI Mode */
	WRITE_REG(hspi->Instance->CR2,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	0c1b      	lsrs	r3, r3, #16
 8005aba:	f003 0104 	and.w	r1, r3, #4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	f003 0210 	and.w	r2, r3, #16
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005adc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->State = HAL_SPI_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e041      	b.n	8005b8c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fb fe3f 	bl	80017a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3304      	adds	r3, #4
 8005b32:	4619      	mov	r1, r3
 8005b34:	4610      	mov	r0, r2
 8005b36:	f000 f95d 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d001      	beq.n	8005bac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e046      	b.n	8005c3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a23      	ldr	r2, [pc, #140]	@ (8005c48 <HAL_TIM_Base_Start+0xb4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d022      	beq.n	8005c04 <HAL_TIM_Base_Start+0x70>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc6:	d01d      	beq.n	8005c04 <HAL_TIM_Base_Start+0x70>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8005c4c <HAL_TIM_Base_Start+0xb8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d018      	beq.n	8005c04 <HAL_TIM_Base_Start+0x70>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c50 <HAL_TIM_Base_Start+0xbc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <HAL_TIM_Base_Start+0x70>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c54 <HAL_TIM_Base_Start+0xc0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00e      	beq.n	8005c04 <HAL_TIM_Base_Start+0x70>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <HAL_TIM_Base_Start+0xc4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d009      	beq.n	8005c04 <HAL_TIM_Base_Start+0x70>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a19      	ldr	r2, [pc, #100]	@ (8005c5c <HAL_TIM_Base_Start+0xc8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <HAL_TIM_Base_Start+0x70>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a18      	ldr	r2, [pc, #96]	@ (8005c60 <HAL_TIM_Base_Start+0xcc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d111      	bne.n	8005c28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b06      	cmp	r3, #6
 8005c14:	d010      	beq.n	8005c38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0201 	orr.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c26:	e007      	b.n	8005c38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	40010400 	.word	0x40010400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	40001800 	.word	0x40001800

08005c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e0b4      	b.n	8005dea <HAL_TIM_ConfigClockSource+0x186>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb8:	d03e      	beq.n	8005d38 <HAL_TIM_ConfigClockSource+0xd4>
 8005cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cbe:	f200 8087 	bhi.w	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc6:	f000 8086 	beq.w	8005dd6 <HAL_TIM_ConfigClockSource+0x172>
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cce:	d87f      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b70      	cmp	r3, #112	@ 0x70
 8005cd2:	d01a      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0xa6>
 8005cd4:	2b70      	cmp	r3, #112	@ 0x70
 8005cd6:	d87b      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b60      	cmp	r3, #96	@ 0x60
 8005cda:	d050      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0x11a>
 8005cdc:	2b60      	cmp	r3, #96	@ 0x60
 8005cde:	d877      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b50      	cmp	r3, #80	@ 0x50
 8005ce2:	d03c      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0xfa>
 8005ce4:	2b50      	cmp	r3, #80	@ 0x50
 8005ce6:	d873      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce8:	2b40      	cmp	r3, #64	@ 0x40
 8005cea:	d058      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x13a>
 8005cec:	2b40      	cmp	r3, #64	@ 0x40
 8005cee:	d86f      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf0:	2b30      	cmp	r3, #48	@ 0x30
 8005cf2:	d064      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x15a>
 8005cf4:	2b30      	cmp	r3, #48	@ 0x30
 8005cf6:	d86b      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d060      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x15a>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d867      	bhi.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d05c      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x15a>
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d05a      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x15a>
 8005d08:	e062      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d1a:	f000 f991 	bl	8006040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	609a      	str	r2, [r3, #8]
      break;
 8005d36:	e04f      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d48:	f000 f97a 	bl	8006040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d5a:	609a      	str	r2, [r3, #8]
      break;
 8005d5c:	e03c      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f000 f8ee 	bl	8005f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2150      	movs	r1, #80	@ 0x50
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 f947 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005d7c:	e02c      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 f90d 	bl	8005faa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2160      	movs	r1, #96	@ 0x60
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f937 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e01c      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005daa:	461a      	mov	r2, r3
 8005dac:	f000 f8ce 	bl	8005f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2140      	movs	r1, #64	@ 0x40
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 f927 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005dbc:	e00c      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f000 f91e 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005dce:	e003      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	e000      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a46      	ldr	r2, [pc, #280]	@ (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e12:	d00f      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a43      	ldr	r2, [pc, #268]	@ (8005f24 <TIM_Base_SetConfig+0x130>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00b      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a42      	ldr	r2, [pc, #264]	@ (8005f28 <TIM_Base_SetConfig+0x134>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a41      	ldr	r2, [pc, #260]	@ (8005f2c <TIM_Base_SetConfig+0x138>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a40      	ldr	r2, [pc, #256]	@ (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d108      	bne.n	8005e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a35      	ldr	r2, [pc, #212]	@ (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d02b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e54:	d027      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a32      	ldr	r2, [pc, #200]	@ (8005f24 <TIM_Base_SetConfig+0x130>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d023      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a31      	ldr	r2, [pc, #196]	@ (8005f28 <TIM_Base_SetConfig+0x134>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01f      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a30      	ldr	r2, [pc, #192]	@ (8005f2c <TIM_Base_SetConfig+0x138>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2f      	ldr	r2, [pc, #188]	@ (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d017      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2e      	ldr	r2, [pc, #184]	@ (8005f34 <TIM_Base_SetConfig+0x140>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a2d      	ldr	r2, [pc, #180]	@ (8005f38 <TIM_Base_SetConfig+0x144>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00f      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2c      	ldr	r2, [pc, #176]	@ (8005f3c <TIM_Base_SetConfig+0x148>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a2b      	ldr	r2, [pc, #172]	@ (8005f40 <TIM_Base_SetConfig+0x14c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d007      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2a      	ldr	r2, [pc, #168]	@ (8005f44 <TIM_Base_SetConfig+0x150>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d003      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a29      	ldr	r2, [pc, #164]	@ (8005f48 <TIM_Base_SetConfig+0x154>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d108      	bne.n	8005eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a10      	ldr	r2, [pc, #64]	@ (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a12      	ldr	r2, [pc, #72]	@ (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d103      	bne.n	8005ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d105      	bne.n	8005f12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f023 0201 	bic.w	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	611a      	str	r2, [r3, #16]
  }
}
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800
 8005f2c:	40000c00 	.word	0x40000c00
 8005f30:	40010400 	.word	0x40010400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40014400 	.word	0x40014400
 8005f3c:	40014800 	.word	0x40014800
 8005f40:	40001800 	.word	0x40001800
 8005f44:	40001c00 	.word	0x40001c00
 8005f48:	40002000 	.word	0x40002000

08005f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 030a 	bic.w	r3, r3, #10
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b087      	sub	sp, #28
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f023 0210 	bic.w	r2, r3, #16
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fe6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	f043 0307 	orr.w	r3, r3, #7
 800602c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800605a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	021a      	lsls	r2, r3, #8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	431a      	orrs	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006094:	2302      	movs	r3, #2
 8006096:	e05a      	b.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a21      	ldr	r2, [pc, #132]	@ (800615c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d022      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e4:	d01d      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a18      	ldr	r2, [pc, #96]	@ (800616c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a17      	ldr	r2, [pc, #92]	@ (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a15      	ldr	r2, [pc, #84]	@ (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d10c      	bne.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	4313      	orrs	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40010000 	.word	0x40010000
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40010400 	.word	0x40010400
 8006170:	40014000 	.word	0x40014000
 8006174:	40001800 	.word	0x40001800

08006178 <USB_CoreInit>:
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 8006178:	b084      	sub	sp, #16
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	f107 001c 	add.w	r0, r7, #28
 8006186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret;
	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 800618a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800618e:	2b01      	cmp	r3, #1
 8006190:	d123      	bne.n	80061da <USB_CoreInit+0x62>
		USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006196:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Init The ULPI Interface */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80061a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	60d3      	str	r3, [r2, #12]
				| USB_OTG_GUSBCFG_PHYSEL);

		/* Select vbus source */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60da      	str	r2, [r3, #12]
				| USB_OTG_GUSBCFG_ULPIEVBUSI);
		if (cfg.use_external_vbus == 1U) {
 80061ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d105      	bne.n	80061ce <USB_CoreInit+0x56>
			USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60da      	str	r2, [r3, #12]
		}

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9dc 	bl	800658c <USB_CoreReset>
 80061d4:	4603      	mov	r3, r0
 80061d6:	73fb      	strb	r3, [r7, #15]
 80061d8:	e01b      	b.n	8006212 <USB_CoreInit+0x9a>
	} else /* FS interface (embedded Phy) */
	{
		/* Select FS Embedded PHY */
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	60da      	str	r2, [r3, #12]

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f9d0 	bl	800658c <USB_CoreReset>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]

		if (cfg.battery_charging_enable == 0U) {
 80061f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <USB_CoreInit+0x8e>
			/* Activate the USB Transceiver */
			USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
 8006204:	e005      	b.n	8006212 <USB_CoreInit+0x9a>
		} else {
			/* Deactivate the USB Transceiver */
			USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (cfg.dma_enable == 1U) {
 8006212:	7fbb      	ldrb	r3, [r7, #30]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d10b      	bne.n	8006230 <USB_CoreInit+0xb8>
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f043 0206 	orr.w	r2, r3, #6
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	609a      	str	r2, [r3, #8]
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f043 0220 	orr.w	r2, r3, #32
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	609a      	str	r2, [r3, #8]
	}

	return ret;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800623c:	b004      	add	sp, #16
 800623e:	4770      	bx	lr

08006240 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f043 0201 	orr.w	r2, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f023 0201 	bic.w	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_SetCurrentMode>:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_ModeTypeDef mode) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
	uint32_t ms = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]

	USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	60da      	str	r2, [r3, #12]

	if (mode == USB_HOST_MODE) {
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d115      	bne.n	80062d2 <USB_SetCurrentMode+0x4e>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 80062b2:	200a      	movs	r0, #10
 80062b4:	f7fb fbb4 	bl	8001a20 <HAL_Delay>
			ms += 10U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	330a      	adds	r3, #10
 80062bc:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_HOST_MODE)
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f956 	bl	8006570 <USB_GetMode>
 80062c4:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d01e      	beq.n	8006308 <USB_SetCurrentMode+0x84>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80062ce:	d9f0      	bls.n	80062b2 <USB_SetCurrentMode+0x2e>
 80062d0:	e01a      	b.n	8006308 <USB_SetCurrentMode+0x84>
	} else if (mode == USB_DEVICE_MODE) {
 80062d2:	78fb      	ldrb	r3, [r7, #3]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d115      	bne.n	8006304 <USB_SetCurrentMode+0x80>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 80062e4:	200a      	movs	r0, #10
 80062e6:	f7fb fb9b 	bl	8001a20 <HAL_Delay>
			ms += 10U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	330a      	adds	r3, #10
 80062ee:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_DEVICE_MODE)
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f93d 	bl	8006570 <USB_GetMode>
 80062f6:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <USB_SetCurrentMode+0x84>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8006300:	d9f0      	bls.n	80062e4 <USB_SetCurrentMode+0x60>
 8006302:	e001      	b.n	8006308 <USB_SetCurrentMode+0x84>
	} else {
		return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e005      	b.n	8006314 <USB_SetCurrentMode+0x90>
	}

	if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS) {
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2bc8      	cmp	r3, #200	@ 0xc8
 800630c:	d101      	bne.n	8006312 <USB_SetCurrentMode+0x8e>
		return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <USB_SetCurrentMode+0x90>
	}

	return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USB_FlushTxFifo>:
 * @param  num  FIFO number
 *         This parameter can be a value from 1 to 15
 15 means Flush all Tx FIFOs
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num) {
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3301      	adds	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006336:	d901      	bls.n	800633c <USB_FlushTxFifo+0x20>
			return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e01b      	b.n	8006374 <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	daf2      	bge.n	800632a <USB_FlushTxFifo+0xe>

	/* Flush TX Fifo */
	count = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	019b      	lsls	r3, r3, #6
 800634c:	f043 0220 	orr.w	r2, r3, #32
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3301      	adds	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006360:	d901      	bls.n	8006366 <USB_FlushTxFifo+0x4a>
			return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e006      	b.n	8006374 <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0320 	and.w	r3, r3, #32
			== USB_OTG_GRSTCTL_TXFFLSH);
 800636e:	2b20      	cmp	r3, #32
 8006370:	d0f0      	beq.n	8006354 <USB_FlushTxFifo+0x38>

	return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx) {
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006398:	d901      	bls.n	800639e <USB_FlushRxFifo+0x1e>
			return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e018      	b.n	80063d0 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	daf2      	bge.n	800638c <USB_FlushRxFifo+0xc>

	/* Flush RX Fifo */
	count = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2210      	movs	r2, #16
 80063ae:	611a      	str	r2, [r3, #16]

	do {
		count++;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063bc:	d901      	bls.n	80063c2 <USB_FlushRxFifo+0x42>
			return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e006      	b.n	80063d0 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0310 	and.w	r3, r3, #16
			== USB_OTG_GRSTCTL_RXFFLSH);
 80063ca:	2b10      	cmp	r3, #16
 80063cc:	d0f0      	beq.n	80063b0 <USB_FlushRxFifo+0x30>

	return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_WritePacket>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 80063dc:	b480      	push	{r7}
 80063de:	b089      	sub	sp, #36	@ 0x24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	4611      	mov	r1, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	460b      	mov	r3, r1
 80063ec:	71fb      	strb	r3, [r7, #7]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80bb      	strh	r3, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	617b      	str	r3, [r7, #20]
	uint8_t *pSrc = src;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	61fb      	str	r3, [r7, #28]
	uint32_t count32b;
	uint32_t i;

	if (dma == 0U) {
 80063fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d123      	bne.n	800644a <USB_WritePacket+0x6e>
		count32b = ((uint32_t) len + 3U) / 4U;
 8006402:	88bb      	ldrh	r3, [r7, #4]
 8006404:	3303      	adds	r3, #3
 8006406:	089b      	lsrs	r3, r3, #2
 8006408:	613b      	str	r3, [r7, #16]
		for (i = 0U; i < count32b; i++) {
 800640a:	2300      	movs	r3, #0
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e018      	b.n	8006442 <USB_WritePacket+0x66>
			USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	031a      	lsls	r2, r3, #12
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	4413      	add	r3, r2
 8006418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800641c:	461a      	mov	r2, r3
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6013      	str	r3, [r2, #0]
			pSrc++;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	3301      	adds	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
			pSrc++;
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	3301      	adds	r3, #1
 800642e:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	3301      	adds	r3, #1
 8006434:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	3301      	adds	r3, #1
 800643a:	61fb      	str	r3, [r7, #28]
		for (i = 0U; i < count32b; i++) {
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	3301      	adds	r3, #1
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	429a      	cmp	r2, r3
 8006448:	d3e2      	bcc.n	8006410 <USB_WritePacket+0x34>
		}
	}

	return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3724      	adds	r7, #36	@ 0x24
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_ReadPacket>:
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void* USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest,
		uint16_t len) {
 8006458:	b480      	push	{r7}
 800645a:	b08b      	sub	sp, #44	@ 0x2c
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	61bb      	str	r3, [r7, #24]
	uint8_t *pDest = dest;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t pData;
	uint32_t i;
	uint32_t count32b = (uint32_t) len >> 2U;
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	089b      	lsrs	r3, r3, #2
 8006472:	b29b      	uxth	r3, r3
 8006474:	617b      	str	r3, [r7, #20]
	uint16_t remaining_bytes = len % 4U;
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	83fb      	strh	r3, [r7, #30]

	for (i = 0U; i < count32b; i++) {
 800647e:	2300      	movs	r3, #0
 8006480:	623b      	str	r3, [r7, #32]
 8006482:	e014      	b.n	80064ae <USB_ReadPacket+0x56>
		__UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	601a      	str	r2, [r3, #0]
		pDest++;
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	3301      	adds	r3, #1
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	3301      	adds	r3, #1
 800649a:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	3301      	adds	r3, #1
 80064a0:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	3301      	adds	r3, #1
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0U; i < count32b; i++) {
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	3301      	adds	r3, #1
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	6a3a      	ldr	r2, [r7, #32]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d3e6      	bcc.n	8006484 <USB_ReadPacket+0x2c>
	}

	/* When Number of data is not word aligned, read the remaining byte */
	if (remaining_bytes != 0U) {
 80064b6:	8bfb      	ldrh	r3, [r7, #30]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01e      	beq.n	80064fa <USB_ReadPacket+0xa2>
		i = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	623b      	str	r3, [r7, #32]
		__UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c6:	461a      	mov	r2, r3
 80064c8:	f107 0310 	add.w	r3, r7, #16
 80064cc:	6812      	ldr	r2, [r2, #0]
 80064ce:	601a      	str	r2, [r3, #0]

		do {
			*(uint8_t*) pDest = (uint8_t) (pData >> (8U * (uint8_t) (i)));
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	fa22 f303 	lsr.w	r3, r2, r3
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	701a      	strb	r2, [r3, #0]
			i++;
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	3301      	adds	r3, #1
 80064e6:	623b      	str	r3, [r7, #32]
			pDest++;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ea:	3301      	adds	r3, #1
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
			remaining_bytes--;
 80064ee:	8bfb      	ldrh	r3, [r7, #30]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	83fb      	strh	r3, [r7, #30]
		} while (remaining_bytes != 0U);
 80064f4:	8bfb      	ldrh	r3, [r7, #30]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1ea      	bne.n	80064d0 <USB_ReadPacket+0x78>
	}

	return ((void*) pDest);
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	372c      	adds	r7, #44	@ 0x2c
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval USB Global Interrupt status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx) {
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;

	tmpreg = USBx->GINTSTS;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	60fb      	str	r3, [r7, #12]
	tmpreg &= USBx->GINTMSK;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4013      	ands	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]

	return tmpreg;
 8006520:	68fb      	ldr	r3, [r7, #12]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USB_ReadChInterrupts>:
 * @brief  USB_ReadChInterrupts: return USB channel interrupt status
 * @param  USBx  Selected device
 * @param  chnum Channel number
 * @retval USB Channel Interrupt status
 */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum) {
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_HC(chnum)->HCINT;
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	4013      	ands	r3, r2
 8006560:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 8006562:	68bb      	ldr	r3, [r7, #8]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx) {
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	return ((USBx->GINTSTS) & 0x1U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0301 	and.w	r3, r3, #1
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx) {
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3301      	adds	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065a4:	d901      	bls.n	80065aa <USB_CoreReset+0x1e>
			return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e01b      	b.n	80065e2 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	daf2      	bge.n	8006598 <USB_CoreReset+0xc>

	/* Core Soft Reset */
	count = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f043 0201 	orr.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	611a      	str	r2, [r3, #16]

	do {
		count++;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065ce:	d901      	bls.n	80065d4 <USB_CoreReset+0x48>
			return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d0f0      	beq.n	80065c2 <USB_CoreReset+0x36>

	return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <USB_HostInit>:
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 80065f0:	b084      	sub	sp, #16
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	60fb      	str	r3, [r7, #12]
	uint32_t i;

	/* Restart the Phy Clock */
	USBx_PCGCCTL = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006610:	461a      	mov	r2, r3
 8006612:	2300      	movs	r3, #0
 8006614:	6013      	str	r3, [r2, #0]
#else
	/*
	 * Disable HW VBUS sensing. VBUS is internally considered to be always
	 * at VBUS-Valid level (5V).
	 */
	USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	639a      	str	r2, [r3, #56]	@ 0x38
	USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38
	USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

	if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U) {
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d119      	bne.n	800667a <USB_HostInit+0x8a>
		if (cfg.speed == USBH_FSLS_SPEED) {
 8006646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800664a:	2b01      	cmp	r3, #1
 800664c:	d10a      	bne.n	8006664 <USB_HostInit+0x74>
			/* Force Device Enumeration to FS/LS mode only */
			USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800665c:	f043 0304 	orr.w	r3, r3, #4
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	e014      	b.n	800668e <USB_HostInit+0x9e>
		} else {
			/* Set default Max speed support */
			USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006672:	f023 0304 	bic.w	r3, r3, #4
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	e009      	b.n	800668e <USB_HostInit+0x9e>
		}
	} else {
		/* Set default Max speed support */
		USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006688:	f023 0304 	bic.w	r3, r3, #4
 800668c:	6013      	str	r3, [r2, #0]
	}

	/* Make sure the FIFOs are flushed. */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800668e:	2110      	movs	r1, #16
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff fe43 	bl	800631c <USB_FlushTxFifo>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <USB_HostInit+0xb0>
	{
		ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	75fb      	strb	r3, [r7, #23]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff fe6d 	bl	8006380 <USB_FlushRxFifo>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <USB_HostInit+0xc0>
		ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]
	}

	/* Clear all pending HC Interrupts */
	for (i = 0U; i < cfg.Host_channels; i++) {
 80066b0:	2300      	movs	r3, #0
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	e015      	b.n	80066e2 <USB_HostInit+0xf2>
		USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c2:	461a      	mov	r2, r3
 80066c4:	f04f 33ff 	mov.w	r3, #4294967295
 80066c8:	6093      	str	r3, [r2, #8]
		USBx_HC(i)->HCINTMSK = 0U;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d6:	461a      	mov	r2, r3
 80066d8:	2300      	movs	r3, #0
 80066da:	60d3      	str	r3, [r2, #12]
	for (i = 0U; i < cfg.Host_channels; i++) {
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	3301      	adds	r3, #1
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80066e6:	461a      	mov	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d3e3      	bcc.n	80066b6 <USB_HostInit+0xc6>
	}

	/* Disable all interrupts. */
	USBx->GINTMSK = 0U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	619a      	str	r2, [r3, #24]

	/* Clear any pending interrupts */
	USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f04f 32ff 	mov.w	r2, #4294967295
 80066fa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
	if (USBx == USB_OTG_HS) {
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a18      	ldr	r2, [pc, #96]	@ (8006760 <USB_HostInit+0x170>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d10b      	bne.n	800671c <USB_HostInit+0x12c>
		/* set Rx FIFO size */
		USBx->GRXFSIZ = 0x200U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800670a:	625a      	str	r2, [r3, #36]	@ 0x24
		USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t) (((0x100U << 16) & USB_OTG_NPTXFD)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a15      	ldr	r2, [pc, #84]	@ (8006764 <USB_HostInit+0x174>)
 8006710:	629a      	str	r2, [r3, #40]	@ 0x28
				| 0x200U);
		USBx->HPTXFSIZ = (uint32_t) (((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a14      	ldr	r2, [pc, #80]	@ (8006768 <USB_HostInit+0x178>)
 8006716:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800671a:	e009      	b.n	8006730 <USB_HostInit+0x140>
				| 0x300U);
	} else
#endif /* defined (USB_OTG_HS) */
	{
		/* set Rx FIFO size */
		USBx->GRXFSIZ = 0x80U;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2280      	movs	r2, #128	@ 0x80
 8006720:	625a      	str	r2, [r3, #36]	@ 0x24
		USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t) (((0x60U << 16) & USB_OTG_NPTXFD)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a11      	ldr	r2, [pc, #68]	@ (800676c <USB_HostInit+0x17c>)
 8006726:	629a      	str	r2, [r3, #40]	@ 0x28
				| 0x80U);
		USBx->HPTXFSIZ = (uint32_t) (((0x40U << 16) & USB_OTG_HPTXFSIZ_PTXFD)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a11      	ldr	r2, [pc, #68]	@ (8006770 <USB_HostInit+0x180>)
 800672c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
				| 0xE0U);
	}

	/* Enable the common interrupts */
	if (cfg.dma_enable == 0U) {
 8006730:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <USB_HostInit+0x154>
		USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f043 0210 	orr.w	r2, r3, #16
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	619a      	str	r2, [r3, #24]
	}

	/* Enable interrupts matching to the Host mode ONLY */
	USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM | USB_OTG_GINTMSK_HCIM |
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	4b0a      	ldr	r3, [pc, #40]	@ (8006774 <USB_HostInit+0x184>)
 800674a:	4313      	orrs	r3, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6193      	str	r3, [r2, #24]
	USB_OTG_GINTMSK_SOFM | USB_OTG_GINTSTS_DISCINT |
	USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

	return ret;
 8006750:	7dfb      	ldrb	r3, [r7, #23]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800675c:	b004      	add	sp, #16
 800675e:	4770      	bx	lr
 8006760:	40040000 	.word	0x40040000
 8006764:	01000200 	.word	0x01000200
 8006768:	00e00300 	.word	0x00e00300
 800676c:	00600080 	.word	0x00600080
 8006770:	004000e0 	.word	0x004000e0
 8006774:	a3200008 	.word	0xa3200008

08006778 <USB_InitFSLSPClkSel>:
 *           HCFG_48_MHZ : Full Speed 48 MHz Clock
 *           HCFG_6_MHZ : Low Speed 6 MHz Clock
 * @retval HAL status
 */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t freq) {
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60fb      	str	r3, [r7, #12]

	USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	6013      	str	r3, [r2, #0]
	USBx_HOST->HCFG |= (uint32_t) freq & USB_OTG_HCFG_FSLSPCS;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	68f9      	ldr	r1, [r7, #12]
 80067ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80067b0:	4313      	orrs	r3, r2
 80067b2:	600b      	str	r3, [r1, #0]

	if (freq == HCFG_48_MHZ) {
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d107      	bne.n	80067ca <USB_InitFSLSPClkSel+0x52>
		USBx_HOST->HFIR = HFIR_48_MHZ;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067c0:	461a      	mov	r2, r3
 80067c2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80067c6:	6053      	str	r3, [r2, #4]
 80067c8:	e00c      	b.n	80067e4 <USB_InitFSLSPClkSel+0x6c>
	} else if (freq == HCFG_6_MHZ) {
 80067ca:	78fb      	ldrb	r3, [r7, #3]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d107      	bne.n	80067e0 <USB_InitFSLSPClkSel+0x68>
		USBx_HOST->HFIR = HFIR_6_MHZ;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067d6:	461a      	mov	r2, r3
 80067d8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80067dc:	6053      	str	r3, [r2, #4]
 80067de:	e001      	b.n	80067e4 <USB_InitFSLSPClkSel+0x6c>
	} else {
		return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <USB_InitFSLSPClkSel+0x6e>
	}

	return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USB_ResetPort>:
 * @param  USBx  Selected device
 * @retval HAL status
 * @note (1)The application must wait at least 10 ms
 *   before clearing the reset bit.
 */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx) {
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60fb      	str	r3, [r7, #12]

	__IO uint32_t hprt0 = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60bb      	str	r3, [r7, #8]

	hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006812:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800681c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006820:	6013      	str	r3, [r2, #0]
	HAL_Delay(100U); /* See Note #1 */
 8006822:	2064      	movs	r0, #100	@ 0x64
 8006824:	f7fb f8fc 	bl	8001a20 <HAL_Delay>
	USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006834:	6013      	str	r3, [r2, #0]
	HAL_Delay(10U);
 8006836:	200a      	movs	r0, #10
 8006838:	f7fb f8f2 	bl	8001a20 <HAL_Delay>

	return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USB_DriveVbus>:
 *           0 : Deactivate VBUS
 *           1 : Activate VBUS
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t state) {
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	60fb      	str	r3, [r7, #12]
	__IO uint32_t hprt0 = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60bb      	str	r3, [r7, #8]

	hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800686a:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U)) {
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <USB_DriveVbus+0x44>
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d106      	bne.n	800688a <USB_DriveVbus+0x44>
		USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006884:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006888:	6013      	str	r3, [r2, #0]
	}
	if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U)) {
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006894:	d109      	bne.n	80068aa <USB_DriveVbus+0x64>
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <USB_DriveVbus+0x64>
		USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80068a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068a8:	6013      	str	r3, [r2, #0]
	}
	return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <USB_GetHostSpeed>:
 *          This parameter can be one of these values:
 *            @arg HCD_SPEED_HIGH: High speed mode
 *            @arg HCD_SPEED_FULL: Full speed mode
 *            @arg HCD_SPEED_LOW: Low speed mode
 */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx) {
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	60fb      	str	r3, [r7, #12]
	__IO uint32_t hprt0 = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60bb      	str	r3, [r7, #8]
	return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	0c5b      	lsrs	r3, r3, #17
 80068d6:	f003 0303 	and.w	r3, r3, #3
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <USB_GetCurrentFrame>:
/**
 * @brief  Return Host Current Frame number
 * @param  USBx  Selected device
 * @retval current frame number
 */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx) {
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60fb      	str	r3, [r7, #12]

	return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	b29b      	uxth	r3, r3
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_HC_Init>:
 *          This parameter can be a value from 0 to 32K
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
		uint8_t epnum, uint8_t dev_address, uint8_t speed, uint8_t ep_type,
		uint16_t mps) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	4608      	mov	r0, r1
 8006912:	4611      	mov	r1, r2
 8006914:	461a      	mov	r2, r3
 8006916:	4603      	mov	r3, r0
 8006918:	70fb      	strb	r3, [r7, #3]
 800691a:	460b      	mov	r3, r1
 800691c:	70bb      	strb	r3, [r7, #2]
 800691e:	4613      	mov	r3, r2
 8006920:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	77fb      	strb	r3, [r7, #31]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	613b      	str	r3, [r7, #16]
	uint32_t HCcharEpDir;
	uint32_t HCcharLowSpeed;
	uint32_t HostCoreSpeed;

	/* Clear old interrupt conditions for this host channel. */
	USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	4413      	add	r3, r2
 8006932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006936:	461a      	mov	r2, r3
 8006938:	f04f 33ff 	mov.w	r3, #4294967295
 800693c:	6093      	str	r3, [r2, #8]

	/* Enable channel interrupts required for this transfer. */
	switch (ep_type) {
 800693e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006942:	2b03      	cmp	r3, #3
 8006944:	d87c      	bhi.n	8006a40 <USB_HC_Init+0x138>
 8006946:	a201      	add	r2, pc, #4	@ (adr r2, 800694c <USB_HC_Init+0x44>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	0800695d 	.word	0x0800695d
 8006950:	08006a03 	.word	0x08006a03
 8006954:	0800695d 	.word	0x0800695d
 8006958:	080069c5 	.word	0x080069c5
	case EP_TYPE_CTRL:
	case EP_TYPE_BULK:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4413      	add	r3, r2
 8006964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006968:	461a      	mov	r2, r3
 800696a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800696e:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_TXERRM |
		USB_OTG_HCINTMSK_DTERRM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_NAKM;

		if ((epnum & 0x80U) == 0x80U) {
 8006970:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006974:	2b00      	cmp	r3, #0
 8006976:	da10      	bge.n	800699a <USB_HC_Init+0x92>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	440a      	add	r2, r1
 800698e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006996:	60d3      	str	r3, [r2, #12]
						USB_OTG_HCINTMSK_NYET |
						USB_OTG_HCINTMSK_ACKM;
			}
#endif /* defined (USB_OTG_HS) */
		}
		break;
 8006998:	e055      	b.n	8006a46 <USB_HC_Init+0x13e>
			if (USBx == USB_OTG_HS) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a6f      	ldr	r2, [pc, #444]	@ (8006b5c <USB_HC_Init+0x254>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d151      	bne.n	8006a46 <USB_HC_Init+0x13e>
				USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	78fa      	ldrb	r2, [r7, #3]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80069c0:	60d3      	str	r3, [r2, #12]
		break;
 80069c2:	e040      	b.n	8006a46 <USB_HC_Init+0x13e>

	case EP_TYPE_INTR:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d0:	461a      	mov	r2, r3
 80069d2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80069d6:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_DTERRM |
		USB_OTG_HCINTMSK_NAKM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_FRMORM;

		if ((epnum & 0x80U) == 0x80U) {
 80069d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	da34      	bge.n	8006a4a <USB_HC_Init+0x142>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	78fa      	ldrb	r2, [r7, #3]
 80069f0:	0151      	lsls	r1, r2, #5
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	440a      	add	r2, r1
 80069f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069fe:	60d3      	str	r3, [r2, #12]
					USB_OTG_HCINTMSK_BBERRM;
		}

		break;
 8006a00:	e023      	b.n	8006a4a <USB_HC_Init+0x142>

	case EP_TYPE_ISOC:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f240 2325 	movw	r3, #549	@ 0x225
 8006a14:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_ACKM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_FRMORM;

		if ((epnum & 0x80U) == 0x80U) {
 8006a16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da17      	bge.n	8006a4e <USB_HC_Init+0x146>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	78fa      	ldrb	r2, [r7, #3]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a38:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006a3c:	60d3      	str	r3, [r2, #12]
					(USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
		}
		break;
 8006a3e:	e006      	b.n	8006a4e <USB_HC_Init+0x146>

	default:
		ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	77fb      	strb	r3, [r7, #31]
		break;
 8006a44:	e004      	b.n	8006a50 <USB_HC_Init+0x148>
		break;
 8006a46:	bf00      	nop
 8006a48:	e002      	b.n	8006a50 <USB_HC_Init+0x148>
		break;
 8006a4a:	bf00      	nop
 8006a4c:	e000      	b.n	8006a50 <USB_HC_Init+0x148>
		break;
 8006a4e:	bf00      	nop
	}

	/* Clear Hub Start Split transaction */
	USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6053      	str	r3, [r2, #4]

	/* Enable host channel Halt interrupt */
	USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	60d3      	str	r3, [r2, #12]

	/* Enable the top level host channel interrupt. */
	USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	2101      	movs	r1, #1
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	6939      	ldr	r1, [r7, #16]
 8006a98:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	618b      	str	r3, [r1, #24]

	/* Make sure host channel interrupts are enabled. */
	USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	619a      	str	r2, [r3, #24]

	/* Program the HCCHAR register */
	if ((epnum & 0x80U) == 0x80U) {
 8006aac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	da03      	bge.n	8006abc <USB_HC_Init+0x1b4>
		HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ab4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	e001      	b.n	8006ac0 <USB_HC_Init+0x1b8>
	} else {
		HCcharEpDir = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
	}

	HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff fef9 	bl	80068b8 <USB_GetHostSpeed>
 8006ac6:	60f8      	str	r0, [r7, #12]

	/* LS device plugged to HUB */
	if ((speed == HPRT0_PRTSPD_LOW_SPEED)
 8006ac8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d106      	bne.n	8006ade <USB_HC_Init+0x1d6>
			&& (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED)) {
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d003      	beq.n	8006ade <USB_HC_Init+0x1d6>
		HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006ad6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	e001      	b.n	8006ae2 <USB_HC_Init+0x1da>
	} else {
		HCcharLowSpeed = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
	}

	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8006ae2:	787b      	ldrb	r3, [r7, #1]
 8006ae4:	059b      	lsls	r3, r3, #22
			& USB_OTG_HCCHAR_DAD)
 8006ae6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
			| ((((uint32_t) epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM)
 8006aea:	78bb      	ldrb	r3, [r7, #2]
 8006aec:	02db      	lsls	r3, r3, #11
 8006aee:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
 8006af2:	431a      	orrs	r2, r3
			| (((uint32_t) ep_type << 18) & USB_OTG_HCCHAR_EPTYP)
 8006af4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006af8:	049b      	lsls	r3, r3, #18
 8006afa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006afe:	431a      	orrs	r2, r3
			| ((uint32_t) mps & USB_OTG_HCCHAR_MPSIZ) |
 8006b00:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b06:	431a      	orrs	r2, r3
			USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8006b10:	78fa      	ldrb	r2, [r7, #3]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
			USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006b1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8006b20:	6013      	str	r3, [r2, #0]

	if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC)) {
 8006b22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d003      	beq.n	8006b32 <USB_HC_Init+0x22a>
 8006b2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d10f      	bne.n	8006b52 <USB_HC_Init+0x24a>
		USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	78fa      	ldrb	r2, [r7, #3]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b50:	6013      	str	r3, [r2, #0]
	}

	return ret;
 8006b52:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3720      	adds	r7, #32
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40040000 	.word	0x40040000

08006b60 <USB_HC_StartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_HCTypeDef *hc, uint8_t dma) {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08c      	sub	sp, #48	@ 0x30
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	71fb      	strb	r3, [r7, #7]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	623b      	str	r3, [r7, #32]
	uint32_t ch_num = (uint32_t) hc->ch_num;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	61fb      	str	r3, [r7, #28]
	__IO uint32_t tmpreg;
	uint8_t is_oddframe;
	uint16_t len_words;
	uint16_t num_packets;
	uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006b78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b7c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
	if (USBx == USB_OTG_HS) {
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a5d      	ldr	r2, [pc, #372]	@ (8006cf8 <USB_HC_StartXfer+0x198>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d12f      	bne.n	8006be6 <USB_HC_StartXfer+0x86>
		/* in DMA mode host Core automatically issues ping in case of NYET/NAK */
		if (dma == 1U) {
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d11c      	bne.n	8006bc6 <USB_HC_StartXfer+0x66>
			if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK))
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	7c9b      	ldrb	r3, [r3, #18]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <USB_HC_StartXfer+0x3c>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	7c9b      	ldrb	r3, [r3, #18]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d124      	bne.n	8006be6 <USB_HC_StartXfer+0x86>
					&& (hc->do_ssplit == 0U)) {
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	799b      	ldrb	r3, [r3, #6]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d120      	bne.n	8006be6 <USB_HC_StartXfer+0x86>

				USBx_HC((uint32_t)ch_num)->HCINTMSK &=
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	6a3a      	ldr	r2, [r7, #32]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc2:	60d3      	str	r3, [r2, #12]
 8006bc4:	e00f      	b.n	8006be6 <USB_HC_StartXfer+0x86>
						~(USB_OTG_HCINTMSK_NYET |
						USB_OTG_HCINTMSK_ACKM |
						USB_OTG_HCINTMSK_NAKM);
			}
		} else {
			if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U)) {
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	791b      	ldrb	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10b      	bne.n	8006be6 <USB_HC_StartXfer+0x86>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	795b      	ldrb	r3, [r3, #5]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d107      	bne.n	8006be6 <USB_HC_StartXfer+0x86>
				(void) USB_DoPing(USBx, hc->ch_num);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	785b      	ldrb	r3, [r3, #1]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 fb6b 	bl	80072b8 <USB_DoPing>
				return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e232      	b.n	800704c <USB_HC_StartXfer+0x4ec>
			}
		}
	}
#endif /* defined (USB_OTG_HS) */

	if (hc->do_ssplit == 1U) {
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	799b      	ldrb	r3, [r3, #6]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d158      	bne.n	8006ca0 <USB_HC_StartXfer+0x140>
		/* Set number of packet to 1 for Split transaction */
		num_packets = 1U;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (hc->ep_is_in != 0U) {
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	78db      	ldrb	r3, [r3, #3]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <USB_HC_StartXfer+0xaa>
			hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8006bfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	8a92      	ldrh	r2, [r2, #20]
 8006c00:	fb03 f202 	mul.w	r2, r3, r2
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	61da      	str	r2, [r3, #28]
 8006c08:	e07c      	b.n	8006d04 <USB_HC_StartXfer+0x1a4>
		} else {
			if (hc->ep_type == EP_TYPE_ISOC) {
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	7c9b      	ldrb	r3, [r3, #18]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d130      	bne.n	8006c74 <USB_HC_StartXfer+0x114>
				if (hc->xfer_len > ISO_SPLT_MPS) {
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	2bbc      	cmp	r3, #188	@ 0xbc
 8006c18:	d918      	bls.n	8006c4c <USB_HC_StartXfer+0xec>
					/* Isochrone Max Packet Size for Split mode */
					hc->XferSize = hc->max_packet;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	8a9b      	ldrh	r3, [r3, #20]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	61da      	str	r2, [r3, #28]
					hc->xfer_len = hc->XferSize;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	621a      	str	r2, [r3, #32]

					if ((hc->iso_splt_xactPos == HCSPLT_BEGIN)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d003      	beq.n	8006c3c <USB_HC_StartXfer+0xdc>
							|| (hc->iso_splt_xactPos == HCSPLT_MIDDLE)) {
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d103      	bne.n	8006c44 <USB_HC_StartXfer+0xe4>
						hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	60da      	str	r2, [r3, #12]
 8006c42:	e05f      	b.n	8006d04 <USB_HC_StartXfer+0x1a4>
					} else {
						hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2201      	movs	r2, #1
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	e05b      	b.n	8006d04 <USB_HC_StartXfer+0x1a4>
					}
				} else {
					hc->XferSize = hc->xfer_len;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6a1a      	ldr	r2, [r3, #32]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	61da      	str	r2, [r3, #28]

					if ((hc->iso_splt_xactPos != HCSPLT_BEGIN)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d007      	beq.n	8006c6c <USB_HC_StartXfer+0x10c>
							&& (hc->iso_splt_xactPos != HCSPLT_MIDDLE)) {
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d003      	beq.n	8006c6c <USB_HC_StartXfer+0x10c>
						hc->iso_splt_xactPos = HCSPLT_FULL;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2204      	movs	r2, #4
 8006c68:	60da      	str	r2, [r3, #12]
 8006c6a:	e04b      	b.n	8006d04 <USB_HC_StartXfer+0x1a4>
					} else {
						hc->iso_splt_xactPos = HCSPLT_END;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2203      	movs	r2, #3
 8006c70:	60da      	str	r2, [r3, #12]
 8006c72:	e047      	b.n	8006d04 <USB_HC_StartXfer+0x1a4>
					}
				}
			} else {
				if ((dma == 1U) && (hc->xfer_len > hc->max_packet)) {
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d10d      	bne.n	8006c96 <USB_HC_StartXfer+0x136>
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	8a92      	ldrh	r2, [r2, #20]
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d907      	bls.n	8006c96 <USB_HC_StartXfer+0x136>
					hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8006c86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	8a92      	ldrh	r2, [r2, #20]
 8006c8c:	fb03 f202 	mul.w	r2, r3, r2
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	61da      	str	r2, [r3, #28]
 8006c94:	e036      	b.n	8006d04 <USB_HC_StartXfer+0x1a4>
				} else {
					hc->XferSize = hc->xfer_len;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6a1a      	ldr	r2, [r3, #32]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	61da      	str	r2, [r3, #28]
 8006c9e:	e031      	b.n	8006d04 <USB_HC_StartXfer+0x1a4>
				}
			}
		}
	} else {
		/* Compute the expected number of packets associated to the transfer */
		if (hc->xfer_len > 0U) {
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d018      	beq.n	8006cda <USB_HC_StartXfer+0x17a>
			num_packets = (uint16_t) ((hc->xfer_len + hc->max_packet - 1U)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	8a92      	ldrh	r2, [r2, #20]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3b01      	subs	r3, #1
					/ hc->max_packet);
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	8a92      	ldrh	r2, [r2, #20]
 8006cb8:	fbb3 f3f2 	udiv	r3, r3, r2
			num_packets = (uint16_t) ((hc->xfer_len + hc->max_packet - 1U)
 8006cbc:	84fb      	strh	r3, [r7, #38]	@ 0x26

			if (num_packets > max_hc_pkt_count) {
 8006cbe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006cc0:	8b7b      	ldrh	r3, [r7, #26]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d90b      	bls.n	8006cde <USB_HC_StartXfer+0x17e>
				num_packets = max_hc_pkt_count;
 8006cc6:	8b7b      	ldrh	r3, [r7, #26]
 8006cc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
				hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8006cca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	8a92      	ldrh	r2, [r2, #20]
 8006cd0:	fb03 f202 	mul.w	r2, r3, r2
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	61da      	str	r2, [r3, #28]
 8006cd8:	e001      	b.n	8006cde <USB_HC_StartXfer+0x17e>
			}
		} else {
			num_packets = 1U;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	84fb      	strh	r3, [r7, #38]	@ 0x26

		/*
		 * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
		 * max_packet size.
		 */
		if (hc->ep_is_in != 0U) {
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	78db      	ldrb	r3, [r3, #3]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <USB_HC_StartXfer+0x19c>
			hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8006ce6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	8a92      	ldrh	r2, [r2, #20]
 8006cec:	fb03 f202 	mul.w	r2, r3, r2
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	61da      	str	r2, [r3, #28]
 8006cf4:	e006      	b.n	8006d04 <USB_HC_StartXfer+0x1a4>
 8006cf6:	bf00      	nop
 8006cf8:	40040000 	.word	0x40040000
		} else {
			hc->XferSize = hc->xfer_len;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	6a1a      	ldr	r2, [r3, #32]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	61da      	str	r2, [r3, #28]
		}
	}

	/* Initialize the HCTSIZn register */
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	f3c3 0212 	ubfx	r2, r3, #0, #19
			| (((uint32_t) num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT)
 8006d0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d0e:	04d9      	lsls	r1, r3, #19
 8006d10:	4ba3      	ldr	r3, [pc, #652]	@ (8006fa0 <USB_HC_StartXfer+0x440>)
 8006d12:	400b      	ands	r3, r1
 8006d14:	431a      	orrs	r2, r3
			| (((uint32_t) hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	7d9b      	ldrb	r3, [r3, #22]
 8006d1a:	075b      	lsls	r3, r3, #29
 8006d1c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8006d20:	69f9      	ldr	r1, [r7, #28]
 8006d22:	0148      	lsls	r0, r1, #5
 8006d24:	6a39      	ldr	r1, [r7, #32]
 8006d26:	4401      	add	r1, r0
 8006d28:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
			| (((uint32_t) hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006d2c:	4313      	orrs	r3, r2
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8006d2e:	610b      	str	r3, [r1, #16]

	if (dma != 0U) {
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <USB_HC_StartXfer+0x1ea>
		/* xfer_buff MUST be 32-bits aligned */
		USBx_HC(ch_num)->HCDMA = (uint32_t) hc->xfer_buff;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6999      	ldr	r1, [r3, #24]
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d46:	460a      	mov	r2, r1
 8006d48:	615a      	str	r2, [r3, #20]
	}

	is_oddframe = (((uint32_t) USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bf0c      	ite	eq
 8006d5a:	2301      	moveq	r3, #1
 8006d5c:	2300      	movne	r3, #0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	767b      	strb	r3, [r7, #25]
	USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	0151      	lsls	r1, r2, #5
 8006d74:	6a3a      	ldr	r2, [r7, #32]
 8006d76:	440a      	add	r2, r1
 8006d78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d80:	6013      	str	r3, [r2, #0]
	USBx_HC(ch_num)->HCCHAR |= (uint32_t) is_oddframe << 29;
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	7e7b      	ldrb	r3, [r7, #25]
 8006d92:	075b      	lsls	r3, r3, #29
 8006d94:	69f9      	ldr	r1, [r7, #28]
 8006d96:	0148      	lsls	r0, r1, #5
 8006d98:	6a39      	ldr	r1, [r7, #32]
 8006d9a:	4401      	add	r1, r0
 8006d9c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006da0:	4313      	orrs	r3, r2
 8006da2:	600b      	str	r3, [r1, #0]

	if (hc->do_ssplit == 1U) {
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	799b      	ldrb	r3, [r3, #6]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	f040 80c3 	bne.w	8006f34 <USB_HC_StartXfer+0x3d4>
		/* Set Hub start Split transaction */
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	7c5b      	ldrb	r3, [r3, #17]
				<< USB_OTG_HCSPLT_HUBADDR_Pos) | (uint32_t) hc->hub_port_nbr
 8006db2:	01db      	lsls	r3, r3, #7
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	7c12      	ldrb	r2, [r2, #16]
 8006db8:	4313      	orrs	r3, r2
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	6a3a      	ldr	r2, [r7, #32]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
				| USB_OTG_HCSPLT_SPLITEN;
 8006dc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8006dca:	6053      	str	r3, [r2, #4]

		/* unmask ack & nyet for IN/OUT transactions */
		USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	6a3a      	ldr	r2, [r7, #32]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006de6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006dea:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_NYET);

		if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U)) {
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	79db      	ldrb	r3, [r3, #7]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d123      	bne.n	8006e3c <USB_HC_StartXfer+0x2dc>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	78db      	ldrb	r3, [r3, #3]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11f      	bne.n	8006e3c <USB_HC_StartXfer+0x2dc>
			USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	0151      	lsls	r1, r2, #5
 8006e0e:	6a3a      	ldr	r2, [r7, #32]
 8006e10:	440a      	add	r2, r1
 8006e12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e1a:	6053      	str	r3, [r2, #4]
					USB_OTG_HCSPLT_COMPLSPLT;
			USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	0151      	lsls	r1, r2, #5
 8006e2e:	6a3a      	ldr	r2, [r7, #32]
 8006e30:	440a      	add	r2, r1
 8006e32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e3a:	60d3      	str	r3, [r2, #12]
		}

		if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	7c9b      	ldrb	r3, [r3, #18]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d003      	beq.n	8006e4c <USB_HC_StartXfer+0x2ec>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	7c9b      	ldrb	r3, [r3, #18]
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d117      	bne.n	8006e7c <USB_HC_StartXfer+0x31c>
				&& (hc->do_csplit == 1U) && (hc->ep_is_in == 1U)) {
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	79db      	ldrb	r3, [r3, #7]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d113      	bne.n	8006e7c <USB_HC_StartXfer+0x31c>
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	78db      	ldrb	r3, [r3, #3]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10f      	bne.n	8006e7c <USB_HC_StartXfer+0x31c>
			USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	69fa      	ldr	r2, [r7, #28]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	6a3a      	ldr	r2, [r7, #32]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e7a:	6053      	str	r3, [r2, #4]
					USB_OTG_HCSPLT_COMPLSPLT;
		}

		/* Position management for iso out transaction on split mode */
		if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U)) {
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	7c9b      	ldrb	r3, [r3, #18]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d162      	bne.n	8006f4a <USB_HC_StartXfer+0x3ea>
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	78db      	ldrb	r3, [r3, #3]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d15e      	bne.n	8006f4a <USB_HC_StartXfer+0x3ea>
			/* Set data payload position */
			switch (hc->iso_splt_xactPos) {
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d858      	bhi.n	8006f48 <USB_HC_StartXfer+0x3e8>
 8006e96:	a201      	add	r2, pc, #4	@ (adr r2, 8006e9c <USB_HC_StartXfer+0x33c>)
 8006e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9c:	08006ead 	.word	0x08006ead
 8006ea0:	08006ecf 	.word	0x08006ecf
 8006ea4:	08006ef1 	.word	0x08006ef1
 8006ea8:	08006f13 	.word	0x08006f13
			case HCSPLT_BEGIN:
				/* First data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	6a3a      	ldr	r2, [r7, #32]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eca:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_1;
				break;
 8006ecc:	e03d      	b.n	8006f4a <USB_HC_StartXfer+0x3ea>

			case HCSPLT_MIDDLE:
				/* Middle data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	6a3a      	ldr	r2, [r7, #32]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ee8:	f043 030e 	orr.w	r3, r3, #14
 8006eec:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_Pos;
				break;
 8006eee:	e02c      	b.n	8006f4a <USB_HC_StartXfer+0x3ea>

			case HCSPLT_END:
				/* End data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	0151      	lsls	r1, r2, #5
 8006f02:	6a3a      	ldr	r2, [r7, #32]
 8006f04:	440a      	add	r2, r1
 8006f06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f0e:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_0;
				break;
 8006f10:	e01b      	b.n	8006f4a <USB_HC_StartXfer+0x3ea>

			case HCSPLT_FULL:
				/* Entire data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	0151      	lsls	r1, r2, #5
 8006f24:	6a3a      	ldr	r2, [r7, #32]
 8006f26:	440a      	add	r2, r1
 8006f28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f30:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS;
				break;
 8006f32:	e00a      	b.n	8006f4a <USB_HC_StartXfer+0x3ea>
				break;
			}
		}
	} else {
		/* Clear Hub Start Split transaction */
		USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f40:	461a      	mov	r2, r3
 8006f42:	2300      	movs	r3, #0
 8006f44:	6053      	str	r3, [r2, #4]
 8006f46:	e000      	b.n	8006f4a <USB_HC_StartXfer+0x3ea>
				break;
 8006f48:	bf00      	nop
	}

	/* Set host channel enable */
	tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	613b      	str	r3, [r7, #16]
	tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f60:	613b      	str	r3, [r7, #16]

	/* make sure to set the correct ep direction */
	if (hc->ep_is_in != 0U) {
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	78db      	ldrb	r3, [r3, #3]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <USB_HC_StartXfer+0x414>
		tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	e003      	b.n	8006f7c <USB_HC_StartXfer+0x41c>
	} else {
		tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f7a:	613b      	str	r3, [r7, #16]
	}
	tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f82:	613b      	str	r3, [r7, #16]
	USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f90:	461a      	mov	r2, r3
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	6013      	str	r3, [r2, #0]

	if (dma != 0U) /* dma mode */
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <USB_HC_StartXfer+0x444>
	{
		return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e055      	b.n	800704c <USB_HC_StartXfer+0x4ec>
 8006fa0:	1ff80000 	.word	0x1ff80000
	}

	if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U)) {
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	78db      	ldrb	r3, [r3, #3]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d14e      	bne.n	800704a <USB_HC_StartXfer+0x4ea>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d04a      	beq.n	800704a <USB_HC_StartXfer+0x4ea>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	79db      	ldrb	r3, [r3, #7]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d146      	bne.n	800704a <USB_HC_StartXfer+0x4ea>
		switch (hc->ep_type) {
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	7c9b      	ldrb	r3, [r3, #18]
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d831      	bhi.n	8007028 <USB_HC_StartXfer+0x4c8>
 8006fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fcc <USB_HC_StartXfer+0x46c>)
 8006fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fca:	bf00      	nop
 8006fcc:	08006fdd 	.word	0x08006fdd
 8006fd0:	08007001 	.word	0x08007001
 8006fd4:	08006fdd 	.word	0x08006fdd
 8006fd8:	08007001 	.word	0x08007001
		/* Non periodic transfer */
		case EP_TYPE_CTRL:
		case EP_TYPE_BULK:

			len_words = (uint16_t) ((hc->xfer_len + 3U) / 4U);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	3303      	adds	r3, #3
 8006fe2:	089b      	lsrs	r3, r3, #2
 8006fe4:	82fb      	strh	r3, [r7, #22]

			/* check if there is enough space in FIFO space */
			if (len_words > (USBx->HNPTXSTS & 0xFFFFU)) {
 8006fe6:	8afa      	ldrh	r2, [r7, #22]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d91c      	bls.n	800702c <USB_HC_StartXfer+0x4cc>
				/* need to process data in nptxfempty interrupt */
				USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	f043 0220 	orr.w	r2, r3, #32
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	619a      	str	r2, [r3, #24]
			}
			break;
 8006ffe:	e015      	b.n	800702c <USB_HC_StartXfer+0x4cc>

			/* Periodic transfer */
		case EP_TYPE_INTR:
		case EP_TYPE_ISOC:
			len_words = (uint16_t) ((hc->xfer_len + 3U) / 4U);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	3303      	adds	r3, #3
 8007006:	089b      	lsrs	r3, r3, #2
 8007008:	82fb      	strh	r3, [r7, #22]
			/* check if there is enough space in FIFO space */
			if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800700a:	8afa      	ldrh	r2, [r7, #22]
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	b29b      	uxth	r3, r3
 8007016:	429a      	cmp	r2, r3
 8007018:	d90a      	bls.n	8007030 <USB_HC_StartXfer+0x4d0>
			{
				/* need to process data in ptxfempty interrupt */
				USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	619a      	str	r2, [r3, #24]
			}
			break;
 8007026:	e003      	b.n	8007030 <USB_HC_StartXfer+0x4d0>

		default:
			break;
 8007028:	bf00      	nop
 800702a:	e002      	b.n	8007032 <USB_HC_StartXfer+0x4d2>
			break;
 800702c:	bf00      	nop
 800702e:	e000      	b.n	8007032 <USB_HC_StartXfer+0x4d2>
			break;
 8007030:	bf00      	nop
		}

		/* Write packet into the Tx FIFO. */
		(void) USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num,
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6999      	ldr	r1, [r3, #24]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	785a      	ldrb	r2, [r3, #1]
				(uint16_t) hc->xfer_len, 0);
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6a1b      	ldr	r3, [r3, #32]
		(void) USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num,
 800703e:	b29b      	uxth	r3, r3
 8007040:	2000      	movs	r0, #0
 8007042:	9000      	str	r0, [sp, #0]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7ff f9c9 	bl	80063dc <USB_WritePacket>
	}

	return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3728      	adds	r7, #40	@ 0x28
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USB_HC_ReadInterrupt>:
/**
 * @brief Read all host channel interrupts status
 * @param  USBx  Selected device
 * @retval HAL state
 */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	60fb      	str	r3, [r7, #12]

	return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	b29b      	uxth	r3, r3
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USB_HC_Halt>:
 * @param  USBx  Selected device
 * @param  hc_num  Host Channel number
 *         This parameter can be a value from 1 to 15
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num) {
 8007076:	b480      	push	{r7}
 8007078:	b089      	sub	sp, #36	@ 0x24
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	460b      	mov	r3, r1
 8007080:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	61fb      	str	r3, [r7, #28]
	uint32_t hcnum = (uint32_t) hc_num;
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	61bb      	str	r3, [r7, #24]
	__IO uint32_t count = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	60bb      	str	r3, [r7, #8]
	uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	0c9b      	lsrs	r3, r3, #18
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	617b      	str	r3, [r7, #20]
	uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	0fdb      	lsrs	r3, r3, #31
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	613b      	str	r3, [r7, #16]
	uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	0fdb      	lsrs	r3, r3, #31
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	60fb      	str	r3, [r7, #12]

	/* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
	 At the end of the next uframe/frame (in the worst case), the core generates a channel halted
	 and disables the channel automatically. */

	if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d10d      	bne.n	80070f8 <USB_HC_Halt+0x82>
			&& (SplitEna == 0U))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <USB_HC_Halt+0x82>
			&& ((ChannelEna == 0U)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <USB_HC_Halt+0x7e>
					|| (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR))))) {
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d002      	beq.n	80070f4 <USB_HC_Halt+0x7e>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d101      	bne.n	80070f8 <USB_HC_Halt+0x82>
		return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e0d8      	b.n	80072aa <USB_HC_Halt+0x234>
	}

	/* Check for space in the request queue to issue the halt. */
	if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK)) {
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <USB_HC_Halt+0x8e>
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d173      	bne.n	80071ec <USB_HC_Halt+0x176>
		USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	4413      	add	r3, r2
 800710c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	440a      	add	r2, r1
 800711a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800711e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007122:	6013      	str	r3, [r2, #0]

		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b00      	cmp	r3, #0
 800712e:	d14a      	bne.n	80071c6 <USB_HC_Halt+0x150>
			if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U) {
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d133      	bne.n	80071a4 <USB_HC_Halt+0x12e>
				USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	4413      	add	r3, r2
 8007144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	0151      	lsls	r1, r2, #5
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	440a      	add	r2, r1
 8007152:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007156:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800715a:	6013      	str	r3, [r2, #0]
				USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	4413      	add	r3, r2
 8007164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	0151      	lsls	r1, r2, #5
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	440a      	add	r2, r1
 8007172:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007176:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800717a:	6013      	str	r3, [r2, #0]
				do {
					count++;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	3301      	adds	r3, #1
 8007180:	60bb      	str	r3, [r7, #8]

					if (count > 1000U) {
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007188:	d82e      	bhi.n	80071e8 <USB_HC_Halt+0x172>
						break;
					}
				} while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
						== USB_OTG_HCCHAR_CHENA);
 800719c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071a0:	d0ec      	beq.n	800717c <USB_HC_Halt+0x106>
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 80071a2:	e081      	b.n	80072a8 <USB_HC_Halt+0x232>
			} else {
				USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071c2:	6013      	str	r3, [r2, #0]
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 80071c4:	e070      	b.n	80072a8 <USB_HC_Halt+0x232>
			}
		} else {
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071e4:	6013      	str	r3, [r2, #0]
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 80071e6:	e05f      	b.n	80072a8 <USB_HC_Halt+0x232>
						break;
 80071e8:	bf00      	nop
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 80071ea:	e05d      	b.n	80072a8 <USB_HC_Halt+0x232>
		}
	} else {
		USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	0151      	lsls	r1, r2, #5
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	440a      	add	r2, r1
 8007202:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007206:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800720a:	6013      	str	r3, [r2, #0]

		if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U) {
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d133      	bne.n	8007284 <USB_HC_Halt+0x20e>
			USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	4413      	add	r3, r2
 8007224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	0151      	lsls	r1, r2, #5
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	440a      	add	r2, r1
 8007232:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007236:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800723a:	6013      	str	r3, [r2, #0]
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	440a      	add	r2, r1
 8007252:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007256:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800725a:	6013      	str	r3, [r2, #0]
			do {
				count++;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3301      	adds	r3, #1
 8007260:	60bb      	str	r3, [r7, #8]

				if (count > 1000U) {
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007268:	d81d      	bhi.n	80072a6 <USB_HC_Halt+0x230>
					break;
				}
			} while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_HCCHAR_CHENA);
 800727c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007280:	d0ec      	beq.n	800725c <USB_HC_Halt+0x1e6>
 8007282:	e011      	b.n	80072a8 <USB_HC_Halt+0x232>
		} else {
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	4413      	add	r3, r2
 800728c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	0151      	lsls	r1, r2, #5
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	440a      	add	r2, r1
 800729a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800729e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	e000      	b.n	80072a8 <USB_HC_Halt+0x232>
					break;
 80072a6:	bf00      	nop
		}
	}

	return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3724      	adds	r7, #36	@ 0x24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
	...

080072b8 <USB_DoPing>:
 * @param  USBx  Selected device
 * @param  hc_num  Host Channel number
 *         This parameter can be a value from 1 to 15
 * @retval HAL state
 */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num) {
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	617b      	str	r3, [r7, #20]
	uint32_t chnum = (uint32_t) ch_num;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	613b      	str	r3, [r7, #16]
	uint32_t num_packets = 1U;
 80072cc:	2301      	movs	r3, #1
 80072ce:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	04da      	lsls	r2, r3, #19
 80072d4:	4b15      	ldr	r3, [pc, #84]	@ (800732c <USB_DoPing+0x74>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072e8:	6113      	str	r3, [r2, #16]
	USB_OTG_HCTSIZ_DOPING;

	/* Set host channel enable */
	tmpreg = USBx_HC(chnum)->HCCHAR;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60bb      	str	r3, [r7, #8]
	tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007300:	60bb      	str	r3, [r7, #8]
	tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007308:	60bb      	str	r3, [r7, #8]
	USBx_HC(chnum)->HCCHAR = tmpreg;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	4413      	add	r3, r2
 8007312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007316:	461a      	mov	r2, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	1ff80000 	.word	0x1ff80000

08007330 <USB_StopHost>:
/**
 * @brief  Stop Host Core
 * @param  USBx  Selected device
 * @retval HAL state
 */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	77fb      	strb	r3, [r7, #31]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	617b      	str	r3, [r7, #20]
	__IO uint32_t count = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]
	uint32_t value;
	uint32_t i;

	(void) USB_DisableGlobalInt(USBx);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fe ff8c 	bl	8006262 <USB_DisableGlobalInt>

	/* Flush USB FIFO */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800734a:	2110      	movs	r1, #16
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fe ffe5 	bl	800631c <USB_FlushTxFifo>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <USB_StopHost+0x2c>
	{
		ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	77fb      	strb	r3, [r7, #31]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff f80f 	bl	8006380 <USB_FlushRxFifo>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <USB_StopHost+0x3c>
		ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	77fb      	strb	r3, [r7, #31]
	}

	/* Flush out any leftover queued requests. */
	for (i = 0U; i <= 15U; i++) {
 800736c:	2300      	movs	r3, #0
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	e01f      	b.n	80073b2 <USB_StopHost+0x82>
		value = USBx_HC(i)->HCCHAR;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	4413      	add	r3, r2
 800737a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHDIS;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007388:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_CHENA;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007390:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_EPDIR;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007398:	613b      	str	r3, [r7, #16]
		USBx_HC(i)->HCCHAR = value;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073a6:	461a      	mov	r2, r3
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	6013      	str	r3, [r2, #0]
	for (i = 0U; i <= 15U; i++) {
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	3301      	adds	r3, #1
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b0f      	cmp	r3, #15
 80073b6:	d9dc      	bls.n	8007372 <USB_StopHost+0x42>
	}

	/* Halt all channels to put them into a known state. */
	for (i = 0U; i <= 15U; i++) {
 80073b8:	2300      	movs	r3, #0
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	e034      	b.n	8007428 <USB_StopHost+0xf8>
		value = USBx_HC(i)->HCCHAR;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHDIS;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073d4:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHENA;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073dc:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_EPDIR;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073e4:	613b      	str	r3, [r7, #16]
		USBx_HC(i)->HCCHAR = value;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073f2:	461a      	mov	r2, r3
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6013      	str	r3, [r2, #0]

		do {
			count++;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]

			if (count > 1000U) {
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007404:	d80c      	bhi.n	8007420 <USB_StopHost+0xf0>
				break;
			}
		} while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
				== USB_OTG_HCCHAR_CHENA);
 8007418:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800741c:	d0ec      	beq.n	80073f8 <USB_StopHost+0xc8>
 800741e:	e000      	b.n	8007422 <USB_StopHost+0xf2>
				break;
 8007420:	bf00      	nop
	for (i = 0U; i <= 15U; i++) {
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	3301      	adds	r3, #1
 8007426:	61bb      	str	r3, [r7, #24]
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2b0f      	cmp	r3, #15
 800742c:	d9c7      	bls.n	80073be <USB_StopHost+0x8e>
	}

	/* Clear any pending Host interrupts */
	USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007434:	461a      	mov	r2, r3
 8007436:	f04f 33ff 	mov.w	r3, #4294967295
 800743a:	6153      	str	r3, [r2, #20]
	USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f04f 32ff 	mov.w	r2, #4294967295
 8007442:	615a      	str	r2, [r3, #20]

	(void) USB_EnableGlobalInt(USBx);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7fe fefb 	bl	8006240 <USB_EnableGlobalInt>

	return ret;
 800744a:	7ffb      	ldrb	r3, [r7, #31]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3720      	adds	r7, #32
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007454:	b590      	push	{r4, r7, lr}
 8007456:	b089      	sub	sp, #36	@ 0x24
 8007458:	af04      	add	r7, sp, #16
 800745a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800745c:	2301      	movs	r3, #1
 800745e:	2202      	movs	r2, #2
 8007460:	2102      	movs	r1, #2
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fc85 	bl	8007d72 <USBH_FindInterface>
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	2bff      	cmp	r3, #255	@ 0xff
 8007470:	d002      	beq.n	8007478 <USBH_CDC_InterfaceInit+0x24>
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d901      	bls.n	800747c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007478:	2302      	movs	r3, #2
 800747a:	e13d      	b.n	80076f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fc5a 	bl	8007d3a <USBH_SelectInterface>
 8007486:	4603      	mov	r3, r0
 8007488:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007490:	2302      	movs	r3, #2
 8007492:	e131      	b.n	80076f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800749a:	2050      	movs	r0, #80	@ 0x50
 800749c:	f002 fb64 	bl	8009b68 <malloc>
 80074a0:	4603      	mov	r3, r0
 80074a2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80074b4:	2302      	movs	r3, #2
 80074b6:	e11f      	b.n	80076f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80074b8:	2250      	movs	r2, #80	@ 0x50
 80074ba:	2100      	movs	r1, #0
 80074bc:	68b8      	ldr	r0, [r7, #8]
 80074be:	f002 fc11 	bl	8009ce4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	211a      	movs	r1, #26
 80074c8:	fb01 f303 	mul.w	r3, r1, r3
 80074cc:	4413      	add	r3, r2
 80074ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	b25b      	sxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da15      	bge.n	8007506 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	211a      	movs	r1, #26
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
 80074e4:	4413      	add	r3, r2
 80074e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80074ea:	781a      	ldrb	r2, [r3, #0]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	211a      	movs	r1, #26
 80074f6:	fb01 f303 	mul.w	r3, r1, r3
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007500:	881a      	ldrh	r2, [r3, #0]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 ffbe 	bl	800948e <USBH_AllocPipe>
 8007512:	4603      	mov	r3, r0
 8007514:	461a      	mov	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	7819      	ldrb	r1, [r3, #0]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	7858      	ldrb	r0, [r3, #1]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	8952      	ldrh	r2, [r2, #10]
 8007532:	9202      	str	r2, [sp, #8]
 8007534:	2203      	movs	r2, #3
 8007536:	9201      	str	r2, [sp, #4]
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	4623      	mov	r3, r4
 800753c:	4602      	mov	r2, r0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 ff76 	bl	8009430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2200      	movs	r2, #0
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f002 fa85 	bl	8009a5c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007552:	2300      	movs	r3, #0
 8007554:	2200      	movs	r2, #0
 8007556:	210a      	movs	r1, #10
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fc0a 	bl	8007d72 <USBH_FindInterface>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2bff      	cmp	r3, #255	@ 0xff
 8007566:	d002      	beq.n	800756e <USBH_CDC_InterfaceInit+0x11a>
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d901      	bls.n	8007572 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800756e:	2302      	movs	r3, #2
 8007570:	e0c2      	b.n	80076f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	211a      	movs	r1, #26
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	4413      	add	r3, r2
 800757e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	b25b      	sxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	da16      	bge.n	80075b8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	211a      	movs	r1, #26
 8007590:	fb01 f303 	mul.w	r3, r1, r3
 8007594:	4413      	add	r3, r2
 8007596:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800759a:	781a      	ldrb	r2, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	211a      	movs	r1, #26
 80075a6:	fb01 f303 	mul.w	r3, r1, r3
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80075b0:	881a      	ldrh	r2, [r3, #0]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	835a      	strh	r2, [r3, #26]
 80075b6:	e015      	b.n	80075e4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	211a      	movs	r1, #26
 80075be:	fb01 f303 	mul.w	r3, r1, r3
 80075c2:	4413      	add	r3, r2
 80075c4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	211a      	movs	r1, #26
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	4413      	add	r3, r2
 80075da:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80075de:	881a      	ldrh	r2, [r3, #0]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	211a      	movs	r1, #26
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	4413      	add	r3, r2
 80075f0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	b25b      	sxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da16      	bge.n	800762a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	211a      	movs	r1, #26
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	4413      	add	r3, r2
 8007608:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	211a      	movs	r1, #26
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	4413      	add	r3, r2
 800761e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007622:	881a      	ldrh	r2, [r3, #0]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	835a      	strh	r2, [r3, #26]
 8007628:	e015      	b.n	8007656 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	211a      	movs	r1, #26
 8007630:	fb01 f303 	mul.w	r3, r1, r3
 8007634:	4413      	add	r3, r2
 8007636:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800763a:	781a      	ldrb	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	211a      	movs	r1, #26
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	4413      	add	r3, r2
 800764c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007650:	881a      	ldrh	r2, [r3, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	7b9b      	ldrb	r3, [r3, #14]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 ff16 	bl	800948e <USBH_AllocPipe>
 8007662:	4603      	mov	r3, r0
 8007664:	461a      	mov	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	7bdb      	ldrb	r3, [r3, #15]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 ff0c 	bl	800948e <USBH_AllocPipe>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	7b59      	ldrb	r1, [r3, #13]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	7b98      	ldrb	r0, [r3, #14]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	8b12      	ldrh	r2, [r2, #24]
 8007696:	9202      	str	r2, [sp, #8]
 8007698:	2202      	movs	r2, #2
 800769a:	9201      	str	r2, [sp, #4]
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4623      	mov	r3, r4
 80076a0:	4602      	mov	r2, r0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fec4 	bl	8009430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	7b19      	ldrb	r1, [r3, #12]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	7bd8      	ldrb	r0, [r3, #15]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	8b52      	ldrh	r2, [r2, #26]
 80076c0:	9202      	str	r2, [sp, #8]
 80076c2:	2202      	movs	r2, #2
 80076c4:	9201      	str	r2, [sp, #4]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	4623      	mov	r3, r4
 80076ca:	4602      	mov	r2, r0
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 feaf 	bl	8009430 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	7b5b      	ldrb	r3, [r3, #13]
 80076de:	2200      	movs	r2, #0
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f002 f9ba 	bl	8009a5c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	7b1b      	ldrb	r3, [r3, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f002 f9b3 	bl	8009a5c <USBH_LL_SetToggle>

  return USBH_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd90      	pop	{r4, r7, pc}

08007700 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00e      	beq.n	8007738 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 fea4 	bl	800946e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fecf 	bl	80094d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	7b1b      	ldrb	r3, [r3, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00e      	beq.n	800775e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	7b1b      	ldrb	r3, [r3, #12]
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 fe91 	bl	800946e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	7b1b      	ldrb	r3, [r3, #12]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 febc 	bl	80094d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	7b5b      	ldrb	r3, [r3, #13]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00e      	beq.n	8007784 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	7b5b      	ldrb	r3, [r3, #13]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fe7e 	bl	800946e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	7b5b      	ldrb	r3, [r3, #13]
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 fea9 	bl	80094d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00b      	beq.n	80077a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	4618      	mov	r0, r3
 800779a:	f002 f9ed 	bl	8009b78 <free>
    phost->pActiveClass->pData = 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077a4:	2200      	movs	r2, #0
 80077a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3340      	adds	r3, #64	@ 0x40
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f8b1 	bl	8007932 <GetLineCoding>
 80077d0:	4603      	mov	r3, r0
 80077d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80077e0:	2102      	movs	r1, #2
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80077e6:	7afb      	ldrb	r3, [r7, #11]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007810:	2b04      	cmp	r3, #4
 8007812:	d877      	bhi.n	8007904 <USBH_CDC_Process+0x114>
 8007814:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <USBH_CDC_Process+0x2c>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007831 	.word	0x08007831
 8007820:	08007837 	.word	0x08007837
 8007824:	08007867 	.word	0x08007867
 8007828:	080078db 	.word	0x080078db
 800782c:	080078e9 	.word	0x080078e9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
      break;
 8007834:	e06d      	b.n	8007912 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f897 	bl	8007970 <SetLineCoding>
 8007842:	4603      	mov	r3, r0
 8007844:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d104      	bne.n	8007856 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007854:	e058      	b.n	8007908 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d055      	beq.n	8007908 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2204      	movs	r2, #4
 8007860:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007864:	e050      	b.n	8007908 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	3340      	adds	r3, #64	@ 0x40
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f860 	bl	8007932 <GetLineCoding>
 8007872:	4603      	mov	r3, r0
 8007874:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d126      	bne.n	80078ca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800788e:	791b      	ldrb	r3, [r3, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d13b      	bne.n	800790c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800789e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d133      	bne.n	800790c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d12b      	bne.n	800790c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078bc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078be:	429a      	cmp	r2, r3
 80078c0:	d124      	bne.n	800790c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f958 	bl	8007b78 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078c8:	e020      	b.n	800790c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d01d      	beq.n	800790c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2204      	movs	r2, #4
 80078d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80078d8:	e018      	b.n	800790c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f867 	bl	80079ae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f8da 	bl	8007a9a <CDC_ProcessReception>
      break;
 80078e6:	e014      	b.n	8007912 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80078e8:	2100      	movs	r1, #0
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 f81a 	bl	8008924 <USBH_ClrFeature>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007902:	e005      	b.n	8007910 <USBH_CDC_Process+0x120>

    default:
      break;
 8007904:	bf00      	nop
 8007906:	e004      	b.n	8007912 <USBH_CDC_Process+0x122>
      break;
 8007908:	bf00      	nop
 800790a:	e002      	b.n	8007912 <USBH_CDC_Process+0x122>
      break;
 800790c:	bf00      	nop
 800790e:	e000      	b.n	8007912 <USBH_CDC_Process+0x122>
      break;
 8007910:	bf00      	nop

  }

  return status;
 8007912:	7bfb      	ldrb	r3, [r7, #15]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	22a1      	movs	r2, #161	@ 0xa1
 8007940:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2221      	movs	r2, #33	@ 0x21
 8007946:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2207      	movs	r2, #7
 8007958:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2207      	movs	r2, #7
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 fb14 	bl	8008f8e <USBH_CtlReq>
 8007966:	4603      	mov	r3, r0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2221      	movs	r2, #33	@ 0x21
 800797e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2207      	movs	r2, #7
 8007996:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2207      	movs	r2, #7
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 faf5 	bl	8008f8e <USBH_CtlReq>
 80079a4:	4603      	mov	r3, r0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af02      	add	r7, sp, #8
 80079b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079c0:	2300      	movs	r3, #0
 80079c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d002      	beq.n	80079d4 <CDC_ProcessTransmission+0x26>
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d023      	beq.n	8007a1a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80079d2:	e05e      	b.n	8007a92 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	8b12      	ldrh	r2, [r2, #24]
 80079dc:	4293      	cmp	r3, r2
 80079de:	d90b      	bls.n	80079f8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	69d9      	ldr	r1, [r3, #28]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8b1a      	ldrh	r2, [r3, #24]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	7b5b      	ldrb	r3, [r3, #13]
 80079ec:	2001      	movs	r0, #1
 80079ee:	9000      	str	r0, [sp, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 fcda 	bl	80093aa <USBH_BulkSendData>
 80079f6:	e00b      	b.n	8007a10 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	7b5b      	ldrb	r3, [r3, #13]
 8007a06:	2001      	movs	r0, #1
 8007a08:	9000      	str	r0, [sp, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 fccd 	bl	80093aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007a18:	e03b      	b.n	8007a92 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	7b5b      	ldrb	r3, [r3, #13]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 fff1 	bl	8009a08 <USBH_LL_GetURBState>
 8007a26:	4603      	mov	r3, r0
 8007a28:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d128      	bne.n	8007a82 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	8b12      	ldrh	r2, [r2, #24]
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d90e      	bls.n	8007a5a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	8b12      	ldrh	r2, [r2, #24]
 8007a44:	1a9a      	subs	r2, r3, r2
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	8b12      	ldrh	r2, [r2, #24]
 8007a52:	441a      	add	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	61da      	str	r2, [r3, #28]
 8007a58:	e002      	b.n	8007a60 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d004      	beq.n	8007a72 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007a70:	e00e      	b.n	8007a90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f868 	bl	8007b50 <USBH_CDC_TransmitCallback>
      break;
 8007a80:	e006      	b.n	8007a90 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d103      	bne.n	8007a90 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007a90:	bf00      	nop
  }
}
 8007a92:	bf00      	nop
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d002      	beq.n	8007ac0 <CDC_ProcessReception+0x26>
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d00e      	beq.n	8007adc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007abe:	e043      	b.n	8007b48 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	6a19      	ldr	r1, [r3, #32]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	8b5a      	ldrh	r2, [r3, #26]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	7b1b      	ldrb	r3, [r3, #12]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 fc91 	bl	80093f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007ada:	e035      	b.n	8007b48 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	7b1b      	ldrb	r3, [r3, #12]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 ff90 	bl	8009a08 <USBH_LL_GetURBState>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007aec:	7cfb      	ldrb	r3, [r7, #19]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d129      	bne.n	8007b46 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	7b1b      	ldrb	r3, [r3, #12]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fef3 	bl	80098e4 <USBH_LL_GetLastXferSize>
 8007afe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d016      	beq.n	8007b38 <CDC_ProcessReception+0x9e>
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	8b5b      	ldrh	r3, [r3, #26]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d110      	bne.n	8007b38 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1ad2      	subs	r2, r2, r3
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	6a1a      	ldr	r2, [r3, #32]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	441a      	add	r2, r3
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2203      	movs	r2, #3
 8007b32:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007b36:	e006      	b.n	8007b46 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f80f 	bl	8007b64 <USBH_CDC_ReceiveCallback>
      break;
 8007b46:	bf00      	nop
  }
}
 8007b48:	bf00      	nop
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	e029      	b.n	8007bf8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	79fa      	ldrb	r2, [r7, #7]
 8007ba8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f81f 	bl	8007c00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f001 fdc3 	bl	800977c <USBH_LL_Init>

  return USBH_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e009      	b.n	8007c26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	33e0      	adds	r3, #224	@ 0xe0
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b0f      	cmp	r3, #15
 8007c2a:	d9f2      	bls.n	8007c12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	e009      	b.n	8007c46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c4c:	d3f1      	bcc.n	8007c32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2240      	movs	r2, #64	@ 0x40
 8007c72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	331c      	adds	r3, #28
 8007c9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f002 f81d 	bl	8009ce4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f002 f814 	bl	8009ce4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007cc2:	2212      	movs	r2, #18
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f002 f80c 	bl	8009ce4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007cd2:	223e      	movs	r2, #62	@ 0x3e
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f002 f804 	bl	8009ce4 <memset>

  return USBH_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d016      	beq.n	8007d28 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10e      	bne.n	8007d22 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007d0a:	1c59      	adds	r1, r3, #1
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	33de      	adds	r3, #222	@ 0xde
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
 8007d20:	e004      	b.n	8007d2c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d22:	2302      	movs	r3, #2
 8007d24:	73fb      	strb	r3, [r7, #15]
 8007d26:	e001      	b.n	8007d2c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	460b      	mov	r3, r1
 8007d44:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007d50:	78fa      	ldrb	r2, [r7, #3]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d204      	bcs.n	8007d60 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007d5e:	e001      	b.n	8007d64 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007d60:	2302      	movs	r3, #2
 8007d62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b087      	sub	sp, #28
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	4608      	mov	r0, r1
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	461a      	mov	r2, r3
 8007d80:	4603      	mov	r3, r0
 8007d82:	70fb      	strb	r3, [r7, #3]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70bb      	strb	r3, [r7, #2]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007d9a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d9c:	e025      	b.n	8007dea <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	221a      	movs	r2, #26
 8007da2:	fb02 f303 	mul.w	r3, r2, r3
 8007da6:	3308      	adds	r3, #8
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	3302      	adds	r3, #2
 8007dae:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	795b      	ldrb	r3, [r3, #5]
 8007db4:	78fa      	ldrb	r2, [r7, #3]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d002      	beq.n	8007dc0 <USBH_FindInterface+0x4e>
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	2bff      	cmp	r3, #255	@ 0xff
 8007dbe:	d111      	bne.n	8007de4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007dc4:	78ba      	ldrb	r2, [r7, #2]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d002      	beq.n	8007dd0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007dca:	78bb      	ldrb	r3, [r7, #2]
 8007dcc:	2bff      	cmp	r3, #255	@ 0xff
 8007dce:	d109      	bne.n	8007de4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007dd4:	787a      	ldrb	r2, [r7, #1]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d002      	beq.n	8007de0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007dda:	787b      	ldrb	r3, [r7, #1]
 8007ddc:	2bff      	cmp	r3, #255	@ 0xff
 8007dde:	d101      	bne.n	8007de4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	e006      	b.n	8007df2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	3301      	adds	r3, #1
 8007de8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d9d6      	bls.n	8007d9e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007df0:	23ff      	movs	r3, #255	@ 0xff
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fcf4 	bl	80097f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 fe0d 	bl	8009a2e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af04      	add	r7, sp, #16
 8007e26:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007e28:	2302      	movs	r3, #2
 8007e2a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d102      	bne.n	8007e42 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2203      	movs	r2, #3
 8007e40:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b0b      	cmp	r3, #11
 8007e4a:	f200 81bb 	bhi.w	80081c4 <USBH_Process+0x3a4>
 8007e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <USBH_Process+0x34>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e85 	.word	0x08007e85
 8007e58:	08007eb7 	.word	0x08007eb7
 8007e5c:	08007f1f 	.word	0x08007f1f
 8007e60:	0800815f 	.word	0x0800815f
 8007e64:	080081c5 	.word	0x080081c5
 8007e68:	08007fbf 	.word	0x08007fbf
 8007e6c:	08008105 	.word	0x08008105
 8007e70:	08007ff5 	.word	0x08007ff5
 8007e74:	08008015 	.word	0x08008015
 8007e78:	08008033 	.word	0x08008033
 8007e7c:	08008077 	.word	0x08008077
 8007e80:	08008147 	.word	0x08008147
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 819b 	beq.w	80081c8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007e98:	20c8      	movs	r0, #200	@ 0xc8
 8007e9a:	f001 fe12 	bl	8009ac2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fd05 	bl	80098ae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007eb4:	e188      	b.n	80081c8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d107      	bne.n	8007ed0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ece:	e18a      	b.n	80081e6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007ed6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007eda:	d914      	bls.n	8007f06 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d903      	bls.n	8007efe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	220d      	movs	r2, #13
 8007efa:	701a      	strb	r2, [r3, #0]
      break;
 8007efc:	e173      	b.n	80081e6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	701a      	strb	r2, [r3, #0]
      break;
 8007f04:	e16f      	b.n	80081e6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007f0c:	f103 020a 	add.w	r2, r3, #10
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007f16:	200a      	movs	r0, #10
 8007f18:	f001 fdd3 	bl	8009ac2 <USBH_Delay>
      break;
 8007f1c:	e163      	b.n	80081e6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f2e:	2104      	movs	r1, #4
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007f34:	2064      	movs	r0, #100	@ 0x64
 8007f36:	f001 fdc4 	bl	8009ac2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 fc90 	bl	8009860 <USBH_LL_GetSpeed>
 8007f40:	4603      	mov	r3, r0
 8007f42:	461a      	mov	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2205      	movs	r2, #5
 8007f4e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007f50:	2100      	movs	r1, #0
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fa9b 	bl	800948e <USBH_AllocPipe>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007f60:	2180      	movs	r1, #128	@ 0x80
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 fa93 	bl	800948e <USBH_AllocPipe>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	7919      	ldrb	r1, [r3, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f84:	9202      	str	r2, [sp, #8]
 8007f86:	2200      	movs	r2, #0
 8007f88:	9201      	str	r2, [sp, #4]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2280      	movs	r2, #128	@ 0x80
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 fa4d 	bl	8009430 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	7959      	ldrb	r1, [r3, #5]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007faa:	9202      	str	r2, [sp, #8]
 8007fac:	2200      	movs	r2, #0
 8007fae:	9201      	str	r2, [sp, #4]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 fa3a 	bl	8009430 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fbc:	e113      	b.n	80081e6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f916 	bl	80081f0 <USBH_HandleEnum>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f040 80fd 	bne.w	80081cc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d103      	bne.n	8007fec <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007fea:	e0ef      	b.n	80081cc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2207      	movs	r2, #7
 8007ff0:	701a      	strb	r2, [r3, #0]
      break;
 8007ff2:	e0eb      	b.n	80081cc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f000 80e8 	beq.w	80081d0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008006:	2101      	movs	r1, #1
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2208      	movs	r2, #8
 8008010:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008012:	e0dd      	b.n	80081d0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fc3a 	bl	8008896 <USBH_SetCfg>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	f040 80d5 	bne.w	80081d4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2209      	movs	r2, #9
 800802e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008030:	e0d0      	b.n	80081d4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b00      	cmp	r3, #0
 800803e:	d016      	beq.n	800806e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008040:	2101      	movs	r1, #1
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fc4a 	bl	80088dc <USBH_SetFeature>
 8008048:	4603      	mov	r3, r0
 800804a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d103      	bne.n	800805c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	220a      	movs	r2, #10
 8008058:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800805a:	e0bd      	b.n	80081d8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b03      	cmp	r3, #3
 8008062:	f040 80b9 	bne.w	80081d8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	220a      	movs	r2, #10
 800806a:	701a      	strb	r2, [r3, #0]
      break;
 800806c:	e0b4      	b.n	80081d8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	220a      	movs	r2, #10
 8008072:	701a      	strb	r2, [r3, #0]
      break;
 8008074:	e0b0      	b.n	80081d8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 80ad 	beq.w	80081dc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]
 800808e:	e016      	b.n	80080be <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008090:	7bfa      	ldrb	r2, [r7, #15]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	32de      	adds	r2, #222	@ 0xde
 8008096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809a:	791a      	ldrb	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d108      	bne.n	80080b8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80080a6:	7bfa      	ldrb	r2, [r7, #15]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	32de      	adds	r2, #222	@ 0xde
 80080ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80080b6:	e005      	b.n	80080c4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	3301      	adds	r3, #1
 80080bc:	73fb      	strb	r3, [r7, #15]
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0e5      	beq.n	8008090 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d016      	beq.n	80080fc <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d109      	bne.n	80080f4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2206      	movs	r2, #6
 80080e4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080ec:	2103      	movs	r1, #3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080f2:	e073      	b.n	80081dc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	220d      	movs	r2, #13
 80080f8:	701a      	strb	r2, [r3, #0]
      break;
 80080fa:	e06f      	b.n	80081dc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	220d      	movs	r2, #13
 8008100:	701a      	strb	r2, [r3, #0]
      break;
 8008102:	e06b      	b.n	80081dc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800810a:	2b00      	cmp	r3, #0
 800810c:	d017      	beq.n	800813e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	4798      	blx	r3
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d103      	bne.n	800812e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	220b      	movs	r2, #11
 800812a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800812c:	e058      	b.n	80081e0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d154      	bne.n	80081e0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	220d      	movs	r2, #13
 800813a:	701a      	strb	r2, [r3, #0]
      break;
 800813c:	e050      	b.n	80081e0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	220d      	movs	r2, #13
 8008142:	701a      	strb	r2, [r3, #0]
      break;
 8008144:	e04c      	b.n	80081e0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d049      	beq.n	80081e4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	4798      	blx	r3
      }
      break;
 800815c:	e042      	b.n	80081e4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff fd4a 	bl	8007c00 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008172:	2b00      	cmp	r3, #0
 8008174:	d009      	beq.n	800818a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800819a:	2105      	movs	r1, #5
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d107      	bne.n	80081bc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff fe22 	bl	8007dfe <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081ba:	e014      	b.n	80081e6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 fb19 	bl	80097f4 <USBH_LL_Start>
      break;
 80081c2:	e010      	b.n	80081e6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80081c4:	bf00      	nop
 80081c6:	e00e      	b.n	80081e6 <USBH_Process+0x3c6>
      break;
 80081c8:	bf00      	nop
 80081ca:	e00c      	b.n	80081e6 <USBH_Process+0x3c6>
      break;
 80081cc:	bf00      	nop
 80081ce:	e00a      	b.n	80081e6 <USBH_Process+0x3c6>
    break;
 80081d0:	bf00      	nop
 80081d2:	e008      	b.n	80081e6 <USBH_Process+0x3c6>
      break;
 80081d4:	bf00      	nop
 80081d6:	e006      	b.n	80081e6 <USBH_Process+0x3c6>
      break;
 80081d8:	bf00      	nop
 80081da:	e004      	b.n	80081e6 <USBH_Process+0x3c6>
      break;
 80081dc:	bf00      	nop
 80081de:	e002      	b.n	80081e6 <USBH_Process+0x3c6>
      break;
 80081e0:	bf00      	nop
 80081e2:	e000      	b.n	80081e6 <USBH_Process+0x3c6>
      break;
 80081e4:	bf00      	nop
  }
  return USBH_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af04      	add	r7, sp, #16
 80081f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80081f8:	2301      	movs	r3, #1
 80081fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	2b07      	cmp	r3, #7
 8008206:	f200 81bd 	bhi.w	8008584 <USBH_HandleEnum+0x394>
 800820a:	a201      	add	r2, pc, #4	@ (adr r2, 8008210 <USBH_HandleEnum+0x20>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008231 	.word	0x08008231
 8008214:	080082eb 	.word	0x080082eb
 8008218:	08008355 	.word	0x08008355
 800821c:	080083df 	.word	0x080083df
 8008220:	08008449 	.word	0x08008449
 8008224:	080084b9 	.word	0x080084b9
 8008228:	080084ff 	.word	0x080084ff
 800822c:	08008545 	.word	0x08008545
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008230:	2108      	movs	r1, #8
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa4c 	bl	80086d0 <USBH_Get_DevDesc>
 8008238:	4603      	mov	r3, r0
 800823a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d12e      	bne.n	80082a0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7919      	ldrb	r1, [r3, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008266:	9202      	str	r2, [sp, #8]
 8008268:	2200      	movs	r2, #0
 800826a:	9201      	str	r2, [sp, #4]
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	4603      	mov	r3, r0
 8008270:	2280      	movs	r2, #128	@ 0x80
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 f8dc 	bl	8009430 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	7959      	ldrb	r1, [r3, #5]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800828c:	9202      	str	r2, [sp, #8]
 800828e:	2200      	movs	r2, #0
 8008290:	9201      	str	r2, [sp, #4]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	4603      	mov	r3, r0
 8008296:	2200      	movs	r2, #0
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 f8c9 	bl	8009430 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800829e:	e173      	b.n	8008588 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	f040 8170 	bne.w	8008588 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082ae:	3301      	adds	r3, #1
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d903      	bls.n	80082ca <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	220d      	movs	r2, #13
 80082c6:	701a      	strb	r2, [r3, #0]
      break;
 80082c8:	e15e      	b.n	8008588 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	795b      	ldrb	r3, [r3, #5]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 f8fd 	bl	80094d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	791b      	ldrb	r3, [r3, #4]
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 f8f7 	bl	80094d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	701a      	strb	r2, [r3, #0]
      break;
 80082e8:	e14e      	b.n	8008588 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80082ea:	2112      	movs	r1, #18
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f9ef 	bl	80086d0 <USBH_Get_DevDesc>
 80082f2:	4603      	mov	r3, r0
 80082f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d103      	bne.n	8008304 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008302:	e143      	b.n	800858c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2b03      	cmp	r3, #3
 8008308:	f040 8140 	bne.w	800858c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008312:	3301      	adds	r3, #1
 8008314:	b2da      	uxtb	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008322:	2b03      	cmp	r3, #3
 8008324:	d903      	bls.n	800832e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	220d      	movs	r2, #13
 800832a:	701a      	strb	r2, [r3, #0]
      break;
 800832c:	e12e      	b.n	800858c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	795b      	ldrb	r3, [r3, #5]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 f8cb 	bl	80094d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	791b      	ldrb	r3, [r3, #4]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 f8c5 	bl	80094d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]
      break;
 8008352:	e11b      	b.n	800858c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008354:	2101      	movs	r1, #1
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa79 	bl	800884e <USBH_SetAddress>
 800835c:	4603      	mov	r3, r0
 800835e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d130      	bne.n	80083c8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008366:	2002      	movs	r0, #2
 8008368:	f001 fbab 	bl	8009ac2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2203      	movs	r2, #3
 8008378:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	7919      	ldrb	r1, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800838e:	9202      	str	r2, [sp, #8]
 8008390:	2200      	movs	r2, #0
 8008392:	9201      	str	r2, [sp, #4]
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	4603      	mov	r3, r0
 8008398:	2280      	movs	r2, #128	@ 0x80
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 f848 	bl	8009430 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	7959      	ldrb	r1, [r3, #5]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083b4:	9202      	str	r2, [sp, #8]
 80083b6:	2200      	movs	r2, #0
 80083b8:	9201      	str	r2, [sp, #4]
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	4603      	mov	r3, r0
 80083be:	2200      	movs	r2, #0
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 f835 	bl	8009430 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80083c6:	e0e3      	b.n	8008590 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	f040 80e0 	bne.w	8008590 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220d      	movs	r2, #13
 80083d4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	705a      	strb	r2, [r3, #1]
      break;
 80083dc:	e0d8      	b.n	8008590 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80083de:	2109      	movs	r1, #9
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f9a1 	bl	8008728 <USBH_Get_CfgDesc>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d103      	bne.n	80083f8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2204      	movs	r2, #4
 80083f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083f6:	e0cd      	b.n	8008594 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	f040 80ca 	bne.w	8008594 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008406:	3301      	adds	r3, #1
 8008408:	b2da      	uxtb	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008416:	2b03      	cmp	r3, #3
 8008418:	d903      	bls.n	8008422 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	220d      	movs	r2, #13
 800841e:	701a      	strb	r2, [r3, #0]
      break;
 8008420:	e0b8      	b.n	8008594 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	795b      	ldrb	r3, [r3, #5]
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f001 f851 	bl	80094d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	791b      	ldrb	r3, [r3, #4]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f84b 	bl	80094d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	701a      	strb	r2, [r3, #0]
      break;
 8008446:	e0a5      	b.n	8008594 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f969 	bl	8008728 <USBH_Get_CfgDesc>
 8008456:	4603      	mov	r3, r0
 8008458:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800845a:	7bbb      	ldrb	r3, [r7, #14]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d103      	bne.n	8008468 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2205      	movs	r2, #5
 8008464:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008466:	e097      	b.n	8008598 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	2b03      	cmp	r3, #3
 800846c:	f040 8094 	bne.w	8008598 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008476:	3301      	adds	r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008486:	2b03      	cmp	r3, #3
 8008488:	d903      	bls.n	8008492 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	220d      	movs	r2, #13
 800848e:	701a      	strb	r2, [r3, #0]
      break;
 8008490:	e082      	b.n	8008598 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	795b      	ldrb	r3, [r3, #5]
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 f819 	bl	80094d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	791b      	ldrb	r3, [r3, #4]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 f813 	bl	80094d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	701a      	strb	r2, [r3, #0]
      break;
 80084b6:	e06f      	b.n	8008598 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d019      	beq.n	80084f6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80084ce:	23ff      	movs	r3, #255	@ 0xff
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f953 	bl	800877c <USBH_Get_StringDesc>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2206      	movs	r2, #6
 80084e4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80084e6:	e059      	b.n	800859c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d156      	bne.n	800859c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2206      	movs	r2, #6
 80084f2:	705a      	strb	r2, [r3, #1]
      break;
 80084f4:	e052      	b.n	800859c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2206      	movs	r2, #6
 80084fa:	705a      	strb	r2, [r3, #1]
      break;
 80084fc:	e04e      	b.n	800859c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008504:	2b00      	cmp	r3, #0
 8008506:	d019      	beq.n	800853c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008514:	23ff      	movs	r3, #255	@ 0xff
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f930 	bl	800877c <USBH_Get_StringDesc>
 800851c:	4603      	mov	r3, r0
 800851e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d103      	bne.n	800852e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2207      	movs	r2, #7
 800852a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800852c:	e038      	b.n	80085a0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b03      	cmp	r3, #3
 8008532:	d135      	bne.n	80085a0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2207      	movs	r2, #7
 8008538:	705a      	strb	r2, [r3, #1]
      break;
 800853a:	e031      	b.n	80085a0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2207      	movs	r2, #7
 8008540:	705a      	strb	r2, [r3, #1]
      break;
 8008542:	e02d      	b.n	80085a0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800854a:	2b00      	cmp	r3, #0
 800854c:	d017      	beq.n	800857e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800855a:	23ff      	movs	r3, #255	@ 0xff
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f90d 	bl	800877c <USBH_Get_StringDesc>
 8008562:	4603      	mov	r3, r0
 8008564:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008570:	e018      	b.n	80085a4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b03      	cmp	r3, #3
 8008576:	d115      	bne.n	80085a4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
      break;
 800857c:	e012      	b.n	80085a4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]
      break;
 8008582:	e00f      	b.n	80085a4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008584:	bf00      	nop
 8008586:	e00e      	b.n	80085a6 <USBH_HandleEnum+0x3b6>
      break;
 8008588:	bf00      	nop
 800858a:	e00c      	b.n	80085a6 <USBH_HandleEnum+0x3b6>
      break;
 800858c:	bf00      	nop
 800858e:	e00a      	b.n	80085a6 <USBH_HandleEnum+0x3b6>
      break;
 8008590:	bf00      	nop
 8008592:	e008      	b.n	80085a6 <USBH_HandleEnum+0x3b6>
      break;
 8008594:	bf00      	nop
 8008596:	e006      	b.n	80085a6 <USBH_HandleEnum+0x3b6>
      break;
 8008598:	bf00      	nop
 800859a:	e004      	b.n	80085a6 <USBH_HandleEnum+0x3b6>
      break;
 800859c:	bf00      	nop
 800859e:	e002      	b.n	80085a6 <USBH_HandleEnum+0x3b6>
      break;
 80085a0:	bf00      	nop
 80085a2:	e000      	b.n	80085a6 <USBH_HandleEnum+0x3b6>
      break;
 80085a4:	bf00      	nop
  }
  return Status;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f804 	bl	80085f2 <USBH_HandleSof>
}
 80085ea:	bf00      	nop
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b0b      	cmp	r3, #11
 8008602:	d10a      	bne.n	800861a <USBH_HandleSof+0x28>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	4798      	blx	r3
  }
}
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008632:	bf00      	nop
}
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800864e:	bf00      	nop
}
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f8be 	bl	800982a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	791b      	ldrb	r3, [r3, #4]
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 ff0b 	bl	80094d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	795b      	ldrb	r3, [r3, #5]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 ff05 	bl	80094d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80086dc:	887b      	ldrh	r3, [r7, #2]
 80086de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086e2:	d901      	bls.n	80086e8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e01b      	b.n	8008720 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80086ee:	887b      	ldrh	r3, [r7, #2]
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	4613      	mov	r3, r2
 80086f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086f8:	2100      	movs	r1, #0
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f872 	bl	80087e4 <USBH_GetDescriptor>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008710:	887a      	ldrh	r2, [r7, #2]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f929 	bl	800896c <USBH_ParseDevDesc>
 800871a:	4603      	mov	r3, r0
 800871c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af02      	add	r7, sp, #8
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	331c      	adds	r3, #28
 8008738:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800873a:	887b      	ldrh	r3, [r7, #2]
 800873c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008740:	d901      	bls.n	8008746 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008742:	2303      	movs	r3, #3
 8008744:	e016      	b.n	8008774 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008746:	887b      	ldrh	r3, [r7, #2]
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008750:	2100      	movs	r1, #0
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f846 	bl	80087e4 <USBH_GetDescriptor>
 8008758:	4603      	mov	r3, r0
 800875a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d107      	bne.n	8008772 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008762:	887b      	ldrh	r3, [r7, #2]
 8008764:	461a      	mov	r2, r3
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f9af 	bl	8008acc <USBH_ParseCfgDesc>
 800876e:	4603      	mov	r3, r0
 8008770:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af02      	add	r7, sp, #8
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	461a      	mov	r2, r3
 8008788:	460b      	mov	r3, r1
 800878a:	72fb      	strb	r3, [r7, #11]
 800878c:	4613      	mov	r3, r2
 800878e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008790:	893b      	ldrh	r3, [r7, #8]
 8008792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008796:	d802      	bhi.n	800879e <USBH_Get_StringDesc+0x22>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800879e:	2303      	movs	r3, #3
 80087a0:	e01c      	b.n	80087dc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80087aa:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80087b2:	893b      	ldrh	r3, [r7, #8]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	460b      	mov	r3, r1
 80087b8:	2100      	movs	r1, #0
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 f812 	bl	80087e4 <USBH_GetDescriptor>
 80087c0:	4603      	mov	r3, r0
 80087c2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d107      	bne.n	80087da <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80087d0:	893a      	ldrh	r2, [r7, #8]
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fb8d 	bl	8008ef4 <USBH_ParseStringDesc>
  }

  return status;
 80087da:	7dfb      	ldrb	r3, [r7, #23]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	607b      	str	r3, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	72fb      	strb	r3, [r7, #11]
 80087f2:	4613      	mov	r3, r2
 80087f4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	789b      	ldrb	r3, [r3, #2]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d11c      	bne.n	8008838 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80087fe:	7afb      	ldrb	r3, [r7, #11]
 8008800:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008804:	b2da      	uxtb	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2206      	movs	r2, #6
 800880e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	893a      	ldrh	r2, [r7, #8]
 8008814:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008816:	893b      	ldrh	r3, [r7, #8]
 8008818:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800881c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008820:	d104      	bne.n	800882c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f240 4209 	movw	r2, #1033	@ 0x409
 8008828:	829a      	strh	r2, [r3, #20]
 800882a:	e002      	b.n	8008832 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	8b3a      	ldrh	r2, [r7, #24]
 8008836:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008838:	8b3b      	ldrh	r3, [r7, #24]
 800883a:	461a      	mov	r2, r3
 800883c:	6879      	ldr	r1, [r7, #4]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 fba5 	bl	8008f8e <USBH_CtlReq>
 8008844:	4603      	mov	r3, r0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	460b      	mov	r3, r1
 8008858:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	789b      	ldrb	r3, [r3, #2]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d10f      	bne.n	8008882 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2205      	movs	r2, #5
 800886c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800886e:	78fb      	ldrb	r3, [r7, #3]
 8008870:	b29a      	uxth	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008882:	2200      	movs	r2, #0
 8008884:	2100      	movs	r1, #0
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fb81 	bl	8008f8e <USBH_CtlReq>
 800888c:	4603      	mov	r3, r0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	789b      	ldrb	r3, [r3, #2]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d10e      	bne.n	80088c8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2209      	movs	r2, #9
 80088b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	887a      	ldrh	r2, [r7, #2]
 80088ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80088c8:	2200      	movs	r2, #0
 80088ca:	2100      	movs	r1, #0
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fb5e 	bl	8008f8e <USBH_CtlReq>
 80088d2:	4603      	mov	r3, r0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	789b      	ldrb	r3, [r3, #2]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d10f      	bne.n	8008910 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2203      	movs	r2, #3
 80088fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	b29a      	uxth	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008910:	2200      	movs	r2, #0
 8008912:	2100      	movs	r1, #0
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fb3a 	bl	8008f8e <USBH_CtlReq>
 800891a:	4603      	mov	r3, r0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	789b      	ldrb	r3, [r3, #2]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d10f      	bne.n	8008958 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	b29a      	uxth	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008958:	2200      	movs	r2, #0
 800895a:	2100      	movs	r1, #0
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fb16 	bl	8008f8e <USBH_CtlReq>
 8008962:	4603      	mov	r3, r0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008980:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800898c:	2302      	movs	r3, #2
 800898e:	e094      	b.n	8008aba <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	781a      	ldrb	r2, [r3, #0]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	785a      	ldrb	r2, [r3, #1]
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	3302      	adds	r3, #2
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	3303      	adds	r3, #3
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	4313      	orrs	r3, r2
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	791a      	ldrb	r2, [r3, #4]
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	795a      	ldrb	r2, [r3, #5]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	799a      	ldrb	r2, [r3, #6]
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	79da      	ldrb	r2, [r3, #7]
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d11b      	bne.n	8008a26 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	79db      	ldrb	r3, [r3, #7]
 80089f2:	2b20      	cmp	r3, #32
 80089f4:	dc0f      	bgt.n	8008a16 <USBH_ParseDevDesc+0xaa>
 80089f6:	2b08      	cmp	r3, #8
 80089f8:	db0f      	blt.n	8008a1a <USBH_ParseDevDesc+0xae>
 80089fa:	3b08      	subs	r3, #8
 80089fc:	4a32      	ldr	r2, [pc, #200]	@ (8008ac8 <USBH_ParseDevDesc+0x15c>)
 80089fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	bf14      	ite	ne
 8008a0a:	2301      	movne	r3, #1
 8008a0c:	2300      	moveq	r3, #0
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d106      	bne.n	8008a22 <USBH_ParseDevDesc+0xb6>
 8008a14:	e001      	b.n	8008a1a <USBH_ParseDevDesc+0xae>
 8008a16:	2b40      	cmp	r3, #64	@ 0x40
 8008a18:	d003      	beq.n	8008a22 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	71da      	strb	r2, [r3, #7]
        break;
 8008a20:	e000      	b.n	8008a24 <USBH_ParseDevDesc+0xb8>
        break;
 8008a22:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008a24:	e00e      	b.n	8008a44 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d107      	bne.n	8008a40 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	79db      	ldrb	r3, [r3, #7]
 8008a34:	2b08      	cmp	r3, #8
 8008a36:	d005      	beq.n	8008a44 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	2208      	movs	r2, #8
 8008a3c:	71da      	strb	r2, [r3, #7]
 8008a3e:	e001      	b.n	8008a44 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008a40:	2303      	movs	r3, #3
 8008a42:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008a44:	88fb      	ldrh	r3, [r7, #6]
 8008a46:	2b08      	cmp	r3, #8
 8008a48:	d936      	bls.n	8008ab8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	3308      	adds	r3, #8
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	3309      	adds	r3, #9
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	330a      	adds	r3, #10
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	330b      	adds	r3, #11
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	021b      	lsls	r3, r3, #8
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	4313      	orrs	r3, r2
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	330c      	adds	r3, #12
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	330d      	adds	r3, #13
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	021b      	lsls	r3, r3, #8
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	4313      	orrs	r3, r2
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	7b9a      	ldrb	r2, [r3, #14]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	7bda      	ldrb	r2, [r3, #15]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	7c1a      	ldrb	r2, [r3, #16]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	7c5a      	ldrb	r2, [r3, #17]
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	371c      	adds	r7, #28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	01000101 	.word	0x01000101

08008acc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08c      	sub	sp, #48	@ 0x30
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008ae0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008afa:	2302      	movs	r3, #2
 8008afc:	e0da      	b.n	8008cb4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b09      	cmp	r3, #9
 8008b08:	d002      	beq.n	8008b10 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0c:	2209      	movs	r2, #9
 8008b0e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	781a      	ldrb	r2, [r3, #0]
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	785a      	ldrb	r2, [r3, #1]
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	3302      	adds	r3, #2
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	3303      	adds	r3, #3
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	4313      	orrs	r3, r2
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b3a:	bf28      	it	cs
 8008b3c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	791a      	ldrb	r2, [r3, #4]
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	795a      	ldrb	r2, [r3, #5]
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	799a      	ldrb	r2, [r3, #6]
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	79da      	ldrb	r2, [r3, #7]
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	7a1a      	ldrb	r2, [r3, #8]
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b6e:	88fb      	ldrh	r3, [r7, #6]
 8008b70:	2b09      	cmp	r3, #9
 8008b72:	f240 809d 	bls.w	8008cb0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b76:	2309      	movs	r3, #9
 8008b78:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b7e:	e081      	b.n	8008c84 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b80:	f107 0316 	add.w	r3, r7, #22
 8008b84:	4619      	mov	r1, r3
 8008b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b88:	f000 f9e7 	bl	8008f5a <USBH_GetNextDesc>
 8008b8c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b90:	785b      	ldrb	r3, [r3, #1]
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d176      	bne.n	8008c84 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b09      	cmp	r3, #9
 8008b9c:	d002      	beq.n	8008ba4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba0:	2209      	movs	r2, #9
 8008ba2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ba8:	221a      	movs	r2, #26
 8008baa:	fb02 f303 	mul.w	r3, r2, r3
 8008bae:	3308      	adds	r3, #8
 8008bb0:	6a3a      	ldr	r2, [r7, #32]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	3302      	adds	r3, #2
 8008bb6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008bb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bba:	69f8      	ldr	r0, [r7, #28]
 8008bbc:	f000 f87e 	bl	8008cbc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008bca:	e043      	b.n	8008c54 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008bcc:	f107 0316 	add.w	r3, r7, #22
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bd4:	f000 f9c1 	bl	8008f5a <USBH_GetNextDesc>
 8008bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bdc:	785b      	ldrb	r3, [r3, #1]
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d138      	bne.n	8008c54 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	795b      	ldrb	r3, [r3, #5]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d113      	bne.n	8008c12 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d003      	beq.n	8008bfa <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	799b      	ldrb	r3, [r3, #6]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d10b      	bne.n	8008c12 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	79db      	ldrb	r3, [r3, #7]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10b      	bne.n	8008c1a <USBH_ParseCfgDesc+0x14e>
 8008c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b09      	cmp	r3, #9
 8008c08:	d007      	beq.n	8008c1a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0c:	2209      	movs	r2, #9
 8008c0e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c10:	e003      	b.n	8008c1a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c14:	2207      	movs	r2, #7
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e000      	b.n	8008c1c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c1a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c20:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008c24:	3201      	adds	r2, #1
 8008c26:	00d2      	lsls	r2, r2, #3
 8008c28:	211a      	movs	r1, #26
 8008c2a:	fb01 f303 	mul.w	r3, r1, r3
 8008c2e:	4413      	add	r3, r2
 8008c30:	3308      	adds	r3, #8
 8008c32:	6a3a      	ldr	r2, [r7, #32]
 8008c34:	4413      	add	r3, r2
 8008c36:	3304      	adds	r3, #4
 8008c38:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c3c:	69b9      	ldr	r1, [r7, #24]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 f870 	bl	8008d24 <USBH_ParseEPDesc>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008c4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c4e:	3301      	adds	r3, #1
 8008c50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	791b      	ldrb	r3, [r3, #4]
 8008c58:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d204      	bcs.n	8008c6a <USBH_ParseCfgDesc+0x19e>
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	885a      	ldrh	r2, [r3, #2]
 8008c64:	8afb      	ldrh	r3, [r7, #22]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d8b0      	bhi.n	8008bcc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	791b      	ldrb	r3, [r3, #4]
 8008c6e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d201      	bcs.n	8008c7a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e01c      	b.n	8008cb4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c7e:	3301      	adds	r3, #1
 8008c80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d805      	bhi.n	8008c98 <USBH_ParseCfgDesc+0x1cc>
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	885a      	ldrh	r2, [r3, #2]
 8008c90:	8afb      	ldrh	r3, [r7, #22]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	f63f af74 	bhi.w	8008b80 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	791b      	ldrb	r3, [r3, #4]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	bf28      	it	cs
 8008ca0:	2302      	movcs	r3, #2
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d201      	bcs.n	8008cb0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e001      	b.n	8008cb4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3730      	adds	r7, #48	@ 0x30
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	785a      	ldrb	r2, [r3, #1]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	789a      	ldrb	r2, [r3, #2]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	78da      	ldrb	r2, [r3, #3]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	bf28      	it	cs
 8008cf0:	2302      	movcs	r3, #2
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	795a      	ldrb	r2, [r3, #5]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	799a      	ldrb	r2, [r3, #6]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	79da      	ldrb	r2, [r3, #7]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	7a1a      	ldrb	r2, [r3, #8]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	721a      	strb	r2, [r3, #8]
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	781a      	ldrb	r2, [r3, #0]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	785a      	ldrb	r2, [r3, #1]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	789a      	ldrb	r2, [r3, #2]
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	78da      	ldrb	r2, [r3, #3]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3304      	adds	r3, #4
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	3305      	adds	r3, #5
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	021b      	lsls	r3, r3, #8
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	4313      	orrs	r3, r2
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	799a      	ldrb	r2, [r3, #6]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	889b      	ldrh	r3, [r3, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d86:	d804      	bhi.n	8008d92 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d90:	d901      	bls.n	8008d96 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008d92:	2303      	movs	r3, #3
 8008d94:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d136      	bne.n	8008e0e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	78db      	ldrb	r3, [r3, #3]
 8008da4:	f003 0303 	and.w	r3, r3, #3
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d108      	bne.n	8008dbe <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	889b      	ldrh	r3, [r3, #4]
 8008db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008db4:	f240 8097 	bls.w	8008ee6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008db8:	2303      	movs	r3, #3
 8008dba:	75fb      	strb	r3, [r7, #23]
 8008dbc:	e093      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	78db      	ldrb	r3, [r3, #3]
 8008dc2:	f003 0303 	and.w	r3, r3, #3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d107      	bne.n	8008dda <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	889b      	ldrh	r3, [r3, #4]
 8008dce:	2b40      	cmp	r3, #64	@ 0x40
 8008dd0:	f240 8089 	bls.w	8008ee6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	75fb      	strb	r3, [r7, #23]
 8008dd8:	e085      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	78db      	ldrb	r3, [r3, #3]
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d005      	beq.n	8008df2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	78db      	ldrb	r3, [r3, #3]
 8008dea:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d10a      	bne.n	8008e08 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	799b      	ldrb	r3, [r3, #6]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <USBH_ParseEPDesc+0xde>
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	799b      	ldrb	r3, [r3, #6]
 8008dfe:	2b10      	cmp	r3, #16
 8008e00:	d970      	bls.n	8008ee4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008e02:	2303      	movs	r3, #3
 8008e04:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e06:	e06d      	b.n	8008ee4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	75fb      	strb	r3, [r7, #23]
 8008e0c:	e06b      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d13c      	bne.n	8008e92 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	78db      	ldrb	r3, [r3, #3]
 8008e1c:	f003 0303 	and.w	r3, r3, #3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d005      	beq.n	8008e30 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	78db      	ldrb	r3, [r3, #3]
 8008e28:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d106      	bne.n	8008e3e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	889b      	ldrh	r3, [r3, #4]
 8008e34:	2b40      	cmp	r3, #64	@ 0x40
 8008e36:	d956      	bls.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008e3c:	e053      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	78db      	ldrb	r3, [r3, #3]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d10e      	bne.n	8008e68 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	799b      	ldrb	r3, [r3, #6]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d007      	beq.n	8008e62 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008e56:	2b10      	cmp	r3, #16
 8008e58:	d803      	bhi.n	8008e62 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008e5e:	2b40      	cmp	r3, #64	@ 0x40
 8008e60:	d941      	bls.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e62:	2303      	movs	r3, #3
 8008e64:	75fb      	strb	r3, [r7, #23]
 8008e66:	e03e      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	78db      	ldrb	r3, [r3, #3]
 8008e6c:	f003 0303 	and.w	r3, r3, #3
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d10b      	bne.n	8008e8c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	799b      	ldrb	r3, [r3, #6]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <USBH_ParseEPDesc+0x162>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	889b      	ldrh	r3, [r3, #4]
 8008e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e84:	d32f      	bcc.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e86:	2303      	movs	r3, #3
 8008e88:	75fb      	strb	r3, [r7, #23]
 8008e8a:	e02c      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	75fb      	strb	r3, [r7, #23]
 8008e90:	e029      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d120      	bne.n	8008ede <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	78db      	ldrb	r3, [r3, #3]
 8008ea0:	f003 0303 	and.w	r3, r3, #3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d106      	bne.n	8008eb6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	889b      	ldrh	r3, [r3, #4]
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d01a      	beq.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	75fb      	strb	r3, [r7, #23]
 8008eb4:	e017      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	78db      	ldrb	r3, [r3, #3]
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d10a      	bne.n	8008ed8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	799b      	ldrb	r3, [r3, #6]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <USBH_ParseEPDesc+0x1ae>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	889b      	ldrh	r3, [r3, #4]
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	d909      	bls.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	75fb      	strb	r3, [r7, #23]
 8008ed6:	e006      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	75fb      	strb	r3, [r7, #23]
 8008edc:	e003      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	75fb      	strb	r3, [r7, #23]
 8008ee2:	e000      	b.n	8008ee6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ee4:	bf00      	nop
  }

  return status;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	371c      	adds	r7, #28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3301      	adds	r3, #1
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d120      	bne.n	8008f4e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	1e9a      	subs	r2, r3, #2
 8008f12:	88fb      	ldrh	r3, [r7, #6]
 8008f14:	4293      	cmp	r3, r2
 8008f16:	bf28      	it	cs
 8008f18:	4613      	movcs	r3, r2
 8008f1a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3302      	adds	r3, #2
 8008f20:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008f22:	2300      	movs	r3, #0
 8008f24:	82fb      	strh	r3, [r7, #22]
 8008f26:	e00b      	b.n	8008f40 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008f28:	8afb      	ldrh	r3, [r7, #22]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	3301      	adds	r3, #1
 8008f38:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f3a:	8afb      	ldrh	r3, [r7, #22]
 8008f3c:	3302      	adds	r3, #2
 8008f3e:	82fb      	strh	r3, [r7, #22]
 8008f40:	8afa      	ldrh	r2, [r7, #22]
 8008f42:	8abb      	ldrh	r3, [r7, #20]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d3ef      	bcc.n	8008f28 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	701a      	strb	r2, [r3, #0]
  }
}
 8008f4e:	bf00      	nop
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f80:	68fb      	ldr	r3, [r7, #12]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b086      	sub	sp, #24
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	789b      	ldrb	r3, [r3, #2]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d002      	beq.n	8008fae <USBH_CtlReq+0x20>
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d00f      	beq.n	8008fcc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008fac:	e027      	b.n	8008ffe <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	88fa      	ldrh	r2, [r7, #6]
 8008fb8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8008fca:	e018      	b.n	8008ffe <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f81b 	bl	8009008 <USBH_HandleControl>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <USBH_CtlReq+0x54>
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d106      	bne.n	8008ff0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	761a      	strb	r2, [r3, #24]
      break;
 8008fee:	e005      	b.n	8008ffc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d102      	bne.n	8008ffc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	709a      	strb	r2, [r3, #2]
      break;
 8008ffc:	bf00      	nop
  }
  return status;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af02      	add	r7, sp, #8
 800900e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009010:	2301      	movs	r3, #1
 8009012:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009014:	2300      	movs	r3, #0
 8009016:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	7e1b      	ldrb	r3, [r3, #24]
 800901c:	3b01      	subs	r3, #1
 800901e:	2b0a      	cmp	r3, #10
 8009020:	f200 8156 	bhi.w	80092d0 <USBH_HandleControl+0x2c8>
 8009024:	a201      	add	r2, pc, #4	@ (adr r2, 800902c <USBH_HandleControl+0x24>)
 8009026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902a:	bf00      	nop
 800902c:	08009059 	.word	0x08009059
 8009030:	08009073 	.word	0x08009073
 8009034:	080090dd 	.word	0x080090dd
 8009038:	08009103 	.word	0x08009103
 800903c:	0800913b 	.word	0x0800913b
 8009040:	08009165 	.word	0x08009165
 8009044:	080091b7 	.word	0x080091b7
 8009048:	080091d9 	.word	0x080091d9
 800904c:	08009215 	.word	0x08009215
 8009050:	0800923b 	.word	0x0800923b
 8009054:	08009279 	.word	0x08009279
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f103 0110 	add.w	r1, r3, #16
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	795b      	ldrb	r3, [r3, #5]
 8009062:	461a      	mov	r2, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f943 	bl	80092f0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2202      	movs	r2, #2
 800906e:	761a      	strb	r2, [r3, #24]
      break;
 8009070:	e139      	b.n	80092e6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	795b      	ldrb	r3, [r3, #5]
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fcc5 	bl	8009a08 <USBH_LL_GetURBState>
 800907e:	4603      	mov	r3, r0
 8009080:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d11e      	bne.n	80090c6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	7c1b      	ldrb	r3, [r3, #16]
 800908c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009090:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	8adb      	ldrh	r3, [r3, #22]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00a      	beq.n	80090b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800909a:	7b7b      	ldrb	r3, [r7, #13]
 800909c:	2b80      	cmp	r3, #128	@ 0x80
 800909e:	d103      	bne.n	80090a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2203      	movs	r2, #3
 80090a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090a6:	e115      	b.n	80092d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2205      	movs	r2, #5
 80090ac:	761a      	strb	r2, [r3, #24]
      break;
 80090ae:	e111      	b.n	80092d4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80090b0:	7b7b      	ldrb	r3, [r7, #13]
 80090b2:	2b80      	cmp	r3, #128	@ 0x80
 80090b4:	d103      	bne.n	80090be <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2209      	movs	r2, #9
 80090ba:	761a      	strb	r2, [r3, #24]
      break;
 80090bc:	e10a      	b.n	80092d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2207      	movs	r2, #7
 80090c2:	761a      	strb	r2, [r3, #24]
      break;
 80090c4:	e106      	b.n	80092d4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d003      	beq.n	80090d4 <USBH_HandleControl+0xcc>
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	f040 8100 	bne.w	80092d4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	220b      	movs	r2, #11
 80090d8:	761a      	strb	r2, [r3, #24]
      break;
 80090da:	e0fb      	b.n	80092d4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6899      	ldr	r1, [r3, #8]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	899a      	ldrh	r2, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	791b      	ldrb	r3, [r3, #4]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f93a 	bl	800936e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2204      	movs	r2, #4
 80090fe:	761a      	strb	r2, [r3, #24]
      break;
 8009100:	e0f1      	b.n	80092e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	791b      	ldrb	r3, [r3, #4]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fc7d 	bl	8009a08 <USBH_LL_GetURBState>
 800910e:	4603      	mov	r3, r0
 8009110:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009112:	7bbb      	ldrb	r3, [r7, #14]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d102      	bne.n	800911e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2209      	movs	r2, #9
 800911c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b05      	cmp	r3, #5
 8009122:	d102      	bne.n	800912a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009124:	2303      	movs	r3, #3
 8009126:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009128:	e0d6      	b.n	80092d8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	2b04      	cmp	r3, #4
 800912e:	f040 80d3 	bne.w	80092d8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	220b      	movs	r2, #11
 8009136:	761a      	strb	r2, [r3, #24]
      break;
 8009138:	e0ce      	b.n	80092d8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6899      	ldr	r1, [r3, #8]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	899a      	ldrh	r2, [r3, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	795b      	ldrb	r3, [r3, #5]
 8009146:	2001      	movs	r0, #1
 8009148:	9000      	str	r0, [sp, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f8ea 	bl	8009324 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2206      	movs	r2, #6
 8009160:	761a      	strb	r2, [r3, #24]
      break;
 8009162:	e0c0      	b.n	80092e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	795b      	ldrb	r3, [r3, #5]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fc4c 	bl	8009a08 <USBH_LL_GetURBState>
 8009170:	4603      	mov	r3, r0
 8009172:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d103      	bne.n	8009182 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2207      	movs	r2, #7
 800917e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009180:	e0ac      	b.n	80092dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	2b05      	cmp	r3, #5
 8009186:	d105      	bne.n	8009194 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	220c      	movs	r2, #12
 800918c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800918e:	2303      	movs	r3, #3
 8009190:	73fb      	strb	r3, [r7, #15]
      break;
 8009192:	e0a3      	b.n	80092dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d103      	bne.n	80091a2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2205      	movs	r2, #5
 800919e:	761a      	strb	r2, [r3, #24]
      break;
 80091a0:	e09c      	b.n	80092dc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	f040 8099 	bne.w	80092dc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	220b      	movs	r2, #11
 80091ae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80091b0:	2302      	movs	r3, #2
 80091b2:	73fb      	strb	r3, [r7, #15]
      break;
 80091b4:	e092      	b.n	80092dc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	791b      	ldrb	r3, [r3, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	2100      	movs	r1, #0
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f8d5 	bl	800936e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2208      	movs	r2, #8
 80091d4:	761a      	strb	r2, [r3, #24]

      break;
 80091d6:	e086      	b.n	80092e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	791b      	ldrb	r3, [r3, #4]
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fc12 	bl	8009a08 <USBH_LL_GetURBState>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d105      	bne.n	80091fa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	220d      	movs	r2, #13
 80091f2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091f8:	e072      	b.n	80092e0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d103      	bne.n	8009208 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	220b      	movs	r2, #11
 8009204:	761a      	strb	r2, [r3, #24]
      break;
 8009206:	e06b      	b.n	80092e0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	2b05      	cmp	r3, #5
 800920c:	d168      	bne.n	80092e0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800920e:	2303      	movs	r3, #3
 8009210:	73fb      	strb	r3, [r7, #15]
      break;
 8009212:	e065      	b.n	80092e0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	795b      	ldrb	r3, [r3, #5]
 8009218:	2201      	movs	r2, #1
 800921a:	9200      	str	r2, [sp, #0]
 800921c:	2200      	movs	r2, #0
 800921e:	2100      	movs	r1, #0
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f87f 	bl	8009324 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800922c:	b29a      	uxth	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	220a      	movs	r2, #10
 8009236:	761a      	strb	r2, [r3, #24]
      break;
 8009238:	e055      	b.n	80092e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	795b      	ldrb	r3, [r3, #5]
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fbe1 	bl	8009a08 <USBH_LL_GetURBState>
 8009246:	4603      	mov	r3, r0
 8009248:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800924a:	7bbb      	ldrb	r3, [r7, #14]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d105      	bne.n	800925c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	220d      	movs	r2, #13
 8009258:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800925a:	e043      	b.n	80092e4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d103      	bne.n	800926a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2209      	movs	r2, #9
 8009266:	761a      	strb	r2, [r3, #24]
      break;
 8009268:	e03c      	b.n	80092e4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	2b04      	cmp	r3, #4
 800926e:	d139      	bne.n	80092e4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	220b      	movs	r2, #11
 8009274:	761a      	strb	r2, [r3, #24]
      break;
 8009276:	e035      	b.n	80092e4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	7e5b      	ldrb	r3, [r3, #25]
 800927c:	3301      	adds	r3, #1
 800927e:	b2da      	uxtb	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	765a      	strb	r2, [r3, #25]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7e5b      	ldrb	r3, [r3, #25]
 8009288:	2b02      	cmp	r3, #2
 800928a:	d806      	bhi.n	800929a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009298:	e025      	b.n	80092e6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80092a0:	2106      	movs	r1, #6
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	795b      	ldrb	r3, [r3, #5]
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f90c 	bl	80094d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	791b      	ldrb	r3, [r3, #4]
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f906 	bl	80094d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80092ca:	2302      	movs	r3, #2
 80092cc:	73fb      	strb	r3, [r7, #15]
      break;
 80092ce:	e00a      	b.n	80092e6 <USBH_HandleControl+0x2de>

    default:
      break;
 80092d0:	bf00      	nop
 80092d2:	e008      	b.n	80092e6 <USBH_HandleControl+0x2de>
      break;
 80092d4:	bf00      	nop
 80092d6:	e006      	b.n	80092e6 <USBH_HandleControl+0x2de>
      break;
 80092d8:	bf00      	nop
 80092da:	e004      	b.n	80092e6 <USBH_HandleControl+0x2de>
      break;
 80092dc:	bf00      	nop
 80092de:	e002      	b.n	80092e6 <USBH_HandleControl+0x2de>
      break;
 80092e0:	bf00      	nop
 80092e2:	e000      	b.n	80092e6 <USBH_HandleControl+0x2de>
      break;
 80092e4:	bf00      	nop
  }

  return status;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af04      	add	r7, sp, #16
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	4613      	mov	r3, r2
 80092fc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092fe:	79f9      	ldrb	r1, [r7, #7]
 8009300:	2300      	movs	r3, #0
 8009302:	9303      	str	r3, [sp, #12]
 8009304:	2308      	movs	r3, #8
 8009306:	9302      	str	r3, [sp, #8]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	9301      	str	r3, [sp, #4]
 800930c:	2300      	movs	r3, #0
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	2300      	movs	r3, #0
 8009312:	2200      	movs	r2, #0
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fb46 	bl	80099a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af04      	add	r7, sp, #16
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	4611      	mov	r1, r2
 8009330:	461a      	mov	r2, r3
 8009332:	460b      	mov	r3, r1
 8009334:	80fb      	strh	r3, [r7, #6]
 8009336:	4613      	mov	r3, r2
 8009338:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009348:	7979      	ldrb	r1, [r7, #5]
 800934a:	7e3b      	ldrb	r3, [r7, #24]
 800934c:	9303      	str	r3, [sp, #12]
 800934e:	88fb      	ldrh	r3, [r7, #6]
 8009350:	9302      	str	r3, [sp, #8]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	2301      	movs	r3, #1
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	2300      	movs	r3, #0
 800935c:	2200      	movs	r2, #0
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 fb21 	bl	80099a6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b088      	sub	sp, #32
 8009372:	af04      	add	r7, sp, #16
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	4611      	mov	r1, r2
 800937a:	461a      	mov	r2, r3
 800937c:	460b      	mov	r3, r1
 800937e:	80fb      	strh	r3, [r7, #6]
 8009380:	4613      	mov	r3, r2
 8009382:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009384:	7979      	ldrb	r1, [r7, #5]
 8009386:	2300      	movs	r3, #0
 8009388:	9303      	str	r3, [sp, #12]
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	9302      	str	r3, [sp, #8]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	2301      	movs	r3, #1
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	2300      	movs	r3, #0
 8009398:	2201      	movs	r2, #1
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 fb03 	bl	80099a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80093a0:	2300      	movs	r3, #0

}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b088      	sub	sp, #32
 80093ae:	af04      	add	r7, sp, #16
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	4611      	mov	r1, r2
 80093b6:	461a      	mov	r2, r3
 80093b8:	460b      	mov	r3, r1
 80093ba:	80fb      	strh	r3, [r7, #6]
 80093bc:	4613      	mov	r3, r2
 80093be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093ce:	7979      	ldrb	r1, [r7, #5]
 80093d0:	7e3b      	ldrb	r3, [r7, #24]
 80093d2:	9303      	str	r3, [sp, #12]
 80093d4:	88fb      	ldrh	r3, [r7, #6]
 80093d6:	9302      	str	r3, [sp, #8]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	9301      	str	r3, [sp, #4]
 80093dc:	2301      	movs	r3, #1
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	2302      	movs	r3, #2
 80093e2:	2200      	movs	r2, #0
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 fade 	bl	80099a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af04      	add	r7, sp, #16
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	4611      	mov	r1, r2
 8009400:	461a      	mov	r2, r3
 8009402:	460b      	mov	r3, r1
 8009404:	80fb      	strh	r3, [r7, #6]
 8009406:	4613      	mov	r3, r2
 8009408:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800940a:	7979      	ldrb	r1, [r7, #5]
 800940c:	2300      	movs	r3, #0
 800940e:	9303      	str	r3, [sp, #12]
 8009410:	88fb      	ldrh	r3, [r7, #6]
 8009412:	9302      	str	r3, [sp, #8]
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	2301      	movs	r3, #1
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	2302      	movs	r3, #2
 800941e:	2201      	movs	r2, #1
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f000 fac0 	bl	80099a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af04      	add	r7, sp, #16
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	4608      	mov	r0, r1
 800943a:	4611      	mov	r1, r2
 800943c:	461a      	mov	r2, r3
 800943e:	4603      	mov	r3, r0
 8009440:	70fb      	strb	r3, [r7, #3]
 8009442:	460b      	mov	r3, r1
 8009444:	70bb      	strb	r3, [r7, #2]
 8009446:	4613      	mov	r3, r2
 8009448:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800944a:	7878      	ldrb	r0, [r7, #1]
 800944c:	78ba      	ldrb	r2, [r7, #2]
 800944e:	78f9      	ldrb	r1, [r7, #3]
 8009450:	8b3b      	ldrh	r3, [r7, #24]
 8009452:	9302      	str	r3, [sp, #8]
 8009454:	7d3b      	ldrb	r3, [r7, #20]
 8009456:	9301      	str	r3, [sp, #4]
 8009458:	7c3b      	ldrb	r3, [r7, #16]
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	4603      	mov	r3, r0
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fa53 	bl	800990a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800947a:	78fb      	ldrb	r3, [r7, #3]
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fa72 	bl	8009968 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f836 	bl	800950c <USBH_GetFreePipe>
 80094a0:	4603      	mov	r3, r0
 80094a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80094a4:	89fb      	ldrh	r3, [r7, #14]
 80094a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00a      	beq.n	80094c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	89fb      	ldrh	r3, [r7, #14]
 80094b2:	f003 030f 	and.w	r3, r3, #15
 80094b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	33e0      	adds	r3, #224	@ 0xe0
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80094c4:	89fb      	ldrh	r3, [r7, #14]
 80094c6:	b2db      	uxtb	r3, r3
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80094dc:	78fb      	ldrb	r3, [r7, #3]
 80094de:	2b0f      	cmp	r3, #15
 80094e0:	d80d      	bhi.n	80094fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	33e0      	adds	r3, #224	@ 0xe0
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	33e0      	adds	r3, #224	@ 0xe0
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	440b      	add	r3, r1
 80094fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]
 800951c:	e00f      	b.n	800953e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	33e0      	adds	r3, #224	@ 0xe0
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d102      	bne.n	8009538 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	b29b      	uxth	r3, r3
 8009536:	e007      	b.n	8009548 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	3301      	adds	r3, #1
 800953c:	73fb      	strb	r3, [r7, #15]
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	2b0f      	cmp	r3, #15
 8009542:	d9ec      	bls.n	800951e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009544:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009548:	4618      	mov	r0, r3
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009558:	2201      	movs	r2, #1
 800955a:	490e      	ldr	r1, [pc, #56]	@ (8009594 <MX_USB_HOST_Init+0x40>)
 800955c:	480e      	ldr	r0, [pc, #56]	@ (8009598 <MX_USB_HOST_Init+0x44>)
 800955e:	f7fe fb15 	bl	8007b8c <USBH_Init>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009568:	f7f7 ffdc 	bl	8001524 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800956c:	490b      	ldr	r1, [pc, #44]	@ (800959c <MX_USB_HOST_Init+0x48>)
 800956e:	480a      	ldr	r0, [pc, #40]	@ (8009598 <MX_USB_HOST_Init+0x44>)
 8009570:	f7fe fbb9 	bl	8007ce6 <USBH_RegisterClass>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800957a:	f7f7 ffd3 	bl	8001524 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800957e:	4806      	ldr	r0, [pc, #24]	@ (8009598 <MX_USB_HOST_Init+0x44>)
 8009580:	f7fe fc3d 	bl	8007dfe <USBH_Start>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800958a:	f7f7 ffcb 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800958e:	bf00      	nop
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	080095b5 	.word	0x080095b5
 8009598:	20000204 	.word	0x20000204
 800959c:	2000000c 	.word	0x2000000c

080095a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80095a4:	4802      	ldr	r0, [pc, #8]	@ (80095b0 <MX_USB_HOST_Process+0x10>)
 80095a6:	f7fe fc3b 	bl	8007e20 <USBH_Process>
}
 80095aa:	bf00      	nop
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000204 	.word	0x20000204

080095b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	2b04      	cmp	r3, #4
 80095c6:	d819      	bhi.n	80095fc <USBH_UserProcess+0x48>
 80095c8:	a201      	add	r2, pc, #4	@ (adr r2, 80095d0 <USBH_UserProcess+0x1c>)
 80095ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ce:	bf00      	nop
 80095d0:	080095fd 	.word	0x080095fd
 80095d4:	080095ed 	.word	0x080095ed
 80095d8:	080095fd 	.word	0x080095fd
 80095dc:	080095f5 	.word	0x080095f5
 80095e0:	080095e5 	.word	0x080095e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80095e4:	4b09      	ldr	r3, [pc, #36]	@ (800960c <USBH_UserProcess+0x58>)
 80095e6:	2203      	movs	r2, #3
 80095e8:	701a      	strb	r2, [r3, #0]
  break;
 80095ea:	e008      	b.n	80095fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80095ec:	4b07      	ldr	r3, [pc, #28]	@ (800960c <USBH_UserProcess+0x58>)
 80095ee:	2202      	movs	r2, #2
 80095f0:	701a      	strb	r2, [r3, #0]
  break;
 80095f2:	e004      	b.n	80095fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80095f4:	4b05      	ldr	r3, [pc, #20]	@ (800960c <USBH_UserProcess+0x58>)
 80095f6:	2201      	movs	r2, #1
 80095f8:	701a      	strb	r2, [r3, #0]
  break;
 80095fa:	e000      	b.n	80095fe <USBH_UserProcess+0x4a>

  default:
  break;
 80095fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80095fe:	bf00      	nop
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	200005dc 	.word	0x200005dc

08009610 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08a      	sub	sp, #40	@ 0x28
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009618:	f107 0314 	add.w	r3, r7, #20
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	609a      	str	r2, [r3, #8]
 8009624:	60da      	str	r2, [r3, #12]
 8009626:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009630:	d147      	bne.n	80096c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009632:	2300      	movs	r3, #0
 8009634:	613b      	str	r3, [r7, #16]
 8009636:	4b25      	ldr	r3, [pc, #148]	@ (80096cc <HAL_HCD_MspInit+0xbc>)
 8009638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963a:	4a24      	ldr	r2, [pc, #144]	@ (80096cc <HAL_HCD_MspInit+0xbc>)
 800963c:	f043 0301 	orr.w	r3, r3, #1
 8009640:	6313      	str	r3, [r2, #48]	@ 0x30
 8009642:	4b22      	ldr	r3, [pc, #136]	@ (80096cc <HAL_HCD_MspInit+0xbc>)
 8009644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	613b      	str	r3, [r7, #16]
 800964c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800964e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009654:	2300      	movs	r3, #0
 8009656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009658:	2300      	movs	r3, #0
 800965a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800965c:	f107 0314 	add.w	r3, r7, #20
 8009660:	4619      	mov	r1, r3
 8009662:	481b      	ldr	r0, [pc, #108]	@ (80096d0 <HAL_HCD_MspInit+0xc0>)
 8009664:	f7f8 fb12 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009668:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800966c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800966e:	2302      	movs	r3, #2
 8009670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009672:	2300      	movs	r3, #0
 8009674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009676:	2300      	movs	r3, #0
 8009678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800967a:	230a      	movs	r3, #10
 800967c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800967e:	f107 0314 	add.w	r3, r7, #20
 8009682:	4619      	mov	r1, r3
 8009684:	4812      	ldr	r0, [pc, #72]	@ (80096d0 <HAL_HCD_MspInit+0xc0>)
 8009686:	f7f8 fb01 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800968a:	4b10      	ldr	r3, [pc, #64]	@ (80096cc <HAL_HCD_MspInit+0xbc>)
 800968c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800968e:	4a0f      	ldr	r2, [pc, #60]	@ (80096cc <HAL_HCD_MspInit+0xbc>)
 8009690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009694:	6353      	str	r3, [r2, #52]	@ 0x34
 8009696:	2300      	movs	r3, #0
 8009698:	60fb      	str	r3, [r7, #12]
 800969a:	4b0c      	ldr	r3, [pc, #48]	@ (80096cc <HAL_HCD_MspInit+0xbc>)
 800969c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800969e:	4a0b      	ldr	r2, [pc, #44]	@ (80096cc <HAL_HCD_MspInit+0xbc>)
 80096a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80096a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80096a6:	4b09      	ldr	r3, [pc, #36]	@ (80096cc <HAL_HCD_MspInit+0xbc>)
 80096a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096ae:	60fb      	str	r3, [r7, #12]
 80096b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80096b2:	2200      	movs	r2, #0
 80096b4:	2100      	movs	r1, #0
 80096b6:	2043      	movs	r0, #67	@ 0x43
 80096b8:	f7f8 fab1 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80096bc:	2043      	movs	r0, #67	@ 0x43
 80096be:	f7f8 faca 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80096c2:	bf00      	nop
 80096c4:	3728      	adds	r7, #40	@ 0x28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	40023800 	.word	0x40023800
 80096d0:	40020000 	.word	0x40020000

080096d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe ff73 	bl	80085ce <USBH_LL_IncTimer>
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fe ffab 	bl	800865a <USBH_LL_Connect>
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe ffb4 	bl	8008688 <USBH_LL_Disconnect>
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
 8009734:	4613      	mov	r3, r2
 8009736:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe ff65 	bl	8008622 <USBH_LL_PortEnabled>
}
 8009758:	bf00      	nop
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe ff65 	bl	800863e <USBH_LL_PortDisabled>
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800978a:	2b01      	cmp	r3, #1
 800978c:	d12a      	bne.n	80097e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800978e:	4a18      	ldr	r2, [pc, #96]	@ (80097f0 <USBH_LL_Init+0x74>)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a15      	ldr	r2, [pc, #84]	@ (80097f0 <USBH_LL_Init+0x74>)
 800979a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800979e:	4b14      	ldr	r3, [pc, #80]	@ (80097f0 <USBH_LL_Init+0x74>)
 80097a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80097a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80097a6:	4b12      	ldr	r3, [pc, #72]	@ (80097f0 <USBH_LL_Init+0x74>)
 80097a8:	2208      	movs	r2, #8
 80097aa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80097ac:	4b10      	ldr	r3, [pc, #64]	@ (80097f0 <USBH_LL_Init+0x74>)
 80097ae:	2201      	movs	r2, #1
 80097b0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097b2:	4b0f      	ldr	r3, [pc, #60]	@ (80097f0 <USBH_LL_Init+0x74>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80097b8:	4b0d      	ldr	r3, [pc, #52]	@ (80097f0 <USBH_LL_Init+0x74>)
 80097ba:	2202      	movs	r2, #2
 80097bc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097be:	4b0c      	ldr	r3, [pc, #48]	@ (80097f0 <USBH_LL_Init+0x74>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80097c4:	480a      	ldr	r0, [pc, #40]	@ (80097f0 <USBH_LL_Init+0x74>)
 80097c6:	f7f8 fc2e 	bl	8002026 <HAL_HCD_Init>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80097d0:	f7f7 fea8 	bl	8001524 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80097d4:	4806      	ldr	r0, [pc, #24]	@ (80097f0 <USBH_LL_Init+0x74>)
 80097d6:	f7f9 f88f 	bl	80028f8 <HAL_HCD_GetCurrentFrame>
 80097da:	4603      	mov	r3, r0
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7fe fee6 	bl	80085b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	200005e0 	.word	0x200005e0

080097f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800980a:	4618      	mov	r0, r3
 800980c:	f7f8 fffc 	bl	8002808 <HAL_HCD_Start>
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f95e 	bl	8009ad8 <USBH_Get_USB_Status>
 800981c:	4603      	mov	r3, r0
 800981e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009820:	7bbb      	ldrb	r3, [r7, #14]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009840:	4618      	mov	r0, r3
 8009842:	f7f9 f804 	bl	800284e <HAL_HCD_Stop>
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	4618      	mov	r0, r3
 800984e:	f000 f943 	bl	8009ad8 <USBH_Get_USB_Status>
 8009852:	4603      	mov	r3, r0
 8009854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009856:	7bbb      	ldrb	r3, [r7, #14]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009868:	2301      	movs	r3, #1
 800986a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009872:	4618      	mov	r0, r3
 8009874:	f7f9 f84e 	bl	8002914 <HAL_HCD_GetCurrentSpeed>
 8009878:	4603      	mov	r3, r0
 800987a:	2b02      	cmp	r3, #2
 800987c:	d00c      	beq.n	8009898 <USBH_LL_GetSpeed+0x38>
 800987e:	2b02      	cmp	r3, #2
 8009880:	d80d      	bhi.n	800989e <USBH_LL_GetSpeed+0x3e>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <USBH_LL_GetSpeed+0x2c>
 8009886:	2b01      	cmp	r3, #1
 8009888:	d003      	beq.n	8009892 <USBH_LL_GetSpeed+0x32>
 800988a:	e008      	b.n	800989e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800988c:	2300      	movs	r3, #0
 800988e:	73fb      	strb	r3, [r7, #15]
    break;
 8009890:	e008      	b.n	80098a4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009892:	2301      	movs	r3, #1
 8009894:	73fb      	strb	r3, [r7, #15]
    break;
 8009896:	e005      	b.n	80098a4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009898:	2302      	movs	r3, #2
 800989a:	73fb      	strb	r3, [r7, #15]
    break;
 800989c:	e002      	b.n	80098a4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800989e:	2301      	movs	r3, #1
 80098a0:	73fb      	strb	r3, [r7, #15]
    break;
 80098a2:	bf00      	nop
  }
  return  speed;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7f8 ffdf 	bl	8002888 <HAL_HCD_ResetPort>
 80098ca:	4603      	mov	r3, r0
 80098cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 f901 	bl	8009ad8 <USBH_Get_USB_Status>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098da:	7bbb      	ldrb	r3, [r7, #14]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098f6:	78fa      	ldrb	r2, [r7, #3]
 80098f8:	4611      	mov	r1, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7f8 ffe7 	bl	80028ce <HAL_HCD_HC_GetXferCount>
 8009900:	4603      	mov	r3, r0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800990a:	b590      	push	{r4, r7, lr}
 800990c:	b089      	sub	sp, #36	@ 0x24
 800990e:	af04      	add	r7, sp, #16
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	4608      	mov	r0, r1
 8009914:	4611      	mov	r1, r2
 8009916:	461a      	mov	r2, r3
 8009918:	4603      	mov	r3, r0
 800991a:	70fb      	strb	r3, [r7, #3]
 800991c:	460b      	mov	r3, r1
 800991e:	70bb      	strb	r3, [r7, #2]
 8009920:	4613      	mov	r3, r2
 8009922:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009932:	787c      	ldrb	r4, [r7, #1]
 8009934:	78ba      	ldrb	r2, [r7, #2]
 8009936:	78f9      	ldrb	r1, [r7, #3]
 8009938:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800993a:	9302      	str	r3, [sp, #8]
 800993c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	4623      	mov	r3, r4
 800994a:	f7f8 fbd3 	bl	80020f4 <HAL_HCD_HC_Init>
 800994e:	4603      	mov	r3, r0
 8009950:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	4618      	mov	r0, r3
 8009956:	f000 f8bf 	bl	8009ad8 <USBH_Get_USB_Status>
 800995a:	4603      	mov	r3, r0
 800995c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800995e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	bd90      	pop	{r4, r7, pc}

08009968 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009982:	78fa      	ldrb	r2, [r7, #3]
 8009984:	4611      	mov	r1, r2
 8009986:	4618      	mov	r0, r3
 8009988:	f7f8 fc6c 	bl	8002264 <HAL_HCD_HC_Halt>
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 f8a0 	bl	8009ad8 <USBH_Get_USB_Status>
 8009998:	4603      	mov	r3, r0
 800999a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800999c:	7bbb      	ldrb	r3, [r7, #14]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80099a6:	b590      	push	{r4, r7, lr}
 80099a8:	b089      	sub	sp, #36	@ 0x24
 80099aa:	af04      	add	r7, sp, #16
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	4608      	mov	r0, r1
 80099b0:	4611      	mov	r1, r2
 80099b2:	461a      	mov	r2, r3
 80099b4:	4603      	mov	r3, r0
 80099b6:	70fb      	strb	r3, [r7, #3]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70bb      	strb	r3, [r7, #2]
 80099bc:	4613      	mov	r3, r2
 80099be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80099ce:	787c      	ldrb	r4, [r7, #1]
 80099d0:	78ba      	ldrb	r2, [r7, #2]
 80099d2:	78f9      	ldrb	r1, [r7, #3]
 80099d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80099d8:	9303      	str	r3, [sp, #12]
 80099da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80099dc:	9302      	str	r3, [sp, #8]
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	4623      	mov	r3, r4
 80099ea:	f7f8 fc5f 	bl	80022ac <HAL_HCD_HC_SubmitRequest>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 f86f 	bl	8009ad8 <USBH_Get_USB_Status>
 80099fa:	4603      	mov	r3, r0
 80099fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd90      	pop	{r4, r7, pc}

08009a08 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f8 ff40 	bl	80028a4 <HAL_HCD_HC_GetURBState>
 8009a24:	4603      	mov	r3, r0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d103      	bne.n	8009a4c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 f872 	bl	8009b30 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009a4c:	20c8      	movs	r0, #200	@ 0xc8
 8009a4e:	f7f7 ffe7 	bl	8001a20 <HAL_Delay>
  return USBH_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a72:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009a74:	78fa      	ldrb	r2, [r7, #3]
 8009a76:	68f9      	ldr	r1, [r7, #12]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	011b      	lsls	r3, r3, #4
 8009a7c:	1a9b      	subs	r3, r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	440b      	add	r3, r1
 8009a82:	3317      	adds	r3, #23
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00a      	beq.n	8009aa0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009a8a:	78fa      	ldrb	r2, [r7, #3]
 8009a8c:	68f9      	ldr	r1, [r7, #12]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	011b      	lsls	r3, r3, #4
 8009a92:	1a9b      	subs	r3, r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	440b      	add	r3, r1
 8009a98:	333c      	adds	r3, #60	@ 0x3c
 8009a9a:	78ba      	ldrb	r2, [r7, #2]
 8009a9c:	701a      	strb	r2, [r3, #0]
 8009a9e:	e009      	b.n	8009ab4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009aa0:	78fa      	ldrb	r2, [r7, #3]
 8009aa2:	68f9      	ldr	r1, [r7, #12]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	011b      	lsls	r3, r3, #4
 8009aa8:	1a9b      	subs	r3, r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	333d      	adds	r3, #61	@ 0x3d
 8009ab0:	78ba      	ldrb	r2, [r7, #2]
 8009ab2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7f7 ffa8 	bl	8001a20 <HAL_Delay>
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ae6:	79fb      	ldrb	r3, [r7, #7]
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d817      	bhi.n	8009b1c <USBH_Get_USB_Status+0x44>
 8009aec:	a201      	add	r2, pc, #4	@ (adr r2, 8009af4 <USBH_Get_USB_Status+0x1c>)
 8009aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af2:	bf00      	nop
 8009af4:	08009b05 	.word	0x08009b05
 8009af8:	08009b0b 	.word	0x08009b0b
 8009afc:	08009b11 	.word	0x08009b11
 8009b00:	08009b17 	.word	0x08009b17
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
    break;
 8009b08:	e00b      	b.n	8009b22 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0e:	e008      	b.n	8009b22 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b10:	2301      	movs	r3, #1
 8009b12:	73fb      	strb	r3, [r7, #15]
    break;
 8009b14:	e005      	b.n	8009b22 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b16:	2302      	movs	r3, #2
 8009b18:	73fb      	strb	r3, [r7, #15]
    break;
 8009b1a:	e002      	b.n	8009b22 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b20:	bf00      	nop
  }
  return usb_status;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009b3a:	79fb      	ldrb	r3, [r7, #7]
 8009b3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d102      	bne.n	8009b4a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
 8009b48:	e001      	b.n	8009b4e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	461a      	mov	r2, r3
 8009b52:	2101      	movs	r1, #1
 8009b54:	4803      	ldr	r0, [pc, #12]	@ (8009b64 <MX_DriverVbusFS+0x34>)
 8009b56:	f7f8 fa4d 	bl	8001ff4 <HAL_GPIO_WritePin>
}
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	40020800 	.word	0x40020800

08009b68 <malloc>:
 8009b68:	4b02      	ldr	r3, [pc, #8]	@ (8009b74 <malloc+0xc>)
 8009b6a:	4601      	mov	r1, r0
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	f000 b82d 	b.w	8009bcc <_malloc_r>
 8009b72:	bf00      	nop
 8009b74:	2000002c 	.word	0x2000002c

08009b78 <free>:
 8009b78:	4b02      	ldr	r3, [pc, #8]	@ (8009b84 <free+0xc>)
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	6818      	ldr	r0, [r3, #0]
 8009b7e:	f000 b8f5 	b.w	8009d6c <_free_r>
 8009b82:	bf00      	nop
 8009b84:	2000002c 	.word	0x2000002c

08009b88 <sbrk_aligned>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	4e0f      	ldr	r6, [pc, #60]	@ (8009bc8 <sbrk_aligned+0x40>)
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	6831      	ldr	r1, [r6, #0]
 8009b90:	4605      	mov	r5, r0
 8009b92:	b911      	cbnz	r1, 8009b9a <sbrk_aligned+0x12>
 8009b94:	f000 f8ae 	bl	8009cf4 <_sbrk_r>
 8009b98:	6030      	str	r0, [r6, #0]
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	f000 f8a9 	bl	8009cf4 <_sbrk_r>
 8009ba2:	1c43      	adds	r3, r0, #1
 8009ba4:	d103      	bne.n	8009bae <sbrk_aligned+0x26>
 8009ba6:	f04f 34ff 	mov.w	r4, #4294967295
 8009baa:	4620      	mov	r0, r4
 8009bac:	bd70      	pop	{r4, r5, r6, pc}
 8009bae:	1cc4      	adds	r4, r0, #3
 8009bb0:	f024 0403 	bic.w	r4, r4, #3
 8009bb4:	42a0      	cmp	r0, r4
 8009bb6:	d0f8      	beq.n	8009baa <sbrk_aligned+0x22>
 8009bb8:	1a21      	subs	r1, r4, r0
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 f89a 	bl	8009cf4 <_sbrk_r>
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d1f2      	bne.n	8009baa <sbrk_aligned+0x22>
 8009bc4:	e7ef      	b.n	8009ba6 <sbrk_aligned+0x1e>
 8009bc6:	bf00      	nop
 8009bc8:	200009c0 	.word	0x200009c0

08009bcc <_malloc_r>:
 8009bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd0:	1ccd      	adds	r5, r1, #3
 8009bd2:	f025 0503 	bic.w	r5, r5, #3
 8009bd6:	3508      	adds	r5, #8
 8009bd8:	2d0c      	cmp	r5, #12
 8009bda:	bf38      	it	cc
 8009bdc:	250c      	movcc	r5, #12
 8009bde:	2d00      	cmp	r5, #0
 8009be0:	4606      	mov	r6, r0
 8009be2:	db01      	blt.n	8009be8 <_malloc_r+0x1c>
 8009be4:	42a9      	cmp	r1, r5
 8009be6:	d904      	bls.n	8009bf2 <_malloc_r+0x26>
 8009be8:	230c      	movs	r3, #12
 8009bea:	6033      	str	r3, [r6, #0]
 8009bec:	2000      	movs	r0, #0
 8009bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009cc8 <_malloc_r+0xfc>
 8009bf6:	f000 f869 	bl	8009ccc <__malloc_lock>
 8009bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8009bfe:	461c      	mov	r4, r3
 8009c00:	bb44      	cbnz	r4, 8009c54 <_malloc_r+0x88>
 8009c02:	4629      	mov	r1, r5
 8009c04:	4630      	mov	r0, r6
 8009c06:	f7ff ffbf 	bl	8009b88 <sbrk_aligned>
 8009c0a:	1c43      	adds	r3, r0, #1
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	d158      	bne.n	8009cc2 <_malloc_r+0xf6>
 8009c10:	f8d8 4000 	ldr.w	r4, [r8]
 8009c14:	4627      	mov	r7, r4
 8009c16:	2f00      	cmp	r7, #0
 8009c18:	d143      	bne.n	8009ca2 <_malloc_r+0xd6>
 8009c1a:	2c00      	cmp	r4, #0
 8009c1c:	d04b      	beq.n	8009cb6 <_malloc_r+0xea>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	4639      	mov	r1, r7
 8009c22:	4630      	mov	r0, r6
 8009c24:	eb04 0903 	add.w	r9, r4, r3
 8009c28:	f000 f864 	bl	8009cf4 <_sbrk_r>
 8009c2c:	4581      	cmp	r9, r0
 8009c2e:	d142      	bne.n	8009cb6 <_malloc_r+0xea>
 8009c30:	6821      	ldr	r1, [r4, #0]
 8009c32:	1a6d      	subs	r5, r5, r1
 8009c34:	4629      	mov	r1, r5
 8009c36:	4630      	mov	r0, r6
 8009c38:	f7ff ffa6 	bl	8009b88 <sbrk_aligned>
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	d03a      	beq.n	8009cb6 <_malloc_r+0xea>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	442b      	add	r3, r5
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	f8d8 3000 	ldr.w	r3, [r8]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	bb62      	cbnz	r2, 8009ca8 <_malloc_r+0xdc>
 8009c4e:	f8c8 7000 	str.w	r7, [r8]
 8009c52:	e00f      	b.n	8009c74 <_malloc_r+0xa8>
 8009c54:	6822      	ldr	r2, [r4, #0]
 8009c56:	1b52      	subs	r2, r2, r5
 8009c58:	d420      	bmi.n	8009c9c <_malloc_r+0xd0>
 8009c5a:	2a0b      	cmp	r2, #11
 8009c5c:	d917      	bls.n	8009c8e <_malloc_r+0xc2>
 8009c5e:	1961      	adds	r1, r4, r5
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	6025      	str	r5, [r4, #0]
 8009c64:	bf18      	it	ne
 8009c66:	6059      	strne	r1, [r3, #4]
 8009c68:	6863      	ldr	r3, [r4, #4]
 8009c6a:	bf08      	it	eq
 8009c6c:	f8c8 1000 	streq.w	r1, [r8]
 8009c70:	5162      	str	r2, [r4, r5]
 8009c72:	604b      	str	r3, [r1, #4]
 8009c74:	4630      	mov	r0, r6
 8009c76:	f000 f82f 	bl	8009cd8 <__malloc_unlock>
 8009c7a:	f104 000b 	add.w	r0, r4, #11
 8009c7e:	1d23      	adds	r3, r4, #4
 8009c80:	f020 0007 	bic.w	r0, r0, #7
 8009c84:	1ac2      	subs	r2, r0, r3
 8009c86:	bf1c      	itt	ne
 8009c88:	1a1b      	subne	r3, r3, r0
 8009c8a:	50a3      	strne	r3, [r4, r2]
 8009c8c:	e7af      	b.n	8009bee <_malloc_r+0x22>
 8009c8e:	6862      	ldr	r2, [r4, #4]
 8009c90:	42a3      	cmp	r3, r4
 8009c92:	bf0c      	ite	eq
 8009c94:	f8c8 2000 	streq.w	r2, [r8]
 8009c98:	605a      	strne	r2, [r3, #4]
 8009c9a:	e7eb      	b.n	8009c74 <_malloc_r+0xa8>
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	6864      	ldr	r4, [r4, #4]
 8009ca0:	e7ae      	b.n	8009c00 <_malloc_r+0x34>
 8009ca2:	463c      	mov	r4, r7
 8009ca4:	687f      	ldr	r7, [r7, #4]
 8009ca6:	e7b6      	b.n	8009c16 <_malloc_r+0x4a>
 8009ca8:	461a      	mov	r2, r3
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	42a3      	cmp	r3, r4
 8009cae:	d1fb      	bne.n	8009ca8 <_malloc_r+0xdc>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	6053      	str	r3, [r2, #4]
 8009cb4:	e7de      	b.n	8009c74 <_malloc_r+0xa8>
 8009cb6:	230c      	movs	r3, #12
 8009cb8:	6033      	str	r3, [r6, #0]
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f000 f80c 	bl	8009cd8 <__malloc_unlock>
 8009cc0:	e794      	b.n	8009bec <_malloc_r+0x20>
 8009cc2:	6005      	str	r5, [r0, #0]
 8009cc4:	e7d6      	b.n	8009c74 <_malloc_r+0xa8>
 8009cc6:	bf00      	nop
 8009cc8:	200009c4 	.word	0x200009c4

08009ccc <__malloc_lock>:
 8009ccc:	4801      	ldr	r0, [pc, #4]	@ (8009cd4 <__malloc_lock+0x8>)
 8009cce:	f000 b84b 	b.w	8009d68 <__retarget_lock_acquire_recursive>
 8009cd2:	bf00      	nop
 8009cd4:	20000b04 	.word	0x20000b04

08009cd8 <__malloc_unlock>:
 8009cd8:	4801      	ldr	r0, [pc, #4]	@ (8009ce0 <__malloc_unlock+0x8>)
 8009cda:	f000 b846 	b.w	8009d6a <__retarget_lock_release_recursive>
 8009cde:	bf00      	nop
 8009ce0:	20000b04 	.word	0x20000b04

08009ce4 <memset>:
 8009ce4:	4402      	add	r2, r0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d100      	bne.n	8009cee <memset+0xa>
 8009cec:	4770      	bx	lr
 8009cee:	f803 1b01 	strb.w	r1, [r3], #1
 8009cf2:	e7f9      	b.n	8009ce8 <memset+0x4>

08009cf4 <_sbrk_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	4d06      	ldr	r5, [pc, #24]	@ (8009d10 <_sbrk_r+0x1c>)
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	4608      	mov	r0, r1
 8009cfe:	602b      	str	r3, [r5, #0]
 8009d00:	f7f7 fdaa 	bl	8001858 <_sbrk>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d102      	bne.n	8009d0e <_sbrk_r+0x1a>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b103      	cbz	r3, 8009d0e <_sbrk_r+0x1a>
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	20000b00 	.word	0x20000b00

08009d14 <__errno>:
 8009d14:	4b01      	ldr	r3, [pc, #4]	@ (8009d1c <__errno+0x8>)
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	2000002c 	.word	0x2000002c

08009d20 <__libc_init_array>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	4d0d      	ldr	r5, [pc, #52]	@ (8009d58 <__libc_init_array+0x38>)
 8009d24:	4c0d      	ldr	r4, [pc, #52]	@ (8009d5c <__libc_init_array+0x3c>)
 8009d26:	1b64      	subs	r4, r4, r5
 8009d28:	10a4      	asrs	r4, r4, #2
 8009d2a:	2600      	movs	r6, #0
 8009d2c:	42a6      	cmp	r6, r4
 8009d2e:	d109      	bne.n	8009d44 <__libc_init_array+0x24>
 8009d30:	4d0b      	ldr	r5, [pc, #44]	@ (8009d60 <__libc_init_array+0x40>)
 8009d32:	4c0c      	ldr	r4, [pc, #48]	@ (8009d64 <__libc_init_array+0x44>)
 8009d34:	f000 f864 	bl	8009e00 <_init>
 8009d38:	1b64      	subs	r4, r4, r5
 8009d3a:	10a4      	asrs	r4, r4, #2
 8009d3c:	2600      	movs	r6, #0
 8009d3e:	42a6      	cmp	r6, r4
 8009d40:	d105      	bne.n	8009d4e <__libc_init_array+0x2e>
 8009d42:	bd70      	pop	{r4, r5, r6, pc}
 8009d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d48:	4798      	blx	r3
 8009d4a:	3601      	adds	r6, #1
 8009d4c:	e7ee      	b.n	8009d2c <__libc_init_array+0xc>
 8009d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d52:	4798      	blx	r3
 8009d54:	3601      	adds	r6, #1
 8009d56:	e7f2      	b.n	8009d3e <__libc_init_array+0x1e>
 8009d58:	08009e3c 	.word	0x08009e3c
 8009d5c:	08009e3c 	.word	0x08009e3c
 8009d60:	08009e3c 	.word	0x08009e3c
 8009d64:	08009e40 	.word	0x08009e40

08009d68 <__retarget_lock_acquire_recursive>:
 8009d68:	4770      	bx	lr

08009d6a <__retarget_lock_release_recursive>:
 8009d6a:	4770      	bx	lr

08009d6c <_free_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4605      	mov	r5, r0
 8009d70:	2900      	cmp	r1, #0
 8009d72:	d041      	beq.n	8009df8 <_free_r+0x8c>
 8009d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d78:	1f0c      	subs	r4, r1, #4
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	bfb8      	it	lt
 8009d7e:	18e4      	addlt	r4, r4, r3
 8009d80:	f7ff ffa4 	bl	8009ccc <__malloc_lock>
 8009d84:	4a1d      	ldr	r2, [pc, #116]	@ (8009dfc <_free_r+0x90>)
 8009d86:	6813      	ldr	r3, [r2, #0]
 8009d88:	b933      	cbnz	r3, 8009d98 <_free_r+0x2c>
 8009d8a:	6063      	str	r3, [r4, #4]
 8009d8c:	6014      	str	r4, [r2, #0]
 8009d8e:	4628      	mov	r0, r5
 8009d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d94:	f7ff bfa0 	b.w	8009cd8 <__malloc_unlock>
 8009d98:	42a3      	cmp	r3, r4
 8009d9a:	d908      	bls.n	8009dae <_free_r+0x42>
 8009d9c:	6820      	ldr	r0, [r4, #0]
 8009d9e:	1821      	adds	r1, r4, r0
 8009da0:	428b      	cmp	r3, r1
 8009da2:	bf01      	itttt	eq
 8009da4:	6819      	ldreq	r1, [r3, #0]
 8009da6:	685b      	ldreq	r3, [r3, #4]
 8009da8:	1809      	addeq	r1, r1, r0
 8009daa:	6021      	streq	r1, [r4, #0]
 8009dac:	e7ed      	b.n	8009d8a <_free_r+0x1e>
 8009dae:	461a      	mov	r2, r3
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	b10b      	cbz	r3, 8009db8 <_free_r+0x4c>
 8009db4:	42a3      	cmp	r3, r4
 8009db6:	d9fa      	bls.n	8009dae <_free_r+0x42>
 8009db8:	6811      	ldr	r1, [r2, #0]
 8009dba:	1850      	adds	r0, r2, r1
 8009dbc:	42a0      	cmp	r0, r4
 8009dbe:	d10b      	bne.n	8009dd8 <_free_r+0x6c>
 8009dc0:	6820      	ldr	r0, [r4, #0]
 8009dc2:	4401      	add	r1, r0
 8009dc4:	1850      	adds	r0, r2, r1
 8009dc6:	4283      	cmp	r3, r0
 8009dc8:	6011      	str	r1, [r2, #0]
 8009dca:	d1e0      	bne.n	8009d8e <_free_r+0x22>
 8009dcc:	6818      	ldr	r0, [r3, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	6053      	str	r3, [r2, #4]
 8009dd2:	4408      	add	r0, r1
 8009dd4:	6010      	str	r0, [r2, #0]
 8009dd6:	e7da      	b.n	8009d8e <_free_r+0x22>
 8009dd8:	d902      	bls.n	8009de0 <_free_r+0x74>
 8009dda:	230c      	movs	r3, #12
 8009ddc:	602b      	str	r3, [r5, #0]
 8009dde:	e7d6      	b.n	8009d8e <_free_r+0x22>
 8009de0:	6820      	ldr	r0, [r4, #0]
 8009de2:	1821      	adds	r1, r4, r0
 8009de4:	428b      	cmp	r3, r1
 8009de6:	bf04      	itt	eq
 8009de8:	6819      	ldreq	r1, [r3, #0]
 8009dea:	685b      	ldreq	r3, [r3, #4]
 8009dec:	6063      	str	r3, [r4, #4]
 8009dee:	bf04      	itt	eq
 8009df0:	1809      	addeq	r1, r1, r0
 8009df2:	6021      	streq	r1, [r4, #0]
 8009df4:	6054      	str	r4, [r2, #4]
 8009df6:	e7ca      	b.n	8009d8e <_free_r+0x22>
 8009df8:	bd38      	pop	{r3, r4, r5, pc}
 8009dfa:	bf00      	nop
 8009dfc:	200009c4 	.word	0x200009c4

08009e00 <_init>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	bf00      	nop
 8009e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e06:	bc08      	pop	{r3}
 8009e08:	469e      	mov	lr, r3
 8009e0a:	4770      	bx	lr

08009e0c <_fini>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr
