
Ultrasonic_test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08009c60  08009c60  0000ac60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d04  08009d04  0000b14c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d04  08009d04  0000ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d0c  08009d0c  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d0c  08009d0c  0000ad0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d10  08009d10  0000ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08009d14  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          00001e9c  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001fe8  20001fe8  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c04  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d38  00000000  00000000  00023d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  00027ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001209  00000000  00000000  00029210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025315  00000000  00000000  0002a419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e747  00000000  00000000  0004f72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d358b  00000000  00000000  0006de75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141400  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000693c  00000000  00000000  00141444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00147d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c48 	.word	0x08009c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08009c48 	.word	0x08009c48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b08f      	sub	sp, #60	@ 0x3c
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f000 fd3d 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f8c5 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d96:	f000 fa11 	bl	80011bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d9a:	f000 f92b 	bl	8000ff4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d9e:	f000 f957 	bl	8001050 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000da2:	f000 f985 	bl	80010b0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000da6:	f000 f9b9 	bl	800111c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000daa:	f007 fd85 	bl	80088b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint32_t i = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t str[52];
  HAL_TIM_Base_Start(&htim1);
 8000db2:	4853      	ldr	r0, [pc, #332]	@ (8000f00 <main+0x178>)
 8000db4:	f003 ff74 	bl	8004ca0 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000db8:	2200      	movs	r2, #0
 8000dba:	2104      	movs	r1, #4
 8000dbc:	4851      	ldr	r0, [pc, #324]	@ (8000f04 <main+0x17c>)
 8000dbe:	f001 f881 	bl	8001ec4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	484f      	ldr	r0, [pc, #316]	@ (8000f04 <main+0x17c>)
 8000dc8:	f001 f87c 	bl	8001ec4 <HAL_GPIO_WritePin>
     __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dcc:	4b4c      	ldr	r3, [pc, #304]	@ (8000f00 <main+0x178>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24
     while (__HAL_TIM_GET_COUNTER (&htim1) < 40);  // wait for 40 us
 8000dd4:	bf00      	nop
 8000dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8000f00 <main+0x178>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ddc:	2b27      	cmp	r3, #39	@ 0x27
 8000dde:	d9fa      	bls.n	8000dd6 <main+0x4e>
     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000de0:	2200      	movs	r2, #0
 8000de2:	2104      	movs	r1, #4
 8000de4:	4847      	ldr	r0, [pc, #284]	@ (8000f04 <main+0x17c>)
 8000de6:	f001 f86d 	bl	8001ec4 <HAL_GPIO_WritePin>

     pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000dea:	f000 fd75 	bl	80018d8 <HAL_GetTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a45      	ldr	r2, [pc, #276]	@ (8000f08 <main+0x180>)
 8000df2:	6013      	str	r3, [r2, #0]
     // wait for the echo pin to go high
     while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 100 >  HAL_GetTick());
 8000df4:	bf00      	nop
 8000df6:	2102      	movs	r1, #2
 8000df8:	4842      	ldr	r0, [pc, #264]	@ (8000f04 <main+0x17c>)
 8000dfa:	f001 f84b 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d108      	bne.n	8000e16 <main+0x8e>
 8000e04:	4b40      	ldr	r3, [pc, #256]	@ (8000f08 <main+0x180>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8000e0c:	f000 fd64 	bl	80018d8 <HAL_GetTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	429c      	cmp	r4, r3
 8000e14:	d8ef      	bhi.n	8000df6 <main+0x6e>
     Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e16:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <main+0x178>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1c:	4a3b      	ldr	r2, [pc, #236]	@ (8000f0c <main+0x184>)
 8000e1e:	6013      	str	r3, [r2, #0]

     pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000e20:	f000 fd5a 	bl	80018d8 <HAL_GetTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a38      	ldr	r2, [pc, #224]	@ (8000f08 <main+0x180>)
 8000e28:	6013      	str	r3, [r2, #0]
     // wait for the echo pin to go low
     while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 500 > HAL_GetTick());
 8000e2a:	bf00      	nop
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4835      	ldr	r0, [pc, #212]	@ (8000f04 <main+0x17c>)
 8000e30:	f001 f830 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d008      	beq.n	8000e4c <main+0xc4>
 8000e3a:	4b33      	ldr	r3, [pc, #204]	@ (8000f08 <main+0x180>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f503 74fa 	add.w	r4, r3, #500	@ 0x1f4
 8000e42:	f000 fd49 	bl	80018d8 <HAL_GetTick>
 8000e46:	4603      	mov	r3, r0
 8000e48:	429c      	cmp	r4, r3
 8000e4a:	d8ef      	bhi.n	8000e2c <main+0xa4>
     Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f00 <main+0x178>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e52:	4a2f      	ldr	r2, [pc, #188]	@ (8000f10 <main+0x188>)
 8000e54:	6013      	str	r3, [r2, #0]

     Distance = (Value2-Value1) * 0.034/2;
 8000e56:	4b2e      	ldr	r3, [pc, #184]	@ (8000f10 <main+0x188>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <main+0x184>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fb4f 	bl	8000504 <__aeabi_ui2d>
 8000e66:	a324      	add	r3, pc, #144	@ (adr r3, 8000ef8 <main+0x170>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fbc4 	bl	80005f8 <__aeabi_dmul>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e80:	f7ff fce4 	bl	800084c <__aeabi_ddiv>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fdc6 	bl	8000a1c <__aeabi_d2uiz>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <main+0x18c>)
 8000e96:	801a      	strh	r2, [r3, #0]

     if(Distance <= 5){
 8000e98:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <main+0x18c>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	2b05      	cmp	r3, #5
 8000e9e:	d806      	bhi.n	8000eae <main+0x126>
    	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea6:	481c      	ldr	r0, [pc, #112]	@ (8000f18 <main+0x190>)
 8000ea8:	f001 f80c 	bl	8001ec4 <HAL_GPIO_WritePin>
 8000eac:	e005      	b.n	8000eba <main+0x132>
     }
     else{
    	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb4:	4818      	ldr	r0, [pc, #96]	@ (8000f18 <main+0x190>)
 8000eb6:	f001 f805 	bl	8001ec4 <HAL_GPIO_WritePin>
     }

     //if(i % 2 == 0)
    	 sprintf(str, "Distance1: %d\r\n", Value2 - Value1);
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <main+0x188>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <main+0x184>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1ad2      	subs	r2, r2, r3
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4915      	ldr	r1, [pc, #84]	@ (8000f1c <main+0x194>)
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f008 fa1d 	bl	8009308 <siprintf>
     //else
	//	 sprintf(str, "Distance2: %lu\r\n", Value2);


     CDC_Transmit_FS(str, strlen(str));
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f97d 	bl	80001d0 <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	463b      	mov	r3, r7
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f007 fda8 	bl	8008a34 <CDC_Transmit_FS>

     i++;
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34

     HAL_Delay(500);
 8000eea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000eee:	f000 fcff 	bl	80018f0 <HAL_Delay>
     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ef2:	e766      	b.n	8000dc2 <main+0x3a>
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	b020c49c 	.word	0xb020c49c
 8000efc:	3fa16872 	.word	0x3fa16872
 8000f00:	2000025c 	.word	0x2000025c
 8000f04:	40020000 	.word	0x40020000
 8000f08:	200002a4 	.word	0x200002a4
 8000f0c:	200002a8 	.word	0x200002a8
 8000f10:	200002ac 	.word	0x200002ac
 8000f14:	200002b0 	.word	0x200002b0
 8000f18:	40020c00 	.word	0x40020c00
 8000f1c:	08009c60 	.word	0x08009c60

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	@ 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	2230      	movs	r2, #48	@ 0x30
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f008 fa0c 	bl	800934c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <SystemClock_Config+0xcc>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	4a27      	ldr	r2, [pc, #156]	@ (8000fec <SystemClock_Config+0xcc>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f54:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <SystemClock_Config+0xcc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a21      	ldr	r2, [pc, #132]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f90:	2308      	movs	r3, #8
 8000f92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f94:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 ffdc 	bl	8003f64 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fb2:	f000 fa1f 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 fa3d 	bl	8004454 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fe0:	f000 fa08 	bl	80013f4 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3750      	adds	r7, #80	@ 0x50
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <MX_I2C1_Init+0x50>)
 8000ffa:	4a13      	ldr	r2, [pc, #76]	@ (8001048 <MX_I2C1_Init+0x54>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MX_I2C1_Init+0x50>)
 8001000:	4a12      	ldr	r2, [pc, #72]	@ (800104c <MX_I2C1_Init+0x58>)
 8001002:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MX_I2C1_Init+0x50>)
 8001012:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001016:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <MX_I2C1_Init+0x50>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <MX_I2C1_Init+0x50>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <MX_I2C1_Init+0x50>)
 8001032:	f000 ff61 	bl	8001ef8 <HAL_I2C_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800103c:	f000 f9da 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000168 	.word	0x20000168
 8001048:	40005400 	.word	0x40005400
 800104c:	000186a0 	.word	0x000186a0

08001050 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <MX_I2S3_Init+0x54>)
 8001056:	4a14      	ldr	r2, [pc, #80]	@ (80010a8 <MX_I2S3_Init+0x58>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <MX_I2S3_Init+0x54>)
 800105c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001060:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_I2S3_Init+0x54>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_I2S3_Init+0x54>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800106e:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <MX_I2S3_Init+0x54>)
 8001070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001074:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_I2S3_Init+0x54>)
 8001078:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <MX_I2S3_Init+0x5c>)
 800107a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_I2S3_Init+0x54>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_I2S3_Init+0x54>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_I2S3_Init+0x54>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_I2S3_Init+0x54>)
 8001090:	f001 f876 	bl	8002180 <HAL_I2S_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800109a:	f000 f9ab 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200001bc 	.word	0x200001bc
 80010a8:	40003c00 	.word	0x40003c00
 80010ac:	00017700 	.word	0x00017700

080010b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010b6:	4a18      	ldr	r2, [pc, #96]	@ (8001118 <MX_SPI1_Init+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <MX_SPI1_Init+0x64>)
 80010fc:	220a      	movs	r2, #10
 80010fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	@ (8001114 <MX_SPI1_Init+0x64>)
 8001102:	f003 fcf5 	bl	8004af0 <HAL_SPI_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800110c:	f000 f972 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000204 	.word	0x20000204
 8001118:	40013000 	.word	0x40013000

0800111c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <MX_TIM1_Init+0x98>)
 800113a:	4a1f      	ldr	r2, [pc, #124]	@ (80011b8 <MX_TIM1_Init+0x9c>)
 800113c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <MX_TIM1_Init+0x98>)
 8001140:	22a7      	movs	r2, #167	@ 0xa7
 8001142:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <MX_TIM1_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_TIM1_Init+0x98>)
 800114c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001150:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <MX_TIM1_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001158:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <MX_TIM1_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_TIM1_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001164:	4813      	ldr	r0, [pc, #76]	@ (80011b4 <MX_TIM1_Init+0x98>)
 8001166:	f003 fd4c 	bl	8004c02 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001170:	f000 f940 	bl	80013f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	@ (80011b4 <MX_TIM1_Init+0x98>)
 8001182:	f003 fdf5 	bl	8004d70 <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800118c:	f000 f932 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_TIM1_Init+0x98>)
 800119e:	f003 fff5 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80011a8:	f000 f924 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000025c 	.word	0x2000025c
 80011b8:	40010000 	.word	0x40010000

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	@ 0x30
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	4b81      	ldr	r3, [pc, #516]	@ (80013dc <MX_GPIO_Init+0x220>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a80      	ldr	r2, [pc, #512]	@ (80013dc <MX_GPIO_Init+0x220>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b7e      	ldr	r3, [pc, #504]	@ (80013dc <MX_GPIO_Init+0x220>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	4b7a      	ldr	r3, [pc, #488]	@ (80013dc <MX_GPIO_Init+0x220>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a79      	ldr	r2, [pc, #484]	@ (80013dc <MX_GPIO_Init+0x220>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b77      	ldr	r3, [pc, #476]	@ (80013dc <MX_GPIO_Init+0x220>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b73      	ldr	r3, [pc, #460]	@ (80013dc <MX_GPIO_Init+0x220>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a72      	ldr	r2, [pc, #456]	@ (80013dc <MX_GPIO_Init+0x220>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b70      	ldr	r3, [pc, #448]	@ (80013dc <MX_GPIO_Init+0x220>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b6c      	ldr	r3, [pc, #432]	@ (80013dc <MX_GPIO_Init+0x220>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a6b      	ldr	r2, [pc, #428]	@ (80013dc <MX_GPIO_Init+0x220>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b69      	ldr	r3, [pc, #420]	@ (80013dc <MX_GPIO_Init+0x220>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b65      	ldr	r3, [pc, #404]	@ (80013dc <MX_GPIO_Init+0x220>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a64      	ldr	r2, [pc, #400]	@ (80013dc <MX_GPIO_Init+0x220>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b62      	ldr	r3, [pc, #392]	@ (80013dc <MX_GPIO_Init+0x220>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b5e      	ldr	r3, [pc, #376]	@ (80013dc <MX_GPIO_Init+0x220>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a5d      	ldr	r2, [pc, #372]	@ (80013dc <MX_GPIO_Init+0x220>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b5b      	ldr	r3, [pc, #364]	@ (80013dc <MX_GPIO_Init+0x220>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2108      	movs	r1, #8
 800127e:	4858      	ldr	r0, [pc, #352]	@ (80013e0 <MX_GPIO_Init+0x224>)
 8001280:	f000 fe20 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2101      	movs	r1, #1
 8001288:	4856      	ldr	r0, [pc, #344]	@ (80013e4 <MX_GPIO_Init+0x228>)
 800128a:	f000 fe1b 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2104      	movs	r1, #4
 8001292:	4855      	ldr	r0, [pc, #340]	@ (80013e8 <MX_GPIO_Init+0x22c>)
 8001294:	f000 fe16 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001298:	2200      	movs	r2, #0
 800129a:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800129e:	4853      	ldr	r0, [pc, #332]	@ (80013ec <MX_GPIO_Init+0x230>)
 80012a0:	f000 fe10 	bl	8001ec4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012a4:	2308      	movs	r3, #8
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	4849      	ldr	r0, [pc, #292]	@ (80013e0 <MX_GPIO_Init+0x224>)
 80012bc:	f000 fc4e 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	4843      	ldr	r0, [pc, #268]	@ (80013e4 <MX_GPIO_Init+0x228>)
 80012d8:	f000 fc40 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012dc:	2308      	movs	r3, #8
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ec:	2305      	movs	r3, #5
 80012ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	483b      	ldr	r0, [pc, #236]	@ (80013e4 <MX_GPIO_Init+0x228>)
 80012f8:	f000 fc30 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001300:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4835      	ldr	r0, [pc, #212]	@ (80013e8 <MX_GPIO_Init+0x22c>)
 8001312:	f000 fc23 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001316:	2302      	movs	r3, #2
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	482f      	ldr	r0, [pc, #188]	@ (80013e8 <MX_GPIO_Init+0x22c>)
 800132a:	f000 fc17 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800132e:	2304      	movs	r3, #4
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4828      	ldr	r0, [pc, #160]	@ (80013e8 <MX_GPIO_Init+0x22c>)
 8001346:	f000 fc09 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800134a:	2304      	movs	r3, #4
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4824      	ldr	r0, [pc, #144]	@ (80013f0 <MX_GPIO_Init+0x234>)
 800135e:	f000 fbfd 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001374:	2305      	movs	r3, #5
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	481c      	ldr	r0, [pc, #112]	@ (80013f0 <MX_GPIO_Init+0x234>)
 8001380:	f000 fbec 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001384:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001388:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4813      	ldr	r0, [pc, #76]	@ (80013ec <MX_GPIO_Init+0x230>)
 800139e:	f000 fbdd 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013a2:	2320      	movs	r3, #32
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	480d      	ldr	r0, [pc, #52]	@ (80013ec <MX_GPIO_Init+0x230>)
 80013b6:	f000 fbd1 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013be:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <MX_GPIO_Init+0x224>)
 80013d0:	f000 fbc4 	bl	8001b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013d4:	bf00      	nop
 80013d6:	3730      	adds	r7, #48	@ 0x30
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40020400 	.word	0x40020400

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <Error_Handler+0x8>

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	4a0f      	ldr	r2, [pc, #60]	@ (800144c <HAL_MspInit+0x4c>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001414:	6453      	str	r3, [r2, #68]	@ 0x44
 8001416:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	@ (800144c <HAL_MspInit+0x4c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	@ 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800143e:	2007      	movs	r0, #7
 8001440:	f000 fb4a 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <HAL_I2C_MspInit+0x84>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12c      	bne.n	80014cc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800148e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001494:	2312      	movs	r3, #18
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001498:	2301      	movs	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a0:	2304      	movs	r3, #4
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	480c      	ldr	r0, [pc, #48]	@ (80014dc <HAL_I2C_MspInit+0x8c>)
 80014ac:	f000 fb56 	bl	8001b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	4a07      	ldr	r2, [pc, #28]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 80014ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014be:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_I2C_MspInit+0x88>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	@ 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08e      	sub	sp, #56	@ 0x38
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a31      	ldr	r2, [pc, #196]	@ (80015d0 <HAL_I2S_MspInit+0xf0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d15a      	bne.n	80015c6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001510:	2301      	movs	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001514:	23c0      	movs	r3, #192	@ 0xc0
 8001516:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001518:	2302      	movs	r3, #2
 800151a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4618      	mov	r0, r3
 8001522:	f003 f9a3 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800152c:	f7ff ff62 	bl	80013f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <HAL_I2S_MspInit+0xf4>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	4a26      	ldr	r2, [pc, #152]	@ (80015d4 <HAL_I2S_MspInit+0xf4>)
 800153a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800153e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001540:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <HAL_I2S_MspInit+0xf4>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <HAL_I2S_MspInit+0xf4>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001554:	4a1f      	ldr	r2, [pc, #124]	@ (80015d4 <HAL_I2S_MspInit+0xf4>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6313      	str	r3, [r2, #48]	@ 0x30
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <HAL_I2S_MspInit+0xf4>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <HAL_I2S_MspInit+0xf4>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001570:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <HAL_I2S_MspInit+0xf4>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6313      	str	r3, [r2, #48]	@ 0x30
 8001578:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_I2S_MspInit+0xf4>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001584:	2310      	movs	r3, #16
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001594:	2306      	movs	r3, #6
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	480e      	ldr	r0, [pc, #56]	@ (80015d8 <HAL_I2S_MspInit+0xf8>)
 80015a0:	f000 fadc 	bl	8001b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015a4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015b6:	2306      	movs	r3, #6
 80015b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4806      	ldr	r0, [pc, #24]	@ (80015dc <HAL_I2S_MspInit+0xfc>)
 80015c2:	f000 facb 	bl	8001b5c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80015c6:	bf00      	nop
 80015c8:	3738      	adds	r7, #56	@ 0x38
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40003c00 	.word	0x40003c00
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020800 	.word	0x40020800

080015e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	@ (8001664 <HAL_SPI_MspInit+0x84>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12b      	bne.n	800165a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <HAL_SPI_MspInit+0x88>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	4a17      	ldr	r2, [pc, #92]	@ (8001668 <HAL_SPI_MspInit+0x88>)
 800160c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001610:	6453      	str	r3, [r2, #68]	@ 0x44
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_SPI_MspInit+0x88>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_SPI_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <HAL_SPI_MspInit+0x88>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <HAL_SPI_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800163a:	23e0      	movs	r3, #224	@ 0xe0
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800164a:	2305      	movs	r3, #5
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	@ (800166c <HAL_SPI_MspInit+0x8c>)
 8001656:	f000 fa81 	bl	8001b5c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	@ 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40013000 	.word	0x40013000
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000

08001670 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0b      	ldr	r2, [pc, #44]	@ (80016ac <HAL_TIM_Base_MspInit+0x3c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10d      	bne.n	800169e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <HAL_TIM_Base_MspInit+0x40>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	4a09      	ldr	r2, [pc, #36]	@ (80016b0 <HAL_TIM_Base_MspInit+0x40>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6453      	str	r3, [r2, #68]	@ 0x44
 8001692:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <HAL_TIM_Base_MspInit+0x40>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40010000 	.word	0x40010000
 80016b0:	40023800 	.word	0x40023800

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <NMI_Handler+0x4>

080016bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <MemManage_Handler+0x4>

080016cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <UsageFault_Handler+0x4>

080016dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170a:	f000 f8d1 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <OTG_FS_IRQHandler+0x10>)
 800171a:	f001 fb15 	bl	8002d48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000179c 	.word	0x2000179c

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001758:	f007 fe00 	bl	800935c <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e009      	b.n	800177c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20020000 	.word	0x20020000
 8001788:	00000400 	.word	0x00000400
 800178c:	200002b4 	.word	0x200002b4
 8001790:	20001fe8 	.word	0x20001fe8

08001794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <SystemInit+0x20>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <SystemInit+0x20>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017bc:	f7ff ffea 	bl	8001794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	@ (80017f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f007 fdbf 	bl	8009368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ea:	f7ff facd 	bl	8000d88 <main>
  bx  lr    
 80017ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80017fc:	08009d14 	.word	0x08009d14
  ldr r2, =_sbss
 8001800:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001804:	20001fe8 	.word	0x20001fe8

08001808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC_IRQHandler>
	...

0800180c <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0d      	ldr	r2, [pc, #52]	@ (800184c <HAL_Init+0x40>)
 8001816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800181a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <HAL_Init+0x40>)
 8001822:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	@ (800184c <HAL_Init+0x40>)
 800182e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f94f 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8001840:	f7ff fdde 	bl	8001400 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023c00 	.word	0x40023c00

08001850 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f967 	bl	8001b42 <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
		return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 f92f 	bl	8001aee <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	@ (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
		return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_IncTick+0x20>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_IncTick+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <HAL_IncTick+0x24>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008
 80018d4:	200002b8 	.word	0x200002b8

080018d8 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	return uwTick;
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200002b8 	.word	0x200002b8

080018f0 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff ffee 	bl	80018d8 <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d005      	beq.n	8001916 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_Delay+0x44>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8001916:	bf00      	nop
 8001918:	f7ff ffde 	bl	80018d8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	d8f7      	bhi.n	8001918 <HAL_Delay+0x28>
	}
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000008 	.word	0x20000008

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <__NVIC_EnableIRQ+0x38>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	@ (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	@ (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	@ 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff ff8e 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff29 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff3e 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff8e 	bl	8001a2c <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5d 	bl	80019d8 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff31 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffa2 	bl	8001a94 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e16b      	b.n	8001e50 <HAL_GPIO_Init+0x2f4>
		/* Get the IO position */
		ioposition = 0x01U << position;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	f040 815a 	bne.w	8001e4a <HAL_GPIO_Init+0x2ee>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d005      	beq.n	8001bae <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d130      	bne.n	8001c10 <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d017      	beq.n	8001c4c <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d123      	bne.n	8001ca0 <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c64:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80b4 	beq.w	8001e4a <HAL_GPIO_Init+0x2ee>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b60      	ldr	r3, [pc, #384]	@ (8001e68 <HAL_GPIO_Init+0x30c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	4a5f      	ldr	r2, [pc, #380]	@ (8001e68 <HAL_GPIO_Init+0x30c>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e68 <HAL_GPIO_Init+0x30c>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 8001cfe:	4a5b      	ldr	r2, [pc, #364]	@ (8001e6c <HAL_GPIO_Init+0x310>)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a52      	ldr	r2, [pc, #328]	@ (8001e70 <HAL_GPIO_Init+0x314>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d02b      	beq.n	8001d82 <HAL_GPIO_Init+0x226>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a51      	ldr	r2, [pc, #324]	@ (8001e74 <HAL_GPIO_Init+0x318>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d025      	beq.n	8001d7e <HAL_GPIO_Init+0x222>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a50      	ldr	r2, [pc, #320]	@ (8001e78 <HAL_GPIO_Init+0x31c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01f      	beq.n	8001d7a <HAL_GPIO_Init+0x21e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e7c <HAL_GPIO_Init+0x320>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d019      	beq.n	8001d76 <HAL_GPIO_Init+0x21a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4e      	ldr	r2, [pc, #312]	@ (8001e80 <HAL_GPIO_Init+0x324>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0x216>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e84 <HAL_GPIO_Init+0x328>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_Init+0x212>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4c      	ldr	r2, [pc, #304]	@ (8001e88 <HAL_GPIO_Init+0x32c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_Init+0x20e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e8c <HAL_GPIO_Init+0x330>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_Init+0x20a>
 8001d62:	2307      	movs	r3, #7
 8001d64:	e00e      	b.n	8001d84 <HAL_GPIO_Init+0x228>
 8001d66:	2308      	movs	r3, #8
 8001d68:	e00c      	b.n	8001d84 <HAL_GPIO_Init+0x228>
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	e00a      	b.n	8001d84 <HAL_GPIO_Init+0x228>
 8001d6e:	2305      	movs	r3, #5
 8001d70:	e008      	b.n	8001d84 <HAL_GPIO_Init+0x228>
 8001d72:	2304      	movs	r3, #4
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x228>
 8001d76:	2303      	movs	r3, #3
 8001d78:	e004      	b.n	8001d84 <HAL_GPIO_Init+0x228>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e002      	b.n	8001d84 <HAL_GPIO_Init+0x228>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_Init+0x228>
 8001d82:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	f002 0203 	and.w	r2, r2, #3
 8001d8a:	0092      	lsls	r2, r2, #2
 8001d8c:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 8001d94:	4935      	ldr	r1, [pc, #212]	@ (8001e6c <HAL_GPIO_Init+0x310>)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8001da2:	4b3b      	ldr	r3, [pc, #236]	@ (8001e90 <HAL_GPIO_Init+0x334>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x26a>
					temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 8001dc6:	4a32      	ldr	r2, [pc, #200]	@ (8001e90 <HAL_GPIO_Init+0x334>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8001dcc:	4b30      	ldr	r3, [pc, #192]	@ (8001e90 <HAL_GPIO_Init+0x334>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x294>
					temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 8001df0:	4a27      	ldr	r2, [pc, #156]	@ (8001e90 <HAL_GPIO_Init+0x334>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 8001df6:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <HAL_GPIO_Init+0x334>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x2be>
					temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 8001e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e90 <HAL_GPIO_Init+0x334>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <HAL_GPIO_Init+0x334>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x2e8>
					temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 8001e44:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <HAL_GPIO_Init+0x334>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b0f      	cmp	r3, #15
 8001e54:	f67f ae90 	bls.w	8001b78 <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3724      	adds	r7, #36	@ 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020c00 	.word	0x40020c00
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40021400 	.word	0x40021400
 8001e88:	40021800 	.word	0x40021800
 8001e8c:	40021c00 	.word	0x40021c00
 8001e90:	40013c00 	.word	0x40013c00

08001e94 <HAL_GPIO_ReadPin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 8001ee0:	e003      	b.n	8001eea <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e12b      	b.n	8002162 <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fa96 	bl	8001450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2224      	movs	r2, #36	@ 0x24
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f4a:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f5a:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f5c:	f002 fc72 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8001f60:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a81      	ldr	r2, [pc, #516]	@ (800216c <HAL_I2C_Init+0x274>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d807      	bhi.n	8001f7c <HAL_I2C_Init+0x84>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a80      	ldr	r2, [pc, #512]	@ (8002170 <HAL_I2C_Init+0x278>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	bf94      	ite	ls
 8001f74:	2301      	movls	r3, #1
 8001f76:	2300      	movhi	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	e006      	b.n	8001f8a <HAL_I2C_Init+0x92>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a7d      	ldr	r2, [pc, #500]	@ (8002174 <HAL_I2C_Init+0x27c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	bf94      	ite	ls
 8001f84:	2301      	movls	r3, #1
 8001f86:	2300      	movhi	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0e7      	b.n	8002162 <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a78      	ldr	r2, [pc, #480]	@ (8002178 <HAL_I2C_Init+0x280>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0c9b      	lsrs	r3, r3, #18
 8001f9c:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a6a      	ldr	r2, [pc, #424]	@ (800216c <HAL_I2C_Init+0x274>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d802      	bhi.n	8001fcc <HAL_I2C_Init+0xd4>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	e009      	b.n	8001fe0 <HAL_I2C_Init+0xe8>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	4a69      	ldr	r2, [pc, #420]	@ (800217c <HAL_I2C_Init+0x284>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	099b      	lsrs	r3, r3, #6
 8001fde:	3301      	adds	r3, #1
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ff2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	495c      	ldr	r1, [pc, #368]	@ (800216c <HAL_I2C_Init+0x274>)
 8001ffc:	428b      	cmp	r3, r1
 8001ffe:	d819      	bhi.n	8002034 <HAL_I2C_Init+0x13c>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e59      	subs	r1, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fbb1 f3f3 	udiv	r3, r1, r3
 800200e:	1c59      	adds	r1, r3, #1
 8002010:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002014:	400b      	ands	r3, r1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_I2C_Init+0x138>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e59      	subs	r1, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fbb1 f3f3 	udiv	r3, r1, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202e:	e051      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 8002030:	2304      	movs	r3, #4
 8002032:	e04f      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d111      	bne.n	8002060 <HAL_I2C_Init+0x168>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e58      	subs	r0, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	440b      	add	r3, r1
 800204a:	fbb0 f3f3 	udiv	r3, r0, r3
 800204e:	3301      	adds	r3, #1
 8002050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e012      	b.n	8002086 <HAL_I2C_Init+0x18e>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e58      	subs	r0, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	0099      	lsls	r1, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	fbb0 f3f3 	udiv	r3, r0, r3
 8002076:	3301      	adds	r3, #1
 8002078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Init+0x196>
 800208a:	2301      	movs	r3, #1
 800208c:	e022      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10e      	bne.n	80020b4 <HAL_I2C_Init+0x1bc>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1e58      	subs	r0, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	440b      	add	r3, r1
 80020a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020b2:	e00f      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1e58      	subs	r0, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	0099      	lsls	r1, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	6809      	ldr	r1, [r1, #0]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002102:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6911      	ldr	r1, [r2, #16]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68d2      	ldr	r2, [r2, #12]
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	430b      	orrs	r3, r1
 8002116:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	000186a0 	.word	0x000186a0
 8002170:	001e847f 	.word	0x001e847f
 8002174:	003d08ff 	.word	0x003d08ff
 8002178:	431bde83 	.word	0x431bde83
 800217c:	10624dd3 	.word	0x10624dd3

08002180 <HAL_I2S_Init>:
 *         in the I2S_InitTypeDef and create the associated handle.
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
	uint16_t tmpreg;
#endif

	/* Check the I2S handle allocation */
	if (hi2s == NULL) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_I2S_Init+0x12>
		return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e128      	b.n	80023e4 <HAL_I2S_Init+0x264>
	assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
	assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
	assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
	assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

	if (hi2s->State == HAL_I2S_STATE_RESET) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_I2S_Init+0x32>
		/* Allocate lock resource and initialize it */
		hi2s->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

		/* Initialize Default I2S IrqHandler ISR */
		hi2s->IrqHandlerISR = I2S_IRQHandler;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a90      	ldr	r2, [pc, #576]	@ (80023ec <HAL_I2S_Init+0x26c>)
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
		/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
		HAL_I2S_MspInit(hi2s);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff f997 	bl	80014e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}

	hi2s->State = HAL_I2S_STATE_BUSY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	CLEAR_BIT(hi2s->Instance->I2SCFGR,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80021c8:	f023 030f 	bic.w	r3, r3, #15
 80021cc:	61d3      	str	r3, [r2, #28]
			(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
	hi2s->Instance->I2SPR = 0x0002U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2202      	movs	r2, #2
 80021d4:	621a      	str	r2, [r3, #32]

	/*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
	/* If the requested audio frequency is not the default, compute the prescaler */
	if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT) {
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d060      	beq.n	80022a0 <HAL_I2S_Init+0x120>
		/* Check the frame length (For the Prescaler computing) ********************/
		if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B) {
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <HAL_I2S_Init+0x6c>
			/* Packet length is 16 bits */
			packetlength = 16U;
 80021e6:	2310      	movs	r3, #16
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e001      	b.n	80021f0 <HAL_I2S_Init+0x70>
		} else {
			/* Packet length is 32 bits */
			packetlength = 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	617b      	str	r3, [r7, #20]
		}

		/* I2S standard */
		if (hi2s->Init.Standard <= I2S_STANDARD_LSB) {
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d802      	bhi.n	80021fe <HAL_I2S_Init+0x7e>
			/* In I2S standard packet length is multiplied by 2 */
			packetlength = packetlength * 2U;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
		i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80021fe:	2001      	movs	r0, #1
 8002200:	f002 fc16 	bl	8004a30 <HAL_RCCEx_GetPeriphCLKFreq>
 8002204:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

		/* Compute the Real divider depending on the MCLK output state, with a floating point */
		if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE) {
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800220e:	d125      	bne.n	800225c <HAL_I2S_Init+0xdc>
			/* MCLK output is enabled */
			if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B) {
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d010      	beq.n	800223a <HAL_I2S_Init+0xba>
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8002234:	3305      	adds	r3, #5
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	e01f      	b.n	800227a <HAL_I2S_Init+0xfa>
			} else {
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	fbb2 f2f3 	udiv	r2, r2, r3
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8002256:	3305      	adds	r3, #5
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	e00e      	b.n	800227a <HAL_I2S_Init+0xfa>
			}
		} else {
			/* MCLK output is disabled */
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	fbb2 f2f3 	udiv	r2, r2, r3
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	461a      	mov	r2, r3
					/ hi2s->Init.AudioFreq)) + 5U);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 8002276:	3305      	adds	r3, #5
 8002278:	613b      	str	r3, [r7, #16]
		}

		/* Remove the flatting point */
		tmp = tmp / 10U;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4a5c      	ldr	r2, [pc, #368]	@ (80023f0 <HAL_I2S_Init+0x270>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	08db      	lsrs	r3, r3, #3
 8002284:	613b      	str	r3, [r7, #16]

		/* Check the parity of the divider */
		i2sodd = (uint32_t) (tmp & (uint32_t) 1U);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	61bb      	str	r3, [r7, #24]

		/* Compute the i2sdiv prescaler */
		i2sdiv = (uint32_t) ((tmp - i2sodd) / 2U);
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	61fb      	str	r3, [r7, #28]

		/* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
		i2sodd = (uint32_t) (i2sodd << 8U);
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	e003      	b.n	80022a8 <HAL_I2S_Init+0x128>
	} else {
		/* Set the default values */
		i2sdiv = 2U;
 80022a0:	2302      	movs	r3, #2
 80022a2:	61fb      	str	r3, [r7, #28]
		i2sodd = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
	}

	/* Test if the divider is 1 or 0 or greater than 0xFF */
	if ((i2sdiv < 2U) || (i2sdiv > 0xFFU)) {
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d902      	bls.n	80022b4 <HAL_I2S_Init+0x134>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	2bff      	cmp	r3, #255	@ 0xff
 80022b2:	d907      	bls.n	80022c4 <HAL_I2S_Init+0x144>
		/* Set the error code and execute error callback*/
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	645a      	str	r2, [r3, #68]	@ 0x44
		return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e08f      	b.n	80023e4 <HAL_I2S_Init+0x264>

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

	/* Write to SPIx I2SPR register the computed value */
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
			| (uint32_t) (i2sodd | (uint32_t) hi2s->Init.MCLKOutput));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	ea42 0103 	orr.w	r1, r2, r3
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	621a      	str	r2, [r3, #32]

	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	/* And configure the I2S with the I2S_InitStruct values                      */
	MODIFY_REG(hi2s->Instance->I2SCFGR,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80022e2:	f023 030f 	bic.w	r3, r3, #15
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6851      	ldr	r1, [r2, #4]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6892      	ldr	r2, [r2, #8]
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68d2      	ldr	r2, [r2, #12]
 80022f4:	4311      	orrs	r1, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6992      	ldr	r2, [r2, #24]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002306:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

	/* Configure the I2S extended if the full duplex mode is enabled */
	assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

	if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d161      	bne.n	80023d4 <HAL_I2S_Init+0x254>
		/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
		hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a38      	ldr	r2, [pc, #224]	@ (80023f4 <HAL_I2S_Init+0x274>)
 8002314:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
		CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a37      	ldr	r2, [pc, #220]	@ (80023f8 <HAL_I2S_Init+0x278>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_I2S_Init+0x1a4>
 8002320:	4b36      	ldr	r3, [pc, #216]	@ (80023fc <HAL_I2S_Init+0x27c>)
 8002322:	e001      	b.n	8002328 <HAL_I2S_Init+0x1a8>
 8002324:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	4932      	ldr	r1, [pc, #200]	@ (80023f8 <HAL_I2S_Init+0x278>)
 8002330:	428a      	cmp	r2, r1
 8002332:	d101      	bne.n	8002338 <HAL_I2S_Init+0x1b8>
 8002334:	4a31      	ldr	r2, [pc, #196]	@ (80023fc <HAL_I2S_Init+0x27c>)
 8002336:	e001      	b.n	800233c <HAL_I2S_Init+0x1bc>
 8002338:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800233c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002340:	f023 030f 	bic.w	r3, r3, #15
 8002344:	61d3      	str	r3, [r2, #28]
				(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
		I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a2b      	ldr	r2, [pc, #172]	@ (80023f8 <HAL_I2S_Init+0x278>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_I2S_Init+0x1d4>
 8002350:	4b2a      	ldr	r3, [pc, #168]	@ (80023fc <HAL_I2S_Init+0x27c>)
 8002352:	e001      	b.n	8002358 <HAL_I2S_Init+0x1d8>
 8002354:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002358:	2202      	movs	r2, #2
 800235a:	621a      	str	r2, [r3, #32]

		/* Get the I2SCFGR register value */
		tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a25      	ldr	r2, [pc, #148]	@ (80023f8 <HAL_I2S_Init+0x278>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_I2S_Init+0x1ea>
 8002366:	4b25      	ldr	r3, [pc, #148]	@ (80023fc <HAL_I2S_Init+0x27c>)
 8002368:	e001      	b.n	800236e <HAL_I2S_Init+0x1ee>
 800236a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	817b      	strh	r3, [r7, #10]

		/* Get the mode to be configured for the extended I2S */
		if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800237a:	d003      	beq.n	8002384 <HAL_I2S_Init+0x204>
				|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d103      	bne.n	800238c <HAL_I2S_Init+0x20c>
			tmp = I2S_MODE_SLAVE_RX;
 8002384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e001      	b.n	8002390 <HAL_I2S_Init+0x210>
		} else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
		{
			tmp = I2S_MODE_SLAVE_TX;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
		}

		/* Configure the I2S Slave with the I2S Master parameter values */
		tmpreg |=
				(uint16_t) ((uint16_t) SPI_I2SCFGR_I2SMOD | (uint16_t) tmp
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.Standard
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	b29b      	uxth	r3, r3
		tmpreg |=
 800239a:	4313      	orrs	r3, r2
 800239c:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.DataFormat
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	b29b      	uxth	r3, r3
		tmpreg |=
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.CPOL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	b29b      	uxth	r3, r3
		tmpreg |=
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	897b      	ldrh	r3, [r7, #10]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023bc:	817b      	strh	r3, [r7, #10]

		/* Write to SPIx I2SCFGR */
		WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a0d      	ldr	r2, [pc, #52]	@ (80023f8 <HAL_I2S_Init+0x278>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_I2S_Init+0x24c>
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <HAL_I2S_Init+0x27c>)
 80023ca:	e001      	b.n	80023d0 <HAL_I2S_Init+0x250>
 80023cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023d0:	897a      	ldrh	r2, [r7, #10]
 80023d2:	61da      	str	r2, [r3, #28]
	}
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	@ 0x44
	hi2s->State = HAL_I2S_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	080024f7 	.word	0x080024f7
 80023f0:	cccccccd 	.word	0xcccccccd
 80023f4:	0800260d 	.word	0x0800260d
 80023f8:	40003800 	.word	0x40003800
 80023fc:	40003400 	.word	0x40003400

08002400 <HAL_I2S_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_TxCpltCallback could be implemented in the user file
	 */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_I2S_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_I2S_ErrorCallback>:
 * @brief  I2S error callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_ErrorCallback could be implemented in the user file
	 */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <I2S_Transmit_IT>:
 * @brief  Transmit an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	/* Transmit data */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	881a      	ldrh	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60da      	str	r2, [r3, #12]
	hi2s->pTxBuffPtr++;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	1c9a      	adds	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
	hi2s->TxXferCount--;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10e      	bne.n	8002490 <I2S_Transmit_IT+0x54>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002480:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
		HAL_I2S_TxCpltCallback(hi2s);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffb8 	bl	8002400 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <I2S_Receive_IT>:
 * @brief  Receive an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	/* Receive data */
	(*hi2s->pRxBuffPtr) = (uint16_t) hi2s->Instance->DR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024aa:	b292      	uxth	r2, r2
 80024ac:	801a      	strh	r2, [r3, #0]
	hi2s->pRxBuffPtr++;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b2:	1c9a      	adds	r2, r3, #2
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hi2s->RxXferCount--;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10e      	bne.n	80024ee <I2S_Receive_IT+0x56>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024de:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
		HAL_I2S_RxCpltCallback(hi2s);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff93 	bl	8002414 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <I2S_IRQHandler>:
 * @brief  This function handles I2S interrupt request.
 * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s) {
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	617b      	str	r3, [r7, #20]

	if (hi2s->State == HAL_I2S_STATE_BUSY_RX) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b04      	cmp	r3, #4
 8002510:	d13a      	bne.n	8002588 <I2S_IRQHandler+0x92>
		/* I2S in mode Receiver ------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d109      	bne.n	8002530 <I2S_IRQHandler+0x3a>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET)) {
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002526:	2b40      	cmp	r3, #64	@ 0x40
 8002528:	d102      	bne.n	8002530 <I2S_IRQHandler+0x3a>
			I2S_Receive_IT(hi2s);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffb4 	bl	8002498 <I2S_Receive_IT>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002536:	2b40      	cmp	r3, #64	@ 0x40
 8002538:	d126      	bne.n	8002588 <I2S_IRQHandler+0x92>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b20      	cmp	r3, #32
 8002546:	d11f      	bne.n	8002588 <I2S_IRQHandler+0x92>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002556:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff50 	bl	8002428 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}

	if (hi2s->State == HAL_I2S_STATE_BUSY_TX) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b03      	cmp	r3, #3
 8002592:	d136      	bne.n	8002602 <I2S_IRQHandler+0x10c>
		/* I2S in mode Transmitter -----------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d109      	bne.n	80025b2 <I2S_IRQHandler+0xbc>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET)) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a8:	2b80      	cmp	r3, #128	@ 0x80
 80025aa:	d102      	bne.n	80025b2 <I2S_IRQHandler+0xbc>
			I2S_Transmit_IT(hi2s);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff45 	bl	800243c <I2S_Transmit_IT>
		}

		/* I2S Underrun error interrupt occurred --------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d122      	bne.n	8002602 <I2S_IRQHandler+0x10c>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d11b      	bne.n	8002602 <I2S_IRQHandler+0x10c>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80025d8:	605a      	str	r2, [r3, #4]

			/* Clear Underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f4:	f043 0204 	orr.w	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff13 	bl	8002428 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_I2SEx_FullDuplex_IRQHandler>:
/**
 * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
 * @param  hi2s I2S handle
 * @retval HAL status
 */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a92      	ldr	r2, [pc, #584]	@ (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002626:	4b92      	ldr	r3, [pc, #584]	@ (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002628:	e001      	b.n	800262e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800262a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	61bb      	str	r3, [r7, #24]
	__IO uint32_t i2scr2 = hi2s->Instance->CR2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	617b      	str	r3, [r7, #20]
	__IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a8b      	ldr	r2, [pc, #556]	@ (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002644:	4b8a      	ldr	r3, [pc, #552]	@ (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002646:	e001      	b.n	800264c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002648:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	613b      	str	r3, [r7, #16]

	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002658:	d004      	beq.n	8002664 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
			|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 8099 	bne.w	8002796 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
		/* I2S in mode Transmitter -------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d107      	bne.n	800267e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
				&& ((i2scr2 & I2S_IT_TXE) != RESET)) {
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2S(hi2s);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f925 	bl	80028c8 <I2SEx_TxISR_I2S>
		}

		/* I2Sext in mode Receiver -----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
				&& ((i2sextcr2 & I2S_IT_RXNE) != RESET)) {
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2SExt(hi2s);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f9c8 	bl	8002a28 <I2SEx_RxISR_I2SExt>
		}

		/* I2Sext Overrun error interrupt occurred --------------------------------*/
		if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269e:	2b40      	cmp	r3, #64	@ 0x40
 80026a0:	d13a      	bne.n	8002718 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d035      	beq.n	8002718 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a6e      	ldr	r2, [pc, #440]	@ (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80026b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026b8:	e001      	b.n	80026be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80026ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4969      	ldr	r1, [pc, #420]	@ (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026c6:	428b      	cmp	r3, r1
 80026c8:	d101      	bne.n	80026ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80026ca:	4b69      	ldr	r3, [pc, #420]	@ (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026cc:	e001      	b.n	80026d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80026ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80026d6:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026e6:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270a:	f043 0202 	orr.w	r2, r3, #2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff fe88 	bl	8002428 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2S Underrun error interrupt occurred ----------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b08      	cmp	r3, #8
 8002720:	f040 80c3 	bne.w	80028aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80bd 	beq.w	80028aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800273e:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a49      	ldr	r2, [pc, #292]	@ (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800274a:	4b49      	ldr	r3, [pc, #292]	@ (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800274c:	e001      	b.n	8002752 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800274e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4944      	ldr	r1, [pc, #272]	@ (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800275a:	428b      	cmp	r3, r1
 800275c:	d101      	bne.n	8002762 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800275e:	4b44      	ldr	r3, [pc, #272]	@ (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002760:	e001      	b.n	8002766 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002762:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002766:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800276a:	605a      	str	r2, [r3, #4]

			/* Clear underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f043 0204 	orr.w	r2, r3, #4
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff fe4a 	bl	8002428 <HAL_I2S_ErrorCallback>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8002794:	e089      	b.n	80028aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
		}
	}
	/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
	else {
		/* I2Sext in mode Transmitter ----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b02      	cmp	r3, #2
 800279e:	d107      	bne.n	80027b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
				&& ((i2sextcr2 & I2S_IT_TXE) != RESET)) {
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2SExt(hi2s);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f8be 	bl	800292c <I2SEx_TxISR_I2SExt>
		}

		/* I2S in mode Receiver --------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
				&& ((i2scr2 & I2S_IT_RXNE) != RESET)) {
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2S(hi2s);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f8fd 	bl	80029c4 <I2SEx_RxISR_I2S>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d0:	2b40      	cmp	r3, #64	@ 0x40
 80027d2:	d12f      	bne.n	8002834 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d02a      	beq.n	8002834 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027ec:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1e      	ldr	r2, [pc, #120]	@ (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80027f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027fa:	e001      	b.n	8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80027fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4919      	ldr	r1, [pc, #100]	@ (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002808:	428b      	cmp	r3, r1
 800280a:	d101      	bne.n	8002810 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800280c:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800280e:	e001      	b.n	8002814 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002810:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002814:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002818:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	f043 0202 	orr.w	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff fdfa 	bl	8002428 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2Sext Underrun error interrupt occurred -------------------------------*/
		if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b08      	cmp	r3, #8
 800283c:	d136      	bne.n	80028ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d031      	beq.n	80028ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a07      	ldr	r2, [pc, #28]	@ (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002854:	e001      	b.n	800285a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002856:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4902      	ldr	r1, [pc, #8]	@ (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002862:	428b      	cmp	r3, r1
 8002864:	d106      	bne.n	8002874 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002866:	4b02      	ldr	r3, [pc, #8]	@ (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002868:	e006      	b.n	8002878 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800286a:	bf00      	nop
 800286c:	40003800 	.word	0x40003800
 8002870:	40003400 	.word	0x40003400
 8002874:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002878:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800287c:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800288c:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f043 0204 	orr.w	r2, r3, #4
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fdc0 	bl	8002428 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 80028a8:	e000      	b.n	80028ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 80028aa:	bf00      	nop
}
 80028ac:	bf00      	nop
 80028ae:	3720      	adds	r7, #32
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_I2SEx_TxRxCpltCallback>:
/**
 * @brief  Tx and Rx Transfer completed callback
 * @param  hi2s I2S handle
 * @retval None
 */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
	 */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <I2SEx_TxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	1c99      	adds	r1, r3, #2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6251      	str	r1, [r2, #36]	@ 0x24
 80028da:	881a      	ldrh	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d113      	bne.n	8002922 <I2SEx_TxISR_I2S+0x5a>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002908:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <I2SEx_TxISR_I2S+0x5a>
			hi2s->State = HAL_I2S_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ffc9 	bl	80028b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <I2SEx_TxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	1c99      	adds	r1, r3, #2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6251      	str	r1, [r2, #36]	@ 0x24
 800293e:	8819      	ldrh	r1, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1d      	ldr	r2, [pc, #116]	@ (80029bc <I2SEx_TxISR_I2SExt+0x90>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <I2SEx_TxISR_I2SExt+0x22>
 800294a:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <I2SEx_TxISR_I2SExt+0x94>)
 800294c:	e001      	b.n	8002952 <I2SEx_TxISR_I2SExt+0x26>
 800294e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002952:	460a      	mov	r2, r1
 8002954:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d121      	bne.n	80029b2 <I2SEx_TxISR_I2SExt+0x86>
		/* Disable I2Sext TXE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a12      	ldr	r2, [pc, #72]	@ (80029bc <I2SEx_TxISR_I2SExt+0x90>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <I2SEx_TxISR_I2SExt+0x50>
 8002978:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <I2SEx_TxISR_I2SExt+0x94>)
 800297a:	e001      	b.n	8002980 <I2SEx_TxISR_I2SExt+0x54>
 800297c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	490d      	ldr	r1, [pc, #52]	@ (80029bc <I2SEx_TxISR_I2SExt+0x90>)
 8002988:	428b      	cmp	r3, r1
 800298a:	d101      	bne.n	8002990 <I2SEx_TxISR_I2SExt+0x64>
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <I2SEx_TxISR_I2SExt+0x94>)
 800298e:	e001      	b.n	8002994 <I2SEx_TxISR_I2SExt+0x68>
 8002990:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002994:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002998:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <I2SEx_TxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff81 	bl	80028b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40003800 	.word	0x40003800
 80029c0:	40003400 	.word	0x40003400

080029c4 <I2SEx_RxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68d8      	ldr	r0, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d6:	1c99      	adds	r1, r3, #2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80029dc:	b282      	uxth	r2, r0
 80029de:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d113      	bne.n	8002a20 <I2SEx_RxISR_I2S+0x5c>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a06:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <I2SEx_RxISR_I2S+0x5c>
			hi2s->State = HAL_I2S_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ff4a 	bl	80028b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <I2SEx_RxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a20      	ldr	r2, [pc, #128]	@ (8002ab8 <I2SEx_RxISR_I2SExt+0x90>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <I2SEx_RxISR_I2SExt+0x16>
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <I2SEx_RxISR_I2SExt+0x94>)
 8002a3c:	e001      	b.n	8002a42 <I2SEx_RxISR_I2SExt+0x1a>
 8002a3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a42:	68d8      	ldr	r0, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	1c99      	adds	r1, r3, #2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002a4e:	b282      	uxth	r2, r0
 8002a50:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d121      	bne.n	8002aae <I2SEx_RxISR_I2SExt+0x86>
		/* Disable I2Sext RXNE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a12      	ldr	r2, [pc, #72]	@ (8002ab8 <I2SEx_RxISR_I2SExt+0x90>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <I2SEx_RxISR_I2SExt+0x50>
 8002a74:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <I2SEx_RxISR_I2SExt+0x94>)
 8002a76:	e001      	b.n	8002a7c <I2SEx_RxISR_I2SExt+0x54>
 8002a78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	490d      	ldr	r1, [pc, #52]	@ (8002ab8 <I2SEx_RxISR_I2SExt+0x90>)
 8002a84:	428b      	cmp	r3, r1
 8002a86:	d101      	bne.n	8002a8c <I2SEx_RxISR_I2SExt+0x64>
 8002a88:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <I2SEx_RxISR_I2SExt+0x94>)
 8002a8a:	e001      	b.n	8002a90 <I2SEx_RxISR_I2SExt+0x68>
 8002a8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a94:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <I2SEx_RxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff03 	bl	80028b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40003800 	.word	0x40003800
 8002abc:	40003400 	.word	0x40003400

08002ac0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e101      	b.n	8002cd6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d106      	bne.n	8002af2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f006 f8e9 	bl	8008cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2203      	movs	r2, #3
 8002af6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b00:	d102      	bne.n	8002b08 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 fcd0 	bl	80054b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7c1a      	ldrb	r2, [r3, #16]
 8002b1a:	f88d 2000 	strb.w	r2, [sp]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b22:	f002 fbaf 	bl	8005284 <USB_CoreInit>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0ce      	b.n	8002cd6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f002 fcc8 	bl	80054d4 <USB_SetCurrentMode>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0bf      	b.n	8002cd6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	e04a      	b.n	8002bf2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3315      	adds	r3, #21
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3314      	adds	r3, #20
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	b298      	uxth	r0, r3
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	332e      	adds	r3, #46	@ 0x2e
 8002b98:	4602      	mov	r2, r0
 8002b9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3318      	adds	r3, #24
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	331c      	adds	r3, #28
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3320      	adds	r3, #32
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3324      	adds	r3, #36	@ 0x24
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	791b      	ldrb	r3, [r3, #4]
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d3af      	bcc.n	8002b5c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e044      	b.n	8002c8c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	791b      	ldrb	r3, [r3, #4]
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d3b5      	bcc.n	8002c02 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7c1a      	ldrb	r2, [r3, #16]
 8002c9e:	f88d 2000 	strb.w	r2, [sp]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca6:	f002 fc61 	bl	800556c <USB_DevInit>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e00c      	b.n	8002cd6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 fcab 	bl	800662a <USB_DevDisconnect>

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_PCD_Start+0x1c>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e022      	b.n	8002d40 <HAL_PCD_Start+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 fbb2 	bl	8005490 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 fc59 	bl	80065e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b08d      	sub	sp, #52	@ 0x34
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 fd17 	bl	8006792 <USB_GetMode>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 848c 	bne.w	8003684 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fc7b 	bl	800666c <USB_ReadInterrupts>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8482 	beq.w	8003682 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 fc68 	bl	800666c <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d107      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 0202 	and.w	r2, r2, #2
 8002db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 fc56 	bl	800666c <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d161      	bne.n	8002e8e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0210 	bic.w	r2, r2, #16
 8002dd8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f003 020f 	and.w	r2, r3, #15
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	3304      	adds	r3, #4
 8002df8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002e00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e04:	d124      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d035      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	6a38      	ldr	r0, [r7, #32]
 8002e26:	f003 fa8d 	bl	8006344 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e36:	441a      	add	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e48:	441a      	add	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	615a      	str	r2, [r3, #20]
 8002e4e:	e016      	b.n	8002e7e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002e56:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002e5a:	d110      	bne.n	8002e7e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e62:	2208      	movs	r2, #8
 8002e64:	4619      	mov	r1, r3
 8002e66:	6a38      	ldr	r0, [r7, #32]
 8002e68:	f003 fa6c 	bl	8006344 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e78:	441a      	add	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0210 	orr.w	r2, r2, #16
 8002e8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 fbea 	bl	800666c <USB_ReadInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ea2:	f040 80a7 	bne.w	8002ff4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 fbef 	bl	8006692 <USB_ReadDevAllOutEpInterrupt>
 8002eb4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002eb6:	e099      	b.n	8002fec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 808e 	beq.w	8002fe0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fc13 	bl	80066fa <USB_ReadDevOutEPInterrupt>
 8002ed4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eec:	461a      	mov	r2, r3
 8002eee:	2301      	movs	r3, #1
 8002ef0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fea3 	bl	8003c40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00c      	beq.n	8002f1e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f10:	461a      	mov	r2, r3
 8002f12:	2308      	movs	r3, #8
 8002f14:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 ff79 	bl	8003e10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f34:	461a      	mov	r2, r3
 8002f36:	2310      	movs	r3, #16
 8002f38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d030      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4c:	2b80      	cmp	r3, #128	@ 0x80
 8002f4e:	d109      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f62:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	78db      	ldrb	r3, [r3, #3]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2200      	movs	r2, #0
 8002f86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f005 ffac 	bl	8008eec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fde:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f47f af62 	bne.w	8002eb8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f003 fb37 	bl	800666c <USB_ReadInterrupts>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003004:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003008:	f040 80db 	bne.w	80031c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f003 fb58 	bl	80066c6 <USB_ReadDevAllInEpInterrupt>
 8003016:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800301c:	e0cd      	b.n	80031ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800301e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80c2 	beq.w	80031ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f003 fb7e 	bl	8006736 <USB_ReadDevInEPInterrupt>
 800303a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d057      	beq.n	80030f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	2201      	movs	r2, #1
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800305a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	69f9      	ldr	r1, [r7, #28]
 8003062:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003066:	4013      	ands	r3, r2
 8003068:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003076:	461a      	mov	r2, r3
 8003078:	2301      	movs	r3, #1
 800307a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	799b      	ldrb	r3, [r3, #6]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d132      	bne.n	80030ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3320      	adds	r3, #32
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4403      	add	r3, r0
 80030a4:	331c      	adds	r3, #28
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4419      	add	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4403      	add	r3, r0
 80030b8:	3320      	adds	r3, #32
 80030ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d113      	bne.n	80030ea <HAL_PCD_IRQHandler+0x3a2>
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	3324      	adds	r3, #36	@ 0x24
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d108      	bne.n	80030ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030e2:	461a      	mov	r2, r3
 80030e4:	2101      	movs	r1, #1
 80030e6:	f003 fb85 	bl	80067f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	4619      	mov	r1, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f005 fe76 	bl	8008de2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800310c:	461a      	mov	r2, r3
 800310e:	2308      	movs	r3, #8
 8003110:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003128:	461a      	mov	r2, r3
 800312a:	2310      	movs	r3, #16
 800312c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003144:	461a      	mov	r2, r3
 8003146:	2340      	movs	r3, #64	@ 0x40
 8003148:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d023      	beq.n	800319c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003154:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003156:	6a38      	ldr	r0, [r7, #32]
 8003158:	f002 fb6c 	bl	8005834 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800315c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	3310      	adds	r3, #16
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	3304      	adds	r3, #4
 800316e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	78db      	ldrb	r3, [r3, #3]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d108      	bne.n	800318a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2200      	movs	r2, #0
 800317c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	b2db      	uxtb	r3, r3
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f005 fec3 	bl	8008f10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003196:	461a      	mov	r2, r3
 8003198:	2302      	movs	r3, #2
 800319a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fcbd 	bl	8003b28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	3301      	adds	r3, #1
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80031b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80031ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f47f af2e 	bne.w	800301e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 fa50 	bl	800666c <USB_ReadInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80031d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031d6:	d122      	bne.n	800321e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d108      	bne.n	8003208 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031fe:	2100      	movs	r1, #0
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fea3 	bl	8003f4c <HAL_PCDEx_LPM_Callback>
 8003206:	e002      	b.n	800320e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f005 fe61 	bl	8008ed0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800321c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fa22 	bl	800666c <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800322e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003232:	d112      	bne.n	800325a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d102      	bne.n	800324a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f005 fe1d 	bl	8008e84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003258:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fa04 	bl	800666c <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326e:	f040 80b7 	bne.w	80033e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2110      	movs	r1, #16
 800328c:	4618      	mov	r0, r3
 800328e:	f002 fad1 	bl	8005834 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003296:	e046      	b.n	8003326 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032a4:	461a      	mov	r2, r3
 80032a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032bc:	0151      	lsls	r1, r2, #5
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	440a      	add	r2, r1
 80032c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d8:	461a      	mov	r2, r3
 80032da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032f0:	0151      	lsls	r1, r2, #5
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	440a      	add	r2, r1
 80032f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003310:	0151      	lsls	r1, r2, #5
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	440a      	add	r2, r1
 8003316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800331a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800331e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003322:	3301      	adds	r3, #1
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	791b      	ldrb	r3, [r3, #4]
 800332a:	461a      	mov	r2, r3
 800332c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332e:	4293      	cmp	r3, r2
 8003330:	d3b2      	bcc.n	8003298 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003340:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003344:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7bdb      	ldrb	r3, [r3, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800335e:	f043 030b 	orr.w	r3, r3, #11
 8003362:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003374:	f043 030b 	orr.w	r3, r3, #11
 8003378:	6453      	str	r3, [r2, #68]	@ 0x44
 800337a:	e015      	b.n	80033a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800338a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800338e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003392:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033a2:	f043 030b 	orr.w	r3, r3, #11
 80033a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80033ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033ca:	461a      	mov	r2, r3
 80033cc:	f003 fa12 	bl	80067f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80033de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f003 f941 	bl	800666c <USB_ReadInterrupts>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033f4:	d123      	bne.n	800343e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 f9d7 	bl	80067ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f002 fa8e 	bl	8005926 <USB_GetDevSpeed>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681c      	ldr	r4, [r3, #0]
 8003416:	f001 fa09 	bl	800482c <HAL_RCC_GetHCLKFreq>
 800341a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003420:	461a      	mov	r2, r3
 8003422:	4620      	mov	r0, r4
 8003424:	f001 ff92 	bl	800534c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f005 fd02 	bl	8008e32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800343c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f003 f912 	bl	800666c <USB_ReadInterrupts>
 8003448:	4603      	mov	r3, r0
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b08      	cmp	r3, #8
 8003450:	d10a      	bne.n	8003468 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f005 fcdf 	bl	8008e16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f002 0208 	and.w	r2, r2, #8
 8003466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f003 f8fd 	bl	800666c <USB_ReadInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003478:	2b80      	cmp	r3, #128	@ 0x80
 800347a:	d123      	bne.n	80034c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003488:	2301      	movs	r3, #1
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
 800348c:	e014      	b.n	80034b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d105      	bne.n	80034b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fb0a 	bl	8003ac6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	3301      	adds	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	791b      	ldrb	r3, [r3, #4]
 80034bc:	461a      	mov	r2, r3
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d3e4      	bcc.n	800348e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f003 f8cf 	bl	800666c <USB_ReadInterrupts>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034d8:	d13c      	bne.n	8003554 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034da:	2301      	movs	r3, #1
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034de:	e02b      	b.n	8003538 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3318      	adds	r3, #24
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d115      	bne.n	8003532 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003506:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003508:	2b00      	cmp	r3, #0
 800350a:	da12      	bge.n	8003532 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	3317      	adds	r3, #23
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 faca 	bl	8003ac6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	3301      	adds	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	791b      	ldrb	r3, [r3, #4]
 800353c:	461a      	mov	r2, r3
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	4293      	cmp	r3, r2
 8003542:	d3cd      	bcc.n	80034e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003552:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f003 f887 	bl	800666c <USB_ReadInterrupts>
 800355e:	4603      	mov	r3, r0
 8003560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003564:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003568:	d156      	bne.n	8003618 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800356a:	2301      	movs	r3, #1
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
 800356e:	e045      	b.n	80035fc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d12e      	bne.n	80035f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003598:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800359a:	2b00      	cmp	r3, #0
 800359c:	da2b      	bge.n	80035f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80035aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d121      	bne.n	80035f6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035f2:	6053      	str	r3, [r2, #4]
            break;
 80035f4:	e008      	b.n	8003608 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	3301      	adds	r3, #1
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	791b      	ldrb	r3, [r3, #4]
 8003600:	461a      	mov	r2, r3
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	4293      	cmp	r3, r2
 8003606:	d3b3      	bcc.n	8003570 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f003 f825 	bl	800666c <USB_ReadInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362c:	d10a      	bne.n	8003644 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f005 fc80 	bl	8008f34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f003 f80f 	bl	800666c <USB_ReadInterrupts>
 800364e:	4603      	mov	r3, r0
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d115      	bne.n	8003684 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f005 fc70 	bl	8008f50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	430a      	orrs	r2, r1
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	e000      	b.n	8003684 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003682:	bf00      	nop
    }
  }
}
 8003684:	3734      	adds	r7, #52	@ 0x34
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}

0800368a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	460b      	mov	r3, r1
 8003694:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_PCD_SetAddress+0x1a>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e012      	b.n	80036ca <HAL_PCD_SetAddress+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f002 ff6e 	bl	800659c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	4608      	mov	r0, r1
 80036dc:	4611      	mov	r1, r2
 80036de:	461a      	mov	r2, r3
 80036e0:	4603      	mov	r3, r0
 80036e2:	70fb      	strb	r3, [r7, #3]
 80036e4:	460b      	mov	r3, r1
 80036e6:	803b      	strh	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da0f      	bge.n	8003718 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	f003 020f 	and.w	r2, r3, #15
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	3310      	adds	r3, #16
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4413      	add	r3, r2
 800370c:	3304      	adds	r3, #4
 800370e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	705a      	strb	r2, [r3, #1]
 8003716:	e00f      	b.n	8003738 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 020f 	and.w	r2, r3, #15
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	b2da      	uxtb	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003744:	883b      	ldrh	r3, [r7, #0]
 8003746:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	78ba      	ldrb	r2, [r7, #2]
 8003752:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	785b      	ldrb	r3, [r3, #1]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d004      	beq.n	8003766 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003766:	78bb      	ldrb	r3, [r7, #2]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d102      	bne.n	8003772 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_PCD_EP_Open+0xae>
 800377c:	2302      	movs	r3, #2
 800377e:	e00e      	b.n	800379e <HAL_PCD_EP_Open+0xcc>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68f9      	ldr	r1, [r7, #12]
 800378e:	4618      	mov	r0, r3
 8003790:	f002 f8ee 	bl	8005970 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800379c:	7afb      	ldrb	r3, [r7, #11]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da0f      	bge.n	80037da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	3310      	adds	r3, #16
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	705a      	strb	r2, [r3, #1]
 80037d8:	e00f      	b.n	80037fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	3304      	adds	r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_PCD_EP_Close+0x6e>
 8003810:	2302      	movs	r3, #2
 8003812:	e00e      	b.n	8003832 <HAL_PCD_EP_Close+0x8c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	4618      	mov	r0, r3
 8003824:	f002 f92c 	bl	8005a80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	460b      	mov	r3, r1
 8003848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384a:	7afb      	ldrb	r3, [r7, #11]
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2200      	movs	r2, #0
 8003874:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800387c:	7afb      	ldrb	r3, [r7, #11]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	b2da      	uxtb	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	799b      	ldrb	r3, [r3, #6]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d102      	bne.n	8003896 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	799b      	ldrb	r3, [r3, #6]
 800389e:	461a      	mov	r2, r3
 80038a0:	6979      	ldr	r1, [r7, #20]
 80038a2:	f002 f9c9 	bl	8005c38 <USB_EPStartXfer>

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	460b      	mov	r3, r1
 80038ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f0:	7afb      	ldrb	r3, [r7, #11]
 80038f2:	f003 020f 	and.w	r2, r3, #15
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	3310      	adds	r3, #16
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	3304      	adds	r3, #4
 8003906:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2201      	movs	r2, #1
 800391e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	b2da      	uxtb	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	799b      	ldrb	r3, [r3, #6]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	799b      	ldrb	r3, [r3, #6]
 8003942:	461a      	mov	r2, r3
 8003944:	6979      	ldr	r1, [r7, #20]
 8003946:	f002 f977 	bl	8005c38 <USB_EPStartXfer>

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	7912      	ldrb	r2, [r2, #4]
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e04f      	b.n	8003a12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003976:	2b00      	cmp	r3, #0
 8003978:	da0f      	bge.n	800399a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	3310      	adds	r3, #16
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	3304      	adds	r3, #4
 8003990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	705a      	strb	r2, [r3, #1]
 8003998:	e00d      	b.n	80039b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	3304      	adds	r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_PCD_EP_SetStall+0x82>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e01d      	b.n	8003a12 <HAL_PCD_EP_SetStall+0xbe>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f002 fd05 	bl	80063f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	7999      	ldrb	r1, [r3, #6]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a02:	461a      	mov	r2, r3
 8003a04:	f002 fef6 	bl	80067f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	7912      	ldrb	r2, [r2, #4]
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d901      	bls.n	8003a38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e042      	b.n	8003abe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da0f      	bge.n	8003a60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 020f 	and.w	r2, r3, #15
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	3310      	adds	r3, #16
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	3304      	adds	r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	705a      	strb	r2, [r3, #1]
 8003a5e:	e00f      	b.n	8003a80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	f003 020f 	and.w	r2, r3, #15
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_PCD_EP_ClrStall+0x86>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e00e      	b.n	8003abe <HAL_PCD_EP_ClrStall+0xa4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f002 fd0e 	bl	80064d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	da0c      	bge.n	8003af4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 020f 	and.w	r2, r3, #15
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	3310      	adds	r3, #16
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	3304      	adds	r3, #4
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	e00c      	b.n	8003b0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	f003 020f 	and.w	r2, r3, #15
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68f9      	ldr	r1, [r7, #12]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f002 fb2d 	bl	8006174 <USB_EPStopXfer>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	@ 0x28
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	3310      	adds	r3, #16
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d901      	bls.n	8003b60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e06b      	b.n	8003c38 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d902      	bls.n	8003b7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	3303      	adds	r3, #3
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b84:	e02a      	b.n	8003bdc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d902      	bls.n	8003ba2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3303      	adds	r3, #3
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68d9      	ldr	r1, [r3, #12]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	f002 fb82 	bl	80062c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	441a      	add	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d809      	bhi.n	8003c06 <PCD_WriteEmptyTxFifo+0xde>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d203      	bcs.n	8003c06 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1bf      	bne.n	8003b86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d811      	bhi.n	8003c36 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	2201      	movs	r2, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	6939      	ldr	r1, [r7, #16]
 8003c2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c32:	4013      	ands	r3, r2
 8003c34:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	333c      	adds	r3, #60	@ 0x3c
 8003c58:	3304      	adds	r3, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	799b      	ldrb	r3, [r3, #6]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d17b      	bne.n	8003d6e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4a61      	ldr	r2, [pc, #388]	@ (8003e08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	f240 80b9 	bls.w	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80b3 	beq.w	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ca8:	6093      	str	r3, [r2, #8]
 8003caa:	e0a7      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	6093      	str	r3, [r2, #8]
 8003cc8:	e098      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f040 8093 	bne.w	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003e08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d90f      	bls.n	8003cfe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cfa:	6093      	str	r3, [r2, #8]
 8003cfc:	e07e      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1a      	ldr	r2, [r3, #32]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	0159      	lsls	r1, r3, #5
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	440b      	add	r3, r1
 8003d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d114      	bne.n	8003d60 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	f002 fd52 	bl	80067f4 <USB_EP0_OutStart>
 8003d50:	e006      	b.n	8003d60 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	441a      	add	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	4619      	mov	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f005 f820 	bl	8008dac <HAL_PCD_DataOutStageCallback>
 8003d6c:	e046      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	4a26      	ldr	r2, [pc, #152]	@ (8003e0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d124      	bne.n	8003dc0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d92:	6093      	str	r3, [r2, #8]
 8003d94:	e032      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dac:	461a      	mov	r2, r3
 8003dae:	2320      	movs	r3, #32
 8003db0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f004 fff7 	bl	8008dac <HAL_PCD_DataOutStageCallback>
 8003dbe:	e01d      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d114      	bne.n	8003df0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d108      	bne.n	8003df0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003de8:	461a      	mov	r2, r3
 8003dea:	2100      	movs	r1, #0
 8003dec:	f002 fd02 	bl	80067f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f004 ffd8 	bl	8008dac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	4f54300a 	.word	0x4f54300a
 8003e0c:	4f54310a 	.word	0x4f54310a

08003e10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	333c      	adds	r3, #60	@ 0x3c
 8003e28:	3304      	adds	r3, #4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a15      	ldr	r2, [pc, #84]	@ (8003e98 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d90e      	bls.n	8003e64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d009      	beq.n	8003e64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f004 ff8f 	bl	8008d88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e98 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d90c      	bls.n	8003e8c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	799b      	ldrb	r3, [r3, #6]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d108      	bne.n	8003e8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e84:	461a      	mov	r2, r3
 8003e86:	2101      	movs	r1, #1
 8003e88:	f002 fcb4 	bl	80067f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	4f54300a 	.word	0x4f54300a

08003e9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eba:	883b      	ldrh	r3, [r7, #0]
 8003ebc:	0419      	lsls	r1, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ec8:	e028      	b.n	8003f1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	73fb      	strb	r3, [r7, #15]
 8003edc:	e00d      	b.n	8003efa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	3340      	adds	r3, #64	@ 0x40
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d3ec      	bcc.n	8003ede <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f04:	883b      	ldrh	r3, [r7, #0]
 8003f06:	0418      	lsls	r0, r3, #16
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6819      	ldr	r1, [r3, #0]
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	4302      	orrs	r2, r0
 8003f14:	3340      	adds	r3, #64	@ 0x40
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	460b      	mov	r3, r1
 8003f34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e267      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d075      	beq.n	800406e <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f82:	4b88      	ldr	r3, [pc, #544]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f8e:	4b85      	ldr	r3, [pc, #532]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d112      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8003f9a:	4b82      	ldr	r3, [pc, #520]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa8:	4b7e      	ldr	r3, [pc, #504]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05b      	beq.n	800406c <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d157      	bne.n	800406c <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e242      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x74>
 8003fca:	4b76      	ldr	r3, [pc, #472]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x98>
 8003fe2:	4b70      	ldr	r3, [pc, #448]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6f      	ldr	r2, [pc, #444]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b6d      	ldr	r3, [pc, #436]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6c      	ldr	r2, [pc, #432]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0xb0>
 8003ffc:	4b69      	ldr	r3, [pc, #420]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a68      	ldr	r2, [pc, #416]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b66      	ldr	r3, [pc, #408]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a65      	ldr	r2, [pc, #404]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004012:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800401c:	f7fd fc5c 	bl	80018d8 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004024:	f7fd fc58 	bl	80018d8 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	@ 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e207      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004036:	4b5b      	ldr	r3, [pc, #364]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0xc0>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004044:	f7fd fc48 	bl	80018d8 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800404c:	f7fd fc44 	bl	80018d8 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	@ 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1f3      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800405e:	4b51      	ldr	r3, [pc, #324]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0xe8>
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406c:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d063      	beq.n	8004142 <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800407a:	4b4a      	ldr	r3, [pc, #296]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004086:	4b47      	ldr	r3, [pc, #284]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b08      	cmp	r3, #8
 8004090:	d11c      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8004092:	4b44      	ldr	r3, [pc, #272]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d116      	bne.n	80040cc <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409e:	4b41      	ldr	r3, [pc, #260]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e1c7      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80040b6:	4b3b      	ldr	r3, [pc, #236]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4937      	ldr	r1, [pc, #220]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ca:	e03a      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80040d4:	4b34      	ldr	r3, [pc, #208]	@ (80041a8 <HAL_RCC_OscConfig+0x244>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80040da:	f7fd fbfd 	bl	80018d8 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80040e2:	f7fd fbf9 	bl	80018d8 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1a8      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80040f4:	4b2b      	ldr	r3, [pc, #172]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004100:	4b28      	ldr	r3, [pc, #160]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4925      	ldr	r1, [pc, #148]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]
 8004114:	e015      	b.n	8004142 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8004116:	4b24      	ldr	r3, [pc, #144]	@ (80041a8 <HAL_RCC_OscConfig+0x244>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800411c:	f7fd fbdc 	bl	80018d8 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004124:	f7fd fbd8 	bl	80018d8 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e187      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8004136:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d036      	beq.n	80041bc <HAL_RCC_OscConfig+0x258>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8004156:	4b15      	ldr	r3, [pc, #84]	@ (80041ac <HAL_RCC_OscConfig+0x248>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800415c:	f7fd fbbc 	bl	80018d8 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004164:	f7fd fbb8 	bl	80018d8 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e167      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8004176:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <HAL_RCC_OscConfig+0x240>)
 8004178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x200>
 8004182:	e01b      	b.n	80041bc <HAL_RCC_OscConfig+0x258>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8004184:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <HAL_RCC_OscConfig+0x248>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 800418a:	f7fd fba5 	bl	80018d8 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8004190:	e00e      	b.n	80041b0 <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004192:	f7fd fba1 	bl	80018d8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d907      	bls.n	80041b0 <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e150      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
 80041a4:	40023800 	.word	0x40023800
 80041a8:	42470000 	.word	0x42470000
 80041ac:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80041b0:	4b88      	ldr	r3, [pc, #544]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ea      	bne.n	8004192 <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8097 	beq.w	80042f8 <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80041ce:	4b81      	ldr	r3, [pc, #516]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10f      	bne.n	80041fa <HAL_RCC_OscConfig+0x296>
			__HAL_RCC_PWR_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	4b7d      	ldr	r3, [pc, #500]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	4a7c      	ldr	r2, [pc, #496]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ea:	4b7a      	ldr	r3, [pc, #488]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80041fa:	4b77      	ldr	r3, [pc, #476]	@ (80043d8 <HAL_RCC_OscConfig+0x474>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_RCC_OscConfig+0x2d4>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8004206:	4b74      	ldr	r3, [pc, #464]	@ (80043d8 <HAL_RCC_OscConfig+0x474>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a73      	ldr	r2, [pc, #460]	@ (80043d8 <HAL_RCC_OscConfig+0x474>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004210:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8004212:	f7fd fb61 	bl	80018d8 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x2c8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800421a:	f7fd fb5d 	bl	80018d8 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x2c8>
					return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e10c      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800422c:	4b6a      	ldr	r3, [pc, #424]	@ (80043d8 <HAL_RCC_OscConfig+0x474>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x2ea>
 8004240:	4b64      	ldr	r3, [pc, #400]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004244:	4a63      	ldr	r2, [pc, #396]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	@ 0x70
 800424c:	e01c      	b.n	8004288 <HAL_RCC_OscConfig+0x324>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b05      	cmp	r3, #5
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x30c>
 8004256:	4b5f      	ldr	r3, [pc, #380]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	4a5e      	ldr	r2, [pc, #376]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 800425c:	f043 0304 	orr.w	r3, r3, #4
 8004260:	6713      	str	r3, [r2, #112]	@ 0x70
 8004262:	4b5c      	ldr	r3, [pc, #368]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004266:	4a5b      	ldr	r2, [pc, #364]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6713      	str	r3, [r2, #112]	@ 0x70
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0x324>
 8004270:	4b58      	ldr	r3, [pc, #352]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004274:	4a57      	ldr	r2, [pc, #348]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	@ 0x70
 800427c:	4b55      	ldr	r3, [pc, #340]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004280:	4a54      	ldr	r2, [pc, #336]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004282:	f023 0304 	bic.w	r3, r3, #4
 8004286:	6713      	str	r3, [r2, #112]	@ 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCC_OscConfig+0x358>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8004290:	f7fd fb22 	bl	80018d8 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004296:	e00a      	b.n	80042ae <HAL_RCC_OscConfig+0x34a>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004298:	f7fd fb1e 	bl	80018d8 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x34a>
					return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0cb      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80042ae:	4b49      	ldr	r3, [pc, #292]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ee      	beq.n	8004298 <HAL_RCC_OscConfig+0x334>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x382>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80042bc:	f7fd fb0c 	bl	80018d8 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80042c2:	e00a      	b.n	80042da <HAL_RCC_OscConfig+0x376>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80042c4:	f7fd fb08 	bl	80018d8 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x376>
					return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e0b5      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80042da:	4b3e      	ldr	r3, [pc, #248]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ee      	bne.n	80042c4 <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <HAL_RCC_OscConfig+0x394>
			__HAL_RCC_PWR_CLK_DISABLE();
 80042ec:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	4a38      	ldr	r2, [pc, #224]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80042f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042f6:	6413      	str	r3, [r2, #64]	@ 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80a1 	beq.w	8004444 <HAL_RCC_OscConfig+0x4e0>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8004302:	4b34      	ldr	r3, [pc, #208]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b08      	cmp	r3, #8
 800430c:	d05c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x464>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d141      	bne.n	800439a <HAL_RCC_OscConfig+0x436>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8004316:	4b31      	ldr	r3, [pc, #196]	@ (80043dc <HAL_RCC_OscConfig+0x478>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800431c:	f7fd fadc 	bl	80018d8 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x3d2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004324:	f7fd fad8 	bl	80018d8 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x3d2>
						return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e087      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004336:	4b27      	ldr	r3, [pc, #156]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	019b      	lsls	r3, r3, #6
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	3b01      	subs	r3, #1
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	491b      	ldr	r1, [pc, #108]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 800436c:	4b1b      	ldr	r3, [pc, #108]	@ (80043dc <HAL_RCC_OscConfig+0x478>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004372:	f7fd fab1 	bl	80018d8 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x428>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800437a:	f7fd faad 	bl	80018d8 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x428>
						return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e05c      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800438c:	4b11      	ldr	r3, [pc, #68]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x416>
 8004398:	e054      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800439a:	4b10      	ldr	r3, [pc, #64]	@ (80043dc <HAL_RCC_OscConfig+0x478>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80043a0:	f7fd fa9a 	bl	80018d8 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x456>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80043a8:	f7fd fa96 	bl	80018d8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x456>
						return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e045      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80043ba:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <HAL_RCC_OscConfig+0x470>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x444>
 80043c6:	e03d      	b.n	8004444 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_OscConfig+0x47c>
				return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e038      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40007000 	.word	0x40007000
 80043dc:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 80043e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004450 <HAL_RCC_OscConfig+0x4ec>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d028      	beq.n	8004440 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d121      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8004406:	429a      	cmp	r2, r3
 8004408:	d11a      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004410:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6a52      	ldr	r2, [r2, #36]	@ 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 8004416:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8004418:	4293      	cmp	r3, r2
 800441a:	d111      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 800442a:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 800443a:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
						{
					return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x4e2>
				}
			}
		}
	}
	return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800

08004454 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0cc      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8004468:	4b68      	ldr	r3, [pc, #416]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d90c      	bls.n	8004490 <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b65      	ldr	r3, [pc, #404]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800447e:	4b63      	ldr	r3, [pc, #396]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b8      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b59      	ldr	r3, [pc, #356]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a58      	ldr	r2, [pc, #352]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044b2:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c0:	4b53      	ldr	r3, [pc, #332]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4a52      	ldr	r2, [pc, #328]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044ca:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b50      	ldr	r3, [pc, #320]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	494d      	ldr	r1, [pc, #308]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d044      	beq.n	8004574 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80044f2:	4b47      	ldr	r3, [pc, #284]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d119      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d003      	beq.n	8004512 <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004512:	4b3f      	ldr	r3, [pc, #252]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004522:	4b3b      	ldr	r3, [pc, #236]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e067      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b37      	ldr	r3, [pc, #220]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4934      	ldr	r1, [pc, #208]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8004544:	f7fd f9c8 	bl	80018d8 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 800454c:	f7fd f9c4 	bl	80018d8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e04f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004562:	4b2b      	ldr	r3, [pc, #172]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8004574:	4b25      	ldr	r3, [pc, #148]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20c      	bcs.n	800459c <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b22      	ldr	r3, [pc, #136]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800458a:	4b20      	ldr	r3, [pc, #128]	@ (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e032      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4916      	ldr	r1, [pc, #88]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80045c6:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	490e      	ldr	r1, [pc, #56]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80045da:	f000 f821 	bl	8004620 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	490a      	ldr	r1, [pc, #40]	@ (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	5ccb      	ldrb	r3, [r1, r3]
 80045ee:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80045f2:	4a09      	ldr	r2, [pc, #36]	@ (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 80045f6:	4b09      	ldr	r3, [pc, #36]	@ (800461c <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fd f928 	bl	8001850 <HAL_InitTick>

	return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023c00 	.word	0x40023c00
 8004610:	40023800 	.word	0x40023800
 8004614:	08009cb8 	.word	0x08009cb8
 8004618:	20000000 	.word	0x20000000
 800461c:	20000004 	.word	0x20000004

08004620 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8004620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004624:	b094      	sub	sp, #80	@ 0x50
 8004626:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t pllvco = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t pllp = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t sysclockfreq = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	64bb      	str	r3, [r7, #72]	@ 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8004638:	4b79      	ldr	r3, [pc, #484]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d00d      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x40>
 8004644:	2b08      	cmp	r3, #8
 8004646:	f200 80e1 	bhi.w	800480c <HAL_RCC_GetSysClockFreq+0x1ec>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x34>
 800464e:	2b04      	cmp	r3, #4
 8004650:	d003      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x3a>
 8004652:	e0db      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x1ec>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8004654:	4b73      	ldr	r3, [pc, #460]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x204>)
 8004656:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004658:	e0db      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 800465a:	4b73      	ldr	r3, [pc, #460]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x208>)
 800465c:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 800465e:	e0d8      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004660:	4b6f      	ldr	r3, [pc, #444]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004668:	647b      	str	r3, [r7, #68]	@ 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 800466a:	4b6d      	ldr	r3, [pc, #436]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d063      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x11e>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004676:	4b6a      	ldr	r3, [pc, #424]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 8004678:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800467a:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800467c:	2200      	movs	r2, #0
 800467e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004680:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004688:	633b      	str	r3, [r7, #48]	@ 0x30
 800468a:	2300      	movs	r3, #0
 800468c:	637b      	str	r3, [r7, #52]	@ 0x34
 800468e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004692:	4622      	mov	r2, r4
 8004694:	462b      	mov	r3, r5
 8004696:	f04f 0000 	mov.w	r0, #0
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	0159      	lsls	r1, r3, #5
 80046a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a4:	0150      	lsls	r0, r2, #5
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4621      	mov	r1, r4
 80046ac:	1a51      	subs	r1, r2, r1
 80046ae:	6139      	str	r1, [r7, #16]
 80046b0:	4629      	mov	r1, r5
 80046b2:	eb63 0301 	sbc.w	r3, r3, r1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046c4:	4659      	mov	r1, fp
 80046c6:	018b      	lsls	r3, r1, #6
 80046c8:	4651      	mov	r1, sl
 80046ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ce:	4651      	mov	r1, sl
 80046d0:	018a      	lsls	r2, r1, #6
 80046d2:	4651      	mov	r1, sl
 80046d4:	ebb2 0801 	subs.w	r8, r2, r1
 80046d8:	4659      	mov	r1, fp
 80046da:	eb63 0901 	sbc.w	r9, r3, r1
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046f2:	4690      	mov	r8, r2
 80046f4:	4699      	mov	r9, r3
 80046f6:	4623      	mov	r3, r4
 80046f8:	eb18 0303 	adds.w	r3, r8, r3
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	462b      	mov	r3, r5
 8004700:	eb49 0303 	adc.w	r3, r9, r3
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004712:	4629      	mov	r1, r5
 8004714:	024b      	lsls	r3, r1, #9
 8004716:	4621      	mov	r1, r4
 8004718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800471c:	4621      	mov	r1, r4
 800471e:	024a      	lsls	r2, r1, #9
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004726:	2200      	movs	r2, #0
 8004728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800472a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800472c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004730:	f7fc f994 	bl	8000a5c <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8004738:	4613      	mov	r3, r2
 800473a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800473c:	e058      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x1d0>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800473e:	4b38      	ldr	r3, [pc, #224]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 8004740:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004742:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004744:	2200      	movs	r2, #0
 8004746:	4618      	mov	r0, r3
 8004748:	4611      	mov	r1, r2
 800474a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800474e:	623b      	str	r3, [r7, #32]
 8004750:	2300      	movs	r3, #0
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
 8004754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	f04f 0000 	mov.w	r0, #0
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	0159      	lsls	r1, r3, #5
 8004766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476a:	0150      	lsls	r0, r2, #5
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4641      	mov	r1, r8
 8004772:	ebb2 0a01 	subs.w	sl, r2, r1
 8004776:	4649      	mov	r1, r9
 8004778:	eb63 0b01 	sbc.w	fp, r3, r1
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800478c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004790:	ebb2 040a 	subs.w	r4, r2, sl
 8004794:	eb63 050b 	sbc.w	r5, r3, fp
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	00eb      	lsls	r3, r5, #3
 80047a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047a6:	00e2      	lsls	r2, r4, #3
 80047a8:	4614      	mov	r4, r2
 80047aa:	461d      	mov	r5, r3
 80047ac:	4643      	mov	r3, r8
 80047ae:	18e3      	adds	r3, r4, r3
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	464b      	mov	r3, r9
 80047b4:	eb45 0303 	adc.w	r3, r5, r3
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047c6:	4629      	mov	r1, r5
 80047c8:	028b      	lsls	r3, r1, #10
 80047ca:	4621      	mov	r1, r4
 80047cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047d0:	4621      	mov	r1, r4
 80047d2:	028a      	lsls	r2, r1, #10
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80047d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047da:	2200      	movs	r2, #0
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	61fa      	str	r2, [r7, #28]
 80047e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047e4:	f7fc f93a 	bl	8000a5c <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 80047ec:	4613      	mov	r3, r2
 80047ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 80047fa:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	643b      	str	r3, [r7, #64]	@ 0x40

		sysclockfreq = pllvco / pllp;
 8004800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 800480a:	e002      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 800480c:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x204>)
 800480e:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004810:	bf00      	nop
	}
	}
	return sysclockfreq;
 8004812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004814:	4618      	mov	r0, r3
 8004816:	3750      	adds	r7, #80	@ 0x50
 8004818:	46bd      	mov	sp, r7
 800481a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
 8004824:	00f42400 	.word	0x00f42400
 8004828:	007a1200 	.word	0x007a1200

0800482c <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8004830:	4b03      	ldr	r3, [pc, #12]	@ (8004840 <HAL_RCC_GetHCLKFreq+0x14>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000000 	.word	0x20000000

08004844 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8004848:	f7ff fff0 	bl	800482c <HAL_RCC_GetHCLKFreq>
 800484c:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800484e:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	0a9b      	lsrs	r3, r3, #10
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	4903      	ldr	r1, [pc, #12]	@ (8004868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40023800 	.word	0x40023800
 8004868:	08009cc8 	.word	0x08009cc8

0800486c <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg1 = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d105      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x28>
			== RCC_PERIPHCLK_I2S)
			|| (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d035      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x94>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8004894:	4b62      	ldr	r3, [pc, #392]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 800489a:	f7fd f81d 	bl	80018d8 <HAL_GetTick>
 800489e:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 80048a0:	e008      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 80048a2:	f7fd f819 	bl	80018d8 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e0b0      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 80048b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f0      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	019a      	lsls	r2, r3, #6
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	071b      	lsls	r3, r3, #28
 80048cc:	4955      	ldr	r1, [pc, #340]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
				PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 80048d4:	4b52      	ldr	r3, [pc, #328]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 80048da:	f7fc fffd 	bl	80018d8 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 80048e0:	e008      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 80048e2:	f7fc fff9 	bl	80018d8 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e090      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 80048f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8083 	beq.w	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
			== (RCC_PERIPHCLK_RTC)) {
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	4b44      	ldr	r3, [pc, #272]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	4a43      	ldr	r2, [pc, #268]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800491c:	6413      	str	r3, [r2, #64]	@ 0x40
 800491e:	4b41      	ldr	r3, [pc, #260]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 800492a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004934:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 8004936:	f7fc ffcf 	bl	80018d8 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 800493c:	e008      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xe4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800493e:	f7fc ffcb 	bl	80018d8 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xe4>
				return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e062      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8004950:	4b35      	ldr	r3, [pc, #212]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xd2>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800495c:	4b31      	ldr	r3, [pc, #196]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004960:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004964:	613b      	str	r3, [r7, #16]
		if ((tmpreg1 != 0x00000000U)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02f      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>
				&& ((tmpreg1)
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
				&& ((tmpreg1)
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	d028      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800497a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004982:	613b      	str	r3, [r7, #16]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8004984:	4b29      	ldr	r3, [pc, #164]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004986:	2201      	movs	r2, #1
 8004988:	601a      	str	r2, [r3, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 800498a:	4b28      	ldr	r3, [pc, #160]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 8004990:	4a24      	ldr	r2, [pc, #144]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	6713      	str	r3, [r2, #112]	@ 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 8004996:	4b23      	ldr	r3, [pc, #140]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d114      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x160>
				/* Get tick */
				tickstart = HAL_GetTick();
 80049a2:	f7fc ff99 	bl	80018d8 <HAL_GetTick>
 80049a6:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80049a8:	e00a      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80049aa:	f7fc ff95 	bl	80018d8 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
						return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e02a      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80049c0:	4b18      	ldr	r3, [pc, #96]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0ee      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049d8:	d10d      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049da:	4b12      	ldr	r3, [pc, #72]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80049ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ee:	490d      	ldr	r1, [pc, #52]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	608b      	str	r3, [r1, #8]
 80049f4:	e005      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004a00:	6093      	str	r3, [r2, #8]
 8004a02:	4b08      	ldr	r3, [pc, #32]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0e:	4905      	ldr	r1, [pc, #20]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	42470068 	.word	0x42470068
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	42470e40 	.word	0x42470e40

08004a30 <HAL_RCCEx_GetPeriphCLKFreq>:
 * @param  PeriphClk Peripheral clock identifier
 *         This parameter can be one of the following values:
 *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
 * @retval Frequency in KHz
 */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk) {
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	/* This variable used to store the I2S clock frequency (value in Hz) */
	uint32_t frequency = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
	/* This variable used to store the VCO Input (value in Hz) */
	uint32_t vcoinput = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
	uint32_t srcclk = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
	/* This variable used to store the VCO Output (value in Hz) */
	uint32_t vcooutput = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60bb      	str	r3, [r7, #8]
	switch (PeriphClk) {
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d13f      	bne.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
	case RCC_PERIPHCLK_I2S: {
		/* Get the current I2S source */
		srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a56:	60fb      	str	r3, [r7, #12]
		switch (srcclk) {
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a64:	d12f      	bne.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
		/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
		case RCC_I2SCLKSOURCE_EXT: {
			/* Set the I2S clock to the external clock  value */
			frequency = EXTERNAL_CLOCK_VALUE;
 8004a66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a68:	617b      	str	r3, [r7, #20]
			break;
 8004a6a:	e02f      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
			/* Configure the PLLI2S division factor */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE) {
 8004a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a78:	d108      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSE_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a7a:	4b19      	ldr	r3, [pc, #100]	@ (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSE_VALUE
 8004a82:	4a19      	ldr	r2, [pc, #100]	@ (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	e007      	b.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
			} else {
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSI_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSI_VALUE
 8004a94:	4a15      	ldr	r2, [pc, #84]	@ (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	613b      	str	r3, [r7, #16]
			}
#endif /* STM32F411xE */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			vcooutput = (uint32_t) (vcoinput
					* (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)
 8004a9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa2:	099b      	lsrs	r3, r3, #6
							& (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
			vcooutput = (uint32_t) (vcoinput
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	60bb      	str	r3, [r7, #8]
			/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
			frequency = (uint32_t) (vcooutput
					/ (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U)
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ab6:	0f1b      	lsrs	r3, r3, #28
							& (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ab8:	f003 0307 	and.w	r3, r3, #7
			frequency = (uint32_t) (vcooutput
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac2:	617b      	str	r3, [r7, #20]
			break;
 8004ac4:	e002      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
		}
			/* Clock not enabled for I2S*/
		default: {
			frequency = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
			break;
 8004aca:	bf00      	nop
		}
		}
		break;
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
	}
	default: {
		break;
 8004ace:	bf00      	nop
	}
	}
	return frequency;
 8004ad0:	697b      	ldr	r3, [r7, #20]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	00bb8000 	.word	0x00bb8000
 8004ae8:	007a1200 	.word	0x007a1200
 8004aec:	00f42400 	.word	0x00f42400

08004af0 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07b      	b.n	8004bfa <HAL_SPI_Init+0x10a>
	assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b12:	d009      	beq.n	8004b28 <HAL_SPI_Init+0x38>
			assert_param(
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
 8004b1a:	e005      	b.n	8004b28 <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc fd4c 	bl	80015e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b5e:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bac:	ea42 0103 	orr.w	r1, r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
			((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) | (hspi->Init.Direction & (SPI_CR1_RXONLY | SPI_CR1_BIDIMODE)) | (hspi->Init.DataSize & SPI_CR1_DFF) | (hspi->Init.CLKPolarity & SPI_CR1_CPOL) | (hspi->Init.CLKPhase & SPI_CR1_CPHA) | (hspi->Init.NSS & SPI_CR1_SSM) | (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) | (hspi->Init.FirstBit & SPI_CR1_LSBFIRST) | (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management, TI Mode */
	WRITE_REG(hspi->Instance->CR2,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	f003 0104 	and.w	r1, r3, #4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	f003 0210 	and.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->State = HAL_SPI_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e041      	b.n	8004c98 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fc fd21 	bl	8001670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f000 f95d 	bl	8004f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d001      	beq.n	8004cb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e046      	b.n	8004d46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a23      	ldr	r2, [pc, #140]	@ (8004d54 <HAL_TIM_Base_Start+0xb4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d022      	beq.n	8004d10 <HAL_TIM_Base_Start+0x70>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd2:	d01d      	beq.n	8004d10 <HAL_TIM_Base_Start+0x70>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d58 <HAL_TIM_Base_Start+0xb8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <HAL_TIM_Base_Start+0x70>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d5c <HAL_TIM_Base_Start+0xbc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <HAL_TIM_Base_Start+0x70>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1c      	ldr	r2, [pc, #112]	@ (8004d60 <HAL_TIM_Base_Start+0xc0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00e      	beq.n	8004d10 <HAL_TIM_Base_Start+0x70>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d64 <HAL_TIM_Base_Start+0xc4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <HAL_TIM_Base_Start+0x70>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a19      	ldr	r2, [pc, #100]	@ (8004d68 <HAL_TIM_Base_Start+0xc8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_TIM_Base_Start+0x70>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	@ (8004d6c <HAL_TIM_Base_Start+0xcc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d111      	bne.n	8004d34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b06      	cmp	r3, #6
 8004d20:	d010      	beq.n	8004d44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0201 	orr.w	r2, r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d32:	e007      	b.n	8004d44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40000c00 	.word	0x40000c00
 8004d64:	40010400 	.word	0x40010400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40001800 	.word	0x40001800

08004d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_TIM_ConfigClockSource+0x1c>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e0b4      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x186>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc4:	d03e      	beq.n	8004e44 <HAL_TIM_ConfigClockSource+0xd4>
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dca:	f200 8087 	bhi.w	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd2:	f000 8086 	beq.w	8004ee2 <HAL_TIM_ConfigClockSource+0x172>
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dda:	d87f      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004ddc:	2b70      	cmp	r3, #112	@ 0x70
 8004dde:	d01a      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0xa6>
 8004de0:	2b70      	cmp	r3, #112	@ 0x70
 8004de2:	d87b      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b60      	cmp	r3, #96	@ 0x60
 8004de6:	d050      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x11a>
 8004de8:	2b60      	cmp	r3, #96	@ 0x60
 8004dea:	d877      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b50      	cmp	r3, #80	@ 0x50
 8004dee:	d03c      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0xfa>
 8004df0:	2b50      	cmp	r3, #80	@ 0x50
 8004df2:	d873      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d058      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x13a>
 8004df8:	2b40      	cmp	r3, #64	@ 0x40
 8004dfa:	d86f      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b30      	cmp	r3, #48	@ 0x30
 8004dfe:	d064      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15a>
 8004e00:	2b30      	cmp	r3, #48	@ 0x30
 8004e02:	d86b      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d060      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15a>
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d867      	bhi.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d05c      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d05a      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x15a>
 8004e14:	e062      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e26:	f000 f991 	bl	800514c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	609a      	str	r2, [r3, #8]
      break;
 8004e42:	e04f      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	f000 f97a 	bl	800514c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e66:	609a      	str	r2, [r3, #8]
      break;
 8004e68:	e03c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 f8ee 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2150      	movs	r1, #80	@ 0x50
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f947 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004e88:	e02c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e96:	461a      	mov	r2, r3
 8004e98:	f000 f90d 	bl	80050b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2160      	movs	r1, #96	@ 0x60
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f937 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004ea8:	e01c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f000 f8ce 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2140      	movs	r1, #64	@ 0x40
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f927 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004ec8:	e00c      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	f000 f91e 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004eda:	e003      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee0:	e000      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a46      	ldr	r2, [pc, #280]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1e:	d00f      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a43      	ldr	r2, [pc, #268]	@ (8005030 <TIM_Base_SetConfig+0x130>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a42      	ldr	r2, [pc, #264]	@ (8005034 <TIM_Base_SetConfig+0x134>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a41      	ldr	r2, [pc, #260]	@ (8005038 <TIM_Base_SetConfig+0x138>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a40      	ldr	r2, [pc, #256]	@ (800503c <TIM_Base_SetConfig+0x13c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a35      	ldr	r2, [pc, #212]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f60:	d027      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a32      	ldr	r2, [pc, #200]	@ (8005030 <TIM_Base_SetConfig+0x130>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d023      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a31      	ldr	r2, [pc, #196]	@ (8005034 <TIM_Base_SetConfig+0x134>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01f      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a30      	ldr	r2, [pc, #192]	@ (8005038 <TIM_Base_SetConfig+0x138>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800503c <TIM_Base_SetConfig+0x13c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d017      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2e      	ldr	r2, [pc, #184]	@ (8005040 <TIM_Base_SetConfig+0x140>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005044 <TIM_Base_SetConfig+0x144>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00f      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2c      	ldr	r2, [pc, #176]	@ (8005048 <TIM_Base_SetConfig+0x148>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800504c <TIM_Base_SetConfig+0x14c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8005050 <TIM_Base_SetConfig+0x150>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a29      	ldr	r2, [pc, #164]	@ (8005054 <TIM_Base_SetConfig+0x154>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d108      	bne.n	8004fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a10      	ldr	r2, [pc, #64]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0xf8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a12      	ldr	r2, [pc, #72]	@ (800503c <TIM_Base_SetConfig+0x13c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d103      	bne.n	8005000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b01      	cmp	r3, #1
 8005010:	d105      	bne.n	800501e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f023 0201 	bic.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]
  }
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40010400 	.word	0x40010400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	40001800 	.word	0x40001800
 8005050:	40001c00 	.word	0x40001c00
 8005054:	40002000 	.word	0x40002000

08005058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f023 0210 	bic.w	r2, r3, #16
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	f043 0307 	orr.w	r3, r3, #7
 8005138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	021a      	lsls	r2, r3, #8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	431a      	orrs	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4313      	orrs	r3, r2
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	609a      	str	r2, [r3, #8]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e05a      	b.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a21      	ldr	r2, [pc, #132]	@ (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d022      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f0:	d01d      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1d      	ldr	r2, [pc, #116]	@ (800526c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d018      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1b      	ldr	r2, [pc, #108]	@ (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1a      	ldr	r2, [pc, #104]	@ (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a18      	ldr	r2, [pc, #96]	@ (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a17      	ldr	r2, [pc, #92]	@ (800527c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a15      	ldr	r2, [pc, #84]	@ (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10c      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4313      	orrs	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40010000 	.word	0x40010000
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40010400 	.word	0x40010400
 800527c:	40014000 	.word	0x40014000
 8005280:	40001800 	.word	0x40001800

08005284 <USB_CoreInit>:
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 8005284:	b084      	sub	sp, #16
 8005286:	b580      	push	{r7, lr}
 8005288:	b084      	sub	sp, #16
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	f107 001c 	add.w	r0, r7, #28
 8005292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret;
	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8005296:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800529a:	2b01      	cmp	r3, #1
 800529c:	d123      	bne.n	80052e6 <USB_CoreInit+0x62>
		USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Init The ULPI Interface */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80052b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	60d3      	str	r3, [r2, #12]
				| USB_OTG_GUSBCFG_PHYSEL);

		/* Select vbus source */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60da      	str	r2, [r3, #12]
				| USB_OTG_GUSBCFG_ULPIEVBUSI);
		if (cfg.use_external_vbus == 1U) {
 80052c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d105      	bne.n	80052da <USB_CoreInit+0x56>
			USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]
		}

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 fae8 	bl	80068b0 <USB_CoreReset>
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]
 80052e4:	e01b      	b.n	800531e <USB_CoreInit+0x9a>
	} else /* FS interface (embedded Phy) */
	{
		/* Select FS Embedded PHY */
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60da      	str	r2, [r3, #12]

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f001 fadc 	bl	80068b0 <USB_CoreReset>
 80052f8:	4603      	mov	r3, r0
 80052fa:	73fb      	strb	r3, [r7, #15]

		if (cfg.battery_charging_enable == 0U) {
 80052fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <USB_CoreInit+0x8e>
			/* Activate the USB Transceiver */
			USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005310:	e005      	b.n	800531e <USB_CoreInit+0x9a>
		} else {
			/* Deactivate the USB Transceiver */
			USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005316:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (cfg.dma_enable == 1U) {
 800531e:	7fbb      	ldrb	r3, [r7, #30]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d10b      	bne.n	800533c <USB_CoreInit+0xb8>
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f043 0206 	orr.w	r2, r3, #6
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	609a      	str	r2, [r3, #8]
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	609a      	str	r2, [r3, #8]
	}

	return ret;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005348:	b004      	add	sp, #16
 800534a:	4770      	bx	lr

0800534c <USB_SetTurnaroundTime>:
 * @param  USBx USB Instance
 * @param  hclk: AHB clock frequency
 * @retval USB turnaround time In PHY Clocks number
 */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
		uint32_t hclk, uint8_t speed) {
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	4613      	mov	r3, r2
 8005358:	71fb      	strb	r3, [r7, #7]

	/* The USBTRD is configured according to the tables below, depending on AHB frequency
	 used by application. In the low AHB frequency range it is used to stretch enough the USB response
	 time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
	 latency to the Data FIFO */
	if (speed == USBD_FS_SPEED) {
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d165      	bne.n	800542c <USB_SetTurnaroundTime+0xe0>
		if ((hclk >= 14200000U) && (hclk < 15000000U)) {
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a41      	ldr	r2, [pc, #260]	@ (8005468 <USB_SetTurnaroundTime+0x11c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d906      	bls.n	8005376 <USB_SetTurnaroundTime+0x2a>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a40      	ldr	r2, [pc, #256]	@ (800546c <USB_SetTurnaroundTime+0x120>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d202      	bcs.n	8005376 <USB_SetTurnaroundTime+0x2a>
			/* hclk Clock Range between 14.2-15 MHz */
			UsbTrd = 0xFU;
 8005370:	230f      	movs	r3, #15
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	e062      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 15000000U) && (hclk < 16000000U)) {
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4a3c      	ldr	r2, [pc, #240]	@ (800546c <USB_SetTurnaroundTime+0x120>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d306      	bcc.n	800538c <USB_SetTurnaroundTime+0x40>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4a3b      	ldr	r2, [pc, #236]	@ (8005470 <USB_SetTurnaroundTime+0x124>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d202      	bcs.n	800538c <USB_SetTurnaroundTime+0x40>
			/* hclk Clock Range between 15-16 MHz */
			UsbTrd = 0xEU;
 8005386:	230e      	movs	r3, #14
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e057      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 16000000U) && (hclk < 17200000U)) {
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4a38      	ldr	r2, [pc, #224]	@ (8005470 <USB_SetTurnaroundTime+0x124>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d306      	bcc.n	80053a2 <USB_SetTurnaroundTime+0x56>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4a37      	ldr	r2, [pc, #220]	@ (8005474 <USB_SetTurnaroundTime+0x128>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d202      	bcs.n	80053a2 <USB_SetTurnaroundTime+0x56>
			/* hclk Clock Range between 16-17.2 MHz */
			UsbTrd = 0xDU;
 800539c:	230d      	movs	r3, #13
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e04c      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 17200000U) && (hclk < 18500000U)) {
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4a33      	ldr	r2, [pc, #204]	@ (8005474 <USB_SetTurnaroundTime+0x128>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d306      	bcc.n	80053b8 <USB_SetTurnaroundTime+0x6c>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4a32      	ldr	r2, [pc, #200]	@ (8005478 <USB_SetTurnaroundTime+0x12c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d802      	bhi.n	80053b8 <USB_SetTurnaroundTime+0x6c>
			/* hclk Clock Range between 17.2-18.5 MHz */
			UsbTrd = 0xCU;
 80053b2:	230c      	movs	r3, #12
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e041      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 18500000U) && (hclk < 20000000U)) {
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005478 <USB_SetTurnaroundTime+0x12c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d906      	bls.n	80053ce <USB_SetTurnaroundTime+0x82>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4a2e      	ldr	r2, [pc, #184]	@ (800547c <USB_SetTurnaroundTime+0x130>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d802      	bhi.n	80053ce <USB_SetTurnaroundTime+0x82>
			/* hclk Clock Range between 18.5-20 MHz */
			UsbTrd = 0xBU;
 80053c8:	230b      	movs	r3, #11
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e036      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 20000000U) && (hclk < 21800000U)) {
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4a2a      	ldr	r2, [pc, #168]	@ (800547c <USB_SetTurnaroundTime+0x130>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d906      	bls.n	80053e4 <USB_SetTurnaroundTime+0x98>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4a29      	ldr	r2, [pc, #164]	@ (8005480 <USB_SetTurnaroundTime+0x134>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d802      	bhi.n	80053e4 <USB_SetTurnaroundTime+0x98>
			/* hclk Clock Range between 20-21.8 MHz */
			UsbTrd = 0xAU;
 80053de:	230a      	movs	r3, #10
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e02b      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 21800000U) && (hclk < 24000000U)) {
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4a26      	ldr	r2, [pc, #152]	@ (8005480 <USB_SetTurnaroundTime+0x134>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d906      	bls.n	80053fa <USB_SetTurnaroundTime+0xae>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4a25      	ldr	r2, [pc, #148]	@ (8005484 <USB_SetTurnaroundTime+0x138>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d202      	bcs.n	80053fa <USB_SetTurnaroundTime+0xae>
			/* hclk Clock Range between 21.8-24 MHz */
			UsbTrd = 0x9U;
 80053f4:	2309      	movs	r3, #9
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e020      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 24000000U) && (hclk < 27700000U)) {
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4a21      	ldr	r2, [pc, #132]	@ (8005484 <USB_SetTurnaroundTime+0x138>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d306      	bcc.n	8005410 <USB_SetTurnaroundTime+0xc4>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4a20      	ldr	r2, [pc, #128]	@ (8005488 <USB_SetTurnaroundTime+0x13c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d802      	bhi.n	8005410 <USB_SetTurnaroundTime+0xc4>
			/* hclk Clock Range between 24-27.7 MHz */
			UsbTrd = 0x8U;
 800540a:	2308      	movs	r3, #8
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	e015      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
		} else if ((hclk >= 27700000U) && (hclk < 32000000U)) {
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4a1d      	ldr	r2, [pc, #116]	@ (8005488 <USB_SetTurnaroundTime+0x13c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d906      	bls.n	8005426 <USB_SetTurnaroundTime+0xda>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4a1c      	ldr	r2, [pc, #112]	@ (800548c <USB_SetTurnaroundTime+0x140>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d202      	bcs.n	8005426 <USB_SetTurnaroundTime+0xda>
			/* hclk Clock Range between 27.7-32 MHz */
			UsbTrd = 0x7U;
 8005420:	2307      	movs	r3, #7
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e00a      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
		} else /* if(hclk >= 32000000) */
		{
			/* hclk Clock Range between 32-200 MHz */
			UsbTrd = 0x6U;
 8005426:	2306      	movs	r3, #6
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	e007      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
		}
	} else if (speed == USBD_HS_SPEED) {
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <USB_SetTurnaroundTime+0xec>
		UsbTrd = USBD_HS_TRDT_VALUE;
 8005432:	2309      	movs	r3, #9
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e001      	b.n	800543c <USB_SetTurnaroundTime+0xf0>
	} else {
		UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005438:	2309      	movs	r3, #9
 800543a:	617b      	str	r3, [r7, #20]
	}

	USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	60da      	str	r2, [r3, #12]
	USBx->GUSBCFG |= (uint32_t) ((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	029b      	lsls	r3, r3, #10
 8005450:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005454:	431a      	orrs	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	60da      	str	r2, [r3, #12]

	return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	00d8acbf 	.word	0x00d8acbf
 800546c:	00e4e1c0 	.word	0x00e4e1c0
 8005470:	00f42400 	.word	0x00f42400
 8005474:	01067380 	.word	0x01067380
 8005478:	011a499f 	.word	0x011a499f
 800547c:	01312cff 	.word	0x01312cff
 8005480:	014ca43f 	.word	0x014ca43f
 8005484:	016e3600 	.word	0x016e3600
 8005488:	01a6ab1f 	.word	0x01a6ab1f
 800548c:	01e84800 	.word	0x01e84800

08005490 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f043 0201 	orr.w	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f023 0201 	bic.w	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USB_SetCurrentMode>:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_ModeTypeDef mode) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
	uint32_t ms = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]

	USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60da      	str	r2, [r3, #12]

	if (mode == USB_HOST_MODE) {
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d115      	bne.n	8005522 <USB_SetCurrentMode+0x4e>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 8005502:	200a      	movs	r0, #10
 8005504:	f7fc f9f4 	bl	80018f0 <HAL_Delay>
			ms += 10U;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	330a      	adds	r3, #10
 800550c:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_HOST_MODE)
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 f93f 	bl	8006792 <USB_GetMode>
 8005514:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005516:	2b01      	cmp	r3, #1
 8005518:	d01e      	beq.n	8005558 <USB_SetCurrentMode+0x84>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2bc7      	cmp	r3, #199	@ 0xc7
 800551e:	d9f0      	bls.n	8005502 <USB_SetCurrentMode+0x2e>
 8005520:	e01a      	b.n	8005558 <USB_SetCurrentMode+0x84>
	} else if (mode == USB_DEVICE_MODE) {
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d115      	bne.n	8005554 <USB_SetCurrentMode+0x80>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 8005534:	200a      	movs	r0, #10
 8005536:	f7fc f9db 	bl	80018f0 <HAL_Delay>
			ms += 10U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	330a      	adds	r3, #10
 800553e:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_DEVICE_MODE)
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f001 f926 	bl	8006792 <USB_GetMode>
 8005546:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <USB_SetCurrentMode+0x84>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005550:	d9f0      	bls.n	8005534 <USB_SetCurrentMode+0x60>
 8005552:	e001      	b.n	8005558 <USB_SetCurrentMode+0x84>
	} else {
		return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e005      	b.n	8005564 <USB_SetCurrentMode+0x90>
	}

	if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS) {
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2bc8      	cmp	r3, #200	@ 0xc8
 800555c:	d101      	bne.n	8005562 <USB_SetCurrentMode+0x8e>
		return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <USB_SetCurrentMode+0x90>
	}

	return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <USB_DevInit>:
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 800556c:	b084      	sub	sp, #16
 800556e:	b580      	push	{r7, lr}
 8005570:	b086      	sub	sp, #24
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800557a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60fb      	str	r3, [r7, #12]
	uint32_t i;

	for (i = 0U; i < 15U; i++) {
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	e009      	b.n	80055a0 <USB_DevInit+0x34>
		USBx->DIEPTXF[i] = 0U;
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	3340      	adds	r3, #64	@ 0x40
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	2200      	movs	r2, #0
 8005598:	605a      	str	r2, [r3, #4]
	for (i = 0U; i < 15U; i++) {
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	3301      	adds	r3, #1
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b0e      	cmp	r3, #14
 80055a4:	d9f2      	bls.n	800558c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
	/* VBUS Sensing setup */
	if (cfg.vbus_sensing_enable == 0U) {
 80055a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d11c      	bne.n	80055e8 <USB_DevInit+0x7c>
		/*
		 * Disable HW VBUS sensing. VBUS is internally considered to be always
		 * at VBUS-Valid level (5V).
		 */
		USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	6053      	str	r3, [r2, #4]
		USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	639a      	str	r2, [r3, #56]	@ 0x38
		USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	639a      	str	r2, [r3, #56]	@ 0x38
		USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055de:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80055e6:	e00b      	b.n	8005600 <USB_DevInit+0x94>
	} else {
		/* Enable HW VBUS sensing */
		USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	639a      	str	r2, [r3, #56]	@ 0x38
		USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

	/* Restart the Phy Clock */
	USBx_PCGCCTL = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005606:	461a      	mov	r2, r3
 8005608:	2300      	movs	r3, #0
 800560a:	6013      	str	r3, [r2, #0]

	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 800560c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005610:	2b01      	cmp	r3, #1
 8005612:	d10d      	bne.n	8005630 <USB_DevInit+0xc4>
		if (cfg.speed == USBD_HS_SPEED) {
 8005614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <USB_DevInit+0xba>
			/* Set Core speed to High speed mode */
			(void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800561c:	2100      	movs	r1, #0
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f968 	bl	80058f4 <USB_SetDevSpeed>
 8005624:	e008      	b.n	8005638 <USB_DevInit+0xcc>
		} else {
			/* Set Core speed to Full speed mode */
			(void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005626:	2101      	movs	r1, #1
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f963 	bl	80058f4 <USB_SetDevSpeed>
 800562e:	e003      	b.n	8005638 <USB_DevInit+0xcc>
		}
	} else {
		/* Set Core speed to Full speed mode */
		(void) USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005630:	2103      	movs	r1, #3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f95e 	bl	80058f4 <USB_SetDevSpeed>
	}

	/* Flush the FIFOs */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005638:	2110      	movs	r1, #16
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8fa 	bl	8005834 <USB_FlushTxFifo>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <USB_DevInit+0xde>
	{
		ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	75fb      	strb	r3, [r7, #23]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f924 	bl	8005898 <USB_FlushRxFifo>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <USB_DevInit+0xee>
		ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
	}

	/* Clear all pending Device Interrupts */
	USBx_DEVICE->DIEPMSK = 0U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005660:	461a      	mov	r2, r3
 8005662:	2300      	movs	r3, #0
 8005664:	6113      	str	r3, [r2, #16]
	USBx_DEVICE->DOEPMSK = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800566c:	461a      	mov	r2, r3
 800566e:	2300      	movs	r3, #0
 8005670:	6153      	str	r3, [r2, #20]
	USBx_DEVICE->DAINTMSK = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005678:	461a      	mov	r2, r3
 800567a:	2300      	movs	r3, #0
 800567c:	61d3      	str	r3, [r2, #28]

	for (i = 0U; i < cfg.dev_endpoints; i++) {
 800567e:	2300      	movs	r3, #0
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	e043      	b.n	800570c <USB_DevInit+0x1a0>
		if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800569a:	d118      	bne.n	80056ce <USB_DevInit+0x162>
				== USB_OTG_DIEPCTL_EPENA) {
			if (i == 0U) {
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <USB_DevInit+0x14c>
				USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ae:	461a      	mov	r2, r3
 80056b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e013      	b.n	80056e0 <USB_DevInit+0x174>
			} else {
				USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c4:	461a      	mov	r2, r3
 80056c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	e008      	b.n	80056e0 <USB_DevInit+0x174>
						| USB_OTG_DIEPCTL_SNAK;
			}
		} else {
			USBx_INEP(i)->DIEPCTL = 0U;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056da:	461a      	mov	r2, r3
 80056dc:	2300      	movs	r3, #0
 80056de:	6013      	str	r3, [r2, #0]
		}

		USBx_INEP(i)->DIEPTSIZ = 0U;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ec:	461a      	mov	r2, r3
 80056ee:	2300      	movs	r3, #0
 80056f0:	6113      	str	r3, [r2, #16]
		USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056fe:	461a      	mov	r2, r3
 8005700:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005704:	6093      	str	r3, [r2, #8]
	for (i = 0U; i < cfg.dev_endpoints; i++) {
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3301      	adds	r3, #1
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005710:	461a      	mov	r2, r3
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4293      	cmp	r3, r2
 8005716:	d3b5      	bcc.n	8005684 <USB_DevInit+0x118>
	}

	for (i = 0U; i < cfg.dev_endpoints; i++) {
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e043      	b.n	80057a6 <USB_DevInit+0x23a>
		if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005730:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005734:	d118      	bne.n	8005768 <USB_DevInit+0x1fc>
				== USB_OTG_DOEPCTL_EPENA) {
			if (i == 0U) {
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <USB_DevInit+0x1e6>
				USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005748:	461a      	mov	r2, r3
 800574a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	e013      	b.n	800577a <USB_DevInit+0x20e>
			} else {
				USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575e:	461a      	mov	r2, r3
 8005760:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e008      	b.n	800577a <USB_DevInit+0x20e>
						| USB_OTG_DOEPCTL_SNAK;
			}
		} else {
			USBx_OUTEP(i)->DOEPCTL = 0U;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005774:	461a      	mov	r2, r3
 8005776:	2300      	movs	r3, #0
 8005778:	6013      	str	r3, [r2, #0]
		}

		USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005786:	461a      	mov	r2, r3
 8005788:	2300      	movs	r3, #0
 800578a:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005798:	461a      	mov	r2, r3
 800579a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800579e:	6093      	str	r3, [r2, #8]
	for (i = 0U; i < cfg.dev_endpoints; i++) {
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	3301      	adds	r3, #1
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057aa:	461a      	mov	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d3b5      	bcc.n	800571e <USB_DevInit+0x1b2>
	}

	USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057c4:	6113      	str	r3, [r2, #16]

	/* Disable all interrupts. */
	USBx->GINTMSK = 0U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	619a      	str	r2, [r3, #24]

	/* Clear any pending interrupts */
	USBx->GINTSTS = 0xBFFFFFFFU;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80057d2:	615a      	str	r2, [r3, #20]

	/* Enable the common interrupts */
	if (cfg.dma_enable == 0U) {
 80057d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d105      	bne.n	80057e8 <USB_DevInit+0x27c>
		USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f043 0210 	orr.w	r2, r3, #16
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	619a      	str	r2, [r3, #24]
	}

	/* Enable interrupts matching to the Device mode ONLY */
	USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	4b10      	ldr	r3, [pc, #64]	@ (8005830 <USB_DevInit+0x2c4>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6193      	str	r3, [r2, #24]
	USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
	USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IISOIXFRM |
	USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

	if (cfg.Sof_enable != 0U) {
 80057f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <USB_DevInit+0x29c>
		USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f043 0208 	orr.w	r2, r3, #8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	619a      	str	r2, [r3, #24]
	}

	if (cfg.vbus_sensing_enable == 1U) {
 8005808:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <USB_DevInit+0x2b4>
		USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005818:	f043 0304 	orr.w	r3, r3, #4
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6193      	str	r3, [r2, #24]
	}

	return ret;
 8005820:	7dfb      	ldrb	r3, [r7, #23]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800582c:	b004      	add	sp, #16
 800582e:	4770      	bx	lr
 8005830:	803c3800 	.word	0x803c3800

08005834 <USB_FlushTxFifo>:
 * @param  num  FIFO number
 *         This parameter can be a value from 1 to 15
 15 means Flush all Tx FIFOs
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num) {
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3301      	adds	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800584e:	d901      	bls.n	8005854 <USB_FlushTxFifo+0x20>
			return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e01b      	b.n	800588c <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	daf2      	bge.n	8005842 <USB_FlushTxFifo+0xe>

	/* Flush TX Fifo */
	count = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	019b      	lsls	r3, r3, #6
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	611a      	str	r2, [r3, #16]

	do {
		count++;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3301      	adds	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005878:	d901      	bls.n	800587e <USB_FlushTxFifo+0x4a>
			return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e006      	b.n	800588c <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0320 	and.w	r3, r3, #32
			== USB_OTG_GRSTCTL_TXFFLSH);
 8005886:	2b20      	cmp	r3, #32
 8005888:	d0f0      	beq.n	800586c <USB_FlushTxFifo+0x38>

	return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx) {
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058b0:	d901      	bls.n	80058b6 <USB_FlushRxFifo+0x1e>
			return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e018      	b.n	80058e8 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	daf2      	bge.n	80058a4 <USB_FlushRxFifo+0xc>

	/* Flush RX Fifo */
	count = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2210      	movs	r2, #16
 80058c6:	611a      	str	r2, [r3, #16]

	do {
		count++;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3301      	adds	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058d4:	d901      	bls.n	80058da <USB_FlushRxFifo+0x42>
			return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e006      	b.n	80058e8 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0310 	and.w	r3, r3, #16
			== USB_OTG_GRSTCTL_RXFFLSH);
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d0f0      	beq.n	80058c8 <USB_FlushRxFifo+0x30>

	return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_SetDevSpeed>:
 *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
 *            @arg USB_OTG_SPEED_FULL: Full speed mode
 * @retval  Hal status
 */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t speed) {
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60fb      	str	r3, [r7, #12]

	USBx_DEVICE->DCFG |= speed;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]
	return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_GetDevSpeed>:
 * @retval speed  device speed
 *          This parameter can be one of these values:
 *            @arg USBD_HS_SPEED: High speed mode
 *            @arg USBD_FS_SPEED: Full speed mode
 */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx) {
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	613b      	str	r3, [r7, #16]
	uint8_t speed;
	uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0306 	and.w	r3, r3, #6
 800593e:	60fb      	str	r3, [r7, #12]

	if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ) {
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <USB_GetDevSpeed+0x26>
		speed = USBD_HS_SPEED;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]
 800594a:	e00a      	b.n	8005962 <USB_GetDevSpeed+0x3c>
	} else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d002      	beq.n	8005958 <USB_GetDevSpeed+0x32>
			|| (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ)) {
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b06      	cmp	r3, #6
 8005956:	d102      	bne.n	800595e <USB_GetDevSpeed+0x38>
		speed = USBD_FS_SPEED;
 8005958:	2302      	movs	r3, #2
 800595a:	75fb      	strb	r3, [r7, #23]
 800595c:	e001      	b.n	8005962 <USB_GetDevSpeed+0x3c>
	} else {
		speed = 0xFU;
 800595e:	230f      	movs	r3, #15
 8005960:	75fb      	strb	r3, [r7, #23]
	}

	return speed;
 8005962:	7dfb      	ldrb	r3, [r7, #23]
}
 8005964:	4618      	mov	r0, r3
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <USB_ActivateEndpoint>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	60bb      	str	r3, [r7, #8]

	if (ep->is_in == 1U) {
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d13a      	bne.n	8005a02 <USB_ActivateEndpoint+0x92>
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005992:	69da      	ldr	r2, [r3, #28]
				& (uint32_t) (1UL << (ep->num & EP_ADDR_MSK));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	b29b      	uxth	r3, r3
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM
 80059a4:	68f9      	ldr	r1, [r7, #12]
 80059a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059aa:	4313      	orrs	r3, r2
 80059ac:	61cb      	str	r3, [r1, #28]

		if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U) {
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d155      	bne.n	8005a70 <USB_ActivateEndpoint+0x100>
			USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
					| ((uint32_t) ep->type << 18) | (epnum << 22) |
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	791b      	ldrb	r3, [r3, #4]
 80059de:	049b      	lsls	r3, r3, #18
 80059e0:	4319      	orrs	r1, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	059b      	lsls	r3, r3, #22
 80059e6:	430b      	orrs	r3, r1
			USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	e036      	b.n	8005a70 <USB_ActivateEndpoint+0x100>
					USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
					USB_OTG_DIEPCTL_USBAEP;
		}
	} else {
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a08:	69da      	ldr	r2, [r3, #28]
				& ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	2101      	movs	r1, #1
 8005a14:	fa01 f303 	lsl.w	r3, r1, r3
 8005a18:	041b      	lsls	r3, r3, #16
		USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61cb      	str	r3, [r1, #28]

		if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U) {
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d11a      	bne.n	8005a70 <USB_ActivateEndpoint+0x100>
			USBx_OUTEP(epnum)->DOEPCTL |=
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a46:	681a      	ldr	r2, [r3, #0]
					(ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
							| ((uint32_t) ep->type << 18) |
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	791b      	ldrb	r3, [r3, #4]
 8005a54:	049b      	lsls	r3, r3, #18
 8005a56:	430b      	orrs	r3, r1
			USBx_OUTEP(epnum)->DOEPCTL |=
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a6e:	6013      	str	r3, [r2, #0]
							USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
							USB_OTG_DOEPCTL_USBAEP;
		}
	}
	return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <USB_DeactivateEndpoint>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	60bb      	str	r3, [r7, #8]

	/* Read DEPCTLn register */
	if (ep->is_in == 1U) {
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d161      	bne.n	8005b60 <USB_DeactivateEndpoint+0xe0>
		if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab2:	d11f      	bne.n	8005af4 <USB_DeactivateEndpoint+0x74>
				== USB_OTG_DIEPCTL_EPENA) {
			USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ace:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ad2:	6013      	str	r3, [r2, #0]
			USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005af2:	6013      	str	r3, [r2, #0]
		}

		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
				& (uint32_t) (1UL << (ep->num & EP_ADDR_MSK)));
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	2101      	movs	r1, #1
 8005b06:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0a:	b29b      	uxth	r3, r3
		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b14:	4013      	ands	r3, r2
 8005b16:	63cb      	str	r3, [r1, #60]	@ 0x3c
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1e:	69da      	ldr	r2, [r3, #28]
				& (uint32_t) (1UL << (ep->num & EP_ADDR_MSK)));
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	2101      	movs	r1, #1
 8005b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2e:	b29b      	uxth	r3, r3
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM
 8005b30:	43db      	mvns	r3, r3
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61cb      	str	r3, [r1, #28]
		USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	0159      	lsls	r1, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	440b      	add	r3, r1
 8005b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b56:	4619      	mov	r1, r3
 8005b58:	4b35      	ldr	r3, [pc, #212]	@ (8005c30 <USB_DeactivateEndpoint+0x1b0>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	600b      	str	r3, [r1, #0]
 8005b5e:	e060      	b.n	8005c22 <USB_DeactivateEndpoint+0x1a2>
		USB_OTG_DIEPCTL_MPSIZ |
		USB_OTG_DIEPCTL_TXFNUM |
		USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
		USB_OTG_DIEPCTL_EPTYP);
	} else {
		if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b76:	d11f      	bne.n	8005bb8 <USB_DeactivateEndpoint+0x138>
				== USB_OTG_DOEPCTL_EPENA) {
			USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b96:	6013      	str	r3, [r2, #0]
			USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bb6:	6013      	str	r3, [r2, #0]
		}

		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
				& ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	041b      	lsls	r3, r3, #16
		USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bd8:	4013      	ands	r3, r2
 8005bda:	63cb      	str	r3, [r1, #60]	@ 0x3c
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be2:	69da      	ldr	r2, [r3, #28]
				& ((uint32_t) (1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2101      	movs	r1, #1
 8005bee:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf2:	041b      	lsls	r3, r3, #16
		USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61cb      	str	r3, [r1, #28]
		USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	0159      	lsls	r1, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	440b      	add	r3, r1
 8005c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <USB_DeactivateEndpoint+0x1b4>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]
		USB_OTG_DOEPCTL_MPSIZ |
		USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
		USB_OTG_DOEPCTL_EPTYP);
	}

	return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	ec337800 	.word	0xec337800
 8005c34:	eff37800 	.word	0xeff37800

08005c38 <USB_EPStartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_EPTypeDef *ep, uint8_t dma) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	@ 0x28
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	71fb      	strb	r3, [r7, #7]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	61fb      	str	r3, [r7, #28]
	uint32_t epnum = (uint32_t) ep->num;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	61bb      	str	r3, [r7, #24]
	uint16_t pktcnt;

	/* IN endpoint */
	if (ep->is_in == 1U) {
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	f040 817f 	bne.w	8005f58 <USB_EPStartXfer+0x320>
		/* Zero Length Packet? */
		if (ep->xfer_len == 0U) {
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d132      	bne.n	8005cc8 <USB_EPStartXfer+0x90>
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c7c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c80:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c84:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ |=
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ca4:	6113      	str	r3, [r2, #16]
					(USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc0:	0cdb      	lsrs	r3, r3, #19
 8005cc2:	04db      	lsls	r3, r3, #19
 8005cc4:	6113      	str	r3, [r2, #16]
 8005cc6:	e097      	b.n	8005df8 <USB_EPStartXfer+0x1c0>
			/* Program the transfer size and packet count
			 * as follows: xfersize = N * maxpacket +
			 * short_packet pktcnt = N + (short_packet
			 * exist ? 1 : 0)
			 */
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce2:	0cdb      	lsrs	r3, r3, #19
 8005ce4:	04db      	lsls	r3, r3, #19
 8005ce6:	6113      	str	r3, [r2, #16]
			USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d02:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d06:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d0a:	6113      	str	r3, [r2, #16]

			if (epnum == 0U) {
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d11a      	bne.n	8005d48 <USB_EPStartXfer+0x110>
				if (ep->xfer_len > ep->maxpacket) {
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d903      	bls.n	8005d26 <USB_EPStartXfer+0xee>
					ep->xfer_len = ep->maxpacket;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	611a      	str	r2, [r3, #16]
				}

				USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d44:	6113      	str	r3, [r2, #16]
 8005d46:	e044      	b.n	8005dd2 <USB_EPStartXfer+0x19a>
						& (1U << 19));
			} else {
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	4413      	add	r3, r2
 8005d52:	1e5a      	subs	r2, r3, #1
						/ ep->maxpacket);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 8005d5c:	82fb      	strh	r3, [r7, #22]
				USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6a:	691a      	ldr	r2, [r3, #16]
						& (pktcnt << 19));
 8005d6c:	8afb      	ldrh	r3, [r7, #22]
 8005d6e:	04d9      	lsls	r1, r3, #19
 8005d70:	4ba4      	ldr	r3, [pc, #656]	@ (8006004 <USB_EPStartXfer+0x3cc>)
 8005d72:	400b      	ands	r3, r1
				USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT
 8005d74:	69b9      	ldr	r1, [r7, #24]
 8005d76:	0148      	lsls	r0, r1, #5
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	4401      	add	r1, r0
 8005d7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d80:	4313      	orrs	r3, r2
 8005d82:	610b      	str	r3, [r1, #16]

				if (ep->type == EP_TYPE_ISOC) {
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	791b      	ldrb	r3, [r3, #4]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d122      	bne.n	8005dd2 <USB_EPStartXfer+0x19a>
					USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005da6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005daa:	6113      	str	r3, [r2, #16]
					USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db8:	691a      	ldr	r2, [r3, #16]
							& (pktcnt << 29));
 8005dba:	8afb      	ldrh	r3, [r7, #22]
 8005dbc:	075b      	lsls	r3, r3, #29
 8005dbe:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
					USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT
 8005dc2:	69b9      	ldr	r1, [r7, #24]
 8005dc4:	0148      	lsls	r0, r1, #5
 8005dc6:	69f9      	ldr	r1, [r7, #28]
 8005dc8:	4401      	add	r1, r0
 8005dca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]
				}
			}

			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dde:	691a      	ldr	r2, [r3, #16]
					& ep->xfer_len);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
			USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ
 8005de8:	69b9      	ldr	r1, [r7, #24]
 8005dea:	0148      	lsls	r0, r1, #5
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	4401      	add	r1, r0
 8005df0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005df4:	4313      	orrs	r3, r2
 8005df6:	610b      	str	r3, [r1, #16]
		}

		if (dma == 1U) {
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d14b      	bne.n	8005e96 <USB_EPStartXfer+0x25e>
			if ((uint32_t) ep->dma_addr != 0U) {
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <USB_EPStartXfer+0x1e2>
				USBx_INEP(epnum)->DIEPDMA = (uint32_t) (ep->dma_addr);
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e12:	461a      	mov	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	6153      	str	r3, [r2, #20]
			}

			if (ep->type == EP_TYPE_ISOC) {
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	791b      	ldrb	r3, [r3, #4]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d128      	bne.n	8005e74 <USB_EPStartXfer+0x23c>
				if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d110      	bne.n	8005e54 <USB_EPStartXfer+0x21c>
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e00f      	b.n	8005e74 <USB_EPStartXfer+0x23c>
				} else {
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e72:	6013      	str	r3, [r2, #0]
				}
			}

			/* EP enable, IN data in FIFO */
			USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e8e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	e166      	b.n	8006164 <USB_EPStartXfer+0x52c>
					| USB_OTG_DIEPCTL_EPENA);
		} else {
			/* EP enable, IN data in FIFO */
			USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005eb4:	6013      	str	r3, [r2, #0]
					| USB_OTG_DIEPCTL_EPENA);

			if (ep->type != EP_TYPE_ISOC) {
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	791b      	ldrb	r3, [r3, #4]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d015      	beq.n	8005eea <USB_EPStartXfer+0x2b2>
				/* Enable the Tx FIFO Empty Interrupt for this EP */
				if (ep->xfer_len > 0U) {
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 814e 	beq.w	8006164 <USB_EPStartXfer+0x52c>
					USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	2101      	movs	r1, #1
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	69f9      	ldr	r1, [r7, #28]
 8005ee0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ee8:	e13c      	b.n	8006164 <USB_EPStartXfer+0x52c>
				}
			} else {
				if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d110      	bne.n	8005f1c <USB_EPStartXfer+0x2e4>
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	e00f      	b.n	8005f3c <USB_EPStartXfer+0x304>
				} else {
					USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f3a:	6013      	str	r3, [r2, #0]
				}

				(void) USB_WritePacket(USBx, ep->xfer_buff, ep->num,
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	68d9      	ldr	r1, [r3, #12]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	781a      	ldrb	r2, [r3, #0]
						(uint16_t) ep->xfer_len, dma);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	691b      	ldr	r3, [r3, #16]
				(void) USB_WritePacket(USBx, ep->xfer_buff, ep->num,
 8005f48:	b298      	uxth	r0, r3
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	4603      	mov	r3, r0
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f9b9 	bl	80062c8 <USB_WritePacket>
 8005f56:	e105      	b.n	8006164 <USB_EPStartXfer+0x52c>
	{
		/* Program the transfer size and packet count as follows:
		 * pktcnt = N
		 * xfersize = N * maxpacket
		 */
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f72:	0cdb      	lsrs	r3, r3, #19
 8005f74:	04db      	lsls	r3, r3, #19
 8005f76:	6113      	str	r3, [r2, #16]
		USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f9a:	6113      	str	r3, [r2, #16]

		if (epnum == 0U) {
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d132      	bne.n	8006008 <USB_EPStartXfer+0x3d0>
			if (ep->xfer_len > 0U) {
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <USB_EPStartXfer+0x37a>
				ep->xfer_len = ep->maxpacket;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	611a      	str	r2, [r3, #16]
			}

			/* Store transfer size, for EP0 this is equal to endpoint max packet size */
			ep->xfer_size = ep->maxpacket;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	621a      	str	r2, [r3, #32]

			USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc6:	691a      	ldr	r2, [r3, #16]
					& ep->xfer_size);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
			USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8005fd0:	69b9      	ldr	r1, [r7, #24]
 8005fd2:	0148      	lsls	r0, r1, #5
 8005fd4:	69f9      	ldr	r1, [r7, #28]
 8005fd6:	4401      	add	r1, r0
 8005fd8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	610b      	str	r3, [r1, #16]
			USBx_OUTEP(epnum)->DOEPTSIZ |=
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ffa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ffe:	6113      	str	r3, [r2, #16]
 8006000:	e062      	b.n	80060c8 <USB_EPStartXfer+0x490>
 8006002:	bf00      	nop
 8006004:	1ff80000 	.word	0x1ff80000
					(USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
		} else {
			if (ep->xfer_len == 0U) {
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d123      	bne.n	8006058 <USB_EPStartXfer+0x420>
				USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601c:	691a      	ldr	r2, [r3, #16]
						& ep->maxpacket);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f3c3 0312 	ubfx	r3, r3, #0, #19
				USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ
 8006026:	69b9      	ldr	r1, [r7, #24]
 8006028:	0148      	lsls	r0, r1, #5
 800602a:	69f9      	ldr	r1, [r7, #28]
 800602c:	4401      	add	r1, r0
 800602e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006032:	4313      	orrs	r3, r2
 8006034:	610b      	str	r3, [r1, #16]
				USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006050:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006054:	6113      	str	r3, [r2, #16]
 8006056:	e037      	b.n	80060c8 <USB_EPStartXfer+0x490>
						& (1U << 19));
			} else {
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4413      	add	r3, r2
 8006062:	1e5a      	subs	r2, r3, #1
						/ ep->maxpacket);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
				pktcnt = (uint16_t) ((ep->xfer_len + ep->maxpacket - 1U)
 800606c:	82fb      	strh	r3, [r7, #22]
				ep->xfer_size = ep->maxpacket * pktcnt;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	8afa      	ldrh	r2, [r7, #22]
 8006074:	fb03 f202 	mul.w	r2, r3, r2
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	621a      	str	r2, [r3, #32]

				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006088:	691a      	ldr	r2, [r3, #16]
						& ((uint32_t) pktcnt << 19);
 800608a:	8afb      	ldrh	r3, [r7, #22]
 800608c:	04d9      	lsls	r1, r3, #19
 800608e:	4b38      	ldr	r3, [pc, #224]	@ (8006170 <USB_EPStartXfer+0x538>)
 8006090:	400b      	ands	r3, r1
				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT
 8006092:	69b9      	ldr	r1, [r7, #24]
 8006094:	0148      	lsls	r0, r1, #5
 8006096:	69f9      	ldr	r1, [r7, #28]
 8006098:	4401      	add	r1, r0
 800609a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800609e:	4313      	orrs	r3, r2
 80060a0:	610b      	str	r3, [r1, #16]
				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ae:	691a      	ldr	r2, [r3, #16]
						& ep->xfer_size;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
				USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ
 80060b8:	69b9      	ldr	r1, [r7, #24]
 80060ba:	0148      	lsls	r0, r1, #5
 80060bc:	69f9      	ldr	r1, [r7, #28]
 80060be:	4401      	add	r1, r0
 80060c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060c4:	4313      	orrs	r3, r2
 80060c6:	610b      	str	r3, [r1, #16]
			}
		}

		if (dma == 1U) {
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d10d      	bne.n	80060ea <USB_EPStartXfer+0x4b2>
			if ((uint32_t) ep->xfer_buff != 0U) {
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <USB_EPStartXfer+0x4b2>
				USBx_OUTEP(epnum)->DOEPDMA = (uint32_t) (ep->xfer_buff);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	68d9      	ldr	r1, [r3, #12]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e6:	460a      	mov	r2, r1
 80060e8:	615a      	str	r2, [r3, #20]
			}
		}

		if (ep->type == EP_TYPE_ISOC) {
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	791b      	ldrb	r3, [r3, #4]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d128      	bne.n	8006144 <USB_EPStartXfer+0x50c>
			if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U) {
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d110      	bne.n	8006124 <USB_EPStartXfer+0x4ec>
				USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	440a      	add	r2, r1
 8006118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800611c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e00f      	b.n	8006144 <USB_EPStartXfer+0x50c>
			} else {
				USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800613e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006142:	6013      	str	r3, [r2, #0]
			}
		}
		/* EP enable */
		USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800615e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006162:	6013      	str	r3, [r2, #0]
				| USB_OTG_DOEPCTL_EPENA);
	}

	return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3720      	adds	r7, #32
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	1ff80000 	.word	0x1ff80000

08006174 <USB_EPStopXfer>:
 * @param  USBx  usb device instance
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_EPTypeDef *ep) {
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef ret = HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	613b      	str	r3, [r7, #16]

	/* IN endpoint */
	if (ep->is_in == 1U) {
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	785b      	ldrb	r3, [r3, #1]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d14a      	bne.n	8006228 <USB_EPStopXfer+0xb4>
		/* EP enable, IN data in FIFO */
		if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061aa:	f040 8086 	bne.w	80062ba <USB_EPStopXfer+0x146>
				== USB_OTG_DIEPCTL_EPENA) {
			USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061d0:	6013      	str	r3, [r2, #0]
			USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	7812      	ldrb	r2, [r2, #0]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061f4:	6013      	str	r3, [r2, #0]

			do {
				count++;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]

				if (count > 10000U) {
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006202:	4293      	cmp	r3, r2
 8006204:	d902      	bls.n	800620c <USB_EPStopXfer+0x98>
					ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
					break;
 800620a:	e056      	b.n	80062ba <USB_EPStopXfer+0x146>
				}
			} while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_DIEPCTL_EPENA);
 8006220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006224:	d0e7      	beq.n	80061f6 <USB_EPStopXfer+0x82>
 8006226:	e048      	b.n	80062ba <USB_EPStopXfer+0x146>
		}
	} else /* OUT endpoint */
	{
		if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800623c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006240:	d13b      	bne.n	80062ba <USB_EPStopXfer+0x146>
				== USB_OTG_DOEPCTL_EPENA) {
			USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	7812      	ldrb	r2, [r2, #0]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	440a      	add	r2, r1
 800625c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006260:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006264:	6013      	str	r3, [r2, #0]
			USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	7812      	ldrb	r2, [r2, #0]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006284:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006288:	6013      	str	r3, [r2, #0]

			do {
				count++;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3301      	adds	r3, #1
 800628e:	60fb      	str	r3, [r7, #12]

				if (count > 10000U) {
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006296:	4293      	cmp	r3, r2
 8006298:	d902      	bls.n	80062a0 <USB_EPStopXfer+0x12c>
					ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	75fb      	strb	r3, [r7, #23]
					break;
 800629e:	e00c      	b.n	80062ba <USB_EPStopXfer+0x146>
				}
			} while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_DOEPCTL_EPENA);
 80062b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062b8:	d0e7      	beq.n	800628a <USB_EPStopXfer+0x116>
		}
	}

	return ret;
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_WritePacket>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 80062c8:	b480      	push	{r7}
 80062ca:	b089      	sub	sp, #36	@ 0x24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4611      	mov	r1, r2
 80062d4:	461a      	mov	r2, r3
 80062d6:	460b      	mov	r3, r1
 80062d8:	71fb      	strb	r3, [r7, #7]
 80062da:	4613      	mov	r3, r2
 80062dc:	80bb      	strh	r3, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	617b      	str	r3, [r7, #20]
	uint8_t *pSrc = src;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	61fb      	str	r3, [r7, #28]
	uint32_t count32b;
	uint32_t i;

	if (dma == 0U) {
 80062e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d123      	bne.n	8006336 <USB_WritePacket+0x6e>
		count32b = ((uint32_t) len + 3U) / 4U;
 80062ee:	88bb      	ldrh	r3, [r7, #4]
 80062f0:	3303      	adds	r3, #3
 80062f2:	089b      	lsrs	r3, r3, #2
 80062f4:	613b      	str	r3, [r7, #16]
		for (i = 0U; i < count32b; i++) {
 80062f6:	2300      	movs	r3, #0
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	e018      	b.n	800632e <USB_WritePacket+0x66>
			USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	031a      	lsls	r2, r3, #12
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006308:	461a      	mov	r2, r3
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6013      	str	r3, [r2, #0]
			pSrc++;
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	3301      	adds	r3, #1
 8006314:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	3301      	adds	r3, #1
 800631a:	61fb      	str	r3, [r7, #28]
			pSrc++;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	3301      	adds	r3, #1
 8006320:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	3301      	adds	r3, #1
 8006326:	61fb      	str	r3, [r7, #28]
		for (i = 0U; i < count32b; i++) {
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	3301      	adds	r3, #1
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	429a      	cmp	r2, r3
 8006334:	d3e2      	bcc.n	80062fc <USB_WritePacket+0x34>
		}
	}

	return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3724      	adds	r7, #36	@ 0x24
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <USB_ReadPacket>:
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void* USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest,
		uint16_t len) {
 8006344:	b480      	push	{r7}
 8006346:	b08b      	sub	sp, #44	@ 0x2c
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	4613      	mov	r3, r2
 8006350:	80fb      	strh	r3, [r7, #6]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	61bb      	str	r3, [r7, #24]
	uint8_t *pDest = dest;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t pData;
	uint32_t i;
	uint32_t count32b = (uint32_t) len >> 2U;
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	089b      	lsrs	r3, r3, #2
 800635e:	b29b      	uxth	r3, r3
 8006360:	617b      	str	r3, [r7, #20]
	uint16_t remaining_bytes = len % 4U;
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	83fb      	strh	r3, [r7, #30]

	for (i = 0U; i < count32b; i++) {
 800636a:	2300      	movs	r3, #0
 800636c:	623b      	str	r3, [r7, #32]
 800636e:	e014      	b.n	800639a <USB_ReadPacket+0x56>
		__UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	601a      	str	r2, [r3, #0]
		pDest++;
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	3301      	adds	r3, #1
 8006380:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	3301      	adds	r3, #1
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	3301      	adds	r3, #1
 800638c:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	3301      	adds	r3, #1
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0U; i < count32b; i++) {
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	3301      	adds	r3, #1
 8006398:	623b      	str	r3, [r7, #32]
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d3e6      	bcc.n	8006370 <USB_ReadPacket+0x2c>
	}

	/* When Number of data is not word aligned, read the remaining byte */
	if (remaining_bytes != 0U) {
 80063a2:	8bfb      	ldrh	r3, [r7, #30]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01e      	beq.n	80063e6 <USB_ReadPacket+0xa2>
		i = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	623b      	str	r3, [r7, #32]
		__UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063b2:	461a      	mov	r2, r3
 80063b4:	f107 0310 	add.w	r3, r7, #16
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	601a      	str	r2, [r3, #0]

		do {
			*(uint8_t*) pDest = (uint8_t) (pData >> (8U * (uint8_t) (i)));
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	701a      	strb	r2, [r3, #0]
			i++;
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	3301      	adds	r3, #1
 80063d2:	623b      	str	r3, [r7, #32]
			pDest++;
 80063d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d6:	3301      	adds	r3, #1
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24
			remaining_bytes--;
 80063da:	8bfb      	ldrh	r3, [r7, #30]
 80063dc:	3b01      	subs	r3, #1
 80063de:	83fb      	strh	r3, [r7, #30]
		} while (remaining_bytes != 0U);
 80063e0:	8bfb      	ldrh	r3, [r7, #30]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1ea      	bne.n	80063bc <USB_ReadPacket+0x78>
	}

	return ((void*) pDest);
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	372c      	adds	r7, #44	@ 0x2c
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USB_EPSetStall>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	60bb      	str	r3, [r7, #8]

	if (ep->is_in == 1U) {
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d12c      	bne.n	800646a <USB_EPSetStall+0x76>
		if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	db12      	blt.n	8006448 <USB_EPSetStall+0x54>
				&& (epnum != 0U)) {
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00f      	beq.n	8006448 <USB_EPSetStall+0x54>
			USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006442:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006446:	6013      	str	r3, [r2, #0]
		}
		USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	440a      	add	r2, r1
 800645e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006462:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	e02b      	b.n	80064c2 <USB_EPSetStall+0xce>
	} else {
		if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	db12      	blt.n	80064a2 <USB_EPSetStall+0xae>
				&& (epnum != 0U)) {
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00f      	beq.n	80064a2 <USB_EPSetStall+0xae>
			USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4413      	add	r3, r2
 800648a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	440a      	add	r2, r1
 8006498:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800649c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064a0:	6013      	str	r3, [r2, #0]
		}
		USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064c0:	6013      	str	r3, [r2, #0]
	}

	return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <USB_EPClearStall>:
 * @param  USBx  Selected device
 * @param  ep pointer to endpoint structure
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx,
		const USB_OTG_EPTypeDef *ep) {
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60fb      	str	r3, [r7, #12]
	uint32_t epnum = (uint32_t) ep->num;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	60bb      	str	r3, [r7, #8]

	if (ep->is_in == 1U) {
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	785b      	ldrb	r3, [r3, #1]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d128      	bne.n	800653e <USB_EPClearStall+0x6e>
		USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	440a      	add	r2, r1
 8006502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006506:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800650a:	6013      	str	r3, [r2, #0]
		if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	791b      	ldrb	r3, [r3, #4]
 8006510:	2b03      	cmp	r3, #3
 8006512:	d003      	beq.n	800651c <USB_EPClearStall+0x4c>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	791b      	ldrb	r3, [r3, #4]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d138      	bne.n	800658e <USB_EPClearStall+0xbe>
			USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	440a      	add	r2, r1
 8006532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	e027      	b.n	800658e <USB_EPClearStall+0xbe>
		}
	} else {
		USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006558:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800655c:	6013      	str	r3, [r2, #0]
		if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK)) {
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	791b      	ldrb	r3, [r3, #4]
 8006562:	2b03      	cmp	r3, #3
 8006564:	d003      	beq.n	800656e <USB_EPClearStall+0x9e>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	791b      	ldrb	r3, [r3, #4]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d10f      	bne.n	800658e <USB_EPClearStall+0xbe>
			USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	0151      	lsls	r1, r2, #5
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	440a      	add	r2, r1
 8006584:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800658c:	6013      	str	r3, [r2, #0]
		}
	}
	return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USB_SetDevAddress>:
 * @param  address  new device address to be assigned
 *          This parameter can be a value from 0 to 255
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t address) {
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60fb      	str	r3, [r7, #12]

	USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80065be:	6013      	str	r3, [r2, #0]
	USBx_DEVICE->DCFG |= ((uint32_t) address << 4) & USB_OTG_DCFG_DAD;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80065d0:	68f9      	ldr	r1, [r7, #12]
 80065d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065d6:	4313      	orrs	r3, r2
 80065d8:	600b      	str	r3, [r1, #0]

	return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USB_DevConnect>:
/**
 * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx) {
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	60fb      	str	r3, [r7, #12]

	/* In case phy is stopped, ensure to ungate and restore the phy CLK */
	USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006602:	f023 0303 	bic.w	r3, r3, #3
 8006606:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006616:	f023 0302 	bic.w	r3, r3, #2
 800661a:	6053      	str	r3, [r2, #4]

	return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_DevDisconnect>:
/**
 * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx) {
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60fb      	str	r3, [r7, #12]

	/* In case phy is stopped, ensure to ungate and restore the phy CLK */
	USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006644:	f023 0303 	bic.w	r3, r3, #3
 8006648:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006658:	f043 0302 	orr.w	r3, r3, #2
 800665c:	6053      	str	r3, [r2, #4]

	return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval USB Global Interrupt status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx) {
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;

	tmpreg = USBx->GINTSTS;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	60fb      	str	r3, [r7, #12]
	tmpreg &= USBx->GINTMSK;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4013      	ands	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

	return tmpreg;
 8006684:	68fb      	ldr	r3, [r7, #12]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USB_ReadDevAllOutEpInterrupt>:
/**
 * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
 * @param  USBx  Selected device
 * @retval USB Device OUT EP interrupt status
 */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 8006692:	b480      	push	{r7}
 8006694:	b085      	sub	sp, #20
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_DEVICE->DAINT;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_DEVICE->DAINTMSK;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	4013      	ands	r3, r2
 80066b4:	60bb      	str	r3, [r7, #8]

	return ((tmpreg & 0xffff0000U) >> 16);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	0c1b      	lsrs	r3, r3, #16
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <USB_ReadDevAllInEpInterrupt>:
/**
 * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
 * @param  USBx  Selected device
 * @retval USB Device IN EP interrupt status
 */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_DEVICE->DAINT;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_DEVICE->DAINTMSK;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	4013      	ands	r3, r2
 80066e8:	60bb      	str	r3, [r7, #8]

	return ((tmpreg & 0xFFFFU));
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	b29b      	uxth	r3, r3
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <USB_ReadDevOutEPInterrupt>:
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device OUT EP Interrupt register
 */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t epnum) {
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_DEVICE->DOEPMSK;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	4013      	ands	r3, r2
 8006726:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 8006728:	68bb      	ldr	r3, [r7, #8]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USB_ReadDevInEPInterrupt>:
 * @param  epnum  endpoint number
 *          This parameter can be a value from 0 to 15
 * @retval Device IN EP Interrupt register
 */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t epnum) {
 8006736:	b480      	push	{r7}
 8006738:	b087      	sub	sp, #28
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg;
	uint32_t msk;
	uint32_t emp;

	msk = USBx_DEVICE->DIEPMSK;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	613b      	str	r3, [r7, #16]
	emp = USBx_DEVICE->DIEPEMPMSK;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006758:	60fb      	str	r3, [r7, #12]
	msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	fa22 f303 	lsr.w	r3, r2, r3
 8006766:	01db      	lsls	r3, r3, #7
 8006768:	b2db      	uxtb	r3, r3
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
	tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4013      	ands	r3, r2
 8006782:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 8006784:	68bb      	ldr	r3, [r7, #8]
}
 8006786:	4618      	mov	r0, r3
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx) {
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
	return ((USBx->GINTSTS) & 0x1U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f003 0301 	and.w	r3, r3, #1
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USB_ActivateSetup>:
/**
 * @brief  Activate EP0 for Setup transactions
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx) {
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]

	/* Set the MPS of the IN EP0 to 64 bytes */
	USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80067cc:	f023 0307 	bic.w	r3, r3, #7
 80067d0:	6013      	str	r3, [r2, #0]

	USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067e4:	6053      	str	r3, [r2, #4]

	return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_EP0_OutStart>:
 *           1 : DMA feature used
 * @param  psetup  pointer to setup packet
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t dma, const uint8_t *psetup) {
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	460b      	mov	r3, r1
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	72fb      	strb	r3, [r7, #11]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	617b      	str	r3, [r7, #20]
	uint32_t gSNPSiD = *(__IO const uint32_t*) (&USBx->CID + 0x1U);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	333c      	adds	r3, #60	@ 0x3c
 800680a:	3304      	adds	r3, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	613b      	str	r3, [r7, #16]

	if (gSNPSiD > USB_OTG_CORE_ID_300A) {
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	4a26      	ldr	r2, [pc, #152]	@ (80068ac <USB_EP0_OutStart+0xb8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d90a      	bls.n	800682e <USB_EP0_OutStart+0x3a>
		if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006828:	d101      	bne.n	800682e <USB_EP0_OutStart+0x3a>
				== USB_OTG_DOEPCTL_EPENA) {
			return HAL_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	e037      	b.n	800689e <USB_EP0_OutStart+0xaa>
		}
	}

	USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006834:	461a      	mov	r2, r3
 8006836:	2300      	movs	r3, #0
 8006838:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006848:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800684c:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800685c:	f043 0318 	orr.w	r3, r3, #24
 8006860:	6113      	str	r3, [r2, #16]
	USBx_OUTEP(0U)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_STUPCNT;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006870:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006874:	6113      	str	r3, [r2, #16]

	if (dma == 1U) {
 8006876:	7afb      	ldrb	r3, [r7, #11]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d10f      	bne.n	800689c <USB_EP0_OutStart+0xa8>
		USBx_OUTEP(0U)->DOEPDMA = (uint32_t) psetup;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006882:	461a      	mov	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6153      	str	r3, [r2, #20]
		/* EP enable */
		USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006896:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800689a:	6013      	str	r3, [r2, #0]
				| USB_OTG_DOEPCTL_USBAEP;
	}

	return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	4f54300a 	.word	0x4f54300a

080068b0 <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx) {
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068c8:	d901      	bls.n	80068ce <USB_CoreReset+0x1e>
			return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e01b      	b.n	8006906 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	daf2      	bge.n	80068bc <USB_CoreReset+0xc>

	/* Core Soft Reset */
	count = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f043 0201 	orr.w	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	611a      	str	r2, [r3, #16]

	do {
		count++;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068f2:	d901      	bls.n	80068f8 <USB_CoreReset+0x48>
			return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e006      	b.n	8006906 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b01      	cmp	r3, #1
 8006902:	d0f0      	beq.n	80068e6 <USB_CoreReset+0x36>

	return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
	...

08006914 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006920:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006924:	f002 fcac 	bl	8009280 <USBD_static_malloc>
 8006928:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d109      	bne.n	8006944 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	32b0      	adds	r2, #176	@ 0xb0
 800693a:	2100      	movs	r1, #0
 800693c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006940:	2302      	movs	r3, #2
 8006942:	e0d4      	b.n	8006aee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006944:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006948:	2100      	movs	r1, #0
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f002 fcfe 	bl	800934c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	32b0      	adds	r2, #176	@ 0xb0
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	32b0      	adds	r2, #176	@ 0xb0
 800696a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7c1b      	ldrb	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d138      	bne.n	80069ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800697c:	4b5e      	ldr	r3, [pc, #376]	@ (8006af8 <USBD_CDC_Init+0x1e4>)
 800697e:	7819      	ldrb	r1, [r3, #0]
 8006980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006984:	2202      	movs	r2, #2
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f002 fb57 	bl	800903a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800698c:	4b5a      	ldr	r3, [pc, #360]	@ (8006af8 <USBD_CDC_Init+0x1e4>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f003 020f 	and.w	r2, r3, #15
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	3324      	adds	r3, #36	@ 0x24
 80069a2:	2201      	movs	r2, #1
 80069a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069a6:	4b55      	ldr	r3, [pc, #340]	@ (8006afc <USBD_CDC_Init+0x1e8>)
 80069a8:	7819      	ldrb	r1, [r3, #0]
 80069aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069ae:	2202      	movs	r2, #2
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f002 fb42 	bl	800903a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069b6:	4b51      	ldr	r3, [pc, #324]	@ (8006afc <USBD_CDC_Init+0x1e8>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	f003 020f 	and.w	r2, r3, #15
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80069ce:	2201      	movs	r2, #1
 80069d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80069d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006b00 <USBD_CDC_Init+0x1ec>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	f003 020f 	and.w	r2, r3, #15
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	3326      	adds	r3, #38	@ 0x26
 80069e8:	2210      	movs	r2, #16
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e035      	b.n	8006a5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069ee:	4b42      	ldr	r3, [pc, #264]	@ (8006af8 <USBD_CDC_Init+0x1e4>)
 80069f0:	7819      	ldrb	r1, [r3, #0]
 80069f2:	2340      	movs	r3, #64	@ 0x40
 80069f4:	2202      	movs	r2, #2
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f002 fb1f 	bl	800903a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069fc:	4b3e      	ldr	r3, [pc, #248]	@ (8006af8 <USBD_CDC_Init+0x1e4>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	f003 020f 	and.w	r2, r3, #15
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	3324      	adds	r3, #36	@ 0x24
 8006a12:	2201      	movs	r2, #1
 8006a14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a16:	4b39      	ldr	r3, [pc, #228]	@ (8006afc <USBD_CDC_Init+0x1e8>)
 8006a18:	7819      	ldrb	r1, [r3, #0]
 8006a1a:	2340      	movs	r3, #64	@ 0x40
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f002 fb0b 	bl	800903a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a24:	4b35      	ldr	r3, [pc, #212]	@ (8006afc <USBD_CDC_Init+0x1e8>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a40:	4b2f      	ldr	r3, [pc, #188]	@ (8006b00 <USBD_CDC_Init+0x1ec>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	f003 020f 	and.w	r2, r3, #15
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	3326      	adds	r3, #38	@ 0x26
 8006a56:	2210      	movs	r2, #16
 8006a58:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a5a:	4b29      	ldr	r3, [pc, #164]	@ (8006b00 <USBD_CDC_Init+0x1ec>)
 8006a5c:	7819      	ldrb	r1, [r3, #0]
 8006a5e:	2308      	movs	r3, #8
 8006a60:	2203      	movs	r2, #3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f002 fae9 	bl	800903a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006a68:	4b25      	ldr	r3, [pc, #148]	@ (8006b00 <USBD_CDC_Init+0x1ec>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 020f 	and.w	r2, r3, #15
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	3324      	adds	r3, #36	@ 0x24
 8006a7e:	2201      	movs	r2, #1
 8006a80:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	33b0      	adds	r3, #176	@ 0xb0
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e018      	b.n	8006aee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	7c1b      	ldrb	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8006afc <USBD_CDC_Init+0x1e8>)
 8006ac6:	7819      	ldrb	r1, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f002 fba0 	bl	8009218 <USBD_LL_PrepareReceive>
 8006ad8:	e008      	b.n	8006aec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ada:	4b08      	ldr	r3, [pc, #32]	@ (8006afc <USBD_CDC_Init+0x1e8>)
 8006adc:	7819      	ldrb	r1, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ae4:	2340      	movs	r3, #64	@ 0x40
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f002 fb96 	bl	8009218 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000093 	.word	0x20000093
 8006afc:	20000094 	.word	0x20000094
 8006b00:	20000095 	.word	0x20000095

08006b04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b10:	4b3a      	ldr	r3, [pc, #232]	@ (8006bfc <USBD_CDC_DeInit+0xf8>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f002 fab5 	bl	8009086 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b1c:	4b37      	ldr	r3, [pc, #220]	@ (8006bfc <USBD_CDC_DeInit+0xf8>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	f003 020f 	and.w	r2, r3, #15
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	440b      	add	r3, r1
 8006b30:	3324      	adds	r3, #36	@ 0x24
 8006b32:	2200      	movs	r2, #0
 8006b34:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b36:	4b32      	ldr	r3, [pc, #200]	@ (8006c00 <USBD_CDC_DeInit+0xfc>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f002 faa2 	bl	8009086 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b42:	4b2f      	ldr	r3, [pc, #188]	@ (8006c00 <USBD_CDC_DeInit+0xfc>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	f003 020f 	and.w	r2, r3, #15
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006b5e:	4b29      	ldr	r3, [pc, #164]	@ (8006c04 <USBD_CDC_DeInit+0x100>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f002 fa8e 	bl	8009086 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006b6a:	4b26      	ldr	r3, [pc, #152]	@ (8006c04 <USBD_CDC_DeInit+0x100>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	f003 020f 	and.w	r2, r3, #15
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	3324      	adds	r3, #36	@ 0x24
 8006b80:	2200      	movs	r2, #0
 8006b82:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006b84:	4b1f      	ldr	r3, [pc, #124]	@ (8006c04 <USBD_CDC_DeInit+0x100>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f003 020f 	and.w	r2, r3, #15
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	3326      	adds	r3, #38	@ 0x26
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	32b0      	adds	r2, #176	@ 0xb0
 8006ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01f      	beq.n	8006bf0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	33b0      	adds	r3, #176	@ 0xb0
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	32b0      	adds	r2, #176	@ 0xb0
 8006bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 fb62 	bl	800929c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	32b0      	adds	r2, #176	@ 0xb0
 8006be2:	2100      	movs	r1, #0
 8006be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000093 	.word	0x20000093
 8006c00:	20000094 	.word	0x20000094
 8006c04:	20000095 	.word	0x20000095

08006c08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	32b0      	adds	r2, #176	@ 0xb0
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e0bf      	b.n	8006db8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d050      	beq.n	8006ce6 <USBD_CDC_Setup+0xde>
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	f040 80af 	bne.w	8006da8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	88db      	ldrh	r3, [r3, #6]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d03a      	beq.n	8006cc8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b25b      	sxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da1b      	bge.n	8006c94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	33b0      	adds	r3, #176	@ 0xb0
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006c72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	88d2      	ldrh	r2, [r2, #6]
 8006c78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	88db      	ldrh	r3, [r3, #6]
 8006c7e:	2b07      	cmp	r3, #7
 8006c80:	bf28      	it	cs
 8006c82:	2307      	movcs	r3, #7
 8006c84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	89fa      	ldrh	r2, [r7, #14]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 fd93 	bl	80087b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006c92:	e090      	b.n	8006db6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	785a      	ldrb	r2, [r3, #1]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	88db      	ldrh	r3, [r3, #6]
 8006ca2:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ca4:	d803      	bhi.n	8006cae <USBD_CDC_Setup+0xa6>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	88db      	ldrh	r3, [r3, #6]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	e000      	b.n	8006cb0 <USBD_CDC_Setup+0xa8>
 8006cae:	2240      	movs	r2, #64	@ 0x40
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006cb6:	6939      	ldr	r1, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fda5 	bl	8008810 <USBD_CtlPrepareRx>
      break;
 8006cc6:	e076      	b.n	8006db6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	33b0      	adds	r3, #176	@ 0xb0
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	7850      	ldrb	r0, [r2, #1]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	4798      	blx	r3
      break;
 8006ce4:	e067      	b.n	8006db6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	2b0b      	cmp	r3, #11
 8006cec:	d851      	bhi.n	8006d92 <USBD_CDC_Setup+0x18a>
 8006cee:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf4 <USBD_CDC_Setup+0xec>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d25 	.word	0x08006d25
 8006cf8:	08006da1 	.word	0x08006da1
 8006cfc:	08006d93 	.word	0x08006d93
 8006d00:	08006d93 	.word	0x08006d93
 8006d04:	08006d93 	.word	0x08006d93
 8006d08:	08006d93 	.word	0x08006d93
 8006d0c:	08006d93 	.word	0x08006d93
 8006d10:	08006d93 	.word	0x08006d93
 8006d14:	08006d93 	.word	0x08006d93
 8006d18:	08006d93 	.word	0x08006d93
 8006d1c:	08006d4f 	.word	0x08006d4f
 8006d20:	08006d79 	.word	0x08006d79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d107      	bne.n	8006d40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d30:	f107 030a 	add.w	r3, r7, #10
 8006d34:	2202      	movs	r2, #2
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 fd3d 	bl	80087b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d3e:	e032      	b.n	8006da6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 fcbb 	bl	80086be <USBD_CtlError>
            ret = USBD_FAIL;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	75fb      	strb	r3, [r7, #23]
          break;
 8006d4c:	e02b      	b.n	8006da6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d107      	bne.n	8006d6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d5a:	f107 030d 	add.w	r3, r7, #13
 8006d5e:	2201      	movs	r2, #1
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fd28 	bl	80087b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d68:	e01d      	b.n	8006da6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 fca6 	bl	80086be <USBD_CtlError>
            ret = USBD_FAIL;
 8006d72:	2303      	movs	r3, #3
 8006d74:	75fb      	strb	r3, [r7, #23]
          break;
 8006d76:	e016      	b.n	8006da6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d00f      	beq.n	8006da4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 fc99 	bl	80086be <USBD_CtlError>
            ret = USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d90:	e008      	b.n	8006da4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fc92 	bl	80086be <USBD_CtlError>
          ret = USBD_FAIL;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d9e:	e002      	b.n	8006da6 <USBD_CDC_Setup+0x19e>
          break;
 8006da0:	bf00      	nop
 8006da2:	e008      	b.n	8006db6 <USBD_CDC_Setup+0x1ae>
          break;
 8006da4:	bf00      	nop
      }
      break;
 8006da6:	e006      	b.n	8006db6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 fc87 	bl	80086be <USBD_CtlError>
      ret = USBD_FAIL;
 8006db0:	2303      	movs	r3, #3
 8006db2:	75fb      	strb	r3, [r7, #23]
      break;
 8006db4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006dd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	32b0      	adds	r2, #176	@ 0xb0
 8006dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e065      	b.n	8006eb6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	32b0      	adds	r2, #176	@ 0xb0
 8006df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	f003 020f 	and.w	r2, r3, #15
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	3318      	adds	r3, #24
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d02f      	beq.n	8006e74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	f003 020f 	and.w	r2, r3, #15
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	3318      	adds	r3, #24
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	f003 010f 	and.w	r1, r3, #15
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	460b      	mov	r3, r1
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	440b      	add	r3, r1
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4403      	add	r3, r0
 8006e3c:	331c      	adds	r3, #28
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e44:	fb01 f303 	mul.w	r3, r1, r3
 8006e48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d112      	bne.n	8006e74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	3318      	adds	r3, #24
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e66:	78f9      	ldrb	r1, [r7, #3]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f002 f9b2 	bl	80091d6 <USBD_LL_Transmit>
 8006e72:	e01f      	b.n	8006eb4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	33b0      	adds	r3, #176	@ 0xb0
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d010      	beq.n	8006eb4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	33b0      	adds	r3, #176	@ 0xb0
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006eb0:	78fa      	ldrb	r2, [r7, #3]
 8006eb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	32b0      	adds	r2, #176	@ 0xb0
 8006ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	32b0      	adds	r2, #176	@ 0xb0
 8006ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e01a      	b.n	8006f26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f002 f9b0 	bl	800925a <USBD_LL_GetRxDataSize>
 8006efa:	4602      	mov	r2, r0
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	33b0      	adds	r3, #176	@ 0xb0
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006f20:	4611      	mov	r1, r2
 8006f22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	32b0      	adds	r2, #176	@ 0xb0
 8006f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e024      	b.n	8006f9a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	33b0      	adds	r3, #176	@ 0xb0
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d019      	beq.n	8006f98 <USBD_CDC_EP0_RxReady+0x6a>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006f6a:	2bff      	cmp	r3, #255	@ 0xff
 8006f6c:	d014      	beq.n	8006f98 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	33b0      	adds	r3, #176	@ 0xb0
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006f86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	22ff      	movs	r2, #255	@ 0xff
 8006f94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fac:	2182      	movs	r1, #130	@ 0x82
 8006fae:	4818      	ldr	r0, [pc, #96]	@ (8007010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fb0:	f000 fd4f 	bl	8007a52 <USBD_GetEpDesc>
 8006fb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	4815      	ldr	r0, [pc, #84]	@ (8007010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fba:	f000 fd4a 	bl	8007a52 <USBD_GetEpDesc>
 8006fbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fc0:	2181      	movs	r1, #129	@ 0x81
 8006fc2:	4813      	ldr	r0, [pc, #76]	@ (8007010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fc4:	f000 fd45 	bl	8007a52 <USBD_GetEpDesc>
 8006fc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d006      	beq.n	8006fea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fe4:	711a      	strb	r2, [r3, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ff8:	711a      	strb	r2, [r3, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2243      	movs	r2, #67	@ 0x43
 8007002:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007004:	4b02      	ldr	r3, [pc, #8]	@ (8007010 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20000050 	.word	0x20000050

08007014 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800701c:	2182      	movs	r1, #130	@ 0x82
 800701e:	4818      	ldr	r0, [pc, #96]	@ (8007080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007020:	f000 fd17 	bl	8007a52 <USBD_GetEpDesc>
 8007024:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007026:	2101      	movs	r1, #1
 8007028:	4815      	ldr	r0, [pc, #84]	@ (8007080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800702a:	f000 fd12 	bl	8007a52 <USBD_GetEpDesc>
 800702e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007030:	2181      	movs	r1, #129	@ 0x81
 8007032:	4813      	ldr	r0, [pc, #76]	@ (8007080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007034:	f000 fd0d 	bl	8007a52 <USBD_GetEpDesc>
 8007038:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2210      	movs	r2, #16
 8007044:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2200      	movs	r2, #0
 8007050:	711a      	strb	r2, [r3, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f042 0202 	orr.w	r2, r2, #2
 8007058:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d006      	beq.n	800706e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	711a      	strb	r2, [r3, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f042 0202 	orr.w	r2, r2, #2
 800706c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2243      	movs	r2, #67	@ 0x43
 8007072:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007074:	4b02      	ldr	r3, [pc, #8]	@ (8007080 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000050 	.word	0x20000050

08007084 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800708c:	2182      	movs	r1, #130	@ 0x82
 800708e:	4818      	ldr	r0, [pc, #96]	@ (80070f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007090:	f000 fcdf 	bl	8007a52 <USBD_GetEpDesc>
 8007094:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007096:	2101      	movs	r1, #1
 8007098:	4815      	ldr	r0, [pc, #84]	@ (80070f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800709a:	f000 fcda 	bl	8007a52 <USBD_GetEpDesc>
 800709e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070a0:	2181      	movs	r1, #129	@ 0x81
 80070a2:	4813      	ldr	r0, [pc, #76]	@ (80070f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070a4:	f000 fcd5 	bl	8007a52 <USBD_GetEpDesc>
 80070a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2210      	movs	r2, #16
 80070b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d006      	beq.n	80070ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2200      	movs	r2, #0
 80070c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c4:	711a      	strb	r2, [r3, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d006      	beq.n	80070de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070d8:	711a      	strb	r2, [r3, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2243      	movs	r2, #67	@ 0x43
 80070e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070e4:	4b02      	ldr	r3, [pc, #8]	@ (80070f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000050 	.word	0x20000050

080070f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	220a      	movs	r2, #10
 8007100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007102:	4b03      	ldr	r3, [pc, #12]	@ (8007110 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	2000000c 	.word	0x2000000c

08007114 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007124:	2303      	movs	r3, #3
 8007126:	e009      	b.n	800713c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	33b0      	adds	r3, #176	@ 0xb0
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	32b0      	adds	r2, #176	@ 0xb0
 800715e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007162:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800716a:	2303      	movs	r3, #3
 800716c:	e008      	b.n	8007180 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	32b0      	adds	r2, #176	@ 0xb0
 80071a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e004      	b.n	80071ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
	...

080071c8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32b0      	adds	r2, #176	@ 0xb0
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80071e0:	2301      	movs	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e025      	b.n	800723a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d11f      	bne.n	8007238 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007200:	4b10      	ldr	r3, [pc, #64]	@ (8007244 <USBD_CDC_TransmitPacket+0x7c>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	f003 020f 	and.w	r2, r3, #15
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4613      	mov	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4403      	add	r3, r0
 800721a:	3318      	adds	r3, #24
 800721c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800721e:	4b09      	ldr	r3, [pc, #36]	@ (8007244 <USBD_CDC_TransmitPacket+0x7c>)
 8007220:	7819      	ldrb	r1, [r3, #0]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 ffd1 	bl	80091d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20000093 	.word	0x20000093

08007248 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	32b0      	adds	r2, #176	@ 0xb0
 800725a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	32b0      	adds	r2, #176	@ 0xb0
 800726a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007272:	2303      	movs	r3, #3
 8007274:	e018      	b.n	80072a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	7c1b      	ldrb	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800727e:	4b0c      	ldr	r3, [pc, #48]	@ (80072b0 <USBD_CDC_ReceivePacket+0x68>)
 8007280:	7819      	ldrb	r1, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 ffc3 	bl	8009218 <USBD_LL_PrepareReceive>
 8007292:	e008      	b.n	80072a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007294:	4b06      	ldr	r3, [pc, #24]	@ (80072b0 <USBD_CDC_ReceivePacket+0x68>)
 8007296:	7819      	ldrb	r1, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800729e:	2340      	movs	r3, #64	@ 0x40
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 ffb9 	bl	8009218 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000094 	.word	0x20000094

080072b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e01f      	b.n	800730c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	79fa      	ldrb	r2, [r7, #7]
 80072fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f001 fe33 	bl	8008f6c <USBD_LL_Init>
 8007306:	4603      	mov	r3, r0
 8007308:	75fb      	strb	r3, [r7, #23]

  return ret;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007328:	2303      	movs	r3, #3
 800732a:	e025      	b.n	8007378 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	32ae      	adds	r2, #174	@ 0xae
 800733e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00f      	beq.n	8007368 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	32ae      	adds	r2, #174	@ 0xae
 8007352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	f107 020e 	add.w	r2, r7, #14
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	4602      	mov	r2, r0
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 fe3b 	bl	8009004 <USBD_LL_Start>
 800738e:	4603      	mov	r3, r0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	78fa      	ldrb	r2, [r7, #3]
 80073d2:	4611      	mov	r1, r2
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4798      	blx	r3
 80073d8:	4603      	mov	r3, r0
 80073da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	4611      	mov	r1, r2
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800740c:	2303      	movs	r3, #3
 800740e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f001 f90c 	bl	800864a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007440:	461a      	mov	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800744e:	f003 031f 	and.w	r3, r3, #31
 8007452:	2b02      	cmp	r3, #2
 8007454:	d01a      	beq.n	800748c <USBD_LL_SetupStage+0x72>
 8007456:	2b02      	cmp	r3, #2
 8007458:	d822      	bhi.n	80074a0 <USBD_LL_SetupStage+0x86>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <USBD_LL_SetupStage+0x4a>
 800745e:	2b01      	cmp	r3, #1
 8007460:	d00a      	beq.n	8007478 <USBD_LL_SetupStage+0x5e>
 8007462:	e01d      	b.n	80074a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fb63 	bl	8007b38 <USBD_StdDevReq>
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]
      break;
 8007476:	e020      	b.n	80074ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fbcb 	bl	8007c1c <USBD_StdItfReq>
 8007486:	4603      	mov	r3, r0
 8007488:	73fb      	strb	r3, [r7, #15]
      break;
 800748a:	e016      	b.n	80074ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fc2d 	bl	8007cf4 <USBD_StdEPReq>
 800749a:	4603      	mov	r3, r0
 800749c:	73fb      	strb	r3, [r7, #15]
      break;
 800749e:	e00c      	b.n	80074ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 fe08 	bl	80090c4 <USBD_LL_StallEP>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]
      break;
 80074b8:	bf00      	nop
  }

  return ret;
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	460b      	mov	r3, r1
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074d6:	7afb      	ldrb	r3, [r7, #11]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d16e      	bne.n	80075ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	f040 8098 	bne.w	8007620 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d913      	bls.n	8007524 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	1ad2      	subs	r2, r2, r3
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	4293      	cmp	r3, r2
 8007514:	bf28      	it	cs
 8007516:	4613      	movcs	r3, r2
 8007518:	461a      	mov	r2, r3
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f001 f994 	bl	800884a <USBD_CtlContinueRx>
 8007522:	e07d      	b.n	8007620 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800752a:	f003 031f 	and.w	r3, r3, #31
 800752e:	2b02      	cmp	r3, #2
 8007530:	d014      	beq.n	800755c <USBD_LL_DataOutStage+0x98>
 8007532:	2b02      	cmp	r3, #2
 8007534:	d81d      	bhi.n	8007572 <USBD_LL_DataOutStage+0xae>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <USBD_LL_DataOutStage+0x7c>
 800753a:	2b01      	cmp	r3, #1
 800753c:	d003      	beq.n	8007546 <USBD_LL_DataOutStage+0x82>
 800753e:	e018      	b.n	8007572 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	75bb      	strb	r3, [r7, #22]
            break;
 8007544:	e018      	b.n	8007578 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800754c:	b2db      	uxtb	r3, r3
 800754e:	4619      	mov	r1, r3
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fa64 	bl	8007a1e <USBD_CoreFindIF>
 8007556:	4603      	mov	r3, r0
 8007558:	75bb      	strb	r3, [r7, #22]
            break;
 800755a:	e00d      	b.n	8007578 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007562:	b2db      	uxtb	r3, r3
 8007564:	4619      	mov	r1, r3
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fa66 	bl	8007a38 <USBD_CoreFindEP>
 800756c:	4603      	mov	r3, r0
 800756e:	75bb      	strb	r3, [r7, #22]
            break;
 8007570:	e002      	b.n	8007578 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	75bb      	strb	r3, [r7, #22]
            break;
 8007576:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007578:	7dbb      	ldrb	r3, [r7, #22]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d119      	bne.n	80075b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b03      	cmp	r3, #3
 8007588:	d113      	bne.n	80075b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800758a:	7dba      	ldrb	r2, [r7, #22]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	32ae      	adds	r2, #174	@ 0xae
 8007590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800759a:	7dba      	ldrb	r2, [r7, #22]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075a2:	7dba      	ldrb	r2, [r7, #22]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	32ae      	adds	r2, #174	@ 0xae
 80075a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f001 f95a 	bl	800886c <USBD_CtlSendStatus>
 80075b8:	e032      	b.n	8007620 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80075ba:	7afb      	ldrb	r3, [r7, #11]
 80075bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	4619      	mov	r1, r3
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 fa37 	bl	8007a38 <USBD_CoreFindEP>
 80075ca:	4603      	mov	r3, r0
 80075cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ce:	7dbb      	ldrb	r3, [r7, #22]
 80075d0:	2bff      	cmp	r3, #255	@ 0xff
 80075d2:	d025      	beq.n	8007620 <USBD_LL_DataOutStage+0x15c>
 80075d4:	7dbb      	ldrb	r3, [r7, #22]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d122      	bne.n	8007620 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d117      	bne.n	8007616 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075e6:	7dba      	ldrb	r2, [r7, #22]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	32ae      	adds	r2, #174	@ 0xae
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00f      	beq.n	8007616 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075f6:	7dba      	ldrb	r2, [r7, #22]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80075fe:	7dba      	ldrb	r2, [r7, #22]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	32ae      	adds	r2, #174	@ 0xae
 8007604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	7afa      	ldrb	r2, [r7, #11]
 800760c:	4611      	mov	r1, r2
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	4798      	blx	r3
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	e000      	b.n	8007622 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b086      	sub	sp, #24
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	460b      	mov	r3, r1
 8007634:	607a      	str	r2, [r7, #4]
 8007636:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007638:	7afb      	ldrb	r3, [r7, #11]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d16f      	bne.n	800771e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3314      	adds	r3, #20
 8007642:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800764a:	2b02      	cmp	r3, #2
 800764c:	d15a      	bne.n	8007704 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	429a      	cmp	r2, r3
 8007658:	d914      	bls.n	8007684 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	1ad2      	subs	r2, r2, r3
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	461a      	mov	r2, r3
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f001 f8bc 	bl	80087ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007676:	2300      	movs	r3, #0
 8007678:	2200      	movs	r2, #0
 800767a:	2100      	movs	r1, #0
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f001 fdcb 	bl	8009218 <USBD_LL_PrepareReceive>
 8007682:	e03f      	b.n	8007704 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	429a      	cmp	r2, r3
 800768e:	d11c      	bne.n	80076ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007698:	429a      	cmp	r2, r3
 800769a:	d316      	bcc.n	80076ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d20f      	bcs.n	80076ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076aa:	2200      	movs	r2, #0
 80076ac:	2100      	movs	r1, #0
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f001 f89d 	bl	80087ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076bc:	2300      	movs	r3, #0
 80076be:	2200      	movs	r2, #0
 80076c0:	2100      	movs	r1, #0
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f001 fda8 	bl	8009218 <USBD_LL_PrepareReceive>
 80076c8:	e01c      	b.n	8007704 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d10f      	bne.n	80076f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076f6:	2180      	movs	r1, #128	@ 0x80
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f001 fce3 	bl	80090c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f001 f8c7 	bl	8008892 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d03a      	beq.n	8007784 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f7ff fe42 	bl	8007398 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800771c:	e032      	b.n	8007784 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800771e:	7afb      	ldrb	r3, [r7, #11]
 8007720:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4619      	mov	r1, r3
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f985 	bl	8007a38 <USBD_CoreFindEP>
 800772e:	4603      	mov	r3, r0
 8007730:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	2bff      	cmp	r3, #255	@ 0xff
 8007736:	d025      	beq.n	8007784 <USBD_LL_DataInStage+0x15a>
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d122      	bne.n	8007784 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b03      	cmp	r3, #3
 8007748:	d11c      	bne.n	8007784 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800774a:	7dfa      	ldrb	r2, [r7, #23]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	32ae      	adds	r2, #174	@ 0xae
 8007750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d014      	beq.n	8007784 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800775a:	7dfa      	ldrb	r2, [r7, #23]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007762:	7dfa      	ldrb	r2, [r7, #23]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	32ae      	adds	r2, #174	@ 0xae
 8007768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	7afa      	ldrb	r2, [r7, #11]
 8007770:	4611      	mov	r1, r2
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	4798      	blx	r3
 8007776:	4603      	mov	r3, r0
 8007778:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800777a:	7dbb      	ldrb	r3, [r7, #22]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007780:	7dbb      	ldrb	r3, [r7, #22]
 8007782:	e000      	b.n	8007786 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d014      	beq.n	80077f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00e      	beq.n	80077f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6852      	ldr	r2, [r2, #4]
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	4611      	mov	r1, r2
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	4798      	blx	r3
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077f0:	2303      	movs	r3, #3
 80077f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077f4:	2340      	movs	r3, #64	@ 0x40
 80077f6:	2200      	movs	r2, #0
 80077f8:	2100      	movs	r1, #0
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fc1d 	bl	800903a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2240      	movs	r2, #64	@ 0x40
 800780c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007810:	2340      	movs	r3, #64	@ 0x40
 8007812:	2200      	movs	r2, #0
 8007814:	2180      	movs	r1, #128	@ 0x80
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fc0f 	bl	800903a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2240      	movs	r2, #64	@ 0x40
 8007826:	621a      	str	r2, [r3, #32]

  return ret;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	460b      	mov	r3, r1
 800783c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	78fa      	ldrb	r2, [r7, #3]
 8007842:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b04      	cmp	r3, #4
 8007864:	d006      	beq.n	8007874 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800786c:	b2da      	uxtb	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2204      	movs	r2, #4
 8007878:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b04      	cmp	r3, #4
 800789c:	d106      	bne.n	80078ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d110      	bne.n	80078f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	32ae      	adds	r2, #174	@ 0xae
 8007910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	e01c      	b.n	8007956 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b03      	cmp	r3, #3
 8007926:	d115      	bne.n	8007954 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	32ae      	adds	r2, #174	@ 0xae
 8007932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	32ae      	adds	r2, #174	@ 0xae
 8007946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	78fa      	ldrb	r2, [r7, #3]
 800794e:	4611      	mov	r1, r2
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	32ae      	adds	r2, #174	@ 0xae
 8007974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800797c:	2303      	movs	r3, #3
 800797e:	e01c      	b.n	80079ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b03      	cmp	r3, #3
 800798a:	d115      	bne.n	80079b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	32ae      	adds	r2, #174	@ 0xae
 8007996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32ae      	adds	r2, #174	@ 0xae
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b0:	78fa      	ldrb	r2, [r7, #3]
 80079b2:	4611      	mov	r1, r2
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00e      	beq.n	8007a14 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6852      	ldr	r2, [r2, #4]
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	4611      	mov	r1, r2
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	4798      	blx	r3
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a10:	2303      	movs	r3, #3
 8007a12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b086      	sub	sp, #24
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	885b      	ldrh	r3, [r3, #2]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	7812      	ldrb	r2, [r2, #0]
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d91f      	bls.n	8007ab8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a7e:	e013      	b.n	8007aa8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a80:	f107 030a 	add.w	r3, r7, #10
 8007a84:	4619      	mov	r1, r3
 8007a86:	6978      	ldr	r0, [r7, #20]
 8007a88:	f000 f81b 	bl	8007ac2 <USBD_GetNextDesc>
 8007a8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	785b      	ldrb	r3, [r3, #1]
 8007a92:	2b05      	cmp	r3, #5
 8007a94:	d108      	bne.n	8007aa8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	789b      	ldrb	r3, [r3, #2]
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d008      	beq.n	8007ab6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	885b      	ldrh	r3, [r3, #2]
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	897b      	ldrh	r3, [r7, #10]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d8e5      	bhi.n	8007a80 <USBD_GetEpDesc+0x2e>
 8007ab4:	e000      	b.n	8007ab8 <USBD_GetEpDesc+0x66>
          break;
 8007ab6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ab8:	693b      	ldr	r3, [r7, #16]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	7812      	ldrb	r2, [r2, #0]
 8007ad8:	4413      	add	r3, r2
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4413      	add	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007aec:	68fb      	ldr	r3, [r7, #12]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b087      	sub	sp, #28
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b1c:	021b      	lsls	r3, r3, #8
 8007b1e:	b21a      	sxth	r2, r3
 8007b20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	b21b      	sxth	r3, r3
 8007b28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b2a:	89fb      	ldrh	r3, [r7, #14]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b4e:	2b40      	cmp	r3, #64	@ 0x40
 8007b50:	d005      	beq.n	8007b5e <USBD_StdDevReq+0x26>
 8007b52:	2b40      	cmp	r3, #64	@ 0x40
 8007b54:	d857      	bhi.n	8007c06 <USBD_StdDevReq+0xce>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00f      	beq.n	8007b7a <USBD_StdDevReq+0x42>
 8007b5a:	2b20      	cmp	r3, #32
 8007b5c:	d153      	bne.n	8007c06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	32ae      	adds	r2, #174	@ 0xae
 8007b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]
      break;
 8007b78:	e04a      	b.n	8007c10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	785b      	ldrb	r3, [r3, #1]
 8007b7e:	2b09      	cmp	r3, #9
 8007b80:	d83b      	bhi.n	8007bfa <USBD_StdDevReq+0xc2>
 8007b82:	a201      	add	r2, pc, #4	@ (adr r2, 8007b88 <USBD_StdDevReq+0x50>)
 8007b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b88:	08007bdd 	.word	0x08007bdd
 8007b8c:	08007bf1 	.word	0x08007bf1
 8007b90:	08007bfb 	.word	0x08007bfb
 8007b94:	08007be7 	.word	0x08007be7
 8007b98:	08007bfb 	.word	0x08007bfb
 8007b9c:	08007bbb 	.word	0x08007bbb
 8007ba0:	08007bb1 	.word	0x08007bb1
 8007ba4:	08007bfb 	.word	0x08007bfb
 8007ba8:	08007bd3 	.word	0x08007bd3
 8007bac:	08007bc5 	.word	0x08007bc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa3c 	bl	8008030 <USBD_GetDescriptor>
          break;
 8007bb8:	e024      	b.n	8007c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fba1 	bl	8008304 <USBD_SetAddress>
          break;
 8007bc2:	e01f      	b.n	8007c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fbe0 	bl	800838c <USBD_SetConfig>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]
          break;
 8007bd0:	e018      	b.n	8007c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fc83 	bl	80084e0 <USBD_GetConfig>
          break;
 8007bda:	e013      	b.n	8007c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fcb4 	bl	800854c <USBD_GetStatus>
          break;
 8007be4:	e00e      	b.n	8007c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fce3 	bl	80085b4 <USBD_SetFeature>
          break;
 8007bee:	e009      	b.n	8007c04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fd07 	bl	8008606 <USBD_ClrFeature>
          break;
 8007bf8:	e004      	b.n	8007c04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fd5e 	bl	80086be <USBD_CtlError>
          break;
 8007c02:	bf00      	nop
      }
      break;
 8007c04:	e004      	b.n	8007c10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fd58 	bl	80086be <USBD_CtlError>
      break;
 8007c0e:	bf00      	nop
  }

  return ret;
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop

08007c1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c32:	2b40      	cmp	r3, #64	@ 0x40
 8007c34:	d005      	beq.n	8007c42 <USBD_StdItfReq+0x26>
 8007c36:	2b40      	cmp	r3, #64	@ 0x40
 8007c38:	d852      	bhi.n	8007ce0 <USBD_StdItfReq+0xc4>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <USBD_StdItfReq+0x26>
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	d14e      	bne.n	8007ce0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d840      	bhi.n	8007cd2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	889b      	ldrh	r3, [r3, #4]
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d836      	bhi.n	8007cc8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	889b      	ldrh	r3, [r3, #4]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff fedb 	bl	8007a1e <USBD_CoreFindIF>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c6c:	7bbb      	ldrb	r3, [r7, #14]
 8007c6e:	2bff      	cmp	r3, #255	@ 0xff
 8007c70:	d01d      	beq.n	8007cae <USBD_StdItfReq+0x92>
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d11a      	bne.n	8007cae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c78:	7bba      	ldrb	r2, [r7, #14]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	32ae      	adds	r2, #174	@ 0xae
 8007c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00f      	beq.n	8007ca8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c88:	7bba      	ldrb	r2, [r7, #14]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c90:	7bba      	ldrb	r2, [r7, #14]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	32ae      	adds	r2, #174	@ 0xae
 8007c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ca6:	e004      	b.n	8007cb2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cac:	e001      	b.n	8007cb2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	88db      	ldrh	r3, [r3, #6]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d110      	bne.n	8007cdc <USBD_StdItfReq+0xc0>
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10d      	bne.n	8007cdc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fdd3 	bl	800886c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cc6:	e009      	b.n	8007cdc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fcf7 	bl	80086be <USBD_CtlError>
          break;
 8007cd0:	e004      	b.n	8007cdc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fcf2 	bl	80086be <USBD_CtlError>
          break;
 8007cda:	e000      	b.n	8007cde <USBD_StdItfReq+0xc2>
          break;
 8007cdc:	bf00      	nop
      }
      break;
 8007cde:	e004      	b.n	8007cea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fceb 	bl	80086be <USBD_CtlError>
      break;
 8007ce8:	bf00      	nop
  }

  return ret;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	889b      	ldrh	r3, [r3, #4]
 8007d06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d10:	2b40      	cmp	r3, #64	@ 0x40
 8007d12:	d007      	beq.n	8007d24 <USBD_StdEPReq+0x30>
 8007d14:	2b40      	cmp	r3, #64	@ 0x40
 8007d16:	f200 817f 	bhi.w	8008018 <USBD_StdEPReq+0x324>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d02a      	beq.n	8007d74 <USBD_StdEPReq+0x80>
 8007d1e:	2b20      	cmp	r3, #32
 8007d20:	f040 817a 	bne.w	8008018 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fe85 	bl	8007a38 <USBD_CoreFindEP>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d32:	7b7b      	ldrb	r3, [r7, #13]
 8007d34:	2bff      	cmp	r3, #255	@ 0xff
 8007d36:	f000 8174 	beq.w	8008022 <USBD_StdEPReq+0x32e>
 8007d3a:	7b7b      	ldrb	r3, [r7, #13]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f040 8170 	bne.w	8008022 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d42:	7b7a      	ldrb	r2, [r7, #13]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d4a:	7b7a      	ldrb	r2, [r7, #13]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	32ae      	adds	r2, #174	@ 0xae
 8007d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 8163 	beq.w	8008022 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d5c:	7b7a      	ldrb	r2, [r7, #13]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	32ae      	adds	r2, #174	@ 0xae
 8007d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d72:	e156      	b.n	8008022 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	785b      	ldrb	r3, [r3, #1]
 8007d78:	2b03      	cmp	r3, #3
 8007d7a:	d008      	beq.n	8007d8e <USBD_StdEPReq+0x9a>
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	f300 8145 	bgt.w	800800c <USBD_StdEPReq+0x318>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 809b 	beq.w	8007ebe <USBD_StdEPReq+0x1ca>
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d03c      	beq.n	8007e06 <USBD_StdEPReq+0x112>
 8007d8c:	e13e      	b.n	800800c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d002      	beq.n	8007da0 <USBD_StdEPReq+0xac>
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d016      	beq.n	8007dcc <USBD_StdEPReq+0xd8>
 8007d9e:	e02c      	b.n	8007dfa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00d      	beq.n	8007dc2 <USBD_StdEPReq+0xce>
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	2b80      	cmp	r3, #128	@ 0x80
 8007daa:	d00a      	beq.n	8007dc2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 f987 	bl	80090c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007db6:	2180      	movs	r1, #128	@ 0x80
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 f983 	bl	80090c4 <USBD_LL_StallEP>
 8007dbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dc0:	e020      	b.n	8007e04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fc7a 	bl	80086be <USBD_CtlError>
              break;
 8007dca:	e01b      	b.n	8007e04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	885b      	ldrh	r3, [r3, #2]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10e      	bne.n	8007df2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <USBD_StdEPReq+0xfe>
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b80      	cmp	r3, #128	@ 0x80
 8007dde:	d008      	beq.n	8007df2 <USBD_StdEPReq+0xfe>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	88db      	ldrh	r3, [r3, #6]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 f969 	bl	80090c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fd3a 	bl	800886c <USBD_CtlSendStatus>

              break;
 8007df8:	e004      	b.n	8007e04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fc5e 	bl	80086be <USBD_CtlError>
              break;
 8007e02:	bf00      	nop
          }
          break;
 8007e04:	e107      	b.n	8008016 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d002      	beq.n	8007e18 <USBD_StdEPReq+0x124>
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d016      	beq.n	8007e44 <USBD_StdEPReq+0x150>
 8007e16:	e04b      	b.n	8007eb0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00d      	beq.n	8007e3a <USBD_StdEPReq+0x146>
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b80      	cmp	r3, #128	@ 0x80
 8007e22:	d00a      	beq.n	8007e3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f94b 	bl	80090c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e2e:	2180      	movs	r1, #128	@ 0x80
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 f947 	bl	80090c4 <USBD_LL_StallEP>
 8007e36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e38:	e040      	b.n	8007ebc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fc3e 	bl	80086be <USBD_CtlError>
              break;
 8007e42:	e03b      	b.n	8007ebc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	885b      	ldrh	r3, [r3, #2]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d136      	bne.n	8007eba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 f951 	bl	8009102 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fd03 	bl	800886c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff fde4 	bl	8007a38 <USBD_CoreFindEP>
 8007e70:	4603      	mov	r3, r0
 8007e72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e74:	7b7b      	ldrb	r3, [r7, #13]
 8007e76:	2bff      	cmp	r3, #255	@ 0xff
 8007e78:	d01f      	beq.n	8007eba <USBD_StdEPReq+0x1c6>
 8007e7a:	7b7b      	ldrb	r3, [r7, #13]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d11c      	bne.n	8007eba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e80:	7b7a      	ldrb	r2, [r7, #13]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e88:	7b7a      	ldrb	r2, [r7, #13]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	32ae      	adds	r2, #174	@ 0xae
 8007e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d010      	beq.n	8007eba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e98:	7b7a      	ldrb	r2, [r7, #13]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	32ae      	adds	r2, #174	@ 0xae
 8007e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007eae:	e004      	b.n	8007eba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fc03 	bl	80086be <USBD_CtlError>
              break;
 8007eb8:	e000      	b.n	8007ebc <USBD_StdEPReq+0x1c8>
              break;
 8007eba:	bf00      	nop
          }
          break;
 8007ebc:	e0ab      	b.n	8008016 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d002      	beq.n	8007ed0 <USBD_StdEPReq+0x1dc>
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d032      	beq.n	8007f34 <USBD_StdEPReq+0x240>
 8007ece:	e097      	b.n	8008000 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <USBD_StdEPReq+0x1f2>
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	2b80      	cmp	r3, #128	@ 0x80
 8007eda:	d004      	beq.n	8007ee6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fbed 	bl	80086be <USBD_CtlError>
                break;
 8007ee4:	e091      	b.n	800800a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	da0b      	bge.n	8007f06 <USBD_StdEPReq+0x212>
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	3310      	adds	r3, #16
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	4413      	add	r3, r2
 8007f02:	3304      	adds	r3, #4
 8007f04:	e00b      	b.n	8007f1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2202      	movs	r2, #2
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc43 	bl	80087b8 <USBD_CtlSendData>
              break;
 8007f32:	e06a      	b.n	800800a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da11      	bge.n	8007f60 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	f003 020f 	and.w	r2, r3, #15
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	440b      	add	r3, r1
 8007f4e:	3324      	adds	r3, #36	@ 0x24
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d117      	bne.n	8007f86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fbb0 	bl	80086be <USBD_CtlError>
                  break;
 8007f5e:	e054      	b.n	800800a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	f003 020f 	and.w	r2, r3, #15
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d104      	bne.n	8007f86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fb9d 	bl	80086be <USBD_CtlError>
                  break;
 8007f84:	e041      	b.n	800800a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	da0b      	bge.n	8007fa6 <USBD_StdEPReq+0x2b2>
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	3310      	adds	r3, #16
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	e00b      	b.n	8007fbe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	4413      	add	r3, r2
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <USBD_StdEPReq+0x2d8>
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	2b80      	cmp	r3, #128	@ 0x80
 8007fca:	d103      	bne.n	8007fd4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	e00e      	b.n	8007ff2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f8b1 	bl	8009140 <USBD_LL_IsStallEP>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	e002      	b.n	8007ff2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fbdd 	bl	80087b8 <USBD_CtlSendData>
              break;
 8007ffe:	e004      	b.n	800800a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fb5b 	bl	80086be <USBD_CtlError>
              break;
 8008008:	bf00      	nop
          }
          break;
 800800a:	e004      	b.n	8008016 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fb55 	bl	80086be <USBD_CtlError>
          break;
 8008014:	bf00      	nop
      }
      break;
 8008016:	e005      	b.n	8008024 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fb4f 	bl	80086be <USBD_CtlError>
      break;
 8008020:	e000      	b.n	8008024 <USBD_StdEPReq+0x330>
      break;
 8008022:	bf00      	nop
  }

  return ret;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	885b      	ldrh	r3, [r3, #2]
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	b29b      	uxth	r3, r3
 800804e:	3b01      	subs	r3, #1
 8008050:	2b06      	cmp	r3, #6
 8008052:	f200 8128 	bhi.w	80082a6 <USBD_GetDescriptor+0x276>
 8008056:	a201      	add	r2, pc, #4	@ (adr r2, 800805c <USBD_GetDescriptor+0x2c>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	08008079 	.word	0x08008079
 8008060:	08008091 	.word	0x08008091
 8008064:	080080d1 	.word	0x080080d1
 8008068:	080082a7 	.word	0x080082a7
 800806c:	080082a7 	.word	0x080082a7
 8008070:	08008247 	.word	0x08008247
 8008074:	08008273 	.word	0x08008273
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	7c12      	ldrb	r2, [r2, #16]
 8008084:	f107 0108 	add.w	r1, r7, #8
 8008088:	4610      	mov	r0, r2
 800808a:	4798      	blx	r3
 800808c:	60f8      	str	r0, [r7, #12]
      break;
 800808e:	e112      	b.n	80082b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	7c1b      	ldrb	r3, [r3, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10d      	bne.n	80080b4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800809e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a0:	f107 0208 	add.w	r2, r7, #8
 80080a4:	4610      	mov	r0, r2
 80080a6:	4798      	blx	r3
 80080a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	2202      	movs	r2, #2
 80080b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080b2:	e100      	b.n	80082b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080bc:	f107 0208 	add.w	r2, r7, #8
 80080c0:	4610      	mov	r0, r2
 80080c2:	4798      	blx	r3
 80080c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	2202      	movs	r2, #2
 80080cc:	701a      	strb	r2, [r3, #0]
      break;
 80080ce:	e0f2      	b.n	80082b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	885b      	ldrh	r3, [r3, #2]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b05      	cmp	r3, #5
 80080d8:	f200 80ac 	bhi.w	8008234 <USBD_GetDescriptor+0x204>
 80080dc:	a201      	add	r2, pc, #4	@ (adr r2, 80080e4 <USBD_GetDescriptor+0xb4>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	080080fd 	.word	0x080080fd
 80080e8:	08008131 	.word	0x08008131
 80080ec:	08008165 	.word	0x08008165
 80080f0:	08008199 	.word	0x08008199
 80080f4:	080081cd 	.word	0x080081cd
 80080f8:	08008201 	.word	0x08008201
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00b      	beq.n	8008120 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	7c12      	ldrb	r2, [r2, #16]
 8008114:	f107 0108 	add.w	r1, r7, #8
 8008118:	4610      	mov	r0, r2
 800811a:	4798      	blx	r3
 800811c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800811e:	e091      	b.n	8008244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 facb 	bl	80086be <USBD_CtlError>
            err++;
 8008128:	7afb      	ldrb	r3, [r7, #11]
 800812a:	3301      	adds	r3, #1
 800812c:	72fb      	strb	r3, [r7, #11]
          break;
 800812e:	e089      	b.n	8008244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00b      	beq.n	8008154 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	7c12      	ldrb	r2, [r2, #16]
 8008148:	f107 0108 	add.w	r1, r7, #8
 800814c:	4610      	mov	r0, r2
 800814e:	4798      	blx	r3
 8008150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008152:	e077      	b.n	8008244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fab1 	bl	80086be <USBD_CtlError>
            err++;
 800815c:	7afb      	ldrb	r3, [r7, #11]
 800815e:	3301      	adds	r3, #1
 8008160:	72fb      	strb	r3, [r7, #11]
          break;
 8008162:	e06f      	b.n	8008244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00b      	beq.n	8008188 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	7c12      	ldrb	r2, [r2, #16]
 800817c:	f107 0108 	add.w	r1, r7, #8
 8008180:	4610      	mov	r0, r2
 8008182:	4798      	blx	r3
 8008184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008186:	e05d      	b.n	8008244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fa97 	bl	80086be <USBD_CtlError>
            err++;
 8008190:	7afb      	ldrb	r3, [r7, #11]
 8008192:	3301      	adds	r3, #1
 8008194:	72fb      	strb	r3, [r7, #11]
          break;
 8008196:	e055      	b.n	8008244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00b      	beq.n	80081bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	7c12      	ldrb	r2, [r2, #16]
 80081b0:	f107 0108 	add.w	r1, r7, #8
 80081b4:	4610      	mov	r0, r2
 80081b6:	4798      	blx	r3
 80081b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ba:	e043      	b.n	8008244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa7d 	bl	80086be <USBD_CtlError>
            err++;
 80081c4:	7afb      	ldrb	r3, [r7, #11]
 80081c6:	3301      	adds	r3, #1
 80081c8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ca:	e03b      	b.n	8008244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	7c12      	ldrb	r2, [r2, #16]
 80081e4:	f107 0108 	add.w	r1, r7, #8
 80081e8:	4610      	mov	r0, r2
 80081ea:	4798      	blx	r3
 80081ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ee:	e029      	b.n	8008244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fa63 	bl	80086be <USBD_CtlError>
            err++;
 80081f8:	7afb      	ldrb	r3, [r7, #11]
 80081fa:	3301      	adds	r3, #1
 80081fc:	72fb      	strb	r3, [r7, #11]
          break;
 80081fe:	e021      	b.n	8008244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	7c12      	ldrb	r2, [r2, #16]
 8008218:	f107 0108 	add.w	r1, r7, #8
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008222:	e00f      	b.n	8008244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa49 	bl	80086be <USBD_CtlError>
            err++;
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	3301      	adds	r3, #1
 8008230:	72fb      	strb	r3, [r7, #11]
          break;
 8008232:	e007      	b.n	8008244 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa41 	bl	80086be <USBD_CtlError>
          err++;
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	3301      	adds	r3, #1
 8008240:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008242:	bf00      	nop
      }
      break;
 8008244:	e037      	b.n	80082b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	7c1b      	ldrb	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008256:	f107 0208 	add.w	r2, r7, #8
 800825a:	4610      	mov	r0, r2
 800825c:	4798      	blx	r3
 800825e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008260:	e029      	b.n	80082b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fa2a 	bl	80086be <USBD_CtlError>
        err++;
 800826a:	7afb      	ldrb	r3, [r7, #11]
 800826c:	3301      	adds	r3, #1
 800826e:	72fb      	strb	r3, [r7, #11]
      break;
 8008270:	e021      	b.n	80082b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	7c1b      	ldrb	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10d      	bne.n	8008296 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	f107 0208 	add.w	r2, r7, #8
 8008286:	4610      	mov	r0, r2
 8008288:	4798      	blx	r3
 800828a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3301      	adds	r3, #1
 8008290:	2207      	movs	r2, #7
 8008292:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008294:	e00f      	b.n	80082b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fa10 	bl	80086be <USBD_CtlError>
        err++;
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	3301      	adds	r3, #1
 80082a2:	72fb      	strb	r3, [r7, #11]
      break;
 80082a4:	e007      	b.n	80082b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fa08 	bl	80086be <USBD_CtlError>
      err++;
 80082ae:	7afb      	ldrb	r3, [r7, #11]
 80082b0:	3301      	adds	r3, #1
 80082b2:	72fb      	strb	r3, [r7, #11]
      break;
 80082b4:	bf00      	nop
  }

  if (err != 0U)
 80082b6:	7afb      	ldrb	r3, [r7, #11]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d11e      	bne.n	80082fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	88db      	ldrh	r3, [r3, #6]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d016      	beq.n	80082f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80082c4:	893b      	ldrh	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00e      	beq.n	80082e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	88da      	ldrh	r2, [r3, #6]
 80082ce:	893b      	ldrh	r3, [r7, #8]
 80082d0:	4293      	cmp	r3, r2
 80082d2:	bf28      	it	cs
 80082d4:	4613      	movcs	r3, r2
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082da:	893b      	ldrh	r3, [r7, #8]
 80082dc:	461a      	mov	r2, r3
 80082de:	68f9      	ldr	r1, [r7, #12]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fa69 	bl	80087b8 <USBD_CtlSendData>
 80082e6:	e009      	b.n	80082fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f9e7 	bl	80086be <USBD_CtlError>
 80082f0:	e004      	b.n	80082fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 faba 	bl	800886c <USBD_CtlSendStatus>
 80082f8:	e000      	b.n	80082fc <USBD_GetDescriptor+0x2cc>
    return;
 80082fa:	bf00      	nop
  }
}
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop

08008304 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	889b      	ldrh	r3, [r3, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d131      	bne.n	800837a <USBD_SetAddress+0x76>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	88db      	ldrh	r3, [r3, #6]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d12d      	bne.n	800837a <USBD_SetAddress+0x76>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	885b      	ldrh	r3, [r3, #2]
 8008322:	2b7f      	cmp	r3, #127	@ 0x7f
 8008324:	d829      	bhi.n	800837a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	885b      	ldrh	r3, [r3, #2]
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008330:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b03      	cmp	r3, #3
 800833c:	d104      	bne.n	8008348 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f9bc 	bl	80086be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008346:	e01d      	b.n	8008384 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	7bfa      	ldrb	r2, [r7, #15]
 800834c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 ff1f 	bl	8009198 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa86 	bl	800886c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d004      	beq.n	8008370 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2202      	movs	r2, #2
 800836a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800836e:	e009      	b.n	8008384 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008378:	e004      	b.n	8008384 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f99e 	bl	80086be <USBD_CtlError>
  }
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	885b      	ldrh	r3, [r3, #2]
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	4b4e      	ldr	r3, [pc, #312]	@ (80084dc <USBD_SetConfig+0x150>)
 80083a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083a4:	4b4d      	ldr	r3, [pc, #308]	@ (80084dc <USBD_SetConfig+0x150>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d905      	bls.n	80083b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f985 	bl	80086be <USBD_CtlError>
    return USBD_FAIL;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e08c      	b.n	80084d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d002      	beq.n	80083ca <USBD_SetConfig+0x3e>
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d029      	beq.n	800841c <USBD_SetConfig+0x90>
 80083c8:	e075      	b.n	80084b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80083ca:	4b44      	ldr	r3, [pc, #272]	@ (80084dc <USBD_SetConfig+0x150>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d020      	beq.n	8008414 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80083d2:	4b42      	ldr	r3, [pc, #264]	@ (80084dc <USBD_SetConfig+0x150>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083dc:	4b3f      	ldr	r3, [pc, #252]	@ (80084dc <USBD_SetConfig+0x150>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7fe ffe3 	bl	80073ae <USBD_SetClassConfig>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d008      	beq.n	8008404 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f962 	bl	80086be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2202      	movs	r2, #2
 80083fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008402:	e065      	b.n	80084d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fa31 	bl	800886c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2203      	movs	r2, #3
 800840e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008412:	e05d      	b.n	80084d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa29 	bl	800886c <USBD_CtlSendStatus>
      break;
 800841a:	e059      	b.n	80084d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800841c:	4b2f      	ldr	r3, [pc, #188]	@ (80084dc <USBD_SetConfig+0x150>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d112      	bne.n	800844a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800842c:	4b2b      	ldr	r3, [pc, #172]	@ (80084dc <USBD_SetConfig+0x150>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008436:	4b29      	ldr	r3, [pc, #164]	@ (80084dc <USBD_SetConfig+0x150>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7fe ffd2 	bl	80073e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fa12 	bl	800886c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008448:	e042      	b.n	80084d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800844a:	4b24      	ldr	r3, [pc, #144]	@ (80084dc <USBD_SetConfig+0x150>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d02a      	beq.n	80084ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7fe ffc0 	bl	80073e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008466:	4b1d      	ldr	r3, [pc, #116]	@ (80084dc <USBD_SetConfig+0x150>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008470:	4b1a      	ldr	r3, [pc, #104]	@ (80084dc <USBD_SetConfig+0x150>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7fe ff99 	bl	80073ae <USBD_SetClassConfig>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00f      	beq.n	80084a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f918 	bl	80086be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fe ffa5 	bl	80073e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084a4:	e014      	b.n	80084d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f9e0 	bl	800886c <USBD_CtlSendStatus>
      break;
 80084ac:	e010      	b.n	80084d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f9dc 	bl	800886c <USBD_CtlSendStatus>
      break;
 80084b4:	e00c      	b.n	80084d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f900 	bl	80086be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084be:	4b07      	ldr	r3, [pc, #28]	@ (80084dc <USBD_SetConfig+0x150>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7fe ff8e 	bl	80073e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084ca:	2303      	movs	r3, #3
 80084cc:	73fb      	strb	r3, [r7, #15]
      break;
 80084ce:	bf00      	nop
  }

  return ret;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	200002bc 	.word	0x200002bc

080084e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	88db      	ldrh	r3, [r3, #6]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d004      	beq.n	80084fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f8e2 	bl	80086be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084fa:	e023      	b.n	8008544 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b02      	cmp	r3, #2
 8008506:	dc02      	bgt.n	800850e <USBD_GetConfig+0x2e>
 8008508:	2b00      	cmp	r3, #0
 800850a:	dc03      	bgt.n	8008514 <USBD_GetConfig+0x34>
 800850c:	e015      	b.n	800853a <USBD_GetConfig+0x5a>
 800850e:	2b03      	cmp	r3, #3
 8008510:	d00b      	beq.n	800852a <USBD_GetConfig+0x4a>
 8008512:	e012      	b.n	800853a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3308      	adds	r3, #8
 800851e:	2201      	movs	r2, #1
 8008520:	4619      	mov	r1, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f948 	bl	80087b8 <USBD_CtlSendData>
        break;
 8008528:	e00c      	b.n	8008544 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3304      	adds	r3, #4
 800852e:	2201      	movs	r2, #1
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f940 	bl	80087b8 <USBD_CtlSendData>
        break;
 8008538:	e004      	b.n	8008544 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f8be 	bl	80086be <USBD_CtlError>
        break;
 8008542:	bf00      	nop
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855c:	b2db      	uxtb	r3, r3
 800855e:	3b01      	subs	r3, #1
 8008560:	2b02      	cmp	r3, #2
 8008562:	d81e      	bhi.n	80085a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	88db      	ldrh	r3, [r3, #6]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d004      	beq.n	8008576 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f8a5 	bl	80086be <USBD_CtlError>
        break;
 8008574:	e01a      	b.n	80085ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f043 0202 	orr.w	r2, r3, #2
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	330c      	adds	r3, #12
 8008596:	2202      	movs	r2, #2
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f90c 	bl	80087b8 <USBD_CtlSendData>
      break;
 80085a0:	e004      	b.n	80085ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f88a 	bl	80086be <USBD_CtlError>
      break;
 80085aa:	bf00      	nop
  }
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	885b      	ldrh	r3, [r3, #2]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d107      	bne.n	80085d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f94c 	bl	800886c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80085d4:	e013      	b.n	80085fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	885b      	ldrh	r3, [r3, #2]
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d10b      	bne.n	80085f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	889b      	ldrh	r3, [r3, #4]
 80085e2:	0a1b      	lsrs	r3, r3, #8
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f93c 	bl	800886c <USBD_CtlSendStatus>
}
 80085f4:	e003      	b.n	80085fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f860 	bl	80086be <USBD_CtlError>
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008616:	b2db      	uxtb	r3, r3
 8008618:	3b01      	subs	r3, #1
 800861a:	2b02      	cmp	r3, #2
 800861c:	d80b      	bhi.n	8008636 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d10c      	bne.n	8008640 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f91c 	bl	800886c <USBD_CtlSendStatus>
      }
      break;
 8008634:	e004      	b.n	8008640 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f840 	bl	80086be <USBD_CtlError>
      break;
 800863e:	e000      	b.n	8008642 <USBD_ClrFeature+0x3c>
      break;
 8008640:	bf00      	nop
  }
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b084      	sub	sp, #16
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	781a      	ldrb	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3301      	adds	r3, #1
 8008664:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	781a      	ldrb	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3301      	adds	r3, #1
 8008672:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7ff fa40 	bl	8007afa <SWAPBYTE>
 800867a:	4603      	mov	r3, r0
 800867c:	461a      	mov	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3301      	adds	r3, #1
 800868c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f7ff fa33 	bl	8007afa <SWAPBYTE>
 8008694:	4603      	mov	r3, r0
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3301      	adds	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f7ff fa26 	bl	8007afa <SWAPBYTE>
 80086ae:	4603      	mov	r3, r0
 80086b0:	461a      	mov	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	80da      	strh	r2, [r3, #6]
}
 80086b6:	bf00      	nop
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086c8:	2180      	movs	r1, #128	@ 0x80
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fcfa 	bl	80090c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086d0:	2100      	movs	r1, #0
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fcf6 	bl	80090c4 <USBD_LL_StallEP>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d042      	beq.n	800877c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80086fa:	6938      	ldr	r0, [r7, #16]
 80086fc:	f000 f842 	bl	8008784 <USBD_GetLen>
 8008700:	4603      	mov	r3, r0
 8008702:	3301      	adds	r3, #1
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800870a:	d808      	bhi.n	800871e <USBD_GetString+0x3e>
 800870c:	6938      	ldr	r0, [r7, #16]
 800870e:	f000 f839 	bl	8008784 <USBD_GetLen>
 8008712:	4603      	mov	r3, r0
 8008714:	3301      	adds	r3, #1
 8008716:	b29b      	uxth	r3, r3
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	b29a      	uxth	r2, r3
 800871c:	e001      	b.n	8008722 <USBD_GetString+0x42>
 800871e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	4413      	add	r3, r2
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	7812      	ldrb	r2, [r2, #0]
 8008730:	701a      	strb	r2, [r3, #0]
  idx++;
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	3301      	adds	r3, #1
 8008736:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4413      	add	r3, r2
 800873e:	2203      	movs	r2, #3
 8008740:	701a      	strb	r2, [r3, #0]
  idx++;
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	3301      	adds	r3, #1
 8008746:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008748:	e013      	b.n	8008772 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	4413      	add	r3, r2
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	7812      	ldrb	r2, [r2, #0]
 8008754:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	3301      	adds	r3, #1
 800875a:	613b      	str	r3, [r7, #16]
    idx++;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
 800875e:	3301      	adds	r3, #1
 8008760:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	4413      	add	r3, r2
 8008768:	2200      	movs	r2, #0
 800876a:	701a      	strb	r2, [r3, #0]
    idx++;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	3301      	adds	r3, #1
 8008770:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e7      	bne.n	800874a <USBD_GetString+0x6a>
 800877a:	e000      	b.n	800877e <USBD_GetString+0x9e>
    return;
 800877c:	bf00      	nop
  }
}
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008794:	e005      	b.n	80087a2 <USBD_GetLen+0x1e>
  {
    len++;
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	3301      	adds	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	3301      	adds	r3, #1
 80087a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1f5      	bne.n	8008796 <USBD_GetLen+0x12>
  }

  return len;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	2100      	movs	r1, #0
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 fcf9 	bl	80091d6 <USBD_LL_Transmit>

  return USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	2100      	movs	r1, #0
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 fce8 	bl	80091d6 <USBD_LL_Transmit>

  return USBD_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2203      	movs	r2, #3
 8008820:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	2100      	movs	r1, #0
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 fcec 	bl	8009218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	2100      	movs	r1, #0
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fcdb 	bl	8009218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2204      	movs	r2, #4
 8008878:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800887c:	2300      	movs	r3, #0
 800887e:	2200      	movs	r2, #0
 8008880:	2100      	movs	r1, #0
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fca7 	bl	80091d6 <USBD_LL_Transmit>

  return USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2205      	movs	r2, #5
 800889e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088a2:	2300      	movs	r3, #0
 80088a4:	2200      	movs	r2, #0
 80088a6:	2100      	movs	r1, #0
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fcb5 	bl	8009218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088bc:	2200      	movs	r2, #0
 80088be:	4912      	ldr	r1, [pc, #72]	@ (8008908 <MX_USB_DEVICE_Init+0x50>)
 80088c0:	4812      	ldr	r0, [pc, #72]	@ (800890c <MX_USB_DEVICE_Init+0x54>)
 80088c2:	f7fe fcf7 	bl	80072b4 <USBD_Init>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088cc:	f7f8 fd92 	bl	80013f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088d0:	490f      	ldr	r1, [pc, #60]	@ (8008910 <MX_USB_DEVICE_Init+0x58>)
 80088d2:	480e      	ldr	r0, [pc, #56]	@ (800890c <MX_USB_DEVICE_Init+0x54>)
 80088d4:	f7fe fd1e 	bl	8007314 <USBD_RegisterClass>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088de:	f7f8 fd89 	bl	80013f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088e2:	490c      	ldr	r1, [pc, #48]	@ (8008914 <MX_USB_DEVICE_Init+0x5c>)
 80088e4:	4809      	ldr	r0, [pc, #36]	@ (800890c <MX_USB_DEVICE_Init+0x54>)
 80088e6:	f7fe fc15 	bl	8007114 <USBD_CDC_RegisterInterface>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088f0:	f7f8 fd80 	bl	80013f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088f4:	4805      	ldr	r0, [pc, #20]	@ (800890c <MX_USB_DEVICE_Init+0x54>)
 80088f6:	f7fe fd43 	bl	8007380 <USBD_Start>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008900:	f7f8 fd78 	bl	80013f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008904:	bf00      	nop
 8008906:	bd80      	pop	{r7, pc}
 8008908:	200000ac 	.word	0x200000ac
 800890c:	200002c0 	.word	0x200002c0
 8008910:	20000018 	.word	0x20000018
 8008914:	20000098 	.word	0x20000098

08008918 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800891c:	2200      	movs	r2, #0
 800891e:	4905      	ldr	r1, [pc, #20]	@ (8008934 <CDC_Init_FS+0x1c>)
 8008920:	4805      	ldr	r0, [pc, #20]	@ (8008938 <CDC_Init_FS+0x20>)
 8008922:	f7fe fc11 	bl	8007148 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008926:	4905      	ldr	r1, [pc, #20]	@ (800893c <CDC_Init_FS+0x24>)
 8008928:	4803      	ldr	r0, [pc, #12]	@ (8008938 <CDC_Init_FS+0x20>)
 800892a:	f7fe fc2f 	bl	800718c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800892e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008930:	4618      	mov	r0, r3
 8008932:	bd80      	pop	{r7, pc}
 8008934:	20000d9c 	.word	0x20000d9c
 8008938:	200002c0 	.word	0x200002c0
 800893c:	2000059c 	.word	0x2000059c

08008940 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008944:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008946:	4618      	mov	r0, r3
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	6039      	str	r1, [r7, #0]
 800895a:	71fb      	strb	r3, [r7, #7]
 800895c:	4613      	mov	r3, r2
 800895e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b23      	cmp	r3, #35	@ 0x23
 8008964:	d84a      	bhi.n	80089fc <CDC_Control_FS+0xac>
 8008966:	a201      	add	r2, pc, #4	@ (adr r2, 800896c <CDC_Control_FS+0x1c>)
 8008968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896c:	080089fd 	.word	0x080089fd
 8008970:	080089fd 	.word	0x080089fd
 8008974:	080089fd 	.word	0x080089fd
 8008978:	080089fd 	.word	0x080089fd
 800897c:	080089fd 	.word	0x080089fd
 8008980:	080089fd 	.word	0x080089fd
 8008984:	080089fd 	.word	0x080089fd
 8008988:	080089fd 	.word	0x080089fd
 800898c:	080089fd 	.word	0x080089fd
 8008990:	080089fd 	.word	0x080089fd
 8008994:	080089fd 	.word	0x080089fd
 8008998:	080089fd 	.word	0x080089fd
 800899c:	080089fd 	.word	0x080089fd
 80089a0:	080089fd 	.word	0x080089fd
 80089a4:	080089fd 	.word	0x080089fd
 80089a8:	080089fd 	.word	0x080089fd
 80089ac:	080089fd 	.word	0x080089fd
 80089b0:	080089fd 	.word	0x080089fd
 80089b4:	080089fd 	.word	0x080089fd
 80089b8:	080089fd 	.word	0x080089fd
 80089bc:	080089fd 	.word	0x080089fd
 80089c0:	080089fd 	.word	0x080089fd
 80089c4:	080089fd 	.word	0x080089fd
 80089c8:	080089fd 	.word	0x080089fd
 80089cc:	080089fd 	.word	0x080089fd
 80089d0:	080089fd 	.word	0x080089fd
 80089d4:	080089fd 	.word	0x080089fd
 80089d8:	080089fd 	.word	0x080089fd
 80089dc:	080089fd 	.word	0x080089fd
 80089e0:	080089fd 	.word	0x080089fd
 80089e4:	080089fd 	.word	0x080089fd
 80089e8:	080089fd 	.word	0x080089fd
 80089ec:	080089fd 	.word	0x080089fd
 80089f0:	080089fd 	.word	0x080089fd
 80089f4:	080089fd 	.word	0x080089fd
 80089f8:	080089fd 	.word	0x080089fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089fc:	bf00      	nop
  }

  return (USBD_OK);
 80089fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	4805      	ldr	r0, [pc, #20]	@ (8008a30 <CDC_Receive_FS+0x24>)
 8008a1a:	f7fe fbb7 	bl	800718c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a1e:	4804      	ldr	r0, [pc, #16]	@ (8008a30 <CDC_Receive_FS+0x24>)
 8008a20:	f7fe fc12 	bl	8007248 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	200002c0 	.word	0x200002c0

08008a34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a44:	4b0d      	ldr	r3, [pc, #52]	@ (8008a7c <CDC_Transmit_FS+0x48>)
 8008a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e00b      	b.n	8008a72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a5a:	887b      	ldrh	r3, [r7, #2]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6879      	ldr	r1, [r7, #4]
 8008a60:	4806      	ldr	r0, [pc, #24]	@ (8008a7c <CDC_Transmit_FS+0x48>)
 8008a62:	f7fe fb71 	bl	8007148 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a66:	4805      	ldr	r0, [pc, #20]	@ (8008a7c <CDC_Transmit_FS+0x48>)
 8008a68:	f7fe fbae 	bl	80071c8 <USBD_CDC_TransmitPacket>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	200002c0 	.word	0x200002c0

08008a80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b087      	sub	sp, #28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
	...

08008aa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	6039      	str	r1, [r7, #0]
 8008aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2212      	movs	r2, #18
 8008ab4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ab6:	4b03      	ldr	r3, [pc, #12]	@ (8008ac4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	200000c8 	.word	0x200000c8

08008ac8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2204      	movs	r2, #4
 8008ad8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ada:	4b03      	ldr	r3, [pc, #12]	@ (8008ae8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	200000dc 	.word	0x200000dc

08008aec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	4907      	ldr	r1, [pc, #28]	@ (8008b20 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b02:	4808      	ldr	r0, [pc, #32]	@ (8008b24 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b04:	f7ff fdec 	bl	80086e0 <USBD_GetString>
 8008b08:	e004      	b.n	8008b14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	4904      	ldr	r1, [pc, #16]	@ (8008b20 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b0e:	4805      	ldr	r0, [pc, #20]	@ (8008b24 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b10:	f7ff fde6 	bl	80086e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b14:	4b02      	ldr	r3, [pc, #8]	@ (8008b20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	2000159c 	.word	0x2000159c
 8008b24:	08009c70 	.word	0x08009c70

08008b28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	6039      	str	r1, [r7, #0]
 8008b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	4904      	ldr	r1, [pc, #16]	@ (8008b48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b38:	4804      	ldr	r0, [pc, #16]	@ (8008b4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b3a:	f7ff fdd1 	bl	80086e0 <USBD_GetString>
  return USBD_StrDesc;
 8008b3e:	4b02      	ldr	r3, [pc, #8]	@ (8008b48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	2000159c 	.word	0x2000159c
 8008b4c:	08009c88 	.word	0x08009c88

08008b50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	221a      	movs	r2, #26
 8008b60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b62:	f000 f843 	bl	8008bec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b66:	4b02      	ldr	r3, [pc, #8]	@ (8008b70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	200000e0 	.word	0x200000e0

08008b74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d105      	bne.n	8008b92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4907      	ldr	r1, [pc, #28]	@ (8008ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b8a:	4808      	ldr	r0, [pc, #32]	@ (8008bac <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b8c:	f7ff fda8 	bl	80086e0 <USBD_GetString>
 8008b90:	e004      	b.n	8008b9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	4904      	ldr	r1, [pc, #16]	@ (8008ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b96:	4805      	ldr	r0, [pc, #20]	@ (8008bac <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b98:	f7ff fda2 	bl	80086e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ba8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	2000159c 	.word	0x2000159c
 8008bac:	08009c9c 	.word	0x08009c9c

08008bb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	4907      	ldr	r1, [pc, #28]	@ (8008be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bc6:	4808      	ldr	r0, [pc, #32]	@ (8008be8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bc8:	f7ff fd8a 	bl	80086e0 <USBD_GetString>
 8008bcc:	e004      	b.n	8008bd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	4904      	ldr	r1, [pc, #16]	@ (8008be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bd2:	4805      	ldr	r0, [pc, #20]	@ (8008be8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bd4:	f7ff fd84 	bl	80086e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bd8:	4b02      	ldr	r3, [pc, #8]	@ (8008be4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	2000159c 	.word	0x2000159c
 8008be8:	08009ca8 	.word	0x08009ca8

08008bec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c30 <Get_SerialNum+0x44>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c34 <Get_SerialNum+0x48>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008c38 <Get_SerialNum+0x4c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4413      	add	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d009      	beq.n	8008c26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c12:	2208      	movs	r2, #8
 8008c14:	4909      	ldr	r1, [pc, #36]	@ (8008c3c <Get_SerialNum+0x50>)
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 f814 	bl	8008c44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c1c:	2204      	movs	r2, #4
 8008c1e:	4908      	ldr	r1, [pc, #32]	@ (8008c40 <Get_SerialNum+0x54>)
 8008c20:	68b8      	ldr	r0, [r7, #8]
 8008c22:	f000 f80f 	bl	8008c44 <IntToUnicode>
  }
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	1fff7a10 	.word	0x1fff7a10
 8008c34:	1fff7a14 	.word	0x1fff7a14
 8008c38:	1fff7a18 	.word	0x1fff7a18
 8008c3c:	200000e2 	.word	0x200000e2
 8008c40:	200000f2 	.word	0x200000f2

08008c44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c56:	2300      	movs	r3, #0
 8008c58:	75fb      	strb	r3, [r7, #23]
 8008c5a:	e027      	b.n	8008cac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	0f1b      	lsrs	r3, r3, #28
 8008c60:	2b09      	cmp	r3, #9
 8008c62:	d80b      	bhi.n	8008c7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	0f1b      	lsrs	r3, r3, #28
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	4619      	mov	r1, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	440b      	add	r3, r1
 8008c74:	3230      	adds	r2, #48	@ 0x30
 8008c76:	b2d2      	uxtb	r2, r2
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	e00a      	b.n	8008c92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	0f1b      	lsrs	r3, r3, #28
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	4619      	mov	r1, r3
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3237      	adds	r2, #55	@ 0x37
 8008c8e:	b2d2      	uxtb	r2, r2
 8008c90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	011b      	lsls	r3, r3, #4
 8008c96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	75fb      	strb	r3, [r7, #23]
 8008cac:	7dfa      	ldrb	r2, [r7, #23]
 8008cae:	79fb      	ldrb	r3, [r7, #7]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d3d3      	bcc.n	8008c5c <IntToUnicode+0x18>
  }
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08a      	sub	sp, #40	@ 0x28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ccc:	f107 0314 	add.w	r3, r7, #20
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	609a      	str	r2, [r3, #8]
 8008cd8:	60da      	str	r2, [r3, #12]
 8008cda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ce4:	d147      	bne.n	8008d76 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	613b      	str	r3, [r7, #16]
 8008cea:	4b25      	ldr	r3, [pc, #148]	@ (8008d80 <HAL_PCD_MspInit+0xbc>)
 8008cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cee:	4a24      	ldr	r2, [pc, #144]	@ (8008d80 <HAL_PCD_MspInit+0xbc>)
 8008cf0:	f043 0301 	orr.w	r3, r3, #1
 8008cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008cf6:	4b22      	ldr	r3, [pc, #136]	@ (8008d80 <HAL_PCD_MspInit+0xbc>)
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	613b      	str	r3, [r7, #16]
 8008d00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008d02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008d10:	f107 0314 	add.w	r3, r7, #20
 8008d14:	4619      	mov	r1, r3
 8008d16:	481b      	ldr	r0, [pc, #108]	@ (8008d84 <HAL_PCD_MspInit+0xc0>)
 8008d18:	f7f8 ff20 	bl	8001b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008d1c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d22:	2302      	movs	r3, #2
 8008d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d26:	2300      	movs	r3, #0
 8008d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d2e:	230a      	movs	r3, #10
 8008d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d32:	f107 0314 	add.w	r3, r7, #20
 8008d36:	4619      	mov	r1, r3
 8008d38:	4812      	ldr	r0, [pc, #72]	@ (8008d84 <HAL_PCD_MspInit+0xc0>)
 8008d3a:	f7f8 ff0f 	bl	8001b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d3e:	4b10      	ldr	r3, [pc, #64]	@ (8008d80 <HAL_PCD_MspInit+0xbc>)
 8008d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d42:	4a0f      	ldr	r2, [pc, #60]	@ (8008d80 <HAL_PCD_MspInit+0xbc>)
 8008d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d48:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d80 <HAL_PCD_MspInit+0xbc>)
 8008d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d52:	4a0b      	ldr	r2, [pc, #44]	@ (8008d80 <HAL_PCD_MspInit+0xbc>)
 8008d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d5a:	4b09      	ldr	r3, [pc, #36]	@ (8008d80 <HAL_PCD_MspInit+0xbc>)
 8008d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d66:	2200      	movs	r2, #0
 8008d68:	2100      	movs	r1, #0
 8008d6a:	2043      	movs	r0, #67	@ 0x43
 8008d6c:	f7f8 febf 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d70:	2043      	movs	r0, #67	@ 0x43
 8008d72:	f7f8 fed8 	bl	8001b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d76:	bf00      	nop
 8008d78:	3728      	adds	r7, #40	@ 0x28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	40023800 	.word	0x40023800
 8008d84:	40020000 	.word	0x40020000

08008d88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4610      	mov	r0, r2
 8008da0:	f7fe fb3b 	bl	800741a <USBD_LL_SetupStage>
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	6879      	ldr	r1, [r7, #4]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	440b      	add	r3, r1
 8008dcc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	78fb      	ldrb	r3, [r7, #3]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	f7fe fb75 	bl	80074c4 <USBD_LL_DataOutStage>
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b082      	sub	sp, #8
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008df4:	78fa      	ldrb	r2, [r7, #3]
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	440b      	add	r3, r1
 8008e02:	3320      	adds	r3, #32
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	78fb      	ldrb	r3, [r7, #3]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	f7fe fc0e 	bl	800762a <USBD_LL_DataInStage>
}
 8008e0e:	bf00      	nop
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe fd48 	bl	80078ba <USBD_LL_SOF>
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	79db      	ldrb	r3, [r3, #7]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d102      	bne.n	8008e4c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e46:	2300      	movs	r3, #0
 8008e48:	73fb      	strb	r3, [r7, #15]
 8008e4a:	e008      	b.n	8008e5e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	79db      	ldrb	r3, [r3, #7]
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d102      	bne.n	8008e5a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e54:	2301      	movs	r3, #1
 8008e56:	73fb      	strb	r3, [r7, #15]
 8008e58:	e001      	b.n	8008e5e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e5a:	f7f8 facb 	bl	80013f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e64:	7bfa      	ldrb	r2, [r7, #15]
 8008e66:	4611      	mov	r1, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe fce2 	bl	8007832 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe fc8a 	bl	800778e <USBD_LL_Reset>
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fcdd 	bl	8007852 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	6812      	ldr	r2, [r2, #0]
 8008ea6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008eaa:	f043 0301 	orr.w	r3, r3, #1
 8008eae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	7adb      	ldrb	r3, [r3, #11]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008eb8:	4b04      	ldr	r3, [pc, #16]	@ (8008ecc <HAL_PCD_SuspendCallback+0x48>)
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	4a03      	ldr	r2, [pc, #12]	@ (8008ecc <HAL_PCD_SuspendCallback+0x48>)
 8008ebe:	f043 0306 	orr.w	r3, r3, #6
 8008ec2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ec4:	bf00      	nop
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	e000ed00 	.word	0xe000ed00

08008ed0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe fcd3 	bl	800788a <USBD_LL_Resume>
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008efe:	78fa      	ldrb	r2, [r7, #3]
 8008f00:	4611      	mov	r1, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fe fd2b 	bl	800795e <USBD_LL_IsoOUTIncomplete>
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fce7 	bl	80078fa <USBD_LL_IsoINIncomplete>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fd3d 	bl	80079c2 <USBD_LL_DevConnected>
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fe fd3a 	bl	80079d8 <USBD_LL_DevDisconnected>
}
 8008f64:	bf00      	nop
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d13c      	bne.n	8008ff6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f7c:	4a20      	ldr	r2, [pc, #128]	@ (8009000 <USBD_LL_Init+0x94>)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a1e      	ldr	r2, [pc, #120]	@ (8009000 <USBD_LL_Init+0x94>)
 8008f88:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8009000 <USBD_LL_Init+0x94>)
 8008f8e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f94:	4b1a      	ldr	r3, [pc, #104]	@ (8009000 <USBD_LL_Init+0x94>)
 8008f96:	2204      	movs	r2, #4
 8008f98:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f9a:	4b19      	ldr	r3, [pc, #100]	@ (8009000 <USBD_LL_Init+0x94>)
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fa0:	4b17      	ldr	r3, [pc, #92]	@ (8009000 <USBD_LL_Init+0x94>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fa6:	4b16      	ldr	r3, [pc, #88]	@ (8009000 <USBD_LL_Init+0x94>)
 8008fa8:	2202      	movs	r2, #2
 8008faa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fac:	4b14      	ldr	r3, [pc, #80]	@ (8009000 <USBD_LL_Init+0x94>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fb2:	4b13      	ldr	r3, [pc, #76]	@ (8009000 <USBD_LL_Init+0x94>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fb8:	4b11      	ldr	r3, [pc, #68]	@ (8009000 <USBD_LL_Init+0x94>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008fbe:	4b10      	ldr	r3, [pc, #64]	@ (8009000 <USBD_LL_Init+0x94>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8009000 <USBD_LL_Init+0x94>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fca:	480d      	ldr	r0, [pc, #52]	@ (8009000 <USBD_LL_Init+0x94>)
 8008fcc:	f7f9 fd78 	bl	8002ac0 <HAL_PCD_Init>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fd6:	f7f8 fa0d 	bl	80013f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fda:	2180      	movs	r1, #128	@ 0x80
 8008fdc:	4808      	ldr	r0, [pc, #32]	@ (8009000 <USBD_LL_Init+0x94>)
 8008fde:	f7fa ffa4 	bl	8003f2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fe2:	2240      	movs	r2, #64	@ 0x40
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	4806      	ldr	r0, [pc, #24]	@ (8009000 <USBD_LL_Init+0x94>)
 8008fe8:	f7fa ff58 	bl	8003e9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fec:	2280      	movs	r2, #128	@ 0x80
 8008fee:	2101      	movs	r1, #1
 8008ff0:	4803      	ldr	r0, [pc, #12]	@ (8009000 <USBD_LL_Init+0x94>)
 8008ff2:	f7fa ff53 	bl	8003e9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	2000179c 	.word	0x2000179c

08009004 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800901a:	4618      	mov	r0, r3
 800901c:	f7f9 fe5f 	bl	8002cde <HAL_PCD_Start>
 8009020:	4603      	mov	r3, r0
 8009022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	4618      	mov	r0, r3
 8009028:	f000 f942 	bl	80092b0 <USBD_Get_USB_Status>
 800902c:	4603      	mov	r3, r0
 800902e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009030:	7bbb      	ldrb	r3, [r7, #14]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	4608      	mov	r0, r1
 8009044:	4611      	mov	r1, r2
 8009046:	461a      	mov	r2, r3
 8009048:	4603      	mov	r3, r0
 800904a:	70fb      	strb	r3, [r7, #3]
 800904c:	460b      	mov	r3, r1
 800904e:	70bb      	strb	r3, [r7, #2]
 8009050:	4613      	mov	r3, r2
 8009052:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009062:	78bb      	ldrb	r3, [r7, #2]
 8009064:	883a      	ldrh	r2, [r7, #0]
 8009066:	78f9      	ldrb	r1, [r7, #3]
 8009068:	f7fa fb33 	bl	80036d2 <HAL_PCD_EP_Open>
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 f91c 	bl	80092b0 <USBD_Get_USB_Status>
 8009078:	4603      	mov	r3, r0
 800907a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800907c:	7bbb      	ldrb	r3, [r7, #14]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	4611      	mov	r1, r2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fa fb7e 	bl	80037a6 <HAL_PCD_EP_Close>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ae:	7bfb      	ldrb	r3, [r7, #15]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f8fd 	bl	80092b0 <USBD_Get_USB_Status>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fa fc36 	bl	8003954 <HAL_PCD_EP_SetStall>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f8de 	bl	80092b0 <USBD_Get_USB_Status>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800911c:	78fa      	ldrb	r2, [r7, #3]
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f7fa fc7a 	bl	8003a1a <HAL_PCD_EP_ClrStall>
 8009126:	4603      	mov	r3, r0
 8009128:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800912a:	7bfb      	ldrb	r3, [r7, #15]
 800912c:	4618      	mov	r0, r3
 800912e:	f000 f8bf 	bl	80092b0 <USBD_Get_USB_Status>
 8009132:	4603      	mov	r3, r0
 8009134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009136:	7bbb      	ldrb	r3, [r7, #14]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009152:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009158:	2b00      	cmp	r3, #0
 800915a:	da0b      	bge.n	8009174 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009162:	68f9      	ldr	r1, [r7, #12]
 8009164:	4613      	mov	r3, r2
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	440b      	add	r3, r1
 800916e:	3316      	adds	r3, #22
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	e00b      	b.n	800918c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800917a:	68f9      	ldr	r1, [r7, #12]
 800917c:	4613      	mov	r3, r2
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	4413      	add	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	440b      	add	r3, r1
 8009186:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800918a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091b2:	78fa      	ldrb	r2, [r7, #3]
 80091b4:	4611      	mov	r1, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fa fa67 	bl	800368a <HAL_PCD_SetAddress>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 f874 	bl	80092b0 <USBD_Get_USB_Status>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b086      	sub	sp, #24
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	603b      	str	r3, [r7, #0]
 80091e2:	460b      	mov	r3, r1
 80091e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091f4:	7af9      	ldrb	r1, [r7, #11]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	f7fa fb71 	bl	80038e0 <HAL_PCD_EP_Transmit>
 80091fe:	4603      	mov	r3, r0
 8009200:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	4618      	mov	r0, r3
 8009206:	f000 f853 	bl	80092b0 <USBD_Get_USB_Status>
 800920a:	4603      	mov	r3, r0
 800920c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800920e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	460b      	mov	r3, r1
 8009226:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009236:	7af9      	ldrb	r1, [r7, #11]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	f7fa fafd 	bl	800383a <HAL_PCD_EP_Receive>
 8009240:	4603      	mov	r3, r0
 8009242:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009244:	7dfb      	ldrb	r3, [r7, #23]
 8009246:	4618      	mov	r0, r3
 8009248:	f000 f832 	bl	80092b0 <USBD_Get_USB_Status>
 800924c:	4603      	mov	r3, r0
 800924e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009250:	7dbb      	ldrb	r3, [r7, #22]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800926c:	78fa      	ldrb	r2, [r7, #3]
 800926e:	4611      	mov	r1, r2
 8009270:	4618      	mov	r0, r3
 8009272:	f7fa fb1d 	bl	80038b0 <HAL_PCD_EP_GetRxCount>
 8009276:	4603      	mov	r3, r0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009288:	4b03      	ldr	r3, [pc, #12]	@ (8009298 <USBD_static_malloc+0x18>)
}
 800928a:	4618      	mov	r0, r3
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20001c80 	.word	0x20001c80

0800929c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]

}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d817      	bhi.n	80092f4 <USBD_Get_USB_Status+0x44>
 80092c4:	a201      	add	r2, pc, #4	@ (adr r2, 80092cc <USBD_Get_USB_Status+0x1c>)
 80092c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ca:	bf00      	nop
 80092cc:	080092dd 	.word	0x080092dd
 80092d0:	080092e3 	.word	0x080092e3
 80092d4:	080092e9 	.word	0x080092e9
 80092d8:	080092ef 	.word	0x080092ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]
    break;
 80092e0:	e00b      	b.n	80092fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092e2:	2303      	movs	r3, #3
 80092e4:	73fb      	strb	r3, [r7, #15]
    break;
 80092e6:	e008      	b.n	80092fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092e8:	2301      	movs	r3, #1
 80092ea:	73fb      	strb	r3, [r7, #15]
    break;
 80092ec:	e005      	b.n	80092fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092ee:	2303      	movs	r3, #3
 80092f0:	73fb      	strb	r3, [r7, #15]
    break;
 80092f2:	e002      	b.n	80092fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092f4:	2303      	movs	r3, #3
 80092f6:	73fb      	strb	r3, [r7, #15]
    break;
 80092f8:	bf00      	nop
  }
  return usb_status;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <siprintf>:
 8009308:	b40e      	push	{r1, r2, r3}
 800930a:	b510      	push	{r4, lr}
 800930c:	b09d      	sub	sp, #116	@ 0x74
 800930e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009310:	9002      	str	r0, [sp, #8]
 8009312:	9006      	str	r0, [sp, #24]
 8009314:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009318:	480a      	ldr	r0, [pc, #40]	@ (8009344 <siprintf+0x3c>)
 800931a:	9107      	str	r1, [sp, #28]
 800931c:	9104      	str	r1, [sp, #16]
 800931e:	490a      	ldr	r1, [pc, #40]	@ (8009348 <siprintf+0x40>)
 8009320:	f853 2b04 	ldr.w	r2, [r3], #4
 8009324:	9105      	str	r1, [sp, #20]
 8009326:	2400      	movs	r4, #0
 8009328:	a902      	add	r1, sp, #8
 800932a:	6800      	ldr	r0, [r0, #0]
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009330:	f000 f994 	bl	800965c <_svfiprintf_r>
 8009334:	9b02      	ldr	r3, [sp, #8]
 8009336:	701c      	strb	r4, [r3, #0]
 8009338:	b01d      	add	sp, #116	@ 0x74
 800933a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800933e:	b003      	add	sp, #12
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	200000fc 	.word	0x200000fc
 8009348:	ffff0208 	.word	0xffff0208

0800934c <memset>:
 800934c:	4402      	add	r2, r0
 800934e:	4603      	mov	r3, r0
 8009350:	4293      	cmp	r3, r2
 8009352:	d100      	bne.n	8009356 <memset+0xa>
 8009354:	4770      	bx	lr
 8009356:	f803 1b01 	strb.w	r1, [r3], #1
 800935a:	e7f9      	b.n	8009350 <memset+0x4>

0800935c <__errno>:
 800935c:	4b01      	ldr	r3, [pc, #4]	@ (8009364 <__errno+0x8>)
 800935e:	6818      	ldr	r0, [r3, #0]
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	200000fc 	.word	0x200000fc

08009368 <__libc_init_array>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	4d0d      	ldr	r5, [pc, #52]	@ (80093a0 <__libc_init_array+0x38>)
 800936c:	4c0d      	ldr	r4, [pc, #52]	@ (80093a4 <__libc_init_array+0x3c>)
 800936e:	1b64      	subs	r4, r4, r5
 8009370:	10a4      	asrs	r4, r4, #2
 8009372:	2600      	movs	r6, #0
 8009374:	42a6      	cmp	r6, r4
 8009376:	d109      	bne.n	800938c <__libc_init_array+0x24>
 8009378:	4d0b      	ldr	r5, [pc, #44]	@ (80093a8 <__libc_init_array+0x40>)
 800937a:	4c0c      	ldr	r4, [pc, #48]	@ (80093ac <__libc_init_array+0x44>)
 800937c:	f000 fc64 	bl	8009c48 <_init>
 8009380:	1b64      	subs	r4, r4, r5
 8009382:	10a4      	asrs	r4, r4, #2
 8009384:	2600      	movs	r6, #0
 8009386:	42a6      	cmp	r6, r4
 8009388:	d105      	bne.n	8009396 <__libc_init_array+0x2e>
 800938a:	bd70      	pop	{r4, r5, r6, pc}
 800938c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009390:	4798      	blx	r3
 8009392:	3601      	adds	r6, #1
 8009394:	e7ee      	b.n	8009374 <__libc_init_array+0xc>
 8009396:	f855 3b04 	ldr.w	r3, [r5], #4
 800939a:	4798      	blx	r3
 800939c:	3601      	adds	r6, #1
 800939e:	e7f2      	b.n	8009386 <__libc_init_array+0x1e>
 80093a0:	08009d0c 	.word	0x08009d0c
 80093a4:	08009d0c 	.word	0x08009d0c
 80093a8:	08009d0c 	.word	0x08009d0c
 80093ac:	08009d10 	.word	0x08009d10

080093b0 <__retarget_lock_acquire_recursive>:
 80093b0:	4770      	bx	lr

080093b2 <__retarget_lock_release_recursive>:
 80093b2:	4770      	bx	lr

080093b4 <_free_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4605      	mov	r5, r0
 80093b8:	2900      	cmp	r1, #0
 80093ba:	d041      	beq.n	8009440 <_free_r+0x8c>
 80093bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093c0:	1f0c      	subs	r4, r1, #4
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	bfb8      	it	lt
 80093c6:	18e4      	addlt	r4, r4, r3
 80093c8:	f000 f8e0 	bl	800958c <__malloc_lock>
 80093cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009444 <_free_r+0x90>)
 80093ce:	6813      	ldr	r3, [r2, #0]
 80093d0:	b933      	cbnz	r3, 80093e0 <_free_r+0x2c>
 80093d2:	6063      	str	r3, [r4, #4]
 80093d4:	6014      	str	r4, [r2, #0]
 80093d6:	4628      	mov	r0, r5
 80093d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093dc:	f000 b8dc 	b.w	8009598 <__malloc_unlock>
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	d908      	bls.n	80093f6 <_free_r+0x42>
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	1821      	adds	r1, r4, r0
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf01      	itttt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	1809      	addeq	r1, r1, r0
 80093f2:	6021      	streq	r1, [r4, #0]
 80093f4:	e7ed      	b.n	80093d2 <_free_r+0x1e>
 80093f6:	461a      	mov	r2, r3
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	b10b      	cbz	r3, 8009400 <_free_r+0x4c>
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d9fa      	bls.n	80093f6 <_free_r+0x42>
 8009400:	6811      	ldr	r1, [r2, #0]
 8009402:	1850      	adds	r0, r2, r1
 8009404:	42a0      	cmp	r0, r4
 8009406:	d10b      	bne.n	8009420 <_free_r+0x6c>
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	4401      	add	r1, r0
 800940c:	1850      	adds	r0, r2, r1
 800940e:	4283      	cmp	r3, r0
 8009410:	6011      	str	r1, [r2, #0]
 8009412:	d1e0      	bne.n	80093d6 <_free_r+0x22>
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	6053      	str	r3, [r2, #4]
 800941a:	4408      	add	r0, r1
 800941c:	6010      	str	r0, [r2, #0]
 800941e:	e7da      	b.n	80093d6 <_free_r+0x22>
 8009420:	d902      	bls.n	8009428 <_free_r+0x74>
 8009422:	230c      	movs	r3, #12
 8009424:	602b      	str	r3, [r5, #0]
 8009426:	e7d6      	b.n	80093d6 <_free_r+0x22>
 8009428:	6820      	ldr	r0, [r4, #0]
 800942a:	1821      	adds	r1, r4, r0
 800942c:	428b      	cmp	r3, r1
 800942e:	bf04      	itt	eq
 8009430:	6819      	ldreq	r1, [r3, #0]
 8009432:	685b      	ldreq	r3, [r3, #4]
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	bf04      	itt	eq
 8009438:	1809      	addeq	r1, r1, r0
 800943a:	6021      	streq	r1, [r4, #0]
 800943c:	6054      	str	r4, [r2, #4]
 800943e:	e7ca      	b.n	80093d6 <_free_r+0x22>
 8009440:	bd38      	pop	{r3, r4, r5, pc}
 8009442:	bf00      	nop
 8009444:	20001fe4 	.word	0x20001fe4

08009448 <sbrk_aligned>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	4e0f      	ldr	r6, [pc, #60]	@ (8009488 <sbrk_aligned+0x40>)
 800944c:	460c      	mov	r4, r1
 800944e:	6831      	ldr	r1, [r6, #0]
 8009450:	4605      	mov	r5, r0
 8009452:	b911      	cbnz	r1, 800945a <sbrk_aligned+0x12>
 8009454:	f000 fba4 	bl	8009ba0 <_sbrk_r>
 8009458:	6030      	str	r0, [r6, #0]
 800945a:	4621      	mov	r1, r4
 800945c:	4628      	mov	r0, r5
 800945e:	f000 fb9f 	bl	8009ba0 <_sbrk_r>
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	d103      	bne.n	800946e <sbrk_aligned+0x26>
 8009466:	f04f 34ff 	mov.w	r4, #4294967295
 800946a:	4620      	mov	r0, r4
 800946c:	bd70      	pop	{r4, r5, r6, pc}
 800946e:	1cc4      	adds	r4, r0, #3
 8009470:	f024 0403 	bic.w	r4, r4, #3
 8009474:	42a0      	cmp	r0, r4
 8009476:	d0f8      	beq.n	800946a <sbrk_aligned+0x22>
 8009478:	1a21      	subs	r1, r4, r0
 800947a:	4628      	mov	r0, r5
 800947c:	f000 fb90 	bl	8009ba0 <_sbrk_r>
 8009480:	3001      	adds	r0, #1
 8009482:	d1f2      	bne.n	800946a <sbrk_aligned+0x22>
 8009484:	e7ef      	b.n	8009466 <sbrk_aligned+0x1e>
 8009486:	bf00      	nop
 8009488:	20001fe0 	.word	0x20001fe0

0800948c <_malloc_r>:
 800948c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009490:	1ccd      	adds	r5, r1, #3
 8009492:	f025 0503 	bic.w	r5, r5, #3
 8009496:	3508      	adds	r5, #8
 8009498:	2d0c      	cmp	r5, #12
 800949a:	bf38      	it	cc
 800949c:	250c      	movcc	r5, #12
 800949e:	2d00      	cmp	r5, #0
 80094a0:	4606      	mov	r6, r0
 80094a2:	db01      	blt.n	80094a8 <_malloc_r+0x1c>
 80094a4:	42a9      	cmp	r1, r5
 80094a6:	d904      	bls.n	80094b2 <_malloc_r+0x26>
 80094a8:	230c      	movs	r3, #12
 80094aa:	6033      	str	r3, [r6, #0]
 80094ac:	2000      	movs	r0, #0
 80094ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009588 <_malloc_r+0xfc>
 80094b6:	f000 f869 	bl	800958c <__malloc_lock>
 80094ba:	f8d8 3000 	ldr.w	r3, [r8]
 80094be:	461c      	mov	r4, r3
 80094c0:	bb44      	cbnz	r4, 8009514 <_malloc_r+0x88>
 80094c2:	4629      	mov	r1, r5
 80094c4:	4630      	mov	r0, r6
 80094c6:	f7ff ffbf 	bl	8009448 <sbrk_aligned>
 80094ca:	1c43      	adds	r3, r0, #1
 80094cc:	4604      	mov	r4, r0
 80094ce:	d158      	bne.n	8009582 <_malloc_r+0xf6>
 80094d0:	f8d8 4000 	ldr.w	r4, [r8]
 80094d4:	4627      	mov	r7, r4
 80094d6:	2f00      	cmp	r7, #0
 80094d8:	d143      	bne.n	8009562 <_malloc_r+0xd6>
 80094da:	2c00      	cmp	r4, #0
 80094dc:	d04b      	beq.n	8009576 <_malloc_r+0xea>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	4639      	mov	r1, r7
 80094e2:	4630      	mov	r0, r6
 80094e4:	eb04 0903 	add.w	r9, r4, r3
 80094e8:	f000 fb5a 	bl	8009ba0 <_sbrk_r>
 80094ec:	4581      	cmp	r9, r0
 80094ee:	d142      	bne.n	8009576 <_malloc_r+0xea>
 80094f0:	6821      	ldr	r1, [r4, #0]
 80094f2:	1a6d      	subs	r5, r5, r1
 80094f4:	4629      	mov	r1, r5
 80094f6:	4630      	mov	r0, r6
 80094f8:	f7ff ffa6 	bl	8009448 <sbrk_aligned>
 80094fc:	3001      	adds	r0, #1
 80094fe:	d03a      	beq.n	8009576 <_malloc_r+0xea>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	442b      	add	r3, r5
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	f8d8 3000 	ldr.w	r3, [r8]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	bb62      	cbnz	r2, 8009568 <_malloc_r+0xdc>
 800950e:	f8c8 7000 	str.w	r7, [r8]
 8009512:	e00f      	b.n	8009534 <_malloc_r+0xa8>
 8009514:	6822      	ldr	r2, [r4, #0]
 8009516:	1b52      	subs	r2, r2, r5
 8009518:	d420      	bmi.n	800955c <_malloc_r+0xd0>
 800951a:	2a0b      	cmp	r2, #11
 800951c:	d917      	bls.n	800954e <_malloc_r+0xc2>
 800951e:	1961      	adds	r1, r4, r5
 8009520:	42a3      	cmp	r3, r4
 8009522:	6025      	str	r5, [r4, #0]
 8009524:	bf18      	it	ne
 8009526:	6059      	strne	r1, [r3, #4]
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	bf08      	it	eq
 800952c:	f8c8 1000 	streq.w	r1, [r8]
 8009530:	5162      	str	r2, [r4, r5]
 8009532:	604b      	str	r3, [r1, #4]
 8009534:	4630      	mov	r0, r6
 8009536:	f000 f82f 	bl	8009598 <__malloc_unlock>
 800953a:	f104 000b 	add.w	r0, r4, #11
 800953e:	1d23      	adds	r3, r4, #4
 8009540:	f020 0007 	bic.w	r0, r0, #7
 8009544:	1ac2      	subs	r2, r0, r3
 8009546:	bf1c      	itt	ne
 8009548:	1a1b      	subne	r3, r3, r0
 800954a:	50a3      	strne	r3, [r4, r2]
 800954c:	e7af      	b.n	80094ae <_malloc_r+0x22>
 800954e:	6862      	ldr	r2, [r4, #4]
 8009550:	42a3      	cmp	r3, r4
 8009552:	bf0c      	ite	eq
 8009554:	f8c8 2000 	streq.w	r2, [r8]
 8009558:	605a      	strne	r2, [r3, #4]
 800955a:	e7eb      	b.n	8009534 <_malloc_r+0xa8>
 800955c:	4623      	mov	r3, r4
 800955e:	6864      	ldr	r4, [r4, #4]
 8009560:	e7ae      	b.n	80094c0 <_malloc_r+0x34>
 8009562:	463c      	mov	r4, r7
 8009564:	687f      	ldr	r7, [r7, #4]
 8009566:	e7b6      	b.n	80094d6 <_malloc_r+0x4a>
 8009568:	461a      	mov	r2, r3
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	42a3      	cmp	r3, r4
 800956e:	d1fb      	bne.n	8009568 <_malloc_r+0xdc>
 8009570:	2300      	movs	r3, #0
 8009572:	6053      	str	r3, [r2, #4]
 8009574:	e7de      	b.n	8009534 <_malloc_r+0xa8>
 8009576:	230c      	movs	r3, #12
 8009578:	6033      	str	r3, [r6, #0]
 800957a:	4630      	mov	r0, r6
 800957c:	f000 f80c 	bl	8009598 <__malloc_unlock>
 8009580:	e794      	b.n	80094ac <_malloc_r+0x20>
 8009582:	6005      	str	r5, [r0, #0]
 8009584:	e7d6      	b.n	8009534 <_malloc_r+0xa8>
 8009586:	bf00      	nop
 8009588:	20001fe4 	.word	0x20001fe4

0800958c <__malloc_lock>:
 800958c:	4801      	ldr	r0, [pc, #4]	@ (8009594 <__malloc_lock+0x8>)
 800958e:	f7ff bf0f 	b.w	80093b0 <__retarget_lock_acquire_recursive>
 8009592:	bf00      	nop
 8009594:	20001fdc 	.word	0x20001fdc

08009598 <__malloc_unlock>:
 8009598:	4801      	ldr	r0, [pc, #4]	@ (80095a0 <__malloc_unlock+0x8>)
 800959a:	f7ff bf0a 	b.w	80093b2 <__retarget_lock_release_recursive>
 800959e:	bf00      	nop
 80095a0:	20001fdc 	.word	0x20001fdc

080095a4 <__ssputs_r>:
 80095a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a8:	688e      	ldr	r6, [r1, #8]
 80095aa:	461f      	mov	r7, r3
 80095ac:	42be      	cmp	r6, r7
 80095ae:	680b      	ldr	r3, [r1, #0]
 80095b0:	4682      	mov	sl, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	4690      	mov	r8, r2
 80095b6:	d82d      	bhi.n	8009614 <__ssputs_r+0x70>
 80095b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095c0:	d026      	beq.n	8009610 <__ssputs_r+0x6c>
 80095c2:	6965      	ldr	r5, [r4, #20]
 80095c4:	6909      	ldr	r1, [r1, #16]
 80095c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095ca:	eba3 0901 	sub.w	r9, r3, r1
 80095ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095d2:	1c7b      	adds	r3, r7, #1
 80095d4:	444b      	add	r3, r9
 80095d6:	106d      	asrs	r5, r5, #1
 80095d8:	429d      	cmp	r5, r3
 80095da:	bf38      	it	cc
 80095dc:	461d      	movcc	r5, r3
 80095de:	0553      	lsls	r3, r2, #21
 80095e0:	d527      	bpl.n	8009632 <__ssputs_r+0x8e>
 80095e2:	4629      	mov	r1, r5
 80095e4:	f7ff ff52 	bl	800948c <_malloc_r>
 80095e8:	4606      	mov	r6, r0
 80095ea:	b360      	cbz	r0, 8009646 <__ssputs_r+0xa2>
 80095ec:	6921      	ldr	r1, [r4, #16]
 80095ee:	464a      	mov	r2, r9
 80095f0:	f000 fae6 	bl	8009bc0 <memcpy>
 80095f4:	89a3      	ldrh	r3, [r4, #12]
 80095f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095fe:	81a3      	strh	r3, [r4, #12]
 8009600:	6126      	str	r6, [r4, #16]
 8009602:	6165      	str	r5, [r4, #20]
 8009604:	444e      	add	r6, r9
 8009606:	eba5 0509 	sub.w	r5, r5, r9
 800960a:	6026      	str	r6, [r4, #0]
 800960c:	60a5      	str	r5, [r4, #8]
 800960e:	463e      	mov	r6, r7
 8009610:	42be      	cmp	r6, r7
 8009612:	d900      	bls.n	8009616 <__ssputs_r+0x72>
 8009614:	463e      	mov	r6, r7
 8009616:	6820      	ldr	r0, [r4, #0]
 8009618:	4632      	mov	r2, r6
 800961a:	4641      	mov	r1, r8
 800961c:	f000 faa6 	bl	8009b6c <memmove>
 8009620:	68a3      	ldr	r3, [r4, #8]
 8009622:	1b9b      	subs	r3, r3, r6
 8009624:	60a3      	str	r3, [r4, #8]
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	4433      	add	r3, r6
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	2000      	movs	r0, #0
 800962e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009632:	462a      	mov	r2, r5
 8009634:	f000 fad2 	bl	8009bdc <_realloc_r>
 8009638:	4606      	mov	r6, r0
 800963a:	2800      	cmp	r0, #0
 800963c:	d1e0      	bne.n	8009600 <__ssputs_r+0x5c>
 800963e:	6921      	ldr	r1, [r4, #16]
 8009640:	4650      	mov	r0, sl
 8009642:	f7ff feb7 	bl	80093b4 <_free_r>
 8009646:	230c      	movs	r3, #12
 8009648:	f8ca 3000 	str.w	r3, [sl]
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e7e9      	b.n	800962e <__ssputs_r+0x8a>
	...

0800965c <_svfiprintf_r>:
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	4698      	mov	r8, r3
 8009662:	898b      	ldrh	r3, [r1, #12]
 8009664:	061b      	lsls	r3, r3, #24
 8009666:	b09d      	sub	sp, #116	@ 0x74
 8009668:	4607      	mov	r7, r0
 800966a:	460d      	mov	r5, r1
 800966c:	4614      	mov	r4, r2
 800966e:	d510      	bpl.n	8009692 <_svfiprintf_r+0x36>
 8009670:	690b      	ldr	r3, [r1, #16]
 8009672:	b973      	cbnz	r3, 8009692 <_svfiprintf_r+0x36>
 8009674:	2140      	movs	r1, #64	@ 0x40
 8009676:	f7ff ff09 	bl	800948c <_malloc_r>
 800967a:	6028      	str	r0, [r5, #0]
 800967c:	6128      	str	r0, [r5, #16]
 800967e:	b930      	cbnz	r0, 800968e <_svfiprintf_r+0x32>
 8009680:	230c      	movs	r3, #12
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	f04f 30ff 	mov.w	r0, #4294967295
 8009688:	b01d      	add	sp, #116	@ 0x74
 800968a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968e:	2340      	movs	r3, #64	@ 0x40
 8009690:	616b      	str	r3, [r5, #20]
 8009692:	2300      	movs	r3, #0
 8009694:	9309      	str	r3, [sp, #36]	@ 0x24
 8009696:	2320      	movs	r3, #32
 8009698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800969c:	f8cd 800c 	str.w	r8, [sp, #12]
 80096a0:	2330      	movs	r3, #48	@ 0x30
 80096a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009840 <_svfiprintf_r+0x1e4>
 80096a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096aa:	f04f 0901 	mov.w	r9, #1
 80096ae:	4623      	mov	r3, r4
 80096b0:	469a      	mov	sl, r3
 80096b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096b6:	b10a      	cbz	r2, 80096bc <_svfiprintf_r+0x60>
 80096b8:	2a25      	cmp	r2, #37	@ 0x25
 80096ba:	d1f9      	bne.n	80096b0 <_svfiprintf_r+0x54>
 80096bc:	ebba 0b04 	subs.w	fp, sl, r4
 80096c0:	d00b      	beq.n	80096da <_svfiprintf_r+0x7e>
 80096c2:	465b      	mov	r3, fp
 80096c4:	4622      	mov	r2, r4
 80096c6:	4629      	mov	r1, r5
 80096c8:	4638      	mov	r0, r7
 80096ca:	f7ff ff6b 	bl	80095a4 <__ssputs_r>
 80096ce:	3001      	adds	r0, #1
 80096d0:	f000 80a7 	beq.w	8009822 <_svfiprintf_r+0x1c6>
 80096d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096d6:	445a      	add	r2, fp
 80096d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80096da:	f89a 3000 	ldrb.w	r3, [sl]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 809f 	beq.w	8009822 <_svfiprintf_r+0x1c6>
 80096e4:	2300      	movs	r3, #0
 80096e6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ee:	f10a 0a01 	add.w	sl, sl, #1
 80096f2:	9304      	str	r3, [sp, #16]
 80096f4:	9307      	str	r3, [sp, #28]
 80096f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80096fc:	4654      	mov	r4, sl
 80096fe:	2205      	movs	r2, #5
 8009700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009704:	484e      	ldr	r0, [pc, #312]	@ (8009840 <_svfiprintf_r+0x1e4>)
 8009706:	f7f6 fd6b 	bl	80001e0 <memchr>
 800970a:	9a04      	ldr	r2, [sp, #16]
 800970c:	b9d8      	cbnz	r0, 8009746 <_svfiprintf_r+0xea>
 800970e:	06d0      	lsls	r0, r2, #27
 8009710:	bf44      	itt	mi
 8009712:	2320      	movmi	r3, #32
 8009714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009718:	0711      	lsls	r1, r2, #28
 800971a:	bf44      	itt	mi
 800971c:	232b      	movmi	r3, #43	@ 0x2b
 800971e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009722:	f89a 3000 	ldrb.w	r3, [sl]
 8009726:	2b2a      	cmp	r3, #42	@ 0x2a
 8009728:	d015      	beq.n	8009756 <_svfiprintf_r+0xfa>
 800972a:	9a07      	ldr	r2, [sp, #28]
 800972c:	4654      	mov	r4, sl
 800972e:	2000      	movs	r0, #0
 8009730:	f04f 0c0a 	mov.w	ip, #10
 8009734:	4621      	mov	r1, r4
 8009736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800973a:	3b30      	subs	r3, #48	@ 0x30
 800973c:	2b09      	cmp	r3, #9
 800973e:	d94b      	bls.n	80097d8 <_svfiprintf_r+0x17c>
 8009740:	b1b0      	cbz	r0, 8009770 <_svfiprintf_r+0x114>
 8009742:	9207      	str	r2, [sp, #28]
 8009744:	e014      	b.n	8009770 <_svfiprintf_r+0x114>
 8009746:	eba0 0308 	sub.w	r3, r0, r8
 800974a:	fa09 f303 	lsl.w	r3, r9, r3
 800974e:	4313      	orrs	r3, r2
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	46a2      	mov	sl, r4
 8009754:	e7d2      	b.n	80096fc <_svfiprintf_r+0xa0>
 8009756:	9b03      	ldr	r3, [sp, #12]
 8009758:	1d19      	adds	r1, r3, #4
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	9103      	str	r1, [sp, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	bfbb      	ittet	lt
 8009762:	425b      	neglt	r3, r3
 8009764:	f042 0202 	orrlt.w	r2, r2, #2
 8009768:	9307      	strge	r3, [sp, #28]
 800976a:	9307      	strlt	r3, [sp, #28]
 800976c:	bfb8      	it	lt
 800976e:	9204      	strlt	r2, [sp, #16]
 8009770:	7823      	ldrb	r3, [r4, #0]
 8009772:	2b2e      	cmp	r3, #46	@ 0x2e
 8009774:	d10a      	bne.n	800978c <_svfiprintf_r+0x130>
 8009776:	7863      	ldrb	r3, [r4, #1]
 8009778:	2b2a      	cmp	r3, #42	@ 0x2a
 800977a:	d132      	bne.n	80097e2 <_svfiprintf_r+0x186>
 800977c:	9b03      	ldr	r3, [sp, #12]
 800977e:	1d1a      	adds	r2, r3, #4
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	9203      	str	r2, [sp, #12]
 8009784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009788:	3402      	adds	r4, #2
 800978a:	9305      	str	r3, [sp, #20]
 800978c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009850 <_svfiprintf_r+0x1f4>
 8009790:	7821      	ldrb	r1, [r4, #0]
 8009792:	2203      	movs	r2, #3
 8009794:	4650      	mov	r0, sl
 8009796:	f7f6 fd23 	bl	80001e0 <memchr>
 800979a:	b138      	cbz	r0, 80097ac <_svfiprintf_r+0x150>
 800979c:	9b04      	ldr	r3, [sp, #16]
 800979e:	eba0 000a 	sub.w	r0, r0, sl
 80097a2:	2240      	movs	r2, #64	@ 0x40
 80097a4:	4082      	lsls	r2, r0
 80097a6:	4313      	orrs	r3, r2
 80097a8:	3401      	adds	r4, #1
 80097aa:	9304      	str	r3, [sp, #16]
 80097ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b0:	4824      	ldr	r0, [pc, #144]	@ (8009844 <_svfiprintf_r+0x1e8>)
 80097b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097b6:	2206      	movs	r2, #6
 80097b8:	f7f6 fd12 	bl	80001e0 <memchr>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d036      	beq.n	800982e <_svfiprintf_r+0x1d2>
 80097c0:	4b21      	ldr	r3, [pc, #132]	@ (8009848 <_svfiprintf_r+0x1ec>)
 80097c2:	bb1b      	cbnz	r3, 800980c <_svfiprintf_r+0x1b0>
 80097c4:	9b03      	ldr	r3, [sp, #12]
 80097c6:	3307      	adds	r3, #7
 80097c8:	f023 0307 	bic.w	r3, r3, #7
 80097cc:	3308      	adds	r3, #8
 80097ce:	9303      	str	r3, [sp, #12]
 80097d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d2:	4433      	add	r3, r6
 80097d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097d6:	e76a      	b.n	80096ae <_svfiprintf_r+0x52>
 80097d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80097dc:	460c      	mov	r4, r1
 80097de:	2001      	movs	r0, #1
 80097e0:	e7a8      	b.n	8009734 <_svfiprintf_r+0xd8>
 80097e2:	2300      	movs	r3, #0
 80097e4:	3401      	adds	r4, #1
 80097e6:	9305      	str	r3, [sp, #20]
 80097e8:	4619      	mov	r1, r3
 80097ea:	f04f 0c0a 	mov.w	ip, #10
 80097ee:	4620      	mov	r0, r4
 80097f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097f4:	3a30      	subs	r2, #48	@ 0x30
 80097f6:	2a09      	cmp	r2, #9
 80097f8:	d903      	bls.n	8009802 <_svfiprintf_r+0x1a6>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0c6      	beq.n	800978c <_svfiprintf_r+0x130>
 80097fe:	9105      	str	r1, [sp, #20]
 8009800:	e7c4      	b.n	800978c <_svfiprintf_r+0x130>
 8009802:	fb0c 2101 	mla	r1, ip, r1, r2
 8009806:	4604      	mov	r4, r0
 8009808:	2301      	movs	r3, #1
 800980a:	e7f0      	b.n	80097ee <_svfiprintf_r+0x192>
 800980c:	ab03      	add	r3, sp, #12
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	462a      	mov	r2, r5
 8009812:	4b0e      	ldr	r3, [pc, #56]	@ (800984c <_svfiprintf_r+0x1f0>)
 8009814:	a904      	add	r1, sp, #16
 8009816:	4638      	mov	r0, r7
 8009818:	f3af 8000 	nop.w
 800981c:	1c42      	adds	r2, r0, #1
 800981e:	4606      	mov	r6, r0
 8009820:	d1d6      	bne.n	80097d0 <_svfiprintf_r+0x174>
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	065b      	lsls	r3, r3, #25
 8009826:	f53f af2d 	bmi.w	8009684 <_svfiprintf_r+0x28>
 800982a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800982c:	e72c      	b.n	8009688 <_svfiprintf_r+0x2c>
 800982e:	ab03      	add	r3, sp, #12
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	462a      	mov	r2, r5
 8009834:	4b05      	ldr	r3, [pc, #20]	@ (800984c <_svfiprintf_r+0x1f0>)
 8009836:	a904      	add	r1, sp, #16
 8009838:	4638      	mov	r0, r7
 800983a:	f000 f879 	bl	8009930 <_printf_i>
 800983e:	e7ed      	b.n	800981c <_svfiprintf_r+0x1c0>
 8009840:	08009cd0 	.word	0x08009cd0
 8009844:	08009cda 	.word	0x08009cda
 8009848:	00000000 	.word	0x00000000
 800984c:	080095a5 	.word	0x080095a5
 8009850:	08009cd6 	.word	0x08009cd6

08009854 <_printf_common>:
 8009854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009858:	4616      	mov	r6, r2
 800985a:	4698      	mov	r8, r3
 800985c:	688a      	ldr	r2, [r1, #8]
 800985e:	690b      	ldr	r3, [r1, #16]
 8009860:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009864:	4293      	cmp	r3, r2
 8009866:	bfb8      	it	lt
 8009868:	4613      	movlt	r3, r2
 800986a:	6033      	str	r3, [r6, #0]
 800986c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009870:	4607      	mov	r7, r0
 8009872:	460c      	mov	r4, r1
 8009874:	b10a      	cbz	r2, 800987a <_printf_common+0x26>
 8009876:	3301      	adds	r3, #1
 8009878:	6033      	str	r3, [r6, #0]
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	0699      	lsls	r1, r3, #26
 800987e:	bf42      	ittt	mi
 8009880:	6833      	ldrmi	r3, [r6, #0]
 8009882:	3302      	addmi	r3, #2
 8009884:	6033      	strmi	r3, [r6, #0]
 8009886:	6825      	ldr	r5, [r4, #0]
 8009888:	f015 0506 	ands.w	r5, r5, #6
 800988c:	d106      	bne.n	800989c <_printf_common+0x48>
 800988e:	f104 0a19 	add.w	sl, r4, #25
 8009892:	68e3      	ldr	r3, [r4, #12]
 8009894:	6832      	ldr	r2, [r6, #0]
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	42ab      	cmp	r3, r5
 800989a:	dc26      	bgt.n	80098ea <_printf_common+0x96>
 800989c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098a0:	6822      	ldr	r2, [r4, #0]
 80098a2:	3b00      	subs	r3, #0
 80098a4:	bf18      	it	ne
 80098a6:	2301      	movne	r3, #1
 80098a8:	0692      	lsls	r2, r2, #26
 80098aa:	d42b      	bmi.n	8009904 <_printf_common+0xb0>
 80098ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098b0:	4641      	mov	r1, r8
 80098b2:	4638      	mov	r0, r7
 80098b4:	47c8      	blx	r9
 80098b6:	3001      	adds	r0, #1
 80098b8:	d01e      	beq.n	80098f8 <_printf_common+0xa4>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	6922      	ldr	r2, [r4, #16]
 80098be:	f003 0306 	and.w	r3, r3, #6
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	bf02      	ittt	eq
 80098c6:	68e5      	ldreq	r5, [r4, #12]
 80098c8:	6833      	ldreq	r3, [r6, #0]
 80098ca:	1aed      	subeq	r5, r5, r3
 80098cc:	68a3      	ldr	r3, [r4, #8]
 80098ce:	bf0c      	ite	eq
 80098d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098d4:	2500      	movne	r5, #0
 80098d6:	4293      	cmp	r3, r2
 80098d8:	bfc4      	itt	gt
 80098da:	1a9b      	subgt	r3, r3, r2
 80098dc:	18ed      	addgt	r5, r5, r3
 80098de:	2600      	movs	r6, #0
 80098e0:	341a      	adds	r4, #26
 80098e2:	42b5      	cmp	r5, r6
 80098e4:	d11a      	bne.n	800991c <_printf_common+0xc8>
 80098e6:	2000      	movs	r0, #0
 80098e8:	e008      	b.n	80098fc <_printf_common+0xa8>
 80098ea:	2301      	movs	r3, #1
 80098ec:	4652      	mov	r2, sl
 80098ee:	4641      	mov	r1, r8
 80098f0:	4638      	mov	r0, r7
 80098f2:	47c8      	blx	r9
 80098f4:	3001      	adds	r0, #1
 80098f6:	d103      	bne.n	8009900 <_printf_common+0xac>
 80098f8:	f04f 30ff 	mov.w	r0, #4294967295
 80098fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009900:	3501      	adds	r5, #1
 8009902:	e7c6      	b.n	8009892 <_printf_common+0x3e>
 8009904:	18e1      	adds	r1, r4, r3
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	2030      	movs	r0, #48	@ 0x30
 800990a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800990e:	4422      	add	r2, r4
 8009910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009914:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009918:	3302      	adds	r3, #2
 800991a:	e7c7      	b.n	80098ac <_printf_common+0x58>
 800991c:	2301      	movs	r3, #1
 800991e:	4622      	mov	r2, r4
 8009920:	4641      	mov	r1, r8
 8009922:	4638      	mov	r0, r7
 8009924:	47c8      	blx	r9
 8009926:	3001      	adds	r0, #1
 8009928:	d0e6      	beq.n	80098f8 <_printf_common+0xa4>
 800992a:	3601      	adds	r6, #1
 800992c:	e7d9      	b.n	80098e2 <_printf_common+0x8e>
	...

08009930 <_printf_i>:
 8009930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009934:	7e0f      	ldrb	r7, [r1, #24]
 8009936:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009938:	2f78      	cmp	r7, #120	@ 0x78
 800993a:	4691      	mov	r9, r2
 800993c:	4680      	mov	r8, r0
 800993e:	460c      	mov	r4, r1
 8009940:	469a      	mov	sl, r3
 8009942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009946:	d807      	bhi.n	8009958 <_printf_i+0x28>
 8009948:	2f62      	cmp	r7, #98	@ 0x62
 800994a:	d80a      	bhi.n	8009962 <_printf_i+0x32>
 800994c:	2f00      	cmp	r7, #0
 800994e:	f000 80d1 	beq.w	8009af4 <_printf_i+0x1c4>
 8009952:	2f58      	cmp	r7, #88	@ 0x58
 8009954:	f000 80b8 	beq.w	8009ac8 <_printf_i+0x198>
 8009958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800995c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009960:	e03a      	b.n	80099d8 <_printf_i+0xa8>
 8009962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009966:	2b15      	cmp	r3, #21
 8009968:	d8f6      	bhi.n	8009958 <_printf_i+0x28>
 800996a:	a101      	add	r1, pc, #4	@ (adr r1, 8009970 <_printf_i+0x40>)
 800996c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009970:	080099c9 	.word	0x080099c9
 8009974:	080099dd 	.word	0x080099dd
 8009978:	08009959 	.word	0x08009959
 800997c:	08009959 	.word	0x08009959
 8009980:	08009959 	.word	0x08009959
 8009984:	08009959 	.word	0x08009959
 8009988:	080099dd 	.word	0x080099dd
 800998c:	08009959 	.word	0x08009959
 8009990:	08009959 	.word	0x08009959
 8009994:	08009959 	.word	0x08009959
 8009998:	08009959 	.word	0x08009959
 800999c:	08009adb 	.word	0x08009adb
 80099a0:	08009a07 	.word	0x08009a07
 80099a4:	08009a95 	.word	0x08009a95
 80099a8:	08009959 	.word	0x08009959
 80099ac:	08009959 	.word	0x08009959
 80099b0:	08009afd 	.word	0x08009afd
 80099b4:	08009959 	.word	0x08009959
 80099b8:	08009a07 	.word	0x08009a07
 80099bc:	08009959 	.word	0x08009959
 80099c0:	08009959 	.word	0x08009959
 80099c4:	08009a9d 	.word	0x08009a9d
 80099c8:	6833      	ldr	r3, [r6, #0]
 80099ca:	1d1a      	adds	r2, r3, #4
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6032      	str	r2, [r6, #0]
 80099d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80099d8:	2301      	movs	r3, #1
 80099da:	e09c      	b.n	8009b16 <_printf_i+0x1e6>
 80099dc:	6833      	ldr	r3, [r6, #0]
 80099de:	6820      	ldr	r0, [r4, #0]
 80099e0:	1d19      	adds	r1, r3, #4
 80099e2:	6031      	str	r1, [r6, #0]
 80099e4:	0606      	lsls	r6, r0, #24
 80099e6:	d501      	bpl.n	80099ec <_printf_i+0xbc>
 80099e8:	681d      	ldr	r5, [r3, #0]
 80099ea:	e003      	b.n	80099f4 <_printf_i+0xc4>
 80099ec:	0645      	lsls	r5, r0, #25
 80099ee:	d5fb      	bpl.n	80099e8 <_printf_i+0xb8>
 80099f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80099f4:	2d00      	cmp	r5, #0
 80099f6:	da03      	bge.n	8009a00 <_printf_i+0xd0>
 80099f8:	232d      	movs	r3, #45	@ 0x2d
 80099fa:	426d      	negs	r5, r5
 80099fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a00:	4858      	ldr	r0, [pc, #352]	@ (8009b64 <_printf_i+0x234>)
 8009a02:	230a      	movs	r3, #10
 8009a04:	e011      	b.n	8009a2a <_printf_i+0xfa>
 8009a06:	6821      	ldr	r1, [r4, #0]
 8009a08:	6833      	ldr	r3, [r6, #0]
 8009a0a:	0608      	lsls	r0, r1, #24
 8009a0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a10:	d402      	bmi.n	8009a18 <_printf_i+0xe8>
 8009a12:	0649      	lsls	r1, r1, #25
 8009a14:	bf48      	it	mi
 8009a16:	b2ad      	uxthmi	r5, r5
 8009a18:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a1a:	4852      	ldr	r0, [pc, #328]	@ (8009b64 <_printf_i+0x234>)
 8009a1c:	6033      	str	r3, [r6, #0]
 8009a1e:	bf14      	ite	ne
 8009a20:	230a      	movne	r3, #10
 8009a22:	2308      	moveq	r3, #8
 8009a24:	2100      	movs	r1, #0
 8009a26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a2a:	6866      	ldr	r6, [r4, #4]
 8009a2c:	60a6      	str	r6, [r4, #8]
 8009a2e:	2e00      	cmp	r6, #0
 8009a30:	db05      	blt.n	8009a3e <_printf_i+0x10e>
 8009a32:	6821      	ldr	r1, [r4, #0]
 8009a34:	432e      	orrs	r6, r5
 8009a36:	f021 0104 	bic.w	r1, r1, #4
 8009a3a:	6021      	str	r1, [r4, #0]
 8009a3c:	d04b      	beq.n	8009ad6 <_printf_i+0x1a6>
 8009a3e:	4616      	mov	r6, r2
 8009a40:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a44:	fb03 5711 	mls	r7, r3, r1, r5
 8009a48:	5dc7      	ldrb	r7, [r0, r7]
 8009a4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a4e:	462f      	mov	r7, r5
 8009a50:	42bb      	cmp	r3, r7
 8009a52:	460d      	mov	r5, r1
 8009a54:	d9f4      	bls.n	8009a40 <_printf_i+0x110>
 8009a56:	2b08      	cmp	r3, #8
 8009a58:	d10b      	bne.n	8009a72 <_printf_i+0x142>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	07df      	lsls	r7, r3, #31
 8009a5e:	d508      	bpl.n	8009a72 <_printf_i+0x142>
 8009a60:	6923      	ldr	r3, [r4, #16]
 8009a62:	6861      	ldr	r1, [r4, #4]
 8009a64:	4299      	cmp	r1, r3
 8009a66:	bfde      	ittt	le
 8009a68:	2330      	movle	r3, #48	@ 0x30
 8009a6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a72:	1b92      	subs	r2, r2, r6
 8009a74:	6122      	str	r2, [r4, #16]
 8009a76:	f8cd a000 	str.w	sl, [sp]
 8009a7a:	464b      	mov	r3, r9
 8009a7c:	aa03      	add	r2, sp, #12
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4640      	mov	r0, r8
 8009a82:	f7ff fee7 	bl	8009854 <_printf_common>
 8009a86:	3001      	adds	r0, #1
 8009a88:	d14a      	bne.n	8009b20 <_printf_i+0x1f0>
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8e:	b004      	add	sp, #16
 8009a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	f043 0320 	orr.w	r3, r3, #32
 8009a9a:	6023      	str	r3, [r4, #0]
 8009a9c:	4832      	ldr	r0, [pc, #200]	@ (8009b68 <_printf_i+0x238>)
 8009a9e:	2778      	movs	r7, #120	@ 0x78
 8009aa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	6831      	ldr	r1, [r6, #0]
 8009aa8:	061f      	lsls	r7, r3, #24
 8009aaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8009aae:	d402      	bmi.n	8009ab6 <_printf_i+0x186>
 8009ab0:	065f      	lsls	r7, r3, #25
 8009ab2:	bf48      	it	mi
 8009ab4:	b2ad      	uxthmi	r5, r5
 8009ab6:	6031      	str	r1, [r6, #0]
 8009ab8:	07d9      	lsls	r1, r3, #31
 8009aba:	bf44      	itt	mi
 8009abc:	f043 0320 	orrmi.w	r3, r3, #32
 8009ac0:	6023      	strmi	r3, [r4, #0]
 8009ac2:	b11d      	cbz	r5, 8009acc <_printf_i+0x19c>
 8009ac4:	2310      	movs	r3, #16
 8009ac6:	e7ad      	b.n	8009a24 <_printf_i+0xf4>
 8009ac8:	4826      	ldr	r0, [pc, #152]	@ (8009b64 <_printf_i+0x234>)
 8009aca:	e7e9      	b.n	8009aa0 <_printf_i+0x170>
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	f023 0320 	bic.w	r3, r3, #32
 8009ad2:	6023      	str	r3, [r4, #0]
 8009ad4:	e7f6      	b.n	8009ac4 <_printf_i+0x194>
 8009ad6:	4616      	mov	r6, r2
 8009ad8:	e7bd      	b.n	8009a56 <_printf_i+0x126>
 8009ada:	6833      	ldr	r3, [r6, #0]
 8009adc:	6825      	ldr	r5, [r4, #0]
 8009ade:	6961      	ldr	r1, [r4, #20]
 8009ae0:	1d18      	adds	r0, r3, #4
 8009ae2:	6030      	str	r0, [r6, #0]
 8009ae4:	062e      	lsls	r6, r5, #24
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	d501      	bpl.n	8009aee <_printf_i+0x1be>
 8009aea:	6019      	str	r1, [r3, #0]
 8009aec:	e002      	b.n	8009af4 <_printf_i+0x1c4>
 8009aee:	0668      	lsls	r0, r5, #25
 8009af0:	d5fb      	bpl.n	8009aea <_printf_i+0x1ba>
 8009af2:	8019      	strh	r1, [r3, #0]
 8009af4:	2300      	movs	r3, #0
 8009af6:	6123      	str	r3, [r4, #16]
 8009af8:	4616      	mov	r6, r2
 8009afa:	e7bc      	b.n	8009a76 <_printf_i+0x146>
 8009afc:	6833      	ldr	r3, [r6, #0]
 8009afe:	1d1a      	adds	r2, r3, #4
 8009b00:	6032      	str	r2, [r6, #0]
 8009b02:	681e      	ldr	r6, [r3, #0]
 8009b04:	6862      	ldr	r2, [r4, #4]
 8009b06:	2100      	movs	r1, #0
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7f6 fb69 	bl	80001e0 <memchr>
 8009b0e:	b108      	cbz	r0, 8009b14 <_printf_i+0x1e4>
 8009b10:	1b80      	subs	r0, r0, r6
 8009b12:	6060      	str	r0, [r4, #4]
 8009b14:	6863      	ldr	r3, [r4, #4]
 8009b16:	6123      	str	r3, [r4, #16]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b1e:	e7aa      	b.n	8009a76 <_printf_i+0x146>
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	4632      	mov	r2, r6
 8009b24:	4649      	mov	r1, r9
 8009b26:	4640      	mov	r0, r8
 8009b28:	47d0      	blx	sl
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	d0ad      	beq.n	8009a8a <_printf_i+0x15a>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	079b      	lsls	r3, r3, #30
 8009b32:	d413      	bmi.n	8009b5c <_printf_i+0x22c>
 8009b34:	68e0      	ldr	r0, [r4, #12]
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	4298      	cmp	r0, r3
 8009b3a:	bfb8      	it	lt
 8009b3c:	4618      	movlt	r0, r3
 8009b3e:	e7a6      	b.n	8009a8e <_printf_i+0x15e>
 8009b40:	2301      	movs	r3, #1
 8009b42:	4632      	mov	r2, r6
 8009b44:	4649      	mov	r1, r9
 8009b46:	4640      	mov	r0, r8
 8009b48:	47d0      	blx	sl
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d09d      	beq.n	8009a8a <_printf_i+0x15a>
 8009b4e:	3501      	adds	r5, #1
 8009b50:	68e3      	ldr	r3, [r4, #12]
 8009b52:	9903      	ldr	r1, [sp, #12]
 8009b54:	1a5b      	subs	r3, r3, r1
 8009b56:	42ab      	cmp	r3, r5
 8009b58:	dcf2      	bgt.n	8009b40 <_printf_i+0x210>
 8009b5a:	e7eb      	b.n	8009b34 <_printf_i+0x204>
 8009b5c:	2500      	movs	r5, #0
 8009b5e:	f104 0619 	add.w	r6, r4, #25
 8009b62:	e7f5      	b.n	8009b50 <_printf_i+0x220>
 8009b64:	08009ce1 	.word	0x08009ce1
 8009b68:	08009cf2 	.word	0x08009cf2

08009b6c <memmove>:
 8009b6c:	4288      	cmp	r0, r1
 8009b6e:	b510      	push	{r4, lr}
 8009b70:	eb01 0402 	add.w	r4, r1, r2
 8009b74:	d902      	bls.n	8009b7c <memmove+0x10>
 8009b76:	4284      	cmp	r4, r0
 8009b78:	4623      	mov	r3, r4
 8009b7a:	d807      	bhi.n	8009b8c <memmove+0x20>
 8009b7c:	1e43      	subs	r3, r0, #1
 8009b7e:	42a1      	cmp	r1, r4
 8009b80:	d008      	beq.n	8009b94 <memmove+0x28>
 8009b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b8a:	e7f8      	b.n	8009b7e <memmove+0x12>
 8009b8c:	4402      	add	r2, r0
 8009b8e:	4601      	mov	r1, r0
 8009b90:	428a      	cmp	r2, r1
 8009b92:	d100      	bne.n	8009b96 <memmove+0x2a>
 8009b94:	bd10      	pop	{r4, pc}
 8009b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b9e:	e7f7      	b.n	8009b90 <memmove+0x24>

08009ba0 <_sbrk_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d06      	ldr	r5, [pc, #24]	@ (8009bbc <_sbrk_r+0x1c>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	f7f7 fdbc 	bl	8001728 <_sbrk>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_sbrk_r+0x1a>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_sbrk_r+0x1a>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	20001fd8 	.word	0x20001fd8

08009bc0 <memcpy>:
 8009bc0:	440a      	add	r2, r1
 8009bc2:	4291      	cmp	r1, r2
 8009bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bc8:	d100      	bne.n	8009bcc <memcpy+0xc>
 8009bca:	4770      	bx	lr
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bd6:	4291      	cmp	r1, r2
 8009bd8:	d1f9      	bne.n	8009bce <memcpy+0xe>
 8009bda:	bd10      	pop	{r4, pc}

08009bdc <_realloc_r>:
 8009bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be0:	4607      	mov	r7, r0
 8009be2:	4614      	mov	r4, r2
 8009be4:	460d      	mov	r5, r1
 8009be6:	b921      	cbnz	r1, 8009bf2 <_realloc_r+0x16>
 8009be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bec:	4611      	mov	r1, r2
 8009bee:	f7ff bc4d 	b.w	800948c <_malloc_r>
 8009bf2:	b92a      	cbnz	r2, 8009c00 <_realloc_r+0x24>
 8009bf4:	f7ff fbde 	bl	80093b4 <_free_r>
 8009bf8:	4625      	mov	r5, r4
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c00:	f000 f81a 	bl	8009c38 <_malloc_usable_size_r>
 8009c04:	4284      	cmp	r4, r0
 8009c06:	4606      	mov	r6, r0
 8009c08:	d802      	bhi.n	8009c10 <_realloc_r+0x34>
 8009c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c0e:	d8f4      	bhi.n	8009bfa <_realloc_r+0x1e>
 8009c10:	4621      	mov	r1, r4
 8009c12:	4638      	mov	r0, r7
 8009c14:	f7ff fc3a 	bl	800948c <_malloc_r>
 8009c18:	4680      	mov	r8, r0
 8009c1a:	b908      	cbnz	r0, 8009c20 <_realloc_r+0x44>
 8009c1c:	4645      	mov	r5, r8
 8009c1e:	e7ec      	b.n	8009bfa <_realloc_r+0x1e>
 8009c20:	42b4      	cmp	r4, r6
 8009c22:	4622      	mov	r2, r4
 8009c24:	4629      	mov	r1, r5
 8009c26:	bf28      	it	cs
 8009c28:	4632      	movcs	r2, r6
 8009c2a:	f7ff ffc9 	bl	8009bc0 <memcpy>
 8009c2e:	4629      	mov	r1, r5
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7ff fbbf 	bl	80093b4 <_free_r>
 8009c36:	e7f1      	b.n	8009c1c <_realloc_r+0x40>

08009c38 <_malloc_usable_size_r>:
 8009c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c3c:	1f18      	subs	r0, r3, #4
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	bfbc      	itt	lt
 8009c42:	580b      	ldrlt	r3, [r1, r0]
 8009c44:	18c0      	addlt	r0, r0, r3
 8009c46:	4770      	bx	lr

08009c48 <_init>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr

08009c54 <_fini>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr
