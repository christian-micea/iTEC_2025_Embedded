
Bluetooth_test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d28  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009eb0  08009eb0  0000aeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ecc  08009ecc  0000b080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009ecc  08009ecc  0000aecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ed4  08009ed4  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed4  08009ed4  0000aed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ed8  08009ed8  0000aed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009edc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b080  2**0
                  CONTENTS
 10 .bss          00000a64  20000080  20000080  0000b080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ae4  20000ae4  0000b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ea4  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e72  00000000  00000000  00023f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00027dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6a  00000000  00000000  000291c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002447c  00000000  00000000  0002a132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba7b  00000000  00000000  0004e5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce299  00000000  00000000  0006a029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001382c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000570c  00000000  00000000  00138308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0013da14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e98 	.word	0x08009e98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08009e98 	.word	0x08009e98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fcbc 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f820 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f946 	bl	8000790 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f886 	bl	8000614 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8b2 	bl	8000670 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8e0 	bl	80006d0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f009 f86c 	bl	80095ec <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f912 	bl	800073c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //char message[] = "STM32 Bluetooth LED Control Ready\r\n";
  //HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

  //1 == no. of bytes to be received until triggering the interrupt
  HAL_UART_Receive_IT(&huart2, &rxData, 1); //initiate interrupt-driven data for a UART Peripheral
 8000518:	2201      	movs	r2, #1
 800051a:	4907      	ldr	r1, [pc, #28]	@ (8000538 <main+0x44>)
 800051c:	4807      	ldr	r0, [pc, #28]	@ (800053c <main+0x48>)
 800051e:	f004 fefb 	bl	8005318 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000522:	f009 f889 	bl	8009638 <MX_USB_HOST_Process>
    //HAL_UART_Transmit(
    //HAL_UART_Receive_IT()

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive(&huart2, (uint8_t *) &rxData, 1, 100);
 8000526:	2364      	movs	r3, #100	@ 0x64
 8000528:	2201      	movs	r2, #1
 800052a:	4903      	ldr	r1, [pc, #12]	@ (8000538 <main+0x44>)
 800052c:	4803      	ldr	r0, [pc, #12]	@ (800053c <main+0x48>)
 800052e:	f004 fe5c 	bl	80051ea <HAL_UART_Receive>
    MX_USB_HOST_Process();
 8000532:	bf00      	nop
 8000534:	e7f5      	b.n	8000522 <main+0x2e>
 8000536:	bf00      	nop
 8000538:	20000000 	.word	0x20000000
 800053c:	20000190 	.word	0x20000190

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f009 fc14 	bl	8009d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	@ (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	@ (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	@ (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	@ (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 ff5c 	bl	8004484 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 fa0b 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 f9bd 	bl	8004974 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000600:	f000 f9f4 	bl	80009ec <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	@ 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2C1_Init+0x50>)
 800061a:	4a13      	ldr	r2, [pc, #76]	@ (8000668 <MX_I2C1_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000620:	4a12      	ldr	r2, [pc, #72]	@ (800066c <MX_I2C1_Init+0x58>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000632:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000652:	f003 f933 	bl	80038bc <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 f9c6 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000009c 	.word	0x2000009c
 8000668:	40005400 	.word	0x40005400
 800066c:	000186a0 	.word	0x000186a0

08000670 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_I2S3_Init+0x54>)
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <MX_I2S3_Init+0x58>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800067a:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000680:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_I2S3_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_I2S3_Init+0x54>)
 8000690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000694:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <MX_I2S3_Init+0x54>)
 8000698:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <MX_I2S3_Init+0x5c>)
 800069a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_I2S3_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <MX_I2S3_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_I2S3_Init+0x54>)
 80006b0:	f003 fa48 	bl	8003b44 <HAL_I2S_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ba:	f000 f997 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000f0 	.word	0x200000f0
 80006c8:	40003c00 	.word	0x40003c00
 80006cc:	00017700 	.word	0x00017700

080006d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <MX_SPI1_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_SPI1_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000722:	f004 fc89 	bl	8005038 <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 f95e 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000138 	.word	0x20000138
 8000738:	40013000 	.word	0x40013000

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	@ (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f004 fce9 	bl	800514a <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f935 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000190 	.word	0x20000190
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4b72      	ldr	r3, [pc, #456]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a71      	ldr	r2, [pc, #452]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b6f      	ldr	r3, [pc, #444]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b6b      	ldr	r3, [pc, #428]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a6a      	ldr	r2, [pc, #424]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b68      	ldr	r3, [pc, #416]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b64      	ldr	r3, [pc, #400]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a63      	ldr	r2, [pc, #396]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b61      	ldr	r3, [pc, #388]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b5d      	ldr	r3, [pc, #372]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a5c      	ldr	r2, [pc, #368]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b5a      	ldr	r3, [pc, #360]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b56      	ldr	r3, [pc, #344]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a55      	ldr	r2, [pc, #340]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b53      	ldr	r3, [pc, #332]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b4f      	ldr	r3, [pc, #316]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a4e      	ldr	r2, [pc, #312]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b4c      	ldr	r3, [pc, #304]	@ (8000974 <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4849      	ldr	r0, [pc, #292]	@ (8000978 <MX_GPIO_Init+0x1e8>)
 8000854:	f000 fee4 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	4847      	ldr	r0, [pc, #284]	@ (800097c <MX_GPIO_Init+0x1ec>)
 800085e:	f000 fedf 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000862:	2200      	movs	r2, #0
 8000864:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000868:	4845      	ldr	r0, [pc, #276]	@ (8000980 <MX_GPIO_Init+0x1f0>)
 800086a:	f000 fed9 	bl	8001620 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	483c      	ldr	r0, [pc, #240]	@ (8000978 <MX_GPIO_Init+0x1e8>)
 8000886:	f000 fd2f 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4836      	ldr	r0, [pc, #216]	@ (800097c <MX_GPIO_Init+0x1ec>)
 80008a2:	f000 fd21 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	482e      	ldr	r0, [pc, #184]	@ (800097c <MX_GPIO_Init+0x1ec>)
 80008c2:	f000 fd11 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	482a      	ldr	r0, [pc, #168]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80008dc:	f000 fd04 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e0:	2304      	movs	r3, #4
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4825      	ldr	r0, [pc, #148]	@ (8000988 <MX_GPIO_Init+0x1f8>)
 80008f4:	f000 fcf8 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090a:	2305      	movs	r3, #5
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	481c      	ldr	r0, [pc, #112]	@ (8000988 <MX_GPIO_Init+0x1f8>)
 8000916:	f000 fce7 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800091e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4813      	ldr	r0, [pc, #76]	@ (8000980 <MX_GPIO_Init+0x1f0>)
 8000934:	f000 fcd8 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000938:	2320      	movs	r3, #32
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <MX_GPIO_Init+0x1f0>)
 800094c:	f000 fccc 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000950:	2302      	movs	r3, #2
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000954:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_GPIO_Init+0x1e8>)
 8000966:	f000 fcbf 	bl	80012e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	@ 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40021000 	.word	0x40021000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020c00 	.word	0x40020c00
 8000984:	40020000 	.word	0x40020000
 8000988:	40020400 	.word	0x40020400

0800098c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <HAL_UART_RxCpltCallback+0x50>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d119      	bne.n	80009d2 <HAL_UART_RxCpltCallback+0x46>
        if(rxData == 'O'){
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HAL_UART_RxCpltCallback+0x54>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b4f      	cmp	r3, #79	@ 0x4f
 80009a4:	d106      	bne.n	80009b4 <HAL_UART_RxCpltCallback+0x28>
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ac:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <HAL_UART_RxCpltCallback+0x58>)
 80009ae:	f000 fe37 	bl	8001620 <HAL_GPIO_WritePin>
 80009b2:	e009      	b.n	80009c8 <HAL_UART_RxCpltCallback+0x3c>
        }
        else if(rxData == 'X'){
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <HAL_UART_RxCpltCallback+0x54>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b58      	cmp	r3, #88	@ 0x58
 80009ba:	d105      	bne.n	80009c8 <HAL_UART_RxCpltCallback+0x3c>
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009c2:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <HAL_UART_RxCpltCallback+0x58>)
 80009c4:	f000 fe2c 	bl	8001620 <HAL_GPIO_WritePin>
        }

        // Restart receiving after command
        HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	4905      	ldr	r1, [pc, #20]	@ (80009e0 <HAL_UART_RxCpltCallback+0x54>)
 80009cc:	4806      	ldr	r0, [pc, #24]	@ (80009e8 <HAL_UART_RxCpltCallback+0x5c>)
 80009ce:	f004 fca3 	bl	8005318 <HAL_UART_Receive_IT>
    }
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40004400 	.word	0x40004400
 80009e0:	20000000 	.word	0x20000000
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	20000190 	.word	0x20000190

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f000 fb82 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	@ (8000acc <HAL_I2C_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12c      	bne.n	8000ac4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a17      	ldr	r2, [pc, #92]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a86:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8c:	2312      	movs	r3, #18
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <HAL_I2C_MspInit+0x8c>)
 8000aa4:	f000 fc20 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	4a07      	ldr	r2, [pc, #28]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	@ 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	@ 0x38
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a31      	ldr	r2, [pc, #196]	@ (8000bc8 <HAL_I2S_MspInit+0xf0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d15a      	bne.n	8000bbe <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b0c:	23c0      	movs	r3, #192	@ 0xc0
 8000b0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f004 f94b 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b24:	f7ff ff62 	bl	80009ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	4a26      	ldr	r2, [pc, #152]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b38:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b54:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a18      	ldr	r2, [pc, #96]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <HAL_I2S_MspInit+0xf4>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b8c:	2306      	movs	r3, #6
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	480e      	ldr	r0, [pc, #56]	@ (8000bd0 <HAL_I2S_MspInit+0xf8>)
 8000b98:	f000 fba6 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b9c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <HAL_I2S_MspInit+0xfc>)
 8000bba:	f000 fb95 	bl	80012e8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	@ 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40003c00 	.word	0x40003c00
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020800 	.word	0x40020800

08000bd8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	@ (8000c5c <HAL_SPI_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12b      	bne.n	8000c52 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	4a17      	ldr	r2, [pc, #92]	@ (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c32:	23e0      	movs	r3, #224	@ 0xe0
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c42:	2305      	movs	r3, #5
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <HAL_SPI_MspInit+0x8c>)
 8000c4e:	f000 fb4b 	bl	80012e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	@ 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40013000 	.word	0x40013000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	@ 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1d      	ldr	r2, [pc, #116]	@ (8000cfc <HAL_UART_MspInit+0x94>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d133      	bne.n	8000cf2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <HAL_UART_MspInit+0x98>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a1b      	ldr	r2, [pc, #108]	@ (8000d00 <HAL_UART_MspInit+0x98>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <HAL_UART_MspInit+0x98>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_UART_MspInit+0x98>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a14      	ldr	r2, [pc, #80]	@ (8000d00 <HAL_UART_MspInit+0x98>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <HAL_UART_MspInit+0x98>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4809      	ldr	r0, [pc, #36]	@ (8000d04 <HAL_UART_MspInit+0x9c>)
 8000cde:	f000 fb03 	bl	80012e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2026      	movs	r0, #38	@ 0x26
 8000ce8:	f000 fa35 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cec:	2026      	movs	r0, #38	@ 0x26
 8000cee:	f000 fa4e 	bl	800118e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <NMI_Handler+0x4>

08000d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <MemManage_Handler+0x4>

08000d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5e:	f000 f8db 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <USART2_IRQHandler+0x10>)
 8000d6e:	f004 faf9 	bl	8005364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000190 	.word	0x20000190

08000d7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d80:	4802      	ldr	r0, [pc, #8]	@ (8000d8c <OTG_FS_IRQHandler+0x10>)
 8000d82:	f000 ff47 	bl	8001c14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200005bc 	.word	0x200005bc

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	@ (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f008 fff4 	bl	8009dac <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20020000 	.word	0x20020000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	200001d8 	.word	0x200001d8
 8000df8:	20000ae8 	.word	0x20000ae8

08000dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	@ (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e24:	f7ff ffea 	bl	8000dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	@ (8000e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	@ (8000e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f008 ffb3 	bl	8009db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fb4f 	bl	80004f4 <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e64:	08009edc 	.word	0x08009edc
  ldr r2, =_sbss
 8000e68:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e6c:	20000ae4 	.word	0x20000ae4

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f94f 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8000ea8:	f7ff fda6 	bl	80009f8 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f967 	bl	80011aa <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
		return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 f92f 	bl	8001156 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	@ (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
		return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000004 	.word	0x20000004
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	20000008 	.word	0x20000008

08000f18 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	200001dc 	.word	0x200001dc

08000f40 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200001dc 	.word	0x200001dc

08000f58 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
	}
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000000c 	.word	0x2000000c

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	@ (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	@ (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	@ (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	@ 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	@ 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	@ (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff29 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff3e 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff8e 	bl	8001094 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5d 	bl	8001040 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff31 	bl	8001004 <__NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa2 	bl	80010fc <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_DMA_Abort>:
 *        while a data transfer is ongoing, the current data will be transferred
 *        and the Stream will be effectively disabled only after the transfer of
 *        this single data is finished.  
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	/* calculate DMA base and stream number */
	DMA_Base_Registers *regs = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ce:	60fb      	str	r3, [r7, #12]

	uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff feb6 	bl	8000f40 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]

	if (hdma->State != HAL_DMA_STATE_BUSY) {
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d008      	beq.n	80011f4 <HAL_DMA_Abort+0x32>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2280      	movs	r2, #128	@ 0x80
 80011e6:	655a      	str	r2, [r3, #84]	@ 0x54

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e052      	b.n	800129a <HAL_DMA_Abort+0xd8>
	} else {
		/* Disable all the transfer interrupts */
		hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0216 	bic.w	r2, r2, #22
 8001202:	601a      	str	r2, [r3, #0]
		hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001212:	615a      	str	r2, [r3, #20]

		if ((hdma->XferHalfCpltCallback != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	2b00      	cmp	r3, #0
 800121a:	d103      	bne.n	8001224 <HAL_DMA_Abort+0x62>
				|| (hdma->XferM1HalfCpltCallback != NULL)) {
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001220:	2b00      	cmp	r3, #0
 8001222:	d007      	beq.n	8001234 <HAL_DMA_Abort+0x72>
			hdma->Instance->CR &= ~(DMA_IT_HT);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0208 	bic.w	r2, r2, #8
 8001232:	601a      	str	r2, [r3, #0]
		}

		/* Disable the stream */
		__HAL_DMA_DISABLE(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]

		/* Check if the DMA Stream is effectively disabled */
		while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 8001244:	e013      	b.n	800126e <HAL_DMA_Abort+0xac>
			/* Check for the Timeout */
			if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT) {
 8001246:	f7ff fe7b 	bl	8000f40 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b05      	cmp	r3, #5
 8001252:	d90c      	bls.n	800126e <HAL_DMA_Abort+0xac>
				/* Update error code */
				hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2220      	movs	r2, #32
 8001258:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Change the DMA state */
				hdma->State = HAL_DMA_STATE_TIMEOUT;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2203      	movs	r2, #3
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

				/* Process Unlocked */
				__HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

				return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e015      	b.n	800129a <HAL_DMA_Abort+0xd8>
		while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET) {
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e4      	bne.n	8001246 <HAL_DMA_Abort+0x84>
			}
		}

		/* Clear all interrupt flags at correct offset within the register */
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001280:	223f      	movs	r2, #63	@ 0x3f
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	609a      	str	r2, [r3, #8]

		/* Change the DMA state*/
		hdma->State = HAL_DMA_STATE_READY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
	return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_DMA_Abort_IT>:
 * @brief  Aborts the DMA Transfer in Interrupt mode.
 * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d004      	beq.n	80012c0 <HAL_DMA_Abort_IT+0x1e>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2280      	movs	r2, #128	@ 0x80
 80012ba:	655a      	str	r2, [r3, #84]	@ 0x54
		return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e00c      	b.n	80012da <HAL_DMA_Abort_IT+0x38>
	} else {
		/* Set Abort State  */
		hdma->State = HAL_DMA_STATE_ABORT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2205      	movs	r2, #5
 80012c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

		/* Disable the stream */
		__HAL_DMA_DISABLE(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
	}

	return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e16b      	b.n	80015dc <HAL_GPIO_Init+0x2f4>
		/* Get the IO position */
		ioposition = 0x01U << position;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 815a 	bne.w	80015d6 <HAL_GPIO_Init+0x2ee>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
						<< position);
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d017      	beq.n	80013d8 <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80b4 	beq.w	80015d6 <HAL_GPIO_Init+0x2ee>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b60      	ldr	r3, [pc, #384]	@ (80015f4 <HAL_GPIO_Init+0x30c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a5f      	ldr	r2, [pc, #380]	@ (80015f4 <HAL_GPIO_Init+0x30c>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b5d      	ldr	r3, [pc, #372]	@ (80015f4 <HAL_GPIO_Init+0x30c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a5b      	ldr	r2, [pc, #364]	@ (80015f8 <HAL_GPIO_Init+0x310>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a52      	ldr	r2, [pc, #328]	@ (80015fc <HAL_GPIO_Init+0x314>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02b      	beq.n	800150e <HAL_GPIO_Init+0x226>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a51      	ldr	r2, [pc, #324]	@ (8001600 <HAL_GPIO_Init+0x318>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x222>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a50      	ldr	r2, [pc, #320]	@ (8001604 <HAL_GPIO_Init+0x31c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x21e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001608 <HAL_GPIO_Init+0x320>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x21a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4e      	ldr	r2, [pc, #312]	@ (800160c <HAL_GPIO_Init+0x324>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x216>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001610 <HAL_GPIO_Init+0x328>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x212>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001614 <HAL_GPIO_Init+0x32c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x20e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001618 <HAL_GPIO_Init+0x330>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x20a>
 80014ee:	2307      	movs	r3, #7
 80014f0:	e00e      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014f2:	2308      	movs	r3, #8
 80014f4:	e00c      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014f6:	2306      	movs	r3, #6
 80014f8:	e00a      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014fa:	2305      	movs	r3, #5
 80014fc:	e008      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014fe:	2304      	movs	r3, #4
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x228>
 8001502:	2303      	movs	r3, #3
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x228>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x228>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x228>
 800150e:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 8001520:	4935      	ldr	r1, [pc, #212]	@ (80015f8 <HAL_GPIO_Init+0x310>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 800152e:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <HAL_GPIO_Init+0x334>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x26a>
					temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 8001552:	4a32      	ldr	r2, [pc, #200]	@ (800161c <HAL_GPIO_Init+0x334>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8001558:	4b30      	ldr	r3, [pc, #192]	@ (800161c <HAL_GPIO_Init+0x334>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x294>
					temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 800157c:	4a27      	ldr	r2, [pc, #156]	@ (800161c <HAL_GPIO_Init+0x334>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 8001582:	4b26      	ldr	r3, [pc, #152]	@ (800161c <HAL_GPIO_Init+0x334>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2be>
					temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 80015a6:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <HAL_GPIO_Init+0x334>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <HAL_GPIO_Init+0x334>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2e8>
					temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 80015d0:	4a12      	ldr	r2, [pc, #72]	@ (800161c <HAL_GPIO_Init+0x334>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	f67f ae90 	bls.w	8001304 <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3724      	adds	r7, #36	@ 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40013800 	.word	0x40013800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40020800 	.word	0x40020800
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40021000 	.word	0x40021000
 8001610:	40021400 	.word	0x40021400
 8001614:	40021800 	.word	0x40021800
 8001618:	40021c00 	.word	0x40021c00
 800161c:	40013c00 	.word	0x40013c00

08001620 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <HAL_HCD_Init>:
/**
 * @brief  Initialize the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd) {
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af02      	add	r7, sp, #8
 8001658:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
	const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

	/* Check the HCD handle allocation */
	if (hhcd == NULL) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_HCD_Init+0x12>
		return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e059      	b.n	8001718 <HAL_HCD_Init+0xc6>

	/* Check the parameters */
	assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
	USBx = hhcd->Instance;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

	if (hhcd->State == HAL_HCD_STATE_RESET) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <HAL_HCD_Init+0x32>
		/* Allocate lock resource and initialize it */
		hhcd->Lock = HAL_UNLOCKED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_HCD_MspInit(hhcd);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f008 f812 	bl	80096a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
	}

	hhcd->State = HAL_HCD_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2203      	movs	r2, #3
 8001688:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
	/* Disable DMA mode for FS instance */
	if (USBx == USB_OTG_FS) {
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001692:	d102      	bne.n	800169a <HAL_HCD_Init+0x48>
		hhcd->Init.dma_enable = 0U;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	719a      	strb	r2, [r3, #6]
	}
#endif /* defined (USB_OTG_FS) */

	/* Disable the Interrupts */
	__HAL_HCD_DISABLE(hhcd);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 fe2b 	bl	80062fa <USB_DisableGlobalInt>

	/* Init the Core (common init.) */
	if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7c1a      	ldrb	r2, [r3, #16]
 80016ac:	f88d 2000 	strb.w	r2, [sp]
 80016b0:	3304      	adds	r3, #4
 80016b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b4:	f004 fdac 	bl	8006210 <USB_CoreInit>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_HCD_Init+0x78>
		hhcd->State = HAL_HCD_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2202      	movs	r2, #2
 80016c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e026      	b.n	8001718 <HAL_HCD_Init+0xc6>
	}

	/* Force Host Mode */
	if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK) {
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2101      	movs	r1, #1
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fe23 	bl	800631c <USB_SetCurrentMode>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_HCD_Init+0x96>
		hhcd->State = HAL_HCD_STATE_ERROR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e017      	b.n	8001718 <HAL_HCD_Init+0xc6>
	}

	/* Init Host */
	if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7c1a      	ldrb	r2, [r3, #16]
 80016f0:	f88d 2000 	strb.w	r2, [sp]
 80016f4:	3304      	adds	r3, #4
 80016f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f8:	f004 ffc6 	bl	8006688 <USB_HostInit>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_HCD_Init+0xbc>
		hhcd->State = HAL_HCD_STATE_ERROR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2202      	movs	r2, #2
 8001706:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e004      	b.n	8001718 <HAL_HCD_Init+0xc6>
	}

	hhcd->State = HAL_HCD_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

	return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_HCD_HC_Init>:
 *          This parameter can be a value from 0 to32K
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
		uint8_t epnum, uint8_t dev_address, uint8_t speed, uint8_t ep_type,
		uint16_t mps) {
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b08b      	sub	sp, #44	@ 0x2c
 8001724:	af04      	add	r7, sp, #16
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	70fb      	strb	r3, [r7, #3]
 8001732:	460b      	mov	r3, r1
 8001734:	70bb      	strb	r3, [r7, #2]
 8001736:	4613      	mov	r3, r2
 8001738:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status;
	uint32_t HostCoreSpeed;
	uint32_t HCcharMps = mps;
 800173a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800173c:	617b      	str	r3, [r7, #20]

	__HAL_LOCK(hhcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_HCD_HC_Init+0x2c>
 8001748:	2302      	movs	r3, #2
 800174a:	e09d      	b.n	8001888 <HAL_HCD_HC_Init+0x168>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	hhcd->hc[ch_num].do_ping = 0U;
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	3319      	adds	r3, #25
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].dev_addr = dev_address;
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	3314      	adds	r3, #20
 8001778:	787a      	ldrb	r2, [r7, #1]
 800177a:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ch_num = ch_num;
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	3315      	adds	r3, #21
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_type = ep_type;
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	3326      	adds	r3, #38	@ 0x26
 80017a0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017a4:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	78bb      	ldrb	r3, [r7, #2]
 80017aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017ae:	b2d8      	uxtb	r0, r3
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	3316      	adds	r3, #22
 80017be:	4602      	mov	r2, r0
 80017c0:	701a      	strb	r2, [r3, #0]

	(void) HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	4619      	mov	r1, r3
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 fbc8 	bl	8001f5c <HAL_HCD_HC_ClearHubInfo>

	if ((epnum & 0x80U) == 0x80U) {
 80017cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da0a      	bge.n	80017ea <HAL_HCD_HC_Init+0xca>
		hhcd->hc[ch_num].ep_is_in = 1U;
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3317      	adds	r3, #23
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
 80017e8:	e009      	b.n	80017fe <HAL_HCD_HC_Init+0xde>
	} else {
		hhcd->hc[ch_num].ep_is_in = 0U;
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	3317      	adds	r3, #23
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
	}

	HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f005 f8a4 	bl	8006950 <USB_GetHostSpeed>
 8001808:	6138      	str	r0, [r7, #16]

	if (ep_type == EP_TYPE_ISOC) {
 800180a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10b      	bne.n	800182a <HAL_HCD_HC_Init+0x10a>
		/* FS device plugged to HS HUB */
		if ((speed == HCD_DEVICE_SPEED_FULL)
 8001812:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <HAL_HCD_HC_Init+0x10a>
				&& (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED)) {
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d104      	bne.n	800182a <HAL_HCD_HC_Init+0x10a>
			if (HCcharMps > ISO_SPLT_MPS) {
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2bbc      	cmp	r3, #188	@ 0xbc
 8001824:	d901      	bls.n	800182a <HAL_HCD_HC_Init+0x10a>
				/* ISO Max Packet Size for Split mode */
				HCcharMps = ISO_SPLT_MPS;
 8001826:	23bc      	movs	r3, #188	@ 0xbc
 8001828:	617b      	str	r3, [r7, #20]
			}
		}
	}

	hhcd->hc[ch_num].speed = speed;
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	3318      	adds	r3, #24
 800183a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800183e:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].max_packet = (uint16_t) HCcharMps;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	b298      	uxth	r0, r3
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3328      	adds	r3, #40	@ 0x28
 8001854:	4602      	mov	r2, r0
 8001856:	801a      	strh	r2, [r3, #0]

	status = USB_HC_Init(hhcd->Instance, ch_num, epnum, dev_address, speed,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	b29b      	uxth	r3, r3
 8001860:	787c      	ldrb	r4, [r7, #1]
 8001862:	78ba      	ldrb	r2, [r7, #2]
 8001864:	78f9      	ldrb	r1, [r7, #3]
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	4623      	mov	r3, r4
 8001876:	f005 f893 	bl	80069a0 <USB_HC_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
			ep_type, (uint16_t) HCcharMps);

	__HAL_UNLOCK(hhcd);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return status;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}

08001890 <HAL_HCD_HC_Halt>:
 * @param  hhcd HCD handle
 * @param  ch_num Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]

	__HAL_LOCK(hhcd);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_HCD_HC_Halt+0x1e>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e00f      	b.n	80018ce <HAL_HCD_HC_Halt+0x3e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	(void) USB_HC_Halt(hhcd->Instance, ch_num);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f005 fc25 	bl	800710e <USB_HC_Halt>
	__HAL_UNLOCK(hhcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_HCD_HC_SubmitRequest>:
 *           0 : do ping inactive / 1 : do ping active
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_SubmitRequest(HCD_HandleTypeDef *hhcd,
		uint8_t ch_num, uint8_t direction, uint8_t ep_type, uint8_t token,
		uint8_t *pbuff, uint16_t length, uint8_t do_ping) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	4608      	mov	r0, r1
 80018e2:	4611      	mov	r1, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	70fb      	strb	r3, [r7, #3]
 80018ea:	460b      	mov	r3, r1
 80018ec:	70bb      	strb	r3, [r7, #2]
 80018ee:	4613      	mov	r3, r2
 80018f0:	707b      	strb	r3, [r7, #1]
	hhcd->hc[ch_num].ep_is_in = direction;
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3317      	adds	r3, #23
 8001902:	78ba      	ldrb	r2, [r7, #2]
 8001904:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_type = ep_type;
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	3326      	adds	r3, #38	@ 0x26
 8001916:	787a      	ldrb	r2, [r7, #1]
 8001918:	701a      	strb	r2, [r3, #0]

	if (token == 0U) {
 800191a:	7c3b      	ldrb	r3, [r7, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d114      	bne.n	800194a <HAL_HCD_HC_SubmitRequest+0x72>
		hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	332a      	adds	r3, #42	@ 0x2a
 8001930:	2203      	movs	r2, #3
 8001932:	701a      	strb	r2, [r3, #0]
		hhcd->hc[ch_num].do_ping = do_ping;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3319      	adds	r3, #25
 8001944:	7f3a      	ldrb	r2, [r7, #28]
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e009      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x86>
	} else {
		hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	332a      	adds	r3, #42	@ 0x2a
 800195a:	2202      	movs	r2, #2
 800195c:	701a      	strb	r2, [r3, #0]
	}

	/* Manage Data Toggle */
	switch (ep_type) {
 800195e:	787b      	ldrb	r3, [r7, #1]
 8001960:	2b03      	cmp	r3, #3
 8001962:	f200 8102 	bhi.w	8001b6a <HAL_HCD_HC_SubmitRequest+0x292>
 8001966:	a201      	add	r2, pc, #4	@ (adr r2, 800196c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	0800197d 	.word	0x0800197d
 8001970:	08001b55 	.word	0x08001b55
 8001974:	08001a41 	.word	0x08001a41
 8001978:	08001acb 	.word	0x08001acb
	case EP_TYPE_CTRL:
		if (token == 1U) /* send data */
 800197c:	7c3b      	ldrb	r3, [r7, #16]
 800197e:	2b01      	cmp	r3, #1
 8001980:	f040 80f5 	bne.w	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>
		{
			if (direction == 0U) {
 8001984:	78bb      	ldrb	r3, [r7, #2]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d12d      	bne.n	80019e6 <HAL_HCD_HC_SubmitRequest+0x10e>
				if (length == 0U) {
 800198a:	8b3b      	ldrh	r3, [r7, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <HAL_HCD_HC_SubmitRequest+0xcc>
					/* For Status OUT stage, Length == 0U, Status Out PID = 1 */
					hhcd->hc[ch_num].toggle_out = 1U;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	333d      	adds	r3, #61	@ 0x3d
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
				}

				/* Set the Data Toggle bit as per the Flag */
				if (hhcd->hc[ch_num].toggle_out == 0U) {
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	333d      	adds	r3, #61	@ 0x3d
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <HAL_HCD_HC_SubmitRequest+0xf8>
					/* Put the PID 0 */
					hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ba:	78fa      	ldrb	r2, [r7, #3]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	1a9b      	subs	r3, r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	332a      	adds	r3, #42	@ 0x2a
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
						hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
					}
				}
			}
		}
		break;
 80019ce:	e0ce      	b.n	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>
					hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	332a      	adds	r3, #42	@ 0x2a
 80019e0:	2202      	movs	r2, #2
 80019e2:	701a      	strb	r2, [r3, #0]
		break;
 80019e4:	e0c3      	b.n	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>
				if (hhcd->hc[ch_num].do_ssplit == 1U) {
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	331a      	adds	r3, #26
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	f040 80b8 	bne.w	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>
					if (hhcd->hc[ch_num].toggle_in == 0U) {
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	333c      	adds	r3, #60	@ 0x3c
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <HAL_HCD_HC_SubmitRequest+0x152>
						hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	332a      	adds	r3, #42	@ 0x2a
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
		break;
 8001a28:	e0a1      	b.n	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>
						hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	332a      	adds	r3, #42	@ 0x2a
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
		break;
 8001a3e:	e096      	b.n	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>

	case EP_TYPE_BULK:
		if (direction == 0U) {
 8001a40:	78bb      	ldrb	r3, [r7, #2]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d120      	bne.n	8001a88 <HAL_HCD_HC_SubmitRequest+0x1b0>
			/* Set the Data Toggle bit as per the Flag */
			if (hhcd->hc[ch_num].toggle_out == 0U) {
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	333d      	adds	r3, #61	@ 0x3d
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10a      	bne.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x19a>
				/* Put the PID 0 */
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	332a      	adds	r3, #42	@ 0x2a
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
			} else {
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
			}
		}

		break;
 8001a70:	e07e      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	332a      	adds	r3, #42	@ 0x2a
 8001a82:	2202      	movs	r2, #2
 8001a84:	701a      	strb	r2, [r3, #0]
		break;
 8001a86:	e073      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
			if (hhcd->hc[ch_num].toggle_in == 0U) {
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	333c      	adds	r3, #60	@ 0x3c
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10a      	bne.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x1dc>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	332a      	adds	r3, #42	@ 0x2a
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
		break;
 8001ab2:	e05d      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	332a      	adds	r3, #42	@ 0x2a
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	701a      	strb	r2, [r3, #0]
		break;
 8001ac8:	e052      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
	case EP_TYPE_INTR:
		if (direction == 0U) {
 8001aca:	78bb      	ldrb	r3, [r7, #2]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d120      	bne.n	8001b12 <HAL_HCD_HC_SubmitRequest+0x23a>
			/* Set the Data Toggle bit as per the Flag */
			if (hhcd->hc[ch_num].toggle_out == 0U) {
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	333d      	adds	r3, #61	@ 0x3d
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_HCD_HC_SubmitRequest+0x224>
				/* Put the PID 0 */
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	332a      	adds	r3, #42	@ 0x2a
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
			} else {
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
			}
		}
		break;
 8001afa:	e039      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	332a      	adds	r3, #42	@ 0x2a
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	701a      	strb	r2, [r3, #0]
		break;
 8001b10:	e02e      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
			if (hhcd->hc[ch_num].toggle_in == 0U) {
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	333c      	adds	r3, #60	@ 0x3c
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10a      	bne.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x266>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	332a      	adds	r3, #42	@ 0x2a
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
		break;
 8001b3c:	e018      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	332a      	adds	r3, #42	@ 0x2a
 8001b4e:	2202      	movs	r2, #2
 8001b50:	701a      	strb	r2, [r3, #0]
		break;
 8001b52:	e00d      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>

	case EP_TYPE_ISOC:
		hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	332a      	adds	r3, #42	@ 0x2a
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
		break;
 8001b68:	e002      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>

	default:
		break;
 8001b6a:	bf00      	nop
 8001b6c:	e000      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
		break;
 8001b6e:	bf00      	nop
	}

	hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	332c      	adds	r3, #44	@ 0x2c
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	601a      	str	r2, [r3, #0]
	hhcd->hc[ch_num].xfer_len = length;
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	8b39      	ldrh	r1, [r7, #24]
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4403      	add	r3, r0
 8001b94:	3334      	adds	r3, #52	@ 0x34
 8001b96:	6019      	str	r1, [r3, #0]
	hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	334c      	adds	r3, #76	@ 0x4c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].xfer_count = 0U;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3338      	adds	r3, #56	@ 0x38
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
	hhcd->hc[ch_num].ch_num = ch_num;
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	3315      	adds	r3, #21
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].state = HC_IDLE;
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	334d      	adds	r3, #77	@ 0x4d
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]

	return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num],
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	1a9b      	subs	r3, r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	3310      	adds	r3, #16
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	1d19      	adds	r1, r3, #4
			(uint8_t) hhcd->Init.dma_enable);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	799b      	ldrb	r3, [r3, #6]
	return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num],
 8001c02:	461a      	mov	r2, r3
 8001c04:	f004 fff8 	bl	8006bf8 <USB_HC_StartXfer>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop

08001c14 <HAL_HCD_IRQHandler>:
/**
 * @brief  Handle HCD interrupt request.
 * @param  hhcd HCD handle
 * @retval None
 */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	613b      	str	r3, [r7, #16]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	60fb      	str	r3, [r7, #12]
	uint32_t i;
	uint32_t interrupt;

	/* Ensure that we are in device mode */
	if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST) {
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f004 fcec 	bl	8006608 <USB_GetMode>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f040 80fb 	bne.w	8001e2e <HAL_HCD_IRQHandler+0x21a>
		/* Avoid spurious interrupt */
		if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 fcaf 	bl	80065a0 <USB_ReadInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80f1 	beq.w	8001e2c <HAL_HCD_IRQHandler+0x218>
			return;
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 fca6 	bl	80065a0 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c5e:	d104      	bne.n	8001c6a <HAL_HCD_IRQHandler+0x56>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c68:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR)) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fc96 	bl	80065a0 <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c7e:	d104      	bne.n	8001c8a <HAL_HCD_IRQHandler+0x76>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c88:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE)) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 fc86 	bl	80065a0 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c9e:	d104      	bne.n	8001caa <HAL_HCD_IRQHandler+0x96>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ca8:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS)) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 fc76 	bl	80065a0 <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d103      	bne.n	8001cc6 <HAL_HCD_IRQHandler+0xb2>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	615a      	str	r2, [r3, #20]
		}

		/* Handle Host Disconnect Interrupts */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT)) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fc68 	bl	80065a0 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cda:	d120      	bne.n	8001d1e <HAL_HCD_IRQHandler+0x10a>
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001ce4:	615a      	str	r2, [r3, #20]

			if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U) {
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d113      	bne.n	8001d1e <HAL_HCD_IRQHandler+0x10a>
				/* Flush USB Fifo */
				(void) USB_FlushTxFifo(USBx, 0x10U);
 8001cf6:	2110      	movs	r1, #16
 8001cf8:	6938      	ldr	r0, [r7, #16]
 8001cfa:	f004 fb5b 	bl	80063b4 <USB_FlushTxFifo>
				(void) USB_FlushRxFifo(USBx);
 8001cfe:	6938      	ldr	r0, [r7, #16]
 8001d00:	f004 fb8a 	bl	8006418 <USB_FlushRxFifo>

				if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7a5b      	ldrb	r3, [r3, #9]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d105      	bne.n	8001d18 <HAL_HCD_IRQHandler+0x104>
					/* Restore FS Clock */
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 fd7c 	bl	8006810 <USB_InitFSLSPClkSel>

				/* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
				HAL_HCD_Disconnect_Callback(hhcd);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f007 fd43 	bl	80097a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
			}
		}

		/* Handle Host Port Interrupts */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT)) {
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 fc3c 	bl	80065a0 <USB_ReadInterrupts>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d32:	d102      	bne.n	8001d3a <HAL_HCD_IRQHandler+0x126>
			HCD_Port_IRQHandler(hhcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f001 fd4d 	bl	80037d4 <HCD_Port_IRQHandler>
		}

		/* Handle Host SOF Interrupt */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF)) {
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fc2e 	bl	80065a0 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d106      	bne.n	8001d5c <HAL_HCD_IRQHandler+0x148>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
			HAL_HCD_SOF_Callback(hhcd);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f007 fd0c 	bl	800976c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2208      	movs	r2, #8
 8001d5a:	615a      	str	r2, [r3, #20]
		}

		/* Handle Host channel Interrupt */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT)) {
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f004 fc1d 	bl	80065a0 <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d70:	d139      	bne.n	8001de6 <HAL_HCD_IRQHandler+0x1d2>
			interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f005 f9b8 	bl	80070ec <USB_HC_ReadInterrupt>
 8001d7c:	60b8      	str	r0, [r7, #8]
			for (i = 0U; i < hhcd->Init.Host_channels; i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e025      	b.n	8001dd0 <HAL_HCD_IRQHandler+0x1bc>
				if ((interrupt & (1UL << (i & 0xFU))) != 0U) {
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d018      	beq.n	8001dca <HAL_HCD_IRQHandler+0x1b6>
					if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dae:	d106      	bne.n	8001dbe <HAL_HCD_IRQHandler+0x1aa>
							== USB_OTG_HCCHAR_EPDIR) {
						HCD_HC_IN_IRQHandler(hhcd, (uint8_t) i);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f905 	bl	8001fc6 <HCD_HC_IN_IRQHandler>
 8001dbc:	e005      	b.n	8001dca <HAL_HCD_IRQHandler+0x1b6>
					} else {
						HCD_HC_OUT_IRQHandler(hhcd, (uint8_t) i);
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 ff67 	bl	8002c98 <HCD_HC_OUT_IRQHandler>
			for (i = 0U; i < hhcd->Init.Host_channels; i++) {
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	795b      	ldrb	r3, [r3, #5]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d3d3      	bcc.n	8001d84 <HAL_HCD_IRQHandler+0x170>
					}
				}
			}
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001de4:	615a      	str	r2, [r3, #20]
		}

		/* Handle Rx Queue Level Interrupts */
		if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U) {
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 fbd8 	bl	80065a0 <USB_ReadInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d101      	bne.n	8001dfe <HAL_HCD_IRQHandler+0x1ea>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_HCD_IRQHandler+0x1ec>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d014      	beq.n	8001e2e <HAL_HCD_IRQHandler+0x21a>
			USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0210 	bic.w	r2, r2, #16
 8001e12:	619a      	str	r2, [r3, #24]

			HCD_RXQLVL_IRQHandler(hhcd);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f001 fbfe 	bl	8003616 <HCD_RXQLVL_IRQHandler>

			USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0210 	orr.w	r2, r2, #16
 8001e28:	619a      	str	r2, [r3, #24]
 8001e2a:	e000      	b.n	8001e2e <HAL_HCD_IRQHandler+0x21a>
			return;
 8001e2c:	bf00      	nop
		}
	}
}
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_HCD_Start>:
/**
 * @brief  Start the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	__HAL_LOCK(hhcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_HCD_Start+0x16>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e013      	b.n	8001e72 <HAL_HCD_Start+0x3e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	/* Enable port power */
	(void) USB_DriveVbus(hhcd->Instance, 1U);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2101      	movs	r1, #1
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 fd40 	bl	80068de <USB_DriveVbus>

	/* Enable global interrupt */
	__HAL_HCD_ENABLE(hhcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 fa38 	bl	80062d8 <USB_EnableGlobalInt>
	__HAL_UNLOCK(hhcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_HCD_Stop>:
 * @brief  Stop the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd) {
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	__HAL_LOCK(hhcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_HCD_Stop+0x16>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e00d      	b.n	8001eac <HAL_HCD_Stop+0x32>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	(void) USB_StopHost(hhcd->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 fa93 	bl	80073c8 <USB_StopHost>
	__HAL_UNLOCK(hhcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_HCD_ResetPort>:
/**
 * @brief  Reset the host port.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	return (USB_ResetPort(hhcd->Instance));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 fce2 	bl	800688a <USB_ResetPort>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_HCD_HC_GetURBState>:
 *            URB_NYET/
 *            URB_ERROR/
 *            URB_STALL
 */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd,
		uint8_t chnum) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
	return hhcd->hc[chnum].urb_state;
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	334c      	adds	r3, #76	@ 0x4c
 8001eec:	781b      	ldrb	r3, [r3, #0]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_HCD_HC_GetXferCount>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval last transfer size in byte
 */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum) {
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
	return hhcd->hc[chnum].xfer_count;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3338      	adds	r3, #56	@ 0x38
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_HCD_GetCurrentFrame>:
/**
 * @brief  Return the current Host frame number.
 * @param  hhcd HCD handle
 * @retval Current Host frame number
 */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	return (USB_GetCurrentFrame(hhcd->Instance));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fd24 	bl	800697e <USB_GetCurrentFrame>
 8001f36:	4603      	mov	r3, r0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_HCD_GetCurrentSpeed>:
/**
 * @brief  Return the Host enumeration speed.
 * @param  hhcd HCD handle
 * @retval Enumeration speed
 */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	return (USB_GetHostSpeed(hhcd->Instance));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f004 fcff 	bl	8006950 <USB_GetHostSpeed>
 8001f52:	4603      	mov	r3, r0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_HCD_HC_ClearHubInfo>:
 * @param  ch_num Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd,
		uint8_t ch_num) {
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
	hhcd->hc[ch_num].do_ssplit = 0U;
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	331a      	adds	r3, #26
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].do_csplit = 0U;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	331b      	adds	r3, #27
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].hub_addr = 0U;
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3325      	adds	r3, #37	@ 0x25
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3324      	adds	r3, #36	@ 0x24
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HCD_HC_IN_IRQHandler>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval none
 */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum) {
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	70fb      	strb	r3, [r7, #3]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg;

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR)) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 faee 	bl	80065c6 <USB_ReadChInterrupts>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d11a      	bne.n	800202a <HCD_HC_IN_IRQHandler+0x64>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	2304      	movs	r3, #4
 8002004:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	334d      	adds	r3, #77	@ 0x4d
 8002016:	2207      	movs	r2, #7
 8002018:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f005 f873 	bl	800710e <USB_HC_Halt>
 8002028:	e09e      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR)) {
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fac7 	bl	80065c6 <USB_ReadChInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002042:	d11b      	bne.n	800207c <HCD_HC_IN_IRQHandler+0xb6>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002056:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_BBLERR;
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	334d      	adds	r3, #77	@ 0x4d
 8002068:	2208      	movs	r2, #8
 800206a:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f005 f84a 	bl	800710e <USB_HC_Halt>
 800207a:	e075      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL)) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f004 fa9e 	bl	80065c6 <USB_ReadChInterrupts>
 800208a:	4603      	mov	r3, r0
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b08      	cmp	r3, #8
 8002092:	d11a      	bne.n	80020ca <HCD_HC_IN_IRQHandler+0x104>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a0:	461a      	mov	r2, r3
 80020a2:	2308      	movs	r3, #8
 80020a4:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_STALL;
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	334d      	adds	r3, #77	@ 0x4d
 80020b6:	2206      	movs	r2, #6
 80020b8:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f005 f823 	bl	800710e <USB_HC_Halt>
 80020c8:	e04e      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR)) {
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fa77 	bl	80065c6 <USB_ReadChInterrupts>
 80020d8:	4603      	mov	r3, r0
 80020da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e2:	d11b      	bne.n	800211c <HCD_HC_IN_IRQHandler+0x156>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f0:	461a      	mov	r2, r3
 80020f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f6:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_DATATGLERR;
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	334d      	adds	r3, #77	@ 0x4d
 8002108:	2209      	movs	r2, #9
 800210a:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f004 fffa 	bl	800710e <USB_HC_Halt>
 800211a:	e025      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR)) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f004 fa4e 	bl	80065c6 <USB_ReadChInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002130:	2b80      	cmp	r3, #128	@ 0x80
 8002132:	d119      	bne.n	8002168 <HCD_HC_IN_IRQHandler+0x1a2>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002140:	461a      	mov	r2, r3
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	334d      	adds	r3, #77	@ 0x4d
 8002156:	2207      	movs	r2, #7
 8002158:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f004 ffd3 	bl	800710e <USB_HC_Halt>
	} else {
		/* ... */
	}

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR)) {
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f004 fa28 	bl	80065c6 <USB_ReadChInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800217c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002180:	d112      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x1e2>
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f004 ffbf 	bl	800710e <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800219c:	461a      	mov	r2, r3
 800219e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021a2:	6093      	str	r3, [r2, #8]
 80021a4:	f000 bd75 	b.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC)) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 fa08 	bl	80065c6 <USB_ReadChInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	f040 8128 	bne.w	8002412 <HCD_HC_IN_IRQHandler+0x44c>
		/* Clear any pending ACK IT */
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ce:	461a      	mov	r2, r3
 80021d0:	2320      	movs	r3, #32
 80021d2:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_csplit == 1U) {
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	331b      	adds	r3, #27
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d119      	bne.n	800221e <HCD_HC_IN_IRQHandler+0x258>
			hhcd->hc[chnum].do_csplit = 0U;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	331b      	adds	r3, #27
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	0151      	lsls	r1, r2, #5
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	440a      	add	r2, r1
 8002214:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221c:	6053      	str	r3, [r2, #4]
		}

		if (hhcd->Init.dma_enable != 0U) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	799b      	ldrb	r3, [r3, #6]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01b      	beq.n	800225e <HCD_HC_IN_IRQHandler+0x298>
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	3330      	adds	r3, #48	@ 0x30
 8002236:	6819      	ldr	r1, [r3, #0]
					- (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 800224a:	78fa      	ldrb	r2, [r7, #3]
					- (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800224c:	1ac9      	subs	r1, r1, r3
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4403      	add	r3, r0
 800225a:	3338      	adds	r3, #56	@ 0x38
 800225c:	6019      	str	r1, [r3, #0]
		}

		hhcd->hc[chnum].state = HC_XFRC;
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	334d      	adds	r3, #77	@ 0x4d
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
		hhcd->hc[chnum].ErrCnt = 0U;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	3344      	adds	r3, #68	@ 0x44
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002292:	461a      	mov	r2, r3
 8002294:	2301      	movs	r3, #1
 8002296:	6093      	str	r3, [r2, #8]

		if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3326      	adds	r3, #38	@ 0x26
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HCD_HC_IN_IRQHandler+0x2fe>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	3326      	adds	r3, #38	@ 0x26
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d110      	bne.n	80022e6 <HCD_HC_IN_IRQHandler+0x320>
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 ff1e 	bl	800710e <USB_HC_Halt>
			__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022de:	461a      	mov	r2, r3
 80022e0:	2310      	movs	r3, #16
 80022e2:	6093      	str	r3, [r2, #8]
 80022e4:	e03d      	b.n	8002362 <HCD_HC_IN_IRQHandler+0x39c>
		} else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3326      	adds	r3, #38	@ 0x26
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d00a      	beq.n	8002312 <HCD_HC_IN_IRQHandler+0x34c>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC)) {
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3326      	adds	r3, #38	@ 0x26
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d127      	bne.n	8002362 <HCD_HC_IN_IRQHandler+0x39c>
			USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	0151      	lsls	r1, r2, #5
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	440a      	add	r2, r1
 8002328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800232c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002330:	6013      	str	r3, [r2, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	334c      	adds	r3, #76	@ 0x4c
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
			HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	334c      	adds	r3, #76	@ 0x4c
 8002356:	781a      	ldrb	r2, [r3, #0]
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f007 fa2f 	bl	80097c0 <HAL_HCD_HC_NotifyURBChange_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		} else {
			/* ... */
		}

		if (hhcd->Init.dma_enable == 1U) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	799b      	ldrb	r3, [r3, #6]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d13b      	bne.n	80023e2 <HCD_HC_IN_IRQHandler+0x41c>
			if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U)
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	3338      	adds	r3, #56	@ 0x38
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4403      	add	r3, r0
 800238a:	3328      	adds	r3, #40	@ 0x28
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	440b      	add	r3, r1
 8002390:	1e59      	subs	r1, r3, #1
					/ hhcd->hc[chnum].max_packet) & 1U) != 0U) {
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4403      	add	r3, r0
 80023a0:	3328      	adds	r3, #40	@ 0x28
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a8:	f003 0301 	and.w	r3, r3, #1
			if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U)
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8470 	beq.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
				hhcd->hc[chnum].toggle_in ^= 1U;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	333c      	adds	r3, #60	@ 0x3c
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	b2d8      	uxtb	r0, r3
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	333c      	adds	r3, #60	@ 0x3c
 80023da:	4602      	mov	r2, r0
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	f000 bc58 	b.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
			}
		} else {
			hhcd->hc[chnum].toggle_in ^= 1U;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	333c      	adds	r3, #60	@ 0x3c
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	f083 0301 	eor.w	r3, r3, #1
 80023fa:	b2d8      	uxtb	r0, r3
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	333c      	adds	r3, #60	@ 0x3c
 800240a:	4602      	mov	r2, r0
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	f000 bc40 	b.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK)) {
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f004 f8d3 	bl	80065c6 <USB_ReadChInterrupts>
 8002420:	4603      	mov	r3, r0
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b20      	cmp	r3, #32
 8002428:	d131      	bne.n	800248e <HCD_HC_IN_IRQHandler+0x4c8>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002436:	461a      	mov	r2, r3
 8002438:	2320      	movs	r3, #32
 800243a:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_ssplit == 1U) {
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	331a      	adds	r3, #26
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	f040 841f 	bne.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
			hhcd->hc[chnum].do_csplit = 1U;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	331b      	adds	r3, #27
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_ACK;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	334d      	adds	r3, #77	@ 0x4d
 8002478:	2203      	movs	r2, #3
 800247a:	701a      	strb	r2, [r3, #0]

			(void) USB_HC_Halt(hhcd->Instance, chnum);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f004 fe42 	bl	800710e <USB_HC_Halt>
 800248a:	f000 bc02 	b.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH)) {
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f004 f895 	bl	80065c6 <USB_ReadChInterrupts>
 800249c:	4603      	mov	r3, r0
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	f040 8305 	bne.w	8002ab2 <HCD_HC_IN_IRQHandler+0xaec>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b4:	461a      	mov	r2, r3
 80024b6:	2302      	movs	r3, #2
 80024b8:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].state == HC_XFRC) {
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	334d      	adds	r3, #77	@ 0x4d
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d114      	bne.n	80024fa <HCD_HC_IN_IRQHandler+0x534>
			hhcd->hc[chnum].state = HC_HALTED;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	334d      	adds	r3, #77	@ 0x4d
 80024e0:	2202      	movs	r2, #2
 80024e2:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334c      	adds	r3, #76	@ 0x4c
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e2cc      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
		} else if (hhcd->hc[chnum].state == HC_STALL) {
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	334d      	adds	r3, #77	@ 0x4d
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d114      	bne.n	800253a <HCD_HC_IN_IRQHandler+0x574>
			hhcd->hc[chnum].state = HC_HALTED;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	334d      	adds	r3, #77	@ 0x4d
 8002520:	2202      	movs	r2, #2
 8002522:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_STALL;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	334c      	adds	r3, #76	@ 0x4c
 8002534:	2205      	movs	r2, #5
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e2ac      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
		} else if ((hhcd->hc[chnum].state == HC_XACTERR)
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	334d      	adds	r3, #77	@ 0x4d
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b07      	cmp	r3, #7
 800254e:	d00b      	beq.n	8002568 <HCD_HC_IN_IRQHandler+0x5a2>
				|| (hhcd->hc[chnum].state == HC_DATATGLERR)) {
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	334d      	adds	r3, #77	@ 0x4d
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b09      	cmp	r3, #9
 8002564:	f040 80a6 	bne.w	80026b4 <HCD_HC_IN_IRQHandler+0x6ee>
			hhcd->hc[chnum].state = HC_HALTED;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	334d      	adds	r3, #77	@ 0x4d
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	3344      	adds	r3, #68	@ 0x44
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1c59      	adds	r1, r3, #1
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4403      	add	r3, r0
 800259c:	3344      	adds	r3, #68	@ 0x44
 800259e:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3344      	adds	r3, #68	@ 0x44
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d943      	bls.n	800263e <HCD_HC_IN_IRQHandler+0x678>
				hhcd->hc[chnum].ErrCnt = 0U;
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3344      	adds	r3, #68	@ 0x44
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]

				if (hhcd->hc[chnum].do_ssplit == 1U) {
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	331a      	adds	r3, #26
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d123      	bne.n	8002628 <HCD_HC_IN_IRQHandler+0x662>
					hhcd->hc[chnum].do_csplit = 0U;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	331b      	adds	r3, #27
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
					hhcd->hc[chnum].ep_ss_schedule = 0U;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	331c      	adds	r3, #28
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
					__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	0151      	lsls	r1, r2, #5
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	440a      	add	r2, r1
 800261e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002626:	6053      	str	r3, [r2, #4]
				}

				hhcd->hc[chnum].urb_state = URB_ERROR;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	334c      	adds	r3, #76	@ 0x4c
 8002638:	2204      	movs	r2, #4
 800263a:	701a      	strb	r2, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 800263c:	e229      	b.n	8002a92 <HCD_HC_IN_IRQHandler+0xacc>
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	334c      	adds	r3, #76	@ 0x4c
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	3326      	adds	r3, #38	@ 0x26
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <HCD_HC_IN_IRQHandler+0x6ba>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3326      	adds	r3, #38	@ 0x26
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b02      	cmp	r3, #2
 800267c:	f040 8209 	bne.w	8002a92 <HCD_HC_IN_IRQHandler+0xacc>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002696:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800269e:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ac:	461a      	mov	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6013      	str	r3, [r2, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80026b2:	e1ee      	b.n	8002a92 <HCD_HC_IN_IRQHandler+0xacc>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_NYET) {
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	334d      	adds	r3, #77	@ 0x4d
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	f040 80c8 	bne.w	800285c <HCD_HC_IN_IRQHandler+0x896>
			hhcd->hc[chnum].state = HC_HALTED;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334d      	adds	r3, #77	@ 0x4d
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	331b      	adds	r3, #27
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	f040 81ce 	bne.w	8002a94 <HCD_HC_IN_IRQHandler+0xace>
				if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR) {
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3326      	adds	r3, #38	@ 0x26
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d16b      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0x820>
					hhcd->hc[chnum].NyetErrCnt++;
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3348      	adds	r3, #72	@ 0x48
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1c59      	adds	r1, r3, #1
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4403      	add	r3, r0
 800272e:	3348      	adds	r3, #72	@ 0x48
 8002730:	6019      	str	r1, [r3, #0]
					if (hhcd->hc[chnum].NyetErrCnt > 2U) {
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3348      	adds	r3, #72	@ 0x48
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d943      	bls.n	80027d0 <HCD_HC_IN_IRQHandler+0x80a>
						hhcd->hc[chnum].NyetErrCnt = 0U;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3348      	adds	r3, #72	@ 0x48
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
						hhcd->hc[chnum].do_csplit = 0U;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	331b      	adds	r3, #27
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]

						if (hhcd->hc[chnum].ErrCnt < 3U) {
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3344      	adds	r3, #68	@ 0x44
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d809      	bhi.n	800279a <HCD_HC_IN_IRQHandler+0x7d4>
							hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	331c      	adds	r3, #28
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
						}
						__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b8:	6053      	str	r3, [r2, #4]
						hhcd->hc[chnum].urb_state = URB_ERROR;
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	334c      	adds	r3, #76	@ 0x4c
 80027ca:	2204      	movs	r2, #4
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e014      	b.n	80027fa <HCD_HC_IN_IRQHandler+0x834>
					} else {
						hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	334c      	adds	r3, #76	@ 0x4c
 80027e0:	2202      	movs	r2, #2
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e009      	b.n	80027fa <HCD_HC_IN_IRQHandler+0x834>
					}
				} else {
					hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	334c      	adds	r3, #76	@ 0x4c
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
				}

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3326      	adds	r3, #38	@ 0x26
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00b      	beq.n	8002828 <HCD_HC_IN_IRQHandler+0x862>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3326      	adds	r3, #38	@ 0x26
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b02      	cmp	r3, #2
 8002824:	f040 8136 	bne.w	8002a94 <HCD_HC_IN_IRQHandler+0xace>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800283e:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002846:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e11b      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_ACK) {
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	334d      	adds	r3, #77	@ 0x4d
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b03      	cmp	r3, #3
 8002870:	f040 8081 	bne.w	8002976 <HCD_HC_IN_IRQHandler+0x9b0>
			hhcd->hc[chnum].state = HC_HALTED;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334d      	adds	r3, #77	@ 0x4d
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	331b      	adds	r3, #27
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	f040 80fa 	bne.w	8002a94 <HCD_HC_IN_IRQHandler+0xace>
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334c      	adds	r3, #76	@ 0x4c
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]

				/* Set Complete split and re-activate the channel */
				USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	0151      	lsls	r1, r2, #5
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	440a      	add	r2, r1
 80028ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d2:	6053      	str	r3, [r2, #4]
				USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	0151      	lsls	r1, r2, #5
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	440a      	add	r2, r1
 80028ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f2:	60d3      	str	r3, [r2, #12]
				USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	0151      	lsls	r1, r2, #5
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	440a      	add	r2, r1
 800290a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800290e:	f023 0320 	bic.w	r3, r3, #32
 8002912:	60d3      	str	r3, [r2, #12]

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3326      	adds	r3, #38	@ 0x26
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HCD_HC_IN_IRQHandler+0x97c>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3326      	adds	r3, #38	@ 0x26
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	f040 80a9 	bne.w	8002a94 <HCD_HC_IN_IRQHandler+0xace>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002958:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002960:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	e08e      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_NAK) {
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	334d      	adds	r3, #77	@ 0x4d
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d143      	bne.n	8002a14 <HCD_HC_IN_IRQHandler+0xa4e>
			hhcd->hc[chnum].state = HC_HALTED;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	334d      	adds	r3, #77	@ 0x4d
 800299c:	2202      	movs	r2, #2
 800299e:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	334c      	adds	r3, #76	@ 0x4c
 80029b0:	2202      	movs	r2, #2
 80029b2:	701a      	strb	r2, [r3, #0]

			if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3326      	adds	r3, #38	@ 0x26
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HCD_HC_IN_IRQHandler+0xa1a>
					|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3326      	adds	r3, #38	@ 0x26
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d159      	bne.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
				/* re-activate the channel */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029f6:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029fe:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e03f      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
			}
		} else if (hhcd->hc[chnum].state == HC_BBLERR) {
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	334d      	adds	r3, #77	@ 0x4d
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d126      	bne.n	8002a78 <HCD_HC_IN_IRQHandler+0xab2>
			hhcd->hc[chnum].state = HC_HALTED;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	334d      	adds	r3, #77	@ 0x4d
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3344      	adds	r3, #68	@ 0x44
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	1c59      	adds	r1, r3, #1
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4403      	add	r3, r0
 8002a5e:	3344      	adds	r3, #68	@ 0x44
 8002a60:	6019      	str	r1, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	334c      	adds	r3, #76	@ 0x4c
 8002a72:	2204      	movs	r2, #4
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e00d      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
		} else {
			if (hhcd->hc[chnum].state == HC_HALTED) {
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	334d      	adds	r3, #77	@ 0x4d
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	f000 8100 	beq.w	8002c90 <HCD_HC_IN_IRQHandler+0xcca>
 8002a90:	e000      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8002a92:	bf00      	nop
		}

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
		HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	334c      	adds	r3, #76	@ 0x4c
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f006 fe88 	bl	80097c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ab0:	e0ef      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
				hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fd83 	bl	80065c6 <USB_ReadChInterrupts>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac6:	2b40      	cmp	r3, #64	@ 0x40
 8002ac8:	d12f      	bne.n	8002b2a <HCD_HC_IN_IRQHandler+0xb64>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2340      	movs	r3, #64	@ 0x40
 8002ada:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_NYET;
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	334d      	adds	r3, #77	@ 0x4d
 8002aec:	2205      	movs	r2, #5
 8002aee:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ssplit == 0U) {
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	331a      	adds	r3, #26
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HCD_HC_IN_IRQHandler+0xb54>
			hhcd->hc[chnum].ErrCnt = 0U;
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	3344      	adds	r3, #68	@ 0x44
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
		}

		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 faf3 	bl	800710e <USB_HC_Halt>
 8002b28:	e0b3      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK)) {
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f003 fd47 	bl	80065c6 <USB_ReadChInterrupts>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	f040 80a7 	bne.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
		if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR) {
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	3326      	adds	r3, #38	@ 0x26
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d11b      	bne.n	8002b92 <HCD_HC_IN_IRQHandler+0xbcc>
			hhcd->hc[chnum].ErrCnt = 0U;
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3344      	adds	r3, #68	@ 0x44
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_NAK;
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	334d      	adds	r3, #77	@ 0x4d
 8002b7e:	2204      	movs	r2, #4
 8002b80:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 fabf 	bl	800710e <USB_HC_Halt>
 8002b90:	e03f      	b.n	8002c12 <HCD_HC_IN_IRQHandler+0xc4c>
		} else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3326      	adds	r3, #38	@ 0x26
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HCD_HC_IN_IRQHandler+0xbf8>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3326      	adds	r3, #38	@ 0x26
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d129      	bne.n	8002c12 <HCD_HC_IN_IRQHandler+0xc4c>
			hhcd->hc[chnum].ErrCnt = 0U;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3344      	adds	r3, #68	@ 0x44
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

			if ((hhcd->Init.dma_enable == 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	799b      	ldrb	r3, [r3, #6]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HCD_HC_IN_IRQHandler+0xc2a>
					|| (hhcd->hc[chnum].do_csplit == 1U)) {
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	331b      	adds	r3, #27
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d110      	bne.n	8002c12 <HCD_HC_IN_IRQHandler+0xc4c>
				hhcd->hc[chnum].state = HC_NAK;
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334d      	adds	r3, #77	@ 0x4d
 8002c00:	2204      	movs	r2, #4
 8002c02:	701a      	strb	r2, [r3, #0]
				(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f004 fa7e 	bl	800710e <USB_HC_Halt>
			}
		} else {
			/* ... */
		}

		if (hhcd->hc[chnum].do_csplit == 1U) {
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	331b      	adds	r3, #27
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d129      	bne.n	8002c7c <HCD_HC_IN_IRQHandler+0xcb6>
			hhcd->hc[chnum].do_csplit = 0U;
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	331b      	adds	r3, #27
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	0151      	lsls	r1, r2, #5
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	440a      	add	r2, r1
 8002c52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5a:	6053      	str	r3, [r2, #4]
			__HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	0151      	lsls	r1, r2, #5
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	440a      	add	r2, r1
 8002c72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c76:	f043 0320 	orr.w	r3, r3, #32
 8002c7a:	60d3      	str	r3, [r2, #12]
		}

		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2310      	movs	r3, #16
 8002c8c:	6093      	str	r3, [r2, #8]
 8002c8e:	e000      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
				return;
 8002c90:	bf00      	nop
	} else {
		/* ... */
	}
}
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HCD_HC_OUT_IRQHandler>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval none
 */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg;
	uint32_t num_packets;

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR)) {
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fc85 	bl	80065c6 <USB_ReadChInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d11b      	bne.n	8002cfe <HCD_HC_OUT_IRQHandler+0x66>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334d      	adds	r3, #77	@ 0x4d
 8002ce8:	2207      	movs	r2, #7
 8002cea:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f004 fa0a 	bl	800710e <USB_HC_Halt>
 8002cfa:	f000 bc89 	b.w	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK)) {
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 fc5d 	bl	80065c6 <USB_ReadChInterrupts>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	f040 8082 	bne.w	8002e1c <HCD_HC_OUT_IRQHandler+0x184>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d24:	461a      	mov	r2, r3
 8002d26:	2320      	movs	r3, #32
 8002d28:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_ping == 1U) {
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3319      	adds	r3, #25
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d124      	bne.n	8002d8a <HCD_HC_OUT_IRQHandler+0xf2>
			hhcd->hc[chnum].do_ping = 0U;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3319      	adds	r3, #25
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	334c      	adds	r3, #76	@ 0x4c
 8002d64:	2202      	movs	r2, #2
 8002d66:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_ACK;
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	334d      	adds	r3, #77	@ 0x4d
 8002d78:	2203      	movs	r2, #3
 8002d7a:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f004 f9c2 	bl	800710e <USB_HC_Halt>
		}

		if ((hhcd->hc[chnum].do_ssplit == 1U)
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	331a      	adds	r3, #26
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f040 8437 	bne.w	8003610 <HCD_HC_OUT_IRQHandler+0x978>
				&& (hhcd->hc[chnum].do_csplit == 0U)) {
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	331b      	adds	r3, #27
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 842b 	bne.w	8003610 <HCD_HC_OUT_IRQHandler+0x978>
			if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC) {
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3326      	adds	r3, #38	@ 0x26
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d009      	beq.n	8002de4 <HCD_HC_OUT_IRQHandler+0x14c>
				hhcd->hc[chnum].do_csplit = 1U;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	331b      	adds	r3, #27
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
			}

			hhcd->hc[chnum].state = HC_ACK;
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	334d      	adds	r3, #77	@ 0x4d
 8002df4:	2203      	movs	r2, #3
 8002df6:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 f984 	bl	800710e <USB_HC_Halt>

			/* reset error_count */
			hhcd->hc[chnum].ErrCnt = 0U;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3344      	adds	r3, #68	@ 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e3f9      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR)) {
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fbce 	bl	80065c6 <USB_ReadChInterrupts>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e34:	d111      	bne.n	8002e5a <HCD_HC_OUT_IRQHandler+0x1c2>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e42:	461a      	mov	r2, r3
 8002e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e48:	6093      	str	r3, [r2, #8]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f004 f95b 	bl	800710e <USB_HC_Halt>
 8002e58:	e3da      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC)) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 fbaf 	bl	80065c6 <USB_ReadChInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d168      	bne.n	8002f44 <HCD_HC_OUT_IRQHandler+0x2ac>
		hhcd->hc[chnum].ErrCnt = 0U;
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3344      	adds	r3, #68	@ 0x44
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

		/* transaction completed with NYET state, update do ping state */
		if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fb99 	bl	80065c6 <USB_ReadChInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b40      	cmp	r3, #64	@ 0x40
 8002e9c:	d112      	bne.n	8002ec4 <HCD_HC_OUT_IRQHandler+0x22c>
			hhcd->hc[chnum].do_ping = 1U;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3319      	adds	r3, #25
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2340      	movs	r3, #64	@ 0x40
 8002ec2:	6093      	str	r3, [r2, #8]
		}

		if (hhcd->hc[chnum].do_csplit != 0U) {
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	331b      	adds	r3, #27
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d019      	beq.n	8002f0e <HCD_HC_OUT_IRQHandler+0x276>
			hhcd->hc[chnum].do_csplit = 0U;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	331b      	adds	r3, #27
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	0151      	lsls	r1, r2, #5
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	440a      	add	r2, r1
 8002f04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0c:	6053      	str	r3, [r2, #4]
		}

		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XFRC;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	334d      	adds	r3, #77	@ 0x4d
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f004 f8e6 	bl	800710e <USB_HC_Halt>
 8002f42:	e365      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fb3a 	bl	80065c6 <USB_ReadChInterrupts>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	d139      	bne.n	8002fd0 <HCD_HC_OUT_IRQHandler+0x338>
		hhcd->hc[chnum].state = HC_NYET;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	334d      	adds	r3, #77	@ 0x4d
 8002f6c:	2205      	movs	r2, #5
 8002f6e:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ssplit == 0U) {
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	331a      	adds	r3, #26
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HCD_HC_OUT_IRQHandler+0x302>
			hhcd->hc[chnum].do_ping = 1U;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3319      	adds	r3, #25
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
		}

		hhcd->hc[chnum].ErrCnt = 0U;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3344      	adds	r3, #68	@ 0x44
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 f8a9 	bl	800710e <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2340      	movs	r3, #64	@ 0x40
 8002fcc:	6093      	str	r3, [r2, #8]
 8002fce:	e31f      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL)) {
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 faf4 	bl	80065c6 <USB_ReadChInterrupts>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d11a      	bne.n	800301e <HCD_HC_OUT_IRQHandler+0x386>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_STALL;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	334d      	adds	r3, #77	@ 0x4d
 800300a:	2206      	movs	r2, #6
 800300c:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f004 f879 	bl	800710e <USB_HC_Halt>
 800301c:	e2f8      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK)) {
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f003 facd 	bl	80065c6 <USB_ReadChInterrupts>
 800302c:	4603      	mov	r3, r0
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b10      	cmp	r3, #16
 8003034:	d144      	bne.n	80030c0 <HCD_HC_OUT_IRQHandler+0x428>
		hhcd->hc[chnum].ErrCnt = 0U;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3344      	adds	r3, #68	@ 0x44
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
		hhcd->hc[chnum].state = HC_NAK;
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	334d      	adds	r3, #77	@ 0x4d
 800305a:	2204      	movs	r2, #4
 800305c:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ping == 0U) {
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3319      	adds	r3, #25
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d114      	bne.n	800309e <HCD_HC_OUT_IRQHandler+0x406>
			if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH) {
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3318      	adds	r3, #24
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HCD_HC_OUT_IRQHandler+0x406>
				hhcd->hc[chnum].do_ping = 1U;
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3319      	adds	r3, #25
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
			}
		}

		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f004 f831 	bl	800710e <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	2310      	movs	r3, #16
 80030bc:	6093      	str	r3, [r2, #8]
 80030be:	e2a7      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR)) {
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 fa7c 	bl	80065c6 <USB_ReadChInterrupts>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d4:	2b80      	cmp	r3, #128	@ 0x80
 80030d6:	f040 8083 	bne.w	80031e0 <HCD_HC_OUT_IRQHandler+0x548>
		if (hhcd->Init.dma_enable == 0U) {
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	799b      	ldrb	r3, [r3, #6]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d111      	bne.n	8003106 <HCD_HC_OUT_IRQHandler+0x46e>
			hhcd->hc[chnum].state = HC_XACTERR;
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	334d      	adds	r3, #77	@ 0x4d
 80030f2:	2207      	movs	r2, #7
 80030f4:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f004 f805 	bl	800710e <USB_HC_Halt>
 8003104:	e062      	b.n	80031cc <HCD_HC_OUT_IRQHandler+0x534>
		} else {
			hhcd->hc[chnum].ErrCnt++;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3344      	adds	r3, #68	@ 0x44
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1c59      	adds	r1, r3, #1
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4403      	add	r3, r0
 8003126:	3344      	adds	r3, #68	@ 0x44
 8003128:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3344      	adds	r3, #68	@ 0x44
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d922      	bls.n	8003186 <HCD_HC_OUT_IRQHandler+0x4ee>
				hhcd->hc[chnum].ErrCnt = 0U;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3344      	adds	r3, #68	@ 0x44
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
				hhcd->hc[chnum].urb_state = URB_ERROR;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334c      	adds	r3, #76	@ 0x4c
 8003164:	2204      	movs	r2, #4
 8003166:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
				HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334c      	adds	r3, #76	@ 0x4c
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f006 fb1e 	bl	80097c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003184:	e022      	b.n	80031cc <HCD_HC_OUT_IRQHandler+0x534>
						hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	334c      	adds	r3, #76	@ 0x4c
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]

				/* Re-activate the channel  */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031b0:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031b8:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6013      	str	r3, [r2, #0]
			}
		}
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	e217      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR)) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f003 f9ec 	bl	80065c6 <USB_ReadChInterrupts>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f8:	d11b      	bne.n	8003232 <HCD_HC_OUT_IRQHandler+0x59a>
		hhcd->hc[chnum].state = HC_DATATGLERR;
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	334d      	adds	r3, #77	@ 0x4d
 800320a:	2209      	movs	r2, #9
 800320c:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f003 ff79 	bl	800710e <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003228:	461a      	mov	r2, r3
 800322a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800322e:	6093      	str	r3, [r2, #8]
 8003230:	e1ee      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH)) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f003 f9c3 	bl	80065c6 <USB_ReadChInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	f040 81df 	bne.w	800360a <HCD_HC_OUT_IRQHandler+0x972>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003258:	461a      	mov	r2, r3
 800325a:	2302      	movs	r3, #2
 800325c:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].state == HC_XFRC) {
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	334d      	adds	r3, #77	@ 0x4d
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 8093 	bne.w	800339c <HCD_HC_OUT_IRQHandler+0x704>
			hhcd->hc[chnum].state = HC_HALTED;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334d      	adds	r3, #77	@ 0x4d
 8003286:	2202      	movs	r2, #2
 8003288:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	334c      	adds	r3, #76	@ 0x4c
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]

			if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	3326      	adds	r3, #38	@ 0x26
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d00b      	beq.n	80032cc <HCD_HC_OUT_IRQHandler+0x634>
					|| (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)) {
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	3326      	adds	r3, #38	@ 0x26
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	f040 8190 	bne.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
				if (hhcd->Init.dma_enable == 0U) {
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	799b      	ldrb	r3, [r3, #6]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d115      	bne.n	8003300 <HCD_HC_OUT_IRQHandler+0x668>
					hhcd->hc[chnum].toggle_out ^= 1U;
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	333d      	adds	r3, #61	@ 0x3d
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	f083 0301 	eor.w	r3, r3, #1
 80032ec:	b2d8      	uxtb	r0, r3
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	333d      	adds	r3, #61	@ 0x3d
 80032fc:	4602      	mov	r2, r0
 80032fe:	701a      	strb	r2, [r3, #0]
				}

				if ((hhcd->Init.dma_enable == 1U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	799b      	ldrb	r3, [r3, #6]
 8003304:	2b01      	cmp	r3, #1
 8003306:	f040 8171 	bne.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
						&& (hhcd->hc[chnum].xfer_len > 0U)) {
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	3334      	adds	r3, #52	@ 0x34
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8165 	beq.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
					num_packets = (hhcd->hc[chnum].xfer_len
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3334      	adds	r3, #52	@ 0x34
 8003332:	6819      	ldr	r1, [r3, #0]
							+ hhcd->hc[chnum].max_packet - 1U)
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4403      	add	r3, r0
 8003342:	3328      	adds	r3, #40	@ 0x28
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	440b      	add	r3, r1
 8003348:	1e59      	subs	r1, r3, #1
							/ hhcd->hc[chnum].max_packet;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4403      	add	r3, r0
 8003358:	3328      	adds	r3, #40	@ 0x28
 800335a:	881b      	ldrh	r3, [r3, #0]
					num_packets = (hhcd->hc[chnum].xfer_len
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	60bb      	str	r3, [r7, #8]

					if ((num_packets & 1U) != 0U) {
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 813f 	beq.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
						hhcd->hc[chnum].toggle_out ^= 1U;
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	333d      	adds	r3, #61	@ 0x3d
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	f083 0301 	eor.w	r3, r3, #1
 8003386:	b2d8      	uxtb	r0, r3
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	333d      	adds	r3, #61	@ 0x3d
 8003396:	4602      	mov	r2, r0
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e127      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x954>
					}
				}
			}
		} else if (hhcd->hc[chnum].state == HC_ACK) {
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334d      	adds	r3, #77	@ 0x4d
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d120      	bne.n	80033f4 <HCD_HC_OUT_IRQHandler+0x75c>
			hhcd->hc[chnum].state = HC_HALTED;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	334d      	adds	r3, #77	@ 0x4d
 80033c2:	2202      	movs	r2, #2
 80033c4:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	331b      	adds	r3, #27
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 8107 	bne.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	334c      	adds	r3, #76	@ 0x4c
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e0fb      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x954>
			}
		} else if (hhcd->hc[chnum].state == HC_NAK) {
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	334d      	adds	r3, #77	@ 0x4d
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d13a      	bne.n	8003480 <HCD_HC_OUT_IRQHandler+0x7e8>
			hhcd->hc[chnum].state = HC_HALTED;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	334d      	adds	r3, #77	@ 0x4d
 800341a:	2202      	movs	r2, #2
 800341c:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	334c      	adds	r3, #76	@ 0x4c
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	331b      	adds	r3, #27
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 80d1 	bne.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
				hhcd->hc[chnum].do_csplit = 0U;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	331b      	adds	r3, #27
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
				__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	0151      	lsls	r1, r2, #5
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	440a      	add	r2, r1
 8003474:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800347c:	6053      	str	r3, [r2, #4]
 800347e:	e0b5      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x954>
			}
		} else if (hhcd->hc[chnum].state == HC_NYET) {
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	334d      	adds	r3, #77	@ 0x4d
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b05      	cmp	r3, #5
 8003494:	d114      	bne.n	80034c0 <HCD_HC_OUT_IRQHandler+0x828>
			hhcd->hc[chnum].state = HC_HALTED;
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	334d      	adds	r3, #77	@ 0x4d
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	334c      	adds	r3, #76	@ 0x4c
 80034ba:	2202      	movs	r2, #2
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e095      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x954>
		} else if (hhcd->hc[chnum].state == HC_STALL) {
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	334d      	adds	r3, #77	@ 0x4d
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d114      	bne.n	8003500 <HCD_HC_OUT_IRQHandler+0x868>
			hhcd->hc[chnum].state = HC_HALTED;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	334d      	adds	r3, #77	@ 0x4d
 80034e6:	2202      	movs	r2, #2
 80034e8:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_STALL;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	334c      	adds	r3, #76	@ 0x4c
 80034fa:	2205      	movs	r2, #5
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e075      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x954>
		} else if ((hhcd->hc[chnum].state == HC_XACTERR)
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334d      	adds	r3, #77	@ 0x4d
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b07      	cmp	r3, #7
 8003514:	d00a      	beq.n	800352c <HCD_HC_OUT_IRQHandler+0x894>
				|| (hhcd->hc[chnum].state == HC_DATATGLERR)) {
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	334d      	adds	r3, #77	@ 0x4d
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b09      	cmp	r3, #9
 800352a:	d170      	bne.n	800360e <HCD_HC_OUT_IRQHandler+0x976>
			hhcd->hc[chnum].state = HC_HALTED;
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	334d      	adds	r3, #77	@ 0x4d
 800353c:	2202      	movs	r2, #2
 800353e:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3344      	adds	r3, #68	@ 0x44
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4403      	add	r3, r0
 8003560:	3344      	adds	r3, #68	@ 0x44
 8003562:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3344      	adds	r3, #68	@ 0x44
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d914      	bls.n	80035a4 <HCD_HC_OUT_IRQHandler+0x90c>
				hhcd->hc[chnum].ErrCnt = 0U;
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3344      	adds	r3, #68	@ 0x44
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
				hhcd->hc[chnum].urb_state = URB_ERROR;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	334c      	adds	r3, #76	@ 0x4c
 800359e:	2204      	movs	r2, #4
 80035a0:	701a      	strb	r2, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80035a2:	e022      	b.n	80035ea <HCD_HC_OUT_IRQHandler+0x952>
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	334c      	adds	r3, #76	@ 0x4c
 80035b4:	2202      	movs	r2, #2
 80035b6:	701a      	strb	r2, [r3, #0]

				/* re-activate the channel  */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035ce:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035d6:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6013      	str	r3, [r2, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80035ea:	bf00      	nop
		}

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
		HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334c      	adds	r3, #76	@ 0x4c
 80035fc:	781a      	ldrb	r2, [r3, #0]
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f006 f8dc 	bl	80097c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003608:	e002      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
				hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
	} else {
		return;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
			return;
 800360e:	bf00      	nop
	}
}
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HCD_RXQLVL_IRQHandler>:
/**
 * @brief  Handle Rx Queue Level interrupt requests.
 * @param  hhcd HCD handle
 * @retval none
 */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd) {
 8003616:	b580      	push	{r7, lr}
 8003618:	b08a      	sub	sp, #40	@ 0x28
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t USBx_BASE = (uint32_t) USBx;
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	623b      	str	r3, [r7, #32]
	uint32_t GrxstspReg;
	uint32_t xferSizePktCnt;
	uint32_t tmpreg;
	uint32_t chnum;

	GrxstspReg = hhcd->Instance->GRXSTSP;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	61fb      	str	r3, [r7, #28]
	chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	61bb      	str	r3, [r7, #24]
	pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	0c5b      	lsrs	r3, r3, #17
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	617b      	str	r3, [r7, #20]
	pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800364a:	613b      	str	r3, [r7, #16]

	switch (pktsts) {
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d004      	beq.n	800365c <HCD_RXQLVL_IRQHandler+0x46>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b05      	cmp	r3, #5
 8003656:	f000 80b6 	beq.w	80037c6 <HCD_RXQLVL_IRQHandler+0x1b0>
		break;

	case GRXSTS_PKTSTS_IN_XFER_COMP:
	case GRXSTS_PKTSTS_CH_HALTED:
	default:
		break;
 800365a:	e0b7      	b.n	80037cc <HCD_RXQLVL_IRQHandler+0x1b6>
		if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void*) 0)) {
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80b3 	beq.w	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	332c      	adds	r3, #44	@ 0x2c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80a7 	beq.w	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
			if ((hhcd->hc[chnum].xfer_count + pktcnt)
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	3338      	adds	r3, #56	@ 0x38
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	18d1      	adds	r1, r2, r3
					<= hhcd->hc[chnum].xfer_len) {
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4403      	add	r3, r0
 80036a0:	3334      	adds	r3, #52	@ 0x34
 80036a2:	681b      	ldr	r3, [r3, #0]
			if ((hhcd->hc[chnum].xfer_count + pktcnt)
 80036a4:	4299      	cmp	r1, r3
 80036a6:	f200 8083 	bhi.w	80037b0 <HCD_RXQLVL_IRQHandler+0x19a>
				(void) USB_ReadPacket(hhcd->Instance, hhcd->hc[chnum].xfer_buff,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4613      	mov	r3, r2
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	332c      	adds	r3, #44	@ 0x2c
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	b292      	uxth	r2, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f002 ff13 	bl	80064f0 <USB_ReadPacket>
				hhcd->hc[chnum].xfer_buff += pktcnt;
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	332c      	adds	r3, #44	@ 0x2c
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	18d1      	adds	r1, r2, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4403      	add	r3, r0
 80036ee:	332c      	adds	r3, #44	@ 0x2c
 80036f0:	6019      	str	r1, [r3, #0]
				hhcd->hc[chnum].xfer_count += pktcnt;
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3338      	adds	r3, #56	@ 0x38
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	18d1      	adds	r1, r2, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4403      	add	r3, r0
 8003716:	3338      	adds	r3, #56	@ 0x38
 8003718:	6019      	str	r1, [r3, #0]
						(USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	0cdb      	lsrs	r3, r3, #19
				xferSizePktCnt =
 800372a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372e:	60fb      	str	r3, [r7, #12]
				if ((hhcd->hc[chnum].max_packet == pktcnt)
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3328      	adds	r3, #40	@ 0x28
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4293      	cmp	r3, r2
 8003748:	d13f      	bne.n	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
						&& (xferSizePktCnt > 0U)) {
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03c      	beq.n	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60bb      	str	r3, [r7, #8]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003766:	60bb      	str	r3, [r7, #8]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800376e:	60bb      	str	r3, [r7, #8]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800377c:	461a      	mov	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6013      	str	r3, [r2, #0]
					hhcd->hc[chnum].toggle_in ^= 1U;
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	333c      	adds	r3, #60	@ 0x3c
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2d8      	uxtb	r0, r3
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	333c      	adds	r3, #60	@ 0x3c
 80037aa:	4602      	mov	r2, r0
 80037ac:	701a      	strb	r2, [r3, #0]
		break;
 80037ae:	e00c      	b.n	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
				hhcd->hc[chnum].urb_state = URB_ERROR;
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	334c      	adds	r3, #76	@ 0x4c
 80037c0:	2204      	movs	r2, #4
 80037c2:	701a      	strb	r2, [r3, #0]
		break;
 80037c4:	e001      	b.n	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
		break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HCD_RXQLVL_IRQHandler+0x1b6>
		break;
 80037ca:	bf00      	nop
	}
}
 80037cc:	bf00      	nop
 80037ce:	3728      	adds	r7, #40	@ 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HCD_Port_IRQHandler>:
/**
 * @brief  Handle Host Port interrupt requests.
 * @param  hhcd HCD handle
 * @retval None
 */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	613b      	str	r3, [r7, #16]
	__IO uint32_t hprt0;
	__IO uint32_t hprt0_dup;

	/* Handle Host Port Interrupts */
	hprt0 = USBx_HPRT0;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]
	hprt0_dup = USBx_HPRT0;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]

	hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003800:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	/* Check whether Port Connect detected */
	if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET) {
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b02      	cmp	r3, #2
 800380a:	d10b      	bne.n	8003824 <HCD_Port_IRQHandler+0x50>
		if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS) {
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HCD_Port_IRQHandler+0x48>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
			HAL_HCD_Connect_Callback(hhcd);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f005 ffb6 	bl	8009788 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		}
		hprt0_dup |= USB_OTG_HPRT_PCDET;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f043 0302 	orr.w	r3, r3, #2
 8003822:	60bb      	str	r3, [r7, #8]
	}

	/* Check whether Port Enable Changed */
	if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG) {
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b08      	cmp	r3, #8
 800382c:	d132      	bne.n	8003894 <HCD_Port_IRQHandler+0xc0>
		hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f043 0308 	orr.w	r3, r3, #8
 8003834:	60bb      	str	r3, [r7, #8]

		if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA) {
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b04      	cmp	r3, #4
 800383e:	d126      	bne.n	800388e <HCD_Port_IRQHandler+0xba>
			if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY) {
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7a5b      	ldrb	r3, [r3, #9]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d113      	bne.n	8003870 <HCD_Port_IRQHandler+0x9c>
				if ((hprt0 & USB_OTG_HPRT_PSPD)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800384e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003852:	d106      	bne.n	8003862 <HCD_Port_IRQHandler+0x8e>
						== (HPRT0_PRTSPD_LOW_SPEED << 17)) {
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f002 ffd8 	bl	8006810 <USB_InitFSLSPClkSel>
 8003860:	e011      	b.n	8003886 <HCD_Port_IRQHandler+0xb2>
				} else {
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f002 ffd1 	bl	8006810 <USB_InitFSLSPClkSel>
 800386e:	e00a      	b.n	8003886 <HCD_Port_IRQHandler+0xb2>
				}
			} else {
				if (hhcd->Init.speed == HCD_SPEED_FULL) {
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	79db      	ldrb	r3, [r3, #7]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d106      	bne.n	8003886 <HCD_Port_IRQHandler+0xb2>
					USBx_HOST->HFIR = HFIR_60_MHZ;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800387e:	461a      	mov	r2, r3
 8003880:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003884:	6053      	str	r3, [r2, #4]
				}
			}
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
			HAL_HCD_PortEnabled_Callback(hhcd);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f005 ffa8 	bl	80097dc <HAL_HCD_PortEnabled_Callback>
 800388c:	e002      	b.n	8003894 <HCD_Port_IRQHandler+0xc0>

		} else {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
			HAL_HCD_PortDisabled_Callback(hhcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f005 ffb2 	bl	80097f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		}
	}

	/* Check for an overcurrent */
	if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG) {
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b20      	cmp	r3, #32
 800389c:	d103      	bne.n	80038a6 <HCD_Port_IRQHandler+0xd2>
		hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f043 0320 	orr.w	r3, r3, #32
 80038a4:	60bb      	str	r3, [r7, #8]
	}

	/* Clear Port Interrupts */
	USBx_HPRT0 = hprt0_dup;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038ac:	461a      	mov	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	6013      	str	r3, [r2, #0]
}
 80038b2:	bf00      	nop
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e12b      	b.n	8003b26 <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd f8b0 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	@ 0x24
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800390e:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800391e:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8003920:	f001 fa20 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 8003924:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4a81      	ldr	r2, [pc, #516]	@ (8003b30 <HAL_I2C_Init+0x274>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d807      	bhi.n	8003940 <HAL_I2C_Init+0x84>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a80      	ldr	r2, [pc, #512]	@ (8003b34 <HAL_I2C_Init+0x278>)
 8003934:	4293      	cmp	r3, r2
 8003936:	bf94      	ite	ls
 8003938:	2301      	movls	r3, #1
 800393a:	2300      	movhi	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e006      	b.n	800394e <HAL_I2C_Init+0x92>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a7d      	ldr	r2, [pc, #500]	@ (8003b38 <HAL_I2C_Init+0x27c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	bf94      	ite	ls
 8003948:	2301      	movls	r3, #1
 800394a:	2300      	movhi	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0e7      	b.n	8003b26 <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a78      	ldr	r2, [pc, #480]	@ (8003b3c <HAL_I2C_Init+0x280>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0c9b      	lsrs	r3, r3, #18
 8003960:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a6a      	ldr	r2, [pc, #424]	@ (8003b30 <HAL_I2C_Init+0x274>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d802      	bhi.n	8003990 <HAL_I2C_Init+0xd4>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3301      	adds	r3, #1
 800398e:	e009      	b.n	80039a4 <HAL_I2C_Init+0xe8>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	4a69      	ldr	r2, [pc, #420]	@ (8003b40 <HAL_I2C_Init+0x284>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	3301      	adds	r3, #1
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	495c      	ldr	r1, [pc, #368]	@ (8003b30 <HAL_I2C_Init+0x274>)
 80039c0:	428b      	cmp	r3, r1
 80039c2:	d819      	bhi.n	80039f8 <HAL_I2C_Init+0x13c>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e59      	subs	r1, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d2:	1c59      	adds	r1, r3, #1
 80039d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039d8:	400b      	ands	r3, r1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_I2C_Init+0x138>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1e59      	subs	r1, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f2:	e051      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 80039f4:	2304      	movs	r3, #4
 80039f6:	e04f      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <HAL_I2C_Init+0x168>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	440b      	add	r3, r1
 8003a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e012      	b.n	8003a4a <HAL_I2C_Init+0x18e>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1e58      	subs	r0, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	0099      	lsls	r1, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Init+0x196>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e022      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10e      	bne.n	8003a78 <HAL_I2C_Init+0x1bc>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1e58      	subs	r0, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	440b      	add	r3, r1
 8003a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a76:	e00f      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1e58      	subs	r0, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	0099      	lsls	r1, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	6809      	ldr	r1, [r1, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69da      	ldr	r2, [r3, #28]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6911      	ldr	r1, [r2, #16]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68d2      	ldr	r2, [r2, #12]
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	@ 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	000186a0 	.word	0x000186a0
 8003b34:	001e847f 	.word	0x001e847f
 8003b38:	003d08ff 	.word	0x003d08ff
 8003b3c:	431bde83 	.word	0x431bde83
 8003b40:	10624dd3 	.word	0x10624dd3

08003b44 <HAL_I2S_Init>:
 *         in the I2S_InitTypeDef and create the associated handle.
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
	uint16_t tmpreg;
#endif

	/* Check the I2S handle allocation */
	if (hi2s == NULL) {
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_I2S_Init+0x12>
		return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e128      	b.n	8003da8 <HAL_I2S_Init+0x264>
	assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
	assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
	assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
	assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

	if (hi2s->State == HAL_I2S_STATE_RESET) {
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_I2S_Init+0x32>
		/* Allocate lock resource and initialize it */
		hi2s->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

		/* Initialize Default I2S IrqHandler ISR */
		hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a90      	ldr	r2, [pc, #576]	@ (8003db0 <HAL_I2S_Init+0x26c>)
 8003b6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
		/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
		HAL_I2S_MspInit(hi2s);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7fc ffb1 	bl	8000ad8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}

	hi2s->State = HAL_I2S_STATE_BUSY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	CLEAR_BIT(hi2s->Instance->I2SCFGR,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b8c:	f023 030f 	bic.w	r3, r3, #15
 8003b90:	61d3      	str	r3, [r2, #28]
			(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
	hi2s->Instance->I2SPR = 0x0002U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2202      	movs	r2, #2
 8003b98:	621a      	str	r2, [r3, #32]

	/*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
	/* If the requested audio frequency is not the default, compute the prescaler */
	if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT) {
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d060      	beq.n	8003c64 <HAL_I2S_Init+0x120>
		/* Check the frame length (For the Prescaler computing) ********************/
		if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B) {
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <HAL_I2S_Init+0x6c>
			/* Packet length is 16 bits */
			packetlength = 16U;
 8003baa:	2310      	movs	r3, #16
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e001      	b.n	8003bb4 <HAL_I2S_Init+0x70>
		} else {
			/* Packet length is 32 bits */
			packetlength = 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	617b      	str	r3, [r7, #20]
		}

		/* I2S standard */
		if (hi2s->Init.Standard <= I2S_STANDARD_LSB) {
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d802      	bhi.n	8003bc2 <HAL_I2S_Init+0x7e>
			/* In I2S standard packet length is multiplied by 2 */
			packetlength = packetlength * 2U;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
		i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	f001 f9d8 	bl	8004f78 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bc8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

		/* Compute the Real divider depending on the MCLK output state, with a floating point */
		if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE) {
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bd2:	d125      	bne.n	8003c20 <HAL_I2S_Init+0xdc>
			/* MCLK output is enabled */
			if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_I2S_Init+0xba>
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8003bf8:	3305      	adds	r3, #5
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e01f      	b.n	8003c3e <HAL_I2S_Init+0xfa>
			} else {
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8003c1a:	3305      	adds	r3, #5
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e00e      	b.n	8003c3e <HAL_I2S_Init+0xfa>
			}
		} else {
			/* MCLK output is disabled */
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	461a      	mov	r2, r3
					/ hi2s->Init.AudioFreq)) + 5U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 8003c3a:	3305      	adds	r3, #5
 8003c3c:	613b      	str	r3, [r7, #16]
		}

		/* Remove the flatting point */
		tmp = tmp / 10U;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4a5c      	ldr	r2, [pc, #368]	@ (8003db4 <HAL_I2S_Init+0x270>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	08db      	lsrs	r3, r3, #3
 8003c48:	613b      	str	r3, [r7, #16]

		/* Check the parity of the divider */
		i2sodd = (uint32_t) (tmp & (uint32_t) 1U);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]

		/* Compute the i2sdiv prescaler */
		i2sdiv = (uint32_t) ((tmp - i2sodd) / 2U);
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]

		/* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
		i2sodd = (uint32_t) (i2sodd << 8U);
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	e003      	b.n	8003c6c <HAL_I2S_Init+0x128>
	} else {
		/* Set the default values */
		i2sdiv = 2U;
 8003c64:	2302      	movs	r3, #2
 8003c66:	61fb      	str	r3, [r7, #28]
		i2sodd = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
	}

	/* Test if the divider is 1 or 0 or greater than 0xFF */
	if ((i2sdiv < 2U) || (i2sdiv > 0xFFU)) {
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d902      	bls.n	8003c78 <HAL_I2S_Init+0x134>
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2bff      	cmp	r3, #255	@ 0xff
 8003c76:	d907      	bls.n	8003c88 <HAL_I2S_Init+0x144>
		/* Set the error code and execute error callback*/
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7c:	f043 0210 	orr.w	r2, r3, #16
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	645a      	str	r2, [r3, #68]	@ 0x44
		return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e08f      	b.n	8003da8 <HAL_I2S_Init+0x264>

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

	/* Write to SPIx I2SPR register the computed value */
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
			| (uint32_t) (i2sodd | (uint32_t) hi2s->Init.MCLKOutput));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	ea42 0103 	orr.w	r1, r2, r3
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	621a      	str	r2, [r3, #32]

	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	/* And configure the I2S with the I2S_InitStruct values                      */
	MODIFY_REG(hi2s->Instance->I2SCFGR,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ca6:	f023 030f 	bic.w	r3, r3, #15
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6851      	ldr	r1, [r2, #4]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6892      	ldr	r2, [r2, #8]
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68d2      	ldr	r2, [r2, #12]
 8003cb8:	4311      	orrs	r1, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6992      	ldr	r2, [r2, #24]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

	/* Configure the I2S extended if the full duplex mode is enabled */
	assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

	if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d161      	bne.n	8003d98 <HAL_I2S_Init+0x254>
		/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
		hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a38      	ldr	r2, [pc, #224]	@ (8003db8 <HAL_I2S_Init+0x274>)
 8003cd8:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
		CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a37      	ldr	r2, [pc, #220]	@ (8003dbc <HAL_I2S_Init+0x278>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2S_Init+0x1a4>
 8003ce4:	4b36      	ldr	r3, [pc, #216]	@ (8003dc0 <HAL_I2S_Init+0x27c>)
 8003ce6:	e001      	b.n	8003cec <HAL_I2S_Init+0x1a8>
 8003ce8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	4932      	ldr	r1, [pc, #200]	@ (8003dbc <HAL_I2S_Init+0x278>)
 8003cf4:	428a      	cmp	r2, r1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2S_Init+0x1b8>
 8003cf8:	4a31      	ldr	r2, [pc, #196]	@ (8003dc0 <HAL_I2S_Init+0x27c>)
 8003cfa:	e001      	b.n	8003d00 <HAL_I2S_Init+0x1bc>
 8003cfc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003d00:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d04:	f023 030f 	bic.w	r3, r3, #15
 8003d08:	61d3      	str	r3, [r2, #28]
				(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
		I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8003dbc <HAL_I2S_Init+0x278>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d101      	bne.n	8003d18 <HAL_I2S_Init+0x1d4>
 8003d14:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc0 <HAL_I2S_Init+0x27c>)
 8003d16:	e001      	b.n	8003d1c <HAL_I2S_Init+0x1d8>
 8003d18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	621a      	str	r2, [r3, #32]

		/* Get the I2SCFGR register value */
		tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a25      	ldr	r2, [pc, #148]	@ (8003dbc <HAL_I2S_Init+0x278>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_I2S_Init+0x1ea>
 8003d2a:	4b25      	ldr	r3, [pc, #148]	@ (8003dc0 <HAL_I2S_Init+0x27c>)
 8003d2c:	e001      	b.n	8003d32 <HAL_I2S_Init+0x1ee>
 8003d2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	817b      	strh	r3, [r7, #10]

		/* Get the mode to be configured for the extended I2S */
		if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d3e:	d003      	beq.n	8003d48 <HAL_I2S_Init+0x204>
				|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <HAL_I2S_Init+0x20c>
			tmp = I2S_MODE_SLAVE_RX;
 8003d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e001      	b.n	8003d54 <HAL_I2S_Init+0x210>
		} else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
		{
			tmp = I2S_MODE_SLAVE_TX;
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]
		}

		/* Configure the I2S Slave with the I2S Master parameter values */
		tmpreg |=
				(uint16_t) ((uint16_t) SPI_I2SCFGR_I2SMOD | (uint16_t) tmp
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.Standard
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	b29b      	uxth	r3, r3
		tmpreg |=
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.DataFormat
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	b29b      	uxth	r3, r3
		tmpreg |=
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.CPOL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	b29b      	uxth	r3, r3
		tmpreg |=
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	897b      	ldrh	r3, [r7, #10]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d80:	817b      	strh	r3, [r7, #10]

		/* Write to SPIx I2SCFGR */
		WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a0d      	ldr	r2, [pc, #52]	@ (8003dbc <HAL_I2S_Init+0x278>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_I2S_Init+0x24c>
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc0 <HAL_I2S_Init+0x27c>)
 8003d8e:	e001      	b.n	8003d94 <HAL_I2S_Init+0x250>
 8003d90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d94:	897a      	ldrh	r2, [r7, #10]
 8003d96:	61da      	str	r2, [r3, #28]
	}
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	645a      	str	r2, [r3, #68]	@ 0x44
	hi2s->State = HAL_I2S_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	08003ebb 	.word	0x08003ebb
 8003db4:	cccccccd 	.word	0xcccccccd
 8003db8:	08003fd1 	.word	0x08003fd1
 8003dbc:	40003800 	.word	0x40003800
 8003dc0:	40003400 	.word	0x40003400

08003dc4 <HAL_I2S_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_TxCpltCallback could be implemented in the user file
	 */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_I2S_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_I2S_ErrorCallback>:
 * @brief  I2S error callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_ErrorCallback could be implemented in the user file
	 */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <I2S_Transmit_IT>:
 * @brief  Transmit an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	/* Transmit data */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60da      	str	r2, [r3, #12]
	hi2s->pTxBuffPtr++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	1c9a      	adds	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	@ 0x24
	hi2s->TxXferCount--;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10e      	bne.n	8003e54 <I2S_Transmit_IT+0x54>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e44:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
		HAL_I2S_TxCpltCallback(hi2s);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ffb8 	bl	8003dc4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <I2S_Receive_IT>:
 * @brief  Receive an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	/* Receive data */
	(*hi2s->pRxBuffPtr) = (uint16_t) hi2s->Instance->DR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	801a      	strh	r2, [r3, #0]
	hi2s->pRxBuffPtr++;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	1c9a      	adds	r2, r3, #2
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hi2s->RxXferCount--;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10e      	bne.n	8003eb2 <I2S_Receive_IT+0x56>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ea2:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
		HAL_I2S_RxCpltCallback(hi2s);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff ff93 	bl	8003dd8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <I2S_IRQHandler>:
 * @brief  This function handles I2S interrupt request.
 * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s) {
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b086      	sub	sp, #24
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	617b      	str	r3, [r7, #20]

	if (hi2s->State == HAL_I2S_STATE_BUSY_RX) {
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d13a      	bne.n	8003f4c <I2S_IRQHandler+0x92>
		/* I2S in mode Receiver ------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d109      	bne.n	8003ef4 <I2S_IRQHandler+0x3a>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET)) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d102      	bne.n	8003ef4 <I2S_IRQHandler+0x3a>
			I2S_Receive_IT(hi2s);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ffb4 	bl	8003e5c <I2S_Receive_IT>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efa:	2b40      	cmp	r3, #64	@ 0x40
 8003efc:	d126      	bne.n	8003f4c <I2S_IRQHandler+0x92>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d11f      	bne.n	8003f4c <I2S_IRQHandler+0x92>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f1a:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	693b      	ldr	r3, [r7, #16]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f043 0202 	orr.w	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ff50 	bl	8003dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}

	if (hi2s->State == HAL_I2S_STATE_BUSY_TX) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d136      	bne.n	8003fc6 <I2S_IRQHandler+0x10c>
		/* I2S in mode Transmitter -----------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d109      	bne.n	8003f76 <I2S_IRQHandler+0xbc>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET)) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6c:	2b80      	cmp	r3, #128	@ 0x80
 8003f6e:	d102      	bne.n	8003f76 <I2S_IRQHandler+0xbc>
			I2S_Transmit_IT(hi2s);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ff45 	bl	8003e00 <I2S_Transmit_IT>
		}

		/* I2S Underrun error interrupt occurred --------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d122      	bne.n	8003fc6 <I2S_IRQHandler+0x10c>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d11b      	bne.n	8003fc6 <I2S_IRQHandler+0x10c>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f9c:	605a      	str	r2, [r3, #4]

			/* Clear Underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb8:	f043 0204 	orr.w	r2, r3, #4
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ff13 	bl	8003dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8003fc6:	bf00      	nop
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_I2SEx_FullDuplex_IRQHandler>:
/**
 * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
 * @param  hi2s I2S handle
 * @retval HAL status
 */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a92      	ldr	r2, [pc, #584]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003fea:	4b92      	ldr	r3, [pc, #584]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fec:	e001      	b.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003fee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	61bb      	str	r3, [r7, #24]
	__IO uint32_t i2scr2 = hi2s->Instance->CR2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	617b      	str	r3, [r7, #20]
	__IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a8b      	ldr	r2, [pc, #556]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004008:	4b8a      	ldr	r3, [pc, #552]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800400a:	e001      	b.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800400c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	613b      	str	r3, [r7, #16]

	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800401c:	d004      	beq.n	8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
			|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 8099 	bne.w	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
		/* I2S in mode Transmitter -------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d107      	bne.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
				&& ((i2scr2 & I2S_IT_TXE) != RESET)) {
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2S(hi2s);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f925 	bl	800428c <I2SEx_TxISR_I2S>
		}

		/* I2Sext in mode Receiver -----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d107      	bne.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
				&& ((i2sextcr2 & I2S_IT_RXNE) != RESET)) {
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2SExt(hi2s);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9c8 	bl	80043ec <I2SEx_RxISR_I2SExt>
		}

		/* I2Sext Overrun error interrupt occurred --------------------------------*/
		if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d13a      	bne.n	80040dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d035      	beq.n	80040dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a6e      	ldr	r2, [pc, #440]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800407a:	4b6e      	ldr	r3, [pc, #440]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800407c:	e001      	b.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800407e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4969      	ldr	r1, [pc, #420]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800408a:	428b      	cmp	r3, r1
 800408c:	d101      	bne.n	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800408e:	4b69      	ldr	r3, [pc, #420]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004090:	e001      	b.n	8004096 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004092:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004096:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800409a:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040aa:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	f043 0202 	orr.w	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fe88 	bl	8003dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2S Underrun error interrupt occurred ----------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	f040 80c3 	bne.w	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80bd 	beq.w	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004102:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a49      	ldr	r2, [pc, #292]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800410e:	4b49      	ldr	r3, [pc, #292]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004110:	e001      	b.n	8004116 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004112:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4944      	ldr	r1, [pc, #272]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800411e:	428b      	cmp	r3, r1
 8004120:	d101      	bne.n	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004122:	4b44      	ldr	r3, [pc, #272]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004124:	e001      	b.n	800412a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004126:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800412a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800412e:	605a      	str	r2, [r3, #4]

			/* Clear underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004130:	2300      	movs	r3, #0
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f043 0204 	orr.w	r2, r3, #4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fe4a 	bl	8003dec <HAL_I2S_ErrorCallback>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8004158:	e089      	b.n	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
		}
	}
	/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
	else {
		/* I2Sext in mode Transmitter ----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d107      	bne.n	8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
				&& ((i2sextcr2 & I2S_IT_TXE) != RESET)) {
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2SExt(hi2s);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8be 	bl	80042f0 <I2SEx_TxISR_I2SExt>
		}

		/* I2S in mode Receiver --------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d107      	bne.n	800418e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
				&& ((i2scr2 & I2S_IT_RXNE) != RESET)) {
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2S(hi2s);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8fd 	bl	8004388 <I2SEx_RxISR_I2S>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d12f      	bne.n	80041f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02a      	beq.n	80041f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041b0:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041be:	e001      	b.n	80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4919      	ldr	r1, [pc, #100]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041cc:	428b      	cmp	r3, r1
 80041ce:	d101      	bne.n	80041d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80041d0:	4b18      	ldr	r3, [pc, #96]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041d2:	e001      	b.n	80041d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80041d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041dc:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	f043 0202 	orr.w	r2, r3, #2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff fdfa 	bl	8003dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2Sext Underrun error interrupt occurred -------------------------------*/
		if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d136      	bne.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d031      	beq.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a07      	ldr	r2, [pc, #28]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d101      	bne.n	800421a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004216:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004218:	e001      	b.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800421a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4902      	ldr	r1, [pc, #8]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004226:	428b      	cmp	r3, r1
 8004228:	d106      	bne.n	8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800422a:	4b02      	ldr	r3, [pc, #8]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800422c:	e006      	b.n	800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800422e:	bf00      	nop
 8004230:	40003800 	.word	0x40003800
 8004234:	40003400 	.word	0x40003400
 8004238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800423c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004240:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004250:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fdc0 	bl	8003dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 800426c:	e000      	b.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 800426e:	bf00      	nop
}
 8004270:	bf00      	nop
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_I2SEx_TxRxCpltCallback>:
/**
 * @brief  Tx and Rx Transfer completed callback
 * @param  hi2s I2S handle
 * @retval None
 */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
	 */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <I2SEx_TxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	1c99      	adds	r1, r3, #2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6251      	str	r1, [r2, #36]	@ 0x24
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d113      	bne.n	80042e6 <I2SEx_TxISR_I2S+0x5a>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042cc:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <I2SEx_TxISR_I2S+0x5a>
			hi2s->State = HAL_I2S_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff ffc9 	bl	8004278 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <I2SEx_TxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	1c99      	adds	r1, r3, #2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6251      	str	r1, [r2, #36]	@ 0x24
 8004302:	8819      	ldrh	r1, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1d      	ldr	r2, [pc, #116]	@ (8004380 <I2SEx_TxISR_I2SExt+0x90>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <I2SEx_TxISR_I2SExt+0x22>
 800430e:	4b1d      	ldr	r3, [pc, #116]	@ (8004384 <I2SEx_TxISR_I2SExt+0x94>)
 8004310:	e001      	b.n	8004316 <I2SEx_TxISR_I2SExt+0x26>
 8004312:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004316:	460a      	mov	r2, r1
 8004318:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d121      	bne.n	8004376 <I2SEx_TxISR_I2SExt+0x86>
		/* Disable I2Sext TXE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a12      	ldr	r2, [pc, #72]	@ (8004380 <I2SEx_TxISR_I2SExt+0x90>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <I2SEx_TxISR_I2SExt+0x50>
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <I2SEx_TxISR_I2SExt+0x94>)
 800433e:	e001      	b.n	8004344 <I2SEx_TxISR_I2SExt+0x54>
 8004340:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	490d      	ldr	r1, [pc, #52]	@ (8004380 <I2SEx_TxISR_I2SExt+0x90>)
 800434c:	428b      	cmp	r3, r1
 800434e:	d101      	bne.n	8004354 <I2SEx_TxISR_I2SExt+0x64>
 8004350:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <I2SEx_TxISR_I2SExt+0x94>)
 8004352:	e001      	b.n	8004358 <I2SEx_TxISR_I2SExt+0x68>
 8004354:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004358:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800435c:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <I2SEx_TxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff81 	bl	8004278 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40003800 	.word	0x40003800
 8004384:	40003400 	.word	0x40003400

08004388 <I2SEx_RxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68d8      	ldr	r0, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	1c99      	adds	r1, r3, #2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80043a0:	b282      	uxth	r2, r0
 80043a2:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d113      	bne.n	80043e4 <I2SEx_RxISR_I2S+0x5c>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043ca:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <I2SEx_RxISR_I2S+0x5c>
			hi2s->State = HAL_I2S_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff ff4a 	bl	8004278 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <I2SEx_RxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a20      	ldr	r2, [pc, #128]	@ (800447c <I2SEx_RxISR_I2SExt+0x90>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <I2SEx_RxISR_I2SExt+0x16>
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <I2SEx_RxISR_I2SExt+0x94>)
 8004400:	e001      	b.n	8004406 <I2SEx_RxISR_I2SExt+0x1a>
 8004402:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004406:	68d8      	ldr	r0, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	1c99      	adds	r1, r3, #2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004412:	b282      	uxth	r2, r0
 8004414:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d121      	bne.n	8004472 <I2SEx_RxISR_I2SExt+0x86>
		/* Disable I2Sext RXNE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a12      	ldr	r2, [pc, #72]	@ (800447c <I2SEx_RxISR_I2SExt+0x90>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <I2SEx_RxISR_I2SExt+0x50>
 8004438:	4b11      	ldr	r3, [pc, #68]	@ (8004480 <I2SEx_RxISR_I2SExt+0x94>)
 800443a:	e001      	b.n	8004440 <I2SEx_RxISR_I2SExt+0x54>
 800443c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	490d      	ldr	r1, [pc, #52]	@ (800447c <I2SEx_RxISR_I2SExt+0x90>)
 8004448:	428b      	cmp	r3, r1
 800444a:	d101      	bne.n	8004450 <I2SEx_RxISR_I2SExt+0x64>
 800444c:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <I2SEx_RxISR_I2SExt+0x94>)
 800444e:	e001      	b.n	8004454 <I2SEx_RxISR_I2SExt+0x68>
 8004450:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004454:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004458:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <I2SEx_RxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ff03 	bl	8004278 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40003800 	.word	0x40003800
 8004480:	40003400 	.word	0x40003400

08004484 <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e267      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d075      	beq.n	800458e <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044a2:	4b88      	ldr	r3, [pc, #544]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d00c      	beq.n	80044c8 <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044ae:	4b85      	ldr	r3, [pc, #532]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d112      	bne.n	80044e0 <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80044ba:	4b82      	ldr	r3, [pc, #520]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c8:	4b7e      	ldr	r3, [pc, #504]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d05b      	beq.n	800458c <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d157      	bne.n	800458c <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e242      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e8:	d106      	bne.n	80044f8 <HAL_RCC_OscConfig+0x74>
 80044ea:	4b76      	ldr	r3, [pc, #472]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a75      	ldr	r2, [pc, #468]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e01d      	b.n	8004534 <HAL_RCC_OscConfig+0xb0>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004500:	d10c      	bne.n	800451c <HAL_RCC_OscConfig+0x98>
 8004502:	4b70      	ldr	r3, [pc, #448]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6f      	ldr	r2, [pc, #444]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b6d      	ldr	r3, [pc, #436]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6c      	ldr	r2, [pc, #432]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e00b      	b.n	8004534 <HAL_RCC_OscConfig+0xb0>
 800451c:	4b69      	ldr	r3, [pc, #420]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a68      	ldr	r2, [pc, #416]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b66      	ldr	r3, [pc, #408]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a65      	ldr	r2, [pc, #404]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 800452e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004532:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d013      	beq.n	8004564 <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800453c:	f7fc fd00 	bl	8000f40 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004544:	f7fc fcfc 	bl	8000f40 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	@ 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e207      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004556:	4b5b      	ldr	r3, [pc, #364]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0xc0>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004564:	f7fc fcec 	bl	8000f40 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800456c:	f7fc fce8 	bl	8000f40 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	@ 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e1f3      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800457e:	4b51      	ldr	r3, [pc, #324]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0xe8>
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458c:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d063      	beq.n	8004662 <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800459a:	4b4a      	ldr	r3, [pc, #296]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045a6:	4b47      	ldr	r3, [pc, #284]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d11c      	bne.n	80045ec <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80045b2:	4b44      	ldr	r3, [pc, #272]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d116      	bne.n	80045ec <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045be:	4b41      	ldr	r3, [pc, #260]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d001      	beq.n	80045d6 <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e1c7      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80045d6:	4b3b      	ldr	r3, [pc, #236]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4937      	ldr	r1, [pc, #220]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e03a      	b.n	8004662 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d020      	beq.n	8004636 <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80045f4:	4b34      	ldr	r3, [pc, #208]	@ (80046c8 <HAL_RCC_OscConfig+0x244>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80045fa:	f7fc fca1 	bl	8000f40 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004602:	f7fc fc9d 	bl	8000f40 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e1a8      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004614:	4b2b      	ldr	r3, [pc, #172]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004620:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4925      	ldr	r1, [pc, #148]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004630:	4313      	orrs	r3, r2
 8004632:	600b      	str	r3, [r1, #0]
 8004634:	e015      	b.n	8004662 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8004636:	4b24      	ldr	r3, [pc, #144]	@ (80046c8 <HAL_RCC_OscConfig+0x244>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800463c:	f7fc fc80 	bl	8000f40 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004644:	f7fc fc7c 	bl	8000f40 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e187      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8004656:	4b1b      	ldr	r3, [pc, #108]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d036      	beq.n	80046dc <HAL_RCC_OscConfig+0x258>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d016      	beq.n	80046a4 <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8004676:	4b15      	ldr	r3, [pc, #84]	@ (80046cc <HAL_RCC_OscConfig+0x248>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800467c:	f7fc fc60 	bl	8000f40 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004684:	f7fc fc5c 	bl	8000f40 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e167      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8004696:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x200>
 80046a2:	e01b      	b.n	80046dc <HAL_RCC_OscConfig+0x258>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80046a4:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <HAL_RCC_OscConfig+0x248>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80046aa:	f7fc fc49 	bl	8000f40 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80046b0:	e00e      	b.n	80046d0 <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80046b2:	f7fc fc45 	bl	8000f40 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d907      	bls.n	80046d0 <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e150      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
 80046c4:	40023800 	.word	0x40023800
 80046c8:	42470000 	.word	0x42470000
 80046cc:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80046d0:	4b88      	ldr	r3, [pc, #544]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80046d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ea      	bne.n	80046b2 <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8097 	beq.w	8004818 <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80046ee:	4b81      	ldr	r3, [pc, #516]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10f      	bne.n	800471a <HAL_RCC_OscConfig+0x296>
			__HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	4b7d      	ldr	r3, [pc, #500]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	4a7c      	ldr	r2, [pc, #496]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004708:	6413      	str	r3, [r2, #64]	@ 0x40
 800470a:	4b7a      	ldr	r3, [pc, #488]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800471a:	4b77      	ldr	r3, [pc, #476]	@ (80048f8 <HAL_RCC_OscConfig+0x474>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d118      	bne.n	8004758 <HAL_RCC_OscConfig+0x2d4>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8004726:	4b74      	ldr	r3, [pc, #464]	@ (80048f8 <HAL_RCC_OscConfig+0x474>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a73      	ldr	r2, [pc, #460]	@ (80048f8 <HAL_RCC_OscConfig+0x474>)
 800472c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004730:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8004732:	f7fc fc05 	bl	8000f40 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x2c8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800473a:	f7fc fc01 	bl	8000f40 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x2c8>
					return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e10c      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800474c:	4b6a      	ldr	r3, [pc, #424]	@ (80048f8 <HAL_RCC_OscConfig+0x474>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d106      	bne.n	800476e <HAL_RCC_OscConfig+0x2ea>
 8004760:	4b64      	ldr	r3, [pc, #400]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004764:	4a63      	ldr	r2, [pc, #396]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6713      	str	r3, [r2, #112]	@ 0x70
 800476c:	e01c      	b.n	80047a8 <HAL_RCC_OscConfig+0x324>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b05      	cmp	r3, #5
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0x30c>
 8004776:	4b5f      	ldr	r3, [pc, #380]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477a:	4a5e      	ldr	r2, [pc, #376]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 800477c:	f043 0304 	orr.w	r3, r3, #4
 8004780:	6713      	str	r3, [r2, #112]	@ 0x70
 8004782:	4b5c      	ldr	r3, [pc, #368]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004786:	4a5b      	ldr	r2, [pc, #364]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	6713      	str	r3, [r2, #112]	@ 0x70
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0x324>
 8004790:	4b58      	ldr	r3, [pc, #352]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	4a57      	ldr	r2, [pc, #348]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	6713      	str	r3, [r2, #112]	@ 0x70
 800479c:	4b55      	ldr	r3, [pc, #340]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a0:	4a54      	ldr	r2, [pc, #336]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80047a2:	f023 0304 	bic.w	r3, r3, #4
 80047a6:	6713      	str	r3, [r2, #112]	@ 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d015      	beq.n	80047dc <HAL_RCC_OscConfig+0x358>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80047b0:	f7fc fbc6 	bl	8000f40 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_OscConfig+0x34a>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80047b8:	f7fc fbc2 	bl	8000f40 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x34a>
					return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e0cb      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80047ce:	4b49      	ldr	r3, [pc, #292]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0ee      	beq.n	80047b8 <HAL_RCC_OscConfig+0x334>
 80047da:	e014      	b.n	8004806 <HAL_RCC_OscConfig+0x382>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80047dc:	f7fc fbb0 	bl	8000f40 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_OscConfig+0x376>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80047e4:	f7fc fbac 	bl	8000f40 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x376>
					return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e0b5      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80047fa:	4b3e      	ldr	r3, [pc, #248]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1ee      	bne.n	80047e4 <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <HAL_RCC_OscConfig+0x394>
			__HAL_RCC_PWR_CLK_DISABLE();
 800480c:	4b39      	ldr	r3, [pc, #228]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 800480e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004810:	4a38      	ldr	r2, [pc, #224]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004816:	6413      	str	r3, [r2, #64]	@ 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80a1 	beq.w	8004964 <HAL_RCC_OscConfig+0x4e0>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8004822:	4b34      	ldr	r3, [pc, #208]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b08      	cmp	r3, #8
 800482c:	d05c      	beq.n	80048e8 <HAL_RCC_OscConfig+0x464>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d141      	bne.n	80048ba <HAL_RCC_OscConfig+0x436>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8004836:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <HAL_RCC_OscConfig+0x478>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800483c:	f7fc fb80 	bl	8000f40 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x3d2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004844:	f7fc fb7c 	bl	8000f40 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x3d2>
						return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e087      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004856:	4b27      	ldr	r3, [pc, #156]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	3b01      	subs	r3, #1
 800487c:	041b      	lsls	r3, r3, #16
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	061b      	lsls	r3, r3, #24
 8004886:	491b      	ldr	r1, [pc, #108]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 800488c:	4b1b      	ldr	r3, [pc, #108]	@ (80048fc <HAL_RCC_OscConfig+0x478>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004892:	f7fc fb55 	bl	8000f40 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x428>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800489a:	f7fc fb51 	bl	8000f40 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x428>
						return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e05c      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80048ac:	4b11      	ldr	r3, [pc, #68]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x416>
 80048b8:	e054      	b.n	8004964 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80048ba:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <HAL_RCC_OscConfig+0x478>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80048c0:	f7fc fb3e 	bl	8000f40 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x456>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80048c8:	f7fc fb3a 	bl	8000f40 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x456>
						return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e045      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80048da:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x444>
 80048e6:	e03d      	b.n	8004964 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d107      	bne.n	8004900 <HAL_RCC_OscConfig+0x47c>
				return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e038      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40007000 	.word	0x40007000
 80048fc:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 8004900:	4b1b      	ldr	r3, [pc, #108]	@ (8004970 <HAL_RCC_OscConfig+0x4ec>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d028      	beq.n	8004960 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8004918:	429a      	cmp	r2, r3
 800491a:	d121      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8004926:	429a      	cmp	r2, r3
 8004928:	d11a      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004930:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6a52      	ldr	r2, [r2, #36]	@ 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 8004936:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8004938:	4293      	cmp	r3, r2
 800493a:	d111      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 800494a:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800494c:	429a      	cmp	r2, r3
 800494e:	d107      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 800495a:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
						{
					return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				}
			}
		}
	}
	return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800

08004974 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0cc      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8004988:	4b68      	ldr	r3, [pc, #416]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d90c      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b65      	ldr	r3, [pc, #404]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800499e:	4b63      	ldr	r3, [pc, #396]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0b8      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c8:	4b59      	ldr	r3, [pc, #356]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a58      	ldr	r2, [pc, #352]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049d2:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e0:	4b53      	ldr	r3, [pc, #332]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a52      	ldr	r2, [pc, #328]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049ea:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b50      	ldr	r3, [pc, #320]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	494d      	ldr	r1, [pc, #308]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d044      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004a12:	4b47      	ldr	r3, [pc, #284]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d119      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d003      	beq.n	8004a32 <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004a32:	4b3f      	ldr	r3, [pc, #252]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e06f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004a42:	4b3b      	ldr	r3, [pc, #236]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e067      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a52:	4b37      	ldr	r3, [pc, #220]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f023 0203 	bic.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4934      	ldr	r1, [pc, #208]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8004a64:	f7fc fa6c 	bl	8000f40 <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8004a6c:	f7fc fa68 	bl	8000f40 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e04f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004a82:	4b2b      	ldr	r3, [pc, #172]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d1eb      	bne.n	8004a6c <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8004a94:	4b25      	ldr	r3, [pc, #148]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d20c      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b22      	ldr	r3, [pc, #136]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8004aaa:	4b20      	ldr	r3, [pc, #128]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e032      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8004ac8:	4b19      	ldr	r3, [pc, #100]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4916      	ldr	r1, [pc, #88]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8004ae6:	4b12      	ldr	r3, [pc, #72]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490e      	ldr	r1, [pc, #56]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004afa:	f000 f821 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490a      	ldr	r1, [pc, #40]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004b12:	4a09      	ldr	r2, [pc, #36]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 8004b16:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fc f9cc 	bl	8000eb8 <HAL_InitTick>

	return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023c00 	.word	0x40023c00
 8004b30:	40023800 	.word	0x40023800
 8004b34:	08009eb4 	.word	0x08009eb4
 8004b38:	20000004 	.word	0x20000004
 8004b3c:	20000008 	.word	0x20000008

08004b40 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8004b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b44:	b094      	sub	sp, #80	@ 0x50
 8004b46:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t pllvco = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t pllp = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t sysclockfreq = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	64bb      	str	r3, [r7, #72]	@ 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8004b58:	4b79      	ldr	r3, [pc, #484]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 030c 	and.w	r3, r3, #12
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d00d      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x40>
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	f200 80e1 	bhi.w	8004d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x34>
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d003      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b72:	e0db      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x1ec>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8004b74:	4b73      	ldr	r3, [pc, #460]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004b78:	e0db      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 8004b7a:	4b73      	ldr	r3, [pc, #460]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004b7e:	e0d8      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b80:	4b6f      	ldr	r3, [pc, #444]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b88:	647b      	str	r3, [r7, #68]	@ 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d063      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x11e>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004b96:	4b6a      	ldr	r3, [pc, #424]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b98:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004b9a:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ba0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004baa:	2300      	movs	r3, #0
 8004bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	f04f 0000 	mov.w	r0, #0
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	0159      	lsls	r1, r3, #5
 8004bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc4:	0150      	lsls	r0, r2, #5
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4621      	mov	r1, r4
 8004bcc:	1a51      	subs	r1, r2, r1
 8004bce:	6139      	str	r1, [r7, #16]
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be4:	4659      	mov	r1, fp
 8004be6:	018b      	lsls	r3, r1, #6
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bee:	4651      	mov	r1, sl
 8004bf0:	018a      	lsls	r2, r1, #6
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c12:	4690      	mov	r8, r2
 8004c14:	4699      	mov	r9, r3
 8004c16:	4623      	mov	r3, r4
 8004c18:	eb18 0303 	adds.w	r3, r8, r3
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	462b      	mov	r3, r5
 8004c20:	eb49 0303 	adc.w	r3, r9, r3
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c32:	4629      	mov	r1, r5
 8004c34:	024b      	lsls	r3, r1, #9
 8004c36:	4621      	mov	r1, r4
 8004c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	024a      	lsls	r2, r1, #9
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c46:	2200      	movs	r2, #0
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c50:	f7fb faba 	bl	80001c8 <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8004c58:	4613      	mov	r3, r2
 8004c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c5c:	e058      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x1d0>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004c5e:	4b38      	ldr	r3, [pc, #224]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c60:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004c62:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004c64:	2200      	movs	r2, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	4611      	mov	r1, r2
 8004c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	2300      	movs	r3, #0
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c78:	4642      	mov	r2, r8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	f04f 0000 	mov.w	r0, #0
 8004c80:	f04f 0100 	mov.w	r1, #0
 8004c84:	0159      	lsls	r1, r3, #5
 8004c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c8a:	0150      	lsls	r0, r2, #5
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4641      	mov	r1, r8
 8004c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c96:	4649      	mov	r1, r9
 8004c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8004cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	00eb      	lsls	r3, r5, #3
 8004cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc6:	00e2      	lsls	r2, r4, #3
 8004cc8:	4614      	mov	r4, r2
 8004cca:	461d      	mov	r5, r3
 8004ccc:	4643      	mov	r3, r8
 8004cce:	18e3      	adds	r3, r4, r3
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	eb45 0303 	adc.w	r3, r5, r3
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	028b      	lsls	r3, r1, #10
 8004cea:	4621      	mov	r1, r4
 8004cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	028a      	lsls	r2, r1, #10
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	61fa      	str	r2, [r7, #28]
 8004d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d04:	f7fb fa60 	bl	80001c8 <__aeabi_uldivmod>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8004d10:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	0c1b      	lsrs	r3, r3, #16
 8004d16:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 8004d1a:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	643b      	str	r3, [r7, #64]	@ 0x40

		sysclockfreq = pllvco / pllp;
 8004d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004d30:	bf00      	nop
	}
	}
	return sysclockfreq;
 8004d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3750      	adds	r7, #80	@ 0x50
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	007a1200 	.word	0x007a1200

08004d4c <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8004d50:	4b03      	ldr	r3, [pc, #12]	@ (8004d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000004 	.word	0x20000004

08004d64 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8004d68:	f7ff fff0 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d6e:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0a9b      	lsrs	r3, r3, #10
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4903      	ldr	r1, [pc, #12]	@ (8004d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40023800 	.word	0x40023800
 8004d88:	08009ec4 	.word	0x08009ec4

08004d8c <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8004d90:	f7ff ffdc 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d94:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d96:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	0b5b      	lsrs	r3, r3, #13
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	4903      	ldr	r1, [pc, #12]	@ (8004db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da2:	5ccb      	ldrb	r3, [r1, r3]
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40023800 	.word	0x40023800
 8004db0:	08009ec4 	.word	0x08009ec4

08004db4 <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg1 = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x28>
			== RCC_PERIPHCLK_I2S)
			|| (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d035      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x94>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8004ddc:	4b62      	ldr	r3, [pc, #392]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8004de2:	f7fc f8ad 	bl	8000f40 <HAL_GetTick>
 8004de6:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8004de8:	e008      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8004dea:	f7fc f8a9 	bl	8000f40 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e0b0      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8004dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f0      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	019a      	lsls	r2, r3, #6
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	071b      	lsls	r3, r3, #28
 8004e14:	4955      	ldr	r1, [pc, #340]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
				PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 8004e1c:	4b52      	ldr	r3, [pc, #328]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8004e22:	f7fc f88d 	bl	8000f40 <HAL_GetTick>
 8004e26:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8004e28:	e008      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x88>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8004e2a:	f7fc f889 	bl	8000f40 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x88>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e090      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8004e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x76>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8083 	beq.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
			== (RCC_PERIPHCLK_RTC)) {
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	4b44      	ldr	r3, [pc, #272]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	4a43      	ldr	r2, [pc, #268]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e66:	4b41      	ldr	r3, [pc, #260]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 8004e72:	4b3f      	ldr	r3, [pc, #252]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a3e      	ldr	r2, [pc, #248]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e7c:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 8004e7e:	f7fc f85f 	bl	8000f40 <HAL_GetTick>
 8004e82:	6178      	str	r0, [r7, #20]

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8004e84:	e008      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8004e86:	f7fc f85b 	bl	8000f40 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
				return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e062      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8004e98:	4b35      	ldr	r3, [pc, #212]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0f0      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ea4:	4b31      	ldr	r3, [pc, #196]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eac:	613b      	str	r3, [r7, #16]
		if ((tmpreg1 != 0x00000000U)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d02f      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x160>
				&& ((tmpreg1)
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
				&& ((tmpreg1)
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d028      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x160>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eca:	613b      	str	r3, [r7, #16]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8004ecc:	4b29      	ldr	r3, [pc, #164]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 8004ed2:	4b28      	ldr	r3, [pc, #160]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 8004ed8:	4a24      	ldr	r2, [pc, #144]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6713      	str	r3, [r2, #112]	@ 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 8004ede:	4b23      	ldr	r3, [pc, #140]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d114      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x160>
				/* Get tick */
				tickstart = HAL_GetTick();
 8004eea:	f7fc f829 	bl	8000f40 <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x154>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004ef2:	f7fc f825 	bl	8000f40 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x154>
						return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e02a      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004f08:	4b18      	ldr	r3, [pc, #96]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0ee      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f20:	d10d      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f22:	4b12      	ldr	r3, [pc, #72]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f36:	490d      	ldr	r1, [pc, #52]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	608b      	str	r3, [r1, #8]
 8004f3c:	e005      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4a0a      	ldr	r2, [pc, #40]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f44:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f48:	6093      	str	r3, [r2, #8]
 8004f4a:	4b08      	ldr	r3, [pc, #32]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f56:	4905      	ldr	r1, [pc, #20]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	42470068 	.word	0x42470068
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40007000 	.word	0x40007000
 8004f74:	42470e40 	.word	0x42470e40

08004f78 <HAL_RCCEx_GetPeriphCLKFreq>:
 * @param  PeriphClk Peripheral clock identifier
 *         This parameter can be one of the following values:
 *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
 * @retval Frequency in KHz
 */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk) {
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	/* This variable used to store the I2S clock frequency (value in Hz) */
	uint32_t frequency = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
	/* This variable used to store the VCO Input (value in Hz) */
	uint32_t vcoinput = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]
	uint32_t srcclk = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
	/* This variable used to store the VCO Output (value in Hz) */
	uint32_t vcooutput = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60bb      	str	r3, [r7, #8]
	switch (PeriphClk) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d13f      	bne.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
	case RCC_PERIPHCLK_I2S: {
		/* Get the current I2S source */
		srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f96:	4b24      	ldr	r3, [pc, #144]	@ (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f9e:	60fb      	str	r3, [r7, #12]
		switch (srcclk) {
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d006      	beq.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fac:	d12f      	bne.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
		/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
		case RCC_I2SCLKSOURCE_EXT: {
			/* Set the I2S clock to the external clock  value */
			frequency = EXTERNAL_CLOCK_VALUE;
 8004fae:	4b1f      	ldr	r3, [pc, #124]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fb0:	617b      	str	r3, [r7, #20]
			break;
 8004fb2:	e02f      	b.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
			/* Configure the PLLI2S division factor */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE) {
 8004fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fc0:	d108      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSE_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004fc2:	4b19      	ldr	r3, [pc, #100]	@ (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSE_VALUE
 8004fca:	4a19      	ldr	r2, [pc, #100]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	e007      	b.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
			} else {
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSI_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004fd4:	4b14      	ldr	r3, [pc, #80]	@ (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSI_VALUE
 8004fdc:	4a15      	ldr	r2, [pc, #84]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	613b      	str	r3, [r7, #16]
			}
#endif /* STM32F411xE */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			vcooutput = (uint32_t) (vcoinput
					* (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)
 8004fe4:	4b10      	ldr	r3, [pc, #64]	@ (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fea:	099b      	lsrs	r3, r3, #6
							& (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004fec:	f3c3 0208 	ubfx	r2, r3, #0, #9
			vcooutput = (uint32_t) (vcoinput
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	60bb      	str	r3, [r7, #8]
			/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
			frequency = (uint32_t) (vcooutput
					/ (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U)
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ffe:	0f1b      	lsrs	r3, r3, #28
							& (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005000:	f003 0307 	and.w	r3, r3, #7
			frequency = (uint32_t) (vcooutput
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	fbb2 f3f3 	udiv	r3, r2, r3
 800500a:	617b      	str	r3, [r7, #20]
			break;
 800500c:	e002      	b.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
		}
			/* Clock not enabled for I2S*/
		default: {
			frequency = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
			break;
 8005012:	bf00      	nop
		}
		}
		break;
 8005014:	e000      	b.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
	}
	default: {
		break;
 8005016:	bf00      	nop
	}
	}
	return frequency;
 8005018:	697b      	ldr	r3, [r7, #20]
}
 800501a:	4618      	mov	r0, r3
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40023800 	.word	0x40023800
 800502c:	00bb8000 	.word	0x00bb8000
 8005030:	007a1200 	.word	0x007a1200
 8005034:	00f42400 	.word	0x00f42400

08005038 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e07b      	b.n	8005142 <HAL_SPI_Init+0x10a>
	assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800505a:	d009      	beq.n	8005070 <HAL_SPI_Init+0x38>
			assert_param(
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	61da      	str	r2, [r3, #28]
 8005062:	e005      	b.n	8005070 <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fb fda4 	bl	8000bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a6:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f4:	ea42 0103 	orr.w	r1, r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	601a      	str	r2, [r3, #0]
			((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) | (hspi->Init.Direction & (SPI_CR1_RXONLY | SPI_CR1_BIDIMODE)) | (hspi->Init.DataSize & SPI_CR1_DFF) | (hspi->Init.CLKPolarity & SPI_CR1_CPOL) | (hspi->Init.CLKPhase & SPI_CR1_CPHA) | (hspi->Init.NSS & SPI_CR1_SSM) | (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) | (hspi->Init.FirstBit & SPI_CR1_LSBFIRST) | (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management, TI Mode */
	WRITE_REG(hspi->Instance->CR2,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f003 0104 	and.w	r1, r3, #4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	f003 0210 	and.w	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->State = HAL_SPI_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e042      	b.n	80051e2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fb fd79 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2224      	movs	r2, #36	@ 0x24
 800517a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800518c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fdca 	bl	8005d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b08a      	sub	sp, #40	@ 0x28
 80051ee:	af02      	add	r7, sp, #8
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b20      	cmp	r3, #32
 8005208:	f040 8081 	bne.w	800530e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_UART_Receive+0x2e>
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e079      	b.n	8005310 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2222      	movs	r2, #34	@ 0x22
 8005226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005230:	f7fb fe86 	bl	8000f40 <HAL_GetTick>
 8005234:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	88fa      	ldrh	r2, [r7, #6]
 800523a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524a:	d108      	bne.n	800525e <HAL_UART_Receive+0x74>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d104      	bne.n	800525e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	e003      	b.n	8005266 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005266:	e047      	b.n	80052f8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2200      	movs	r2, #0
 8005270:	2120      	movs	r1, #32
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fb28 	bl	80058c8 <UART_WaitOnFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e042      	b.n	8005310 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10c      	bne.n	80052aa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529c:	b29a      	uxth	r2, r3
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	3302      	adds	r3, #2
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e01f      	b.n	80052ea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b2:	d007      	beq.n	80052c4 <HAL_UART_Receive+0xda>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <HAL_UART_Receive+0xe8>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e008      	b.n	80052e4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1b2      	bne.n	8005268 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	3720      	adds	r7, #32
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b20      	cmp	r3, #32
 8005330:	d112      	bne.n	8005358 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_UART_Receive_IT+0x26>
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e00b      	b.n	800535a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	461a      	mov	r2, r3
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fb13 	bl	800597a <UART_Start_Receive_IT>
 8005354:	4603      	mov	r3, r0
 8005356:	e000      	b.n	800535a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005358:	2302      	movs	r3, #2
  }
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b0ba      	sub	sp, #232	@ 0xe8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800538a:	2300      	movs	r3, #0
 800538c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005390:	2300      	movs	r3, #0
 8005392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10f      	bne.n	80053ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <HAL_UART_IRQHandler+0x66>
 80053b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fbf2 	bl	8005bac <UART_Receive_IT>
      return;
 80053c8:	e25b      	b.n	8005882 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80de 	beq.w	8005590 <HAL_UART_IRQHandler+0x22c>
 80053d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80d1 	beq.w	8005590 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <HAL_UART_IRQHandler+0xae>
 80053fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540a:	f043 0201 	orr.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <HAL_UART_IRQHandler+0xd2>
 800541e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542e:	f043 0202 	orr.w	r2, r3, #2
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_UART_IRQHandler+0xf6>
 8005442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d005      	beq.n	800545a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005452:	f043 0204 	orr.w	r2, r3, #4
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d011      	beq.n	800548a <HAL_UART_IRQHandler+0x126>
 8005466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546a:	f003 0320 	and.w	r3, r3, #32
 800546e:	2b00      	cmp	r3, #0
 8005470:	d105      	bne.n	800547e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005482:	f043 0208 	orr.w	r2, r3, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 81f2 	beq.w	8005878 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_UART_IRQHandler+0x14e>
 80054a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb7d 	bl	8005bac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b40      	cmp	r3, #64	@ 0x40
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d103      	bne.n	80054de <HAL_UART_IRQHandler+0x17a>
 80054d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d04f      	beq.n	800557e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa85 	bl	80059ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ee:	2b40      	cmp	r3, #64	@ 0x40
 80054f0:	d141      	bne.n	8005576 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3314      	adds	r3, #20
 80054f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800550c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3314      	adds	r3, #20
 800551a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800551e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800552a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1d9      	bne.n	80054f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d013      	beq.n	800556e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554a:	4a7e      	ldr	r2, [pc, #504]	@ (8005744 <HAL_UART_IRQHandler+0x3e0>)
 800554c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005552:	4618      	mov	r0, r3
 8005554:	f7fb fea5 	bl	80012a2 <HAL_DMA_Abort_IT>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d016      	beq.n	800558c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005568:	4610      	mov	r0, r2
 800556a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	e00e      	b.n	800558c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f994 	bl	800589c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005574:	e00a      	b.n	800558c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f990 	bl	800589c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557c:	e006      	b.n	800558c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f98c 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800558a:	e175      	b.n	8005878 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	bf00      	nop
    return;
 800558e:	e173      	b.n	8005878 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005594:	2b01      	cmp	r3, #1
 8005596:	f040 814f 	bne.w	8005838 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 8148 	beq.w	8005838 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8141 	beq.w	8005838 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d6:	2b40      	cmp	r3, #64	@ 0x40
 80055d8:	f040 80b6 	bne.w	8005748 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8145 	beq.w	800587c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055fa:	429a      	cmp	r2, r3
 80055fc:	f080 813e 	bcs.w	800587c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005606:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005612:	f000 8088 	beq.w	8005726 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800562c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005642:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800564e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800565a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1d9      	bne.n	8005616 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3314      	adds	r3, #20
 8005668:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3314      	adds	r3, #20
 8005682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005686:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800568a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800568e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e1      	bne.n	8005662 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e3      	bne.n	800569e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056f6:	f023 0310 	bic.w	r3, r3, #16
 80056fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005708:	65ba      	str	r2, [r7, #88]	@ 0x58
 800570a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800570e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e3      	bne.n	80056e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	4618      	mov	r0, r3
 8005722:	f7fb fd4e 	bl	80011c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005734:	b29b      	uxth	r3, r3
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	b29b      	uxth	r3, r3
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f8b7 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005742:	e09b      	b.n	800587c <HAL_UART_IRQHandler+0x518>
 8005744:	08005ab5 	.word	0x08005ab5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005750:	b29b      	uxth	r3, r3
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 808e 	beq.w	8005880 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8089 	beq.w	8005880 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	330c      	adds	r3, #12
 8005774:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800577e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005784:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005792:	647a      	str	r2, [r7, #68]	@ 0x44
 8005794:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e3      	bne.n	800576e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3314      	adds	r3, #20
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	623b      	str	r3, [r7, #32]
   return(result);
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3314      	adds	r3, #20
 80057c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80057cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e3      	bne.n	80057a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	330c      	adds	r3, #12
 80057f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0310 	bic.w	r3, r3, #16
 8005802:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005810:	61fa      	str	r2, [r7, #28]
 8005812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	69b9      	ldr	r1, [r7, #24]
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	617b      	str	r3, [r7, #20]
   return(result);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e3      	bne.n	80057ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800582a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800582e:	4619      	mov	r1, r3
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f83d 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005836:	e023      	b.n	8005880 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005840:	2b00      	cmp	r3, #0
 8005842:	d009      	beq.n	8005858 <HAL_UART_IRQHandler+0x4f4>
 8005844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f943 	bl	8005adc <UART_Transmit_IT>
    return;
 8005856:	e014      	b.n	8005882 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00e      	beq.n	8005882 <HAL_UART_IRQHandler+0x51e>
 8005864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f983 	bl	8005b7c <UART_EndTransmit_IT>
    return;
 8005876:	e004      	b.n	8005882 <HAL_UART_IRQHandler+0x51e>
    return;
 8005878:	bf00      	nop
 800587a:	e002      	b.n	8005882 <HAL_UART_IRQHandler+0x51e>
      return;
 800587c:	bf00      	nop
 800587e:	e000      	b.n	8005882 <HAL_UART_IRQHandler+0x51e>
      return;
 8005880:	bf00      	nop
  }
}
 8005882:	37e8      	adds	r7, #232	@ 0xe8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	4613      	mov	r3, r2
 80058d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d8:	e03b      	b.n	8005952 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d037      	beq.n	8005952 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e2:	f7fb fb2d 	bl	8000f40 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e03a      	b.n	8005972 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d023      	beq.n	8005952 <UART_WaitOnFlagUntilTimeout+0x8a>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b80      	cmp	r3, #128	@ 0x80
 800590e:	d020      	beq.n	8005952 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b40      	cmp	r3, #64	@ 0x40
 8005914:	d01d      	beq.n	8005952 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b08      	cmp	r3, #8
 8005922:	d116      	bne.n	8005952 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f857 	bl	80059ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2208      	movs	r2, #8
 8005944:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e00f      	b.n	8005972 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4013      	ands	r3, r2
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	429a      	cmp	r2, r3
 8005960:	bf0c      	ite	eq
 8005962:	2301      	moveq	r3, #1
 8005964:	2300      	movne	r3, #0
 8005966:	b2db      	uxtb	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	429a      	cmp	r2, r3
 800596e:	d0b4      	beq.n	80058da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	4613      	mov	r3, r2
 8005986:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	88fa      	ldrh	r2, [r7, #6]
 8005992:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	88fa      	ldrh	r2, [r7, #6]
 8005998:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2222      	movs	r2, #34	@ 0x22
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0220 	orr.w	r2, r2, #32
 80059de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b095      	sub	sp, #84	@ 0x54
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a16:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e5      	bne.n	80059f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3314      	adds	r3, #20
 8005a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3314      	adds	r3, #20
 8005a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e5      	bne.n	8005a2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d119      	bne.n	8005a9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f023 0310 	bic.w	r3, r3, #16
 8005a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a86:	61ba      	str	r2, [r7, #24]
 8005a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	6979      	ldr	r1, [r7, #20]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	613b      	str	r3, [r7, #16]
   return(result);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e5      	bne.n	8005a66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005aa8:	bf00      	nop
 8005aaa:	3754      	adds	r7, #84	@ 0x54
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff fee4 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b21      	cmp	r3, #33	@ 0x21
 8005aee:	d13e      	bne.n	8005b6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005af8:	d114      	bne.n	8005b24 <UART_Transmit_IT+0x48>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d110      	bne.n	8005b24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	1c9a      	adds	r2, r3, #2
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]
 8005b22:	e008      	b.n	8005b36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	1c59      	adds	r1, r3, #1
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6211      	str	r1, [r2, #32]
 8005b2e:	781a      	ldrb	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4619      	mov	r1, r3
 8005b44:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10f      	bne.n	8005b6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e000      	b.n	8005b70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b6e:	2302      	movs	r3, #2
  }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff fe73 	bl	8005888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08c      	sub	sp, #48	@ 0x30
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b22      	cmp	r3, #34	@ 0x22
 8005bbe:	f040 80ae 	bne.w	8005d1e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bca:	d117      	bne.n	8005bfc <UART_Receive_IT+0x50>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d113      	bne.n	8005bfc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf4:	1c9a      	adds	r2, r3, #2
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bfa:	e026      	b.n	8005c4a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c0e:	d007      	beq.n	8005c20 <UART_Receive_IT+0x74>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <UART_Receive_IT+0x82>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	e008      	b.n	8005c40 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	4619      	mov	r1, r3
 8005c58:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d15d      	bne.n	8005d1a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0220 	bic.w	r2, r2, #32
 8005c6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695a      	ldr	r2, [r3, #20]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0201 	bic.w	r2, r2, #1
 8005c8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d135      	bne.n	8005d10 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f023 0310 	bic.w	r3, r3, #16
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cca:	623a      	str	r2, [r7, #32]
 8005ccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	69f9      	ldr	r1, [r7, #28]
 8005cd0:	6a3a      	ldr	r2, [r7, #32]
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e5      	bne.n	8005caa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d10a      	bne.n	8005d02 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff fdd1 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
 8005d0e:	e002      	b.n	8005d16 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fa fe3b 	bl	800098c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e002      	b.n	8005d20 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e000      	b.n	8005d20 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d1e:	2302      	movs	r3, #2
  }
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3730      	adds	r7, #48	@ 0x30
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d2c:	b0c0      	sub	sp, #256	@ 0x100
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d44:	68d9      	ldr	r1, [r3, #12]
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	ea40 0301 	orr.w	r3, r0, r1
 8005d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d80:	f021 010c 	bic.w	r1, r1, #12
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da2:	6999      	ldr	r1, [r3, #24]
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	ea40 0301 	orr.w	r3, r0, r1
 8005dae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4b8f      	ldr	r3, [pc, #572]	@ (8005ff4 <UART_SetConfig+0x2cc>)
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d005      	beq.n	8005dc8 <UART_SetConfig+0xa0>
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8005ff8 <UART_SetConfig+0x2d0>)
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d104      	bne.n	8005dd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dc8:	f7fe ffe0 	bl	8004d8c <HAL_RCC_GetPCLK2Freq>
 8005dcc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dd0:	e003      	b.n	8005dda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dd2:	f7fe ffc7 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 8005dd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005de4:	f040 810c 	bne.w	8006000 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005df2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005df6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	1891      	adds	r1, r2, r2
 8005e00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e02:	415b      	adcs	r3, r3
 8005e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	eb12 0801 	adds.w	r8, r2, r1
 8005e10:	4629      	mov	r1, r5
 8005e12:	eb43 0901 	adc.w	r9, r3, r1
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	f04f 0300 	mov.w	r3, #0
 8005e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e2a:	4690      	mov	r8, r2
 8005e2c:	4699      	mov	r9, r3
 8005e2e:	4623      	mov	r3, r4
 8005e30:	eb18 0303 	adds.w	r3, r8, r3
 8005e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e38:	462b      	mov	r3, r5
 8005e3a:	eb49 0303 	adc.w	r3, r9, r3
 8005e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e56:	460b      	mov	r3, r1
 8005e58:	18db      	adds	r3, r3, r3
 8005e5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	eb42 0303 	adc.w	r3, r2, r3
 8005e62:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e6c:	f7fa f9ac 	bl	80001c8 <__aeabi_uldivmod>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4b61      	ldr	r3, [pc, #388]	@ (8005ffc <UART_SetConfig+0x2d4>)
 8005e76:	fba3 2302 	umull	r2, r3, r3, r2
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	011c      	lsls	r4, r3, #4
 8005e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e90:	4642      	mov	r2, r8
 8005e92:	464b      	mov	r3, r9
 8005e94:	1891      	adds	r1, r2, r2
 8005e96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e98:	415b      	adcs	r3, r3
 8005e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ea0:	4641      	mov	r1, r8
 8005ea2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	eb43 0b01 	adc.w	fp, r3, r1
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005eb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec0:	4692      	mov	sl, r2
 8005ec2:	469b      	mov	fp, r3
 8005ec4:	4643      	mov	r3, r8
 8005ec6:	eb1a 0303 	adds.w	r3, sl, r3
 8005eca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ece:	464b      	mov	r3, r9
 8005ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ee4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ee8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005eec:	460b      	mov	r3, r1
 8005eee:	18db      	adds	r3, r3, r3
 8005ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	eb42 0303 	adc.w	r3, r2, r3
 8005ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005efe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f02:	f7fa f961 	bl	80001c8 <__aeabi_uldivmod>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8005ffc <UART_SetConfig+0x2d4>)
 8005f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	2264      	movs	r2, #100	@ 0x64
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	1acb      	subs	r3, r1, r3
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f22:	4b36      	ldr	r3, [pc, #216]	@ (8005ffc <UART_SetConfig+0x2d4>)
 8005f24:	fba3 2302 	umull	r2, r3, r3, r2
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f30:	441c      	add	r4, r3
 8005f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f44:	4642      	mov	r2, r8
 8005f46:	464b      	mov	r3, r9
 8005f48:	1891      	adds	r1, r2, r2
 8005f4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f4c:	415b      	adcs	r3, r3
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f54:	4641      	mov	r1, r8
 8005f56:	1851      	adds	r1, r2, r1
 8005f58:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	414b      	adcs	r3, r1
 8005f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f6c:	4659      	mov	r1, fp
 8005f6e:	00cb      	lsls	r3, r1, #3
 8005f70:	4651      	mov	r1, sl
 8005f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f76:	4651      	mov	r1, sl
 8005f78:	00ca      	lsls	r2, r1, #3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4642      	mov	r2, r8
 8005f82:	189b      	adds	r3, r3, r2
 8005f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f88:	464b      	mov	r3, r9
 8005f8a:	460a      	mov	r2, r1
 8005f8c:	eb42 0303 	adc.w	r3, r2, r3
 8005f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fa8:	460b      	mov	r3, r1
 8005faa:	18db      	adds	r3, r3, r3
 8005fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fae:	4613      	mov	r3, r2
 8005fb0:	eb42 0303 	adc.w	r3, r2, r3
 8005fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fbe:	f7fa f903 	bl	80001c8 <__aeabi_uldivmod>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <UART_SetConfig+0x2d4>)
 8005fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	2164      	movs	r1, #100	@ 0x64
 8005fd0:	fb01 f303 	mul.w	r3, r1, r3
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	3332      	adds	r3, #50	@ 0x32
 8005fda:	4a08      	ldr	r2, [pc, #32]	@ (8005ffc <UART_SetConfig+0x2d4>)
 8005fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	f003 0207 	and.w	r2, r3, #7
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4422      	add	r2, r4
 8005fee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ff0:	e106      	b.n	8006200 <UART_SetConfig+0x4d8>
 8005ff2:	bf00      	nop
 8005ff4:	40011000 	.word	0x40011000
 8005ff8:	40011400 	.word	0x40011400
 8005ffc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006004:	2200      	movs	r2, #0
 8006006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800600a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800600e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006012:	4642      	mov	r2, r8
 8006014:	464b      	mov	r3, r9
 8006016:	1891      	adds	r1, r2, r2
 8006018:	6239      	str	r1, [r7, #32]
 800601a:	415b      	adcs	r3, r3
 800601c:	627b      	str	r3, [r7, #36]	@ 0x24
 800601e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006022:	4641      	mov	r1, r8
 8006024:	1854      	adds	r4, r2, r1
 8006026:	4649      	mov	r1, r9
 8006028:	eb43 0501 	adc.w	r5, r3, r1
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	00eb      	lsls	r3, r5, #3
 8006036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800603a:	00e2      	lsls	r2, r4, #3
 800603c:	4614      	mov	r4, r2
 800603e:	461d      	mov	r5, r3
 8006040:	4643      	mov	r3, r8
 8006042:	18e3      	adds	r3, r4, r3
 8006044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006048:	464b      	mov	r3, r9
 800604a:	eb45 0303 	adc.w	r3, r5, r3
 800604e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800605e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800606e:	4629      	mov	r1, r5
 8006070:	008b      	lsls	r3, r1, #2
 8006072:	4621      	mov	r1, r4
 8006074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006078:	4621      	mov	r1, r4
 800607a:	008a      	lsls	r2, r1, #2
 800607c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006080:	f7fa f8a2 	bl	80001c8 <__aeabi_uldivmod>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4b60      	ldr	r3, [pc, #384]	@ (800620c <UART_SetConfig+0x4e4>)
 800608a:	fba3 2302 	umull	r2, r3, r3, r2
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	011c      	lsls	r4, r3, #4
 8006092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006096:	2200      	movs	r2, #0
 8006098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800609c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060a4:	4642      	mov	r2, r8
 80060a6:	464b      	mov	r3, r9
 80060a8:	1891      	adds	r1, r2, r2
 80060aa:	61b9      	str	r1, [r7, #24]
 80060ac:	415b      	adcs	r3, r3
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060b4:	4641      	mov	r1, r8
 80060b6:	1851      	adds	r1, r2, r1
 80060b8:	6139      	str	r1, [r7, #16]
 80060ba:	4649      	mov	r1, r9
 80060bc:	414b      	adcs	r3, r1
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060cc:	4659      	mov	r1, fp
 80060ce:	00cb      	lsls	r3, r1, #3
 80060d0:	4651      	mov	r1, sl
 80060d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060d6:	4651      	mov	r1, sl
 80060d8:	00ca      	lsls	r2, r1, #3
 80060da:	4610      	mov	r0, r2
 80060dc:	4619      	mov	r1, r3
 80060de:	4603      	mov	r3, r0
 80060e0:	4642      	mov	r2, r8
 80060e2:	189b      	adds	r3, r3, r2
 80060e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060e8:	464b      	mov	r3, r9
 80060ea:	460a      	mov	r2, r1
 80060ec:	eb42 0303 	adc.w	r3, r2, r3
 80060f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800610c:	4649      	mov	r1, r9
 800610e:	008b      	lsls	r3, r1, #2
 8006110:	4641      	mov	r1, r8
 8006112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006116:	4641      	mov	r1, r8
 8006118:	008a      	lsls	r2, r1, #2
 800611a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800611e:	f7fa f853 	bl	80001c8 <__aeabi_uldivmod>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4611      	mov	r1, r2
 8006128:	4b38      	ldr	r3, [pc, #224]	@ (800620c <UART_SetConfig+0x4e4>)
 800612a:	fba3 2301 	umull	r2, r3, r3, r1
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	2264      	movs	r2, #100	@ 0x64
 8006132:	fb02 f303 	mul.w	r3, r2, r3
 8006136:	1acb      	subs	r3, r1, r3
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	3332      	adds	r3, #50	@ 0x32
 800613c:	4a33      	ldr	r2, [pc, #204]	@ (800620c <UART_SetConfig+0x4e4>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006148:	441c      	add	r4, r3
 800614a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800614e:	2200      	movs	r2, #0
 8006150:	673b      	str	r3, [r7, #112]	@ 0x70
 8006152:	677a      	str	r2, [r7, #116]	@ 0x74
 8006154:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006158:	4642      	mov	r2, r8
 800615a:	464b      	mov	r3, r9
 800615c:	1891      	adds	r1, r2, r2
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	415b      	adcs	r3, r3
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006168:	4641      	mov	r1, r8
 800616a:	1851      	adds	r1, r2, r1
 800616c:	6039      	str	r1, [r7, #0]
 800616e:	4649      	mov	r1, r9
 8006170:	414b      	adcs	r3, r1
 8006172:	607b      	str	r3, [r7, #4]
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006180:	4659      	mov	r1, fp
 8006182:	00cb      	lsls	r3, r1, #3
 8006184:	4651      	mov	r1, sl
 8006186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800618a:	4651      	mov	r1, sl
 800618c:	00ca      	lsls	r2, r1, #3
 800618e:	4610      	mov	r0, r2
 8006190:	4619      	mov	r1, r3
 8006192:	4603      	mov	r3, r0
 8006194:	4642      	mov	r2, r8
 8006196:	189b      	adds	r3, r3, r2
 8006198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800619a:	464b      	mov	r3, r9
 800619c:	460a      	mov	r2, r1
 800619e:	eb42 0303 	adc.w	r3, r2, r3
 80061a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061bc:	4649      	mov	r1, r9
 80061be:	008b      	lsls	r3, r1, #2
 80061c0:	4641      	mov	r1, r8
 80061c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061c6:	4641      	mov	r1, r8
 80061c8:	008a      	lsls	r2, r1, #2
 80061ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061ce:	f7f9 fffb 	bl	80001c8 <__aeabi_uldivmod>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4b0d      	ldr	r3, [pc, #52]	@ (800620c <UART_SetConfig+0x4e4>)
 80061d8:	fba3 1302 	umull	r1, r3, r3, r2
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	2164      	movs	r1, #100	@ 0x64
 80061e0:	fb01 f303 	mul.w	r3, r1, r3
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	3332      	adds	r3, #50	@ 0x32
 80061ea:	4a08      	ldr	r2, [pc, #32]	@ (800620c <UART_SetConfig+0x4e4>)
 80061ec:	fba2 2303 	umull	r2, r3, r2, r3
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	f003 020f 	and.w	r2, r3, #15
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4422      	add	r2, r4
 80061fe:	609a      	str	r2, [r3, #8]
}
 8006200:	bf00      	nop
 8006202:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006206:	46bd      	mov	sp, r7
 8006208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800620c:	51eb851f 	.word	0x51eb851f

08006210 <USB_CoreInit>:
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 8006210:	b084      	sub	sp, #16
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	f107 001c 	add.w	r0, r7, #28
 800621e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret;
	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8006222:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006226:	2b01      	cmp	r3, #1
 8006228:	d123      	bne.n	8006272 <USB_CoreInit+0x62>
		USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Init The ULPI Interface */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800623e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	60d3      	str	r3, [r2, #12]
				| USB_OTG_GUSBCFG_PHYSEL);

		/* Select vbus source */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	60da      	str	r2, [r3, #12]
				| USB_OTG_GUSBCFG_ULPIEVBUSI);
		if (cfg.use_external_vbus == 1U) {
 8006252:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006256:	2b01      	cmp	r3, #1
 8006258:	d105      	bne.n	8006266 <USB_CoreInit+0x56>
			USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60da      	str	r2, [r3, #12]
		}

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f9dc 	bl	8006624 <USB_CoreReset>
 800626c:	4603      	mov	r3, r0
 800626e:	73fb      	strb	r3, [r7, #15]
 8006270:	e01b      	b.n	80062aa <USB_CoreInit+0x9a>
	} else /* FS interface (embedded Phy) */
	{
		/* Select FS Embedded PHY */
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60da      	str	r2, [r3, #12]

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f9d0 	bl	8006624 <USB_CoreReset>
 8006284:	4603      	mov	r3, r0
 8006286:	73fb      	strb	r3, [r7, #15]

		if (cfg.battery_charging_enable == 0U) {
 8006288:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800628c:	2b00      	cmp	r3, #0
 800628e:	d106      	bne.n	800629e <USB_CoreInit+0x8e>
			/* Activate the USB Transceiver */
			USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006294:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38
 800629c:	e005      	b.n	80062aa <USB_CoreInit+0x9a>
		} else {
			/* Deactivate the USB Transceiver */
			USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (cfg.dma_enable == 1U) {
 80062aa:	7fbb      	ldrb	r3, [r7, #30]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10b      	bne.n	80062c8 <USB_CoreInit+0xb8>
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f043 0206 	orr.w	r2, r3, #6
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	609a      	str	r2, [r3, #8]
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f043 0220 	orr.w	r2, r3, #32
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	609a      	str	r2, [r3, #8]
	}

	return ret;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062d4:	b004      	add	sp, #16
 80062d6:	4770      	bx	lr

080062d8 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f043 0201 	orr.w	r2, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f023 0201 	bic.w	r2, r3, #1
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_SetCurrentMode>:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_ModeTypeDef mode) {
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
	uint32_t ms = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]

	USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60da      	str	r2, [r3, #12]

	if (mode == USB_HOST_MODE) {
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d115      	bne.n	800636a <USB_SetCurrentMode+0x4e>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 800634a:	200a      	movs	r0, #10
 800634c:	f7fa fe04 	bl	8000f58 <HAL_Delay>
			ms += 10U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	330a      	adds	r3, #10
 8006354:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_HOST_MODE)
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f956 	bl	8006608 <USB_GetMode>
 800635c:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800635e:	2b01      	cmp	r3, #1
 8006360:	d01e      	beq.n	80063a0 <USB_SetCurrentMode+0x84>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2bc7      	cmp	r3, #199	@ 0xc7
 8006366:	d9f0      	bls.n	800634a <USB_SetCurrentMode+0x2e>
 8006368:	e01a      	b.n	80063a0 <USB_SetCurrentMode+0x84>
	} else if (mode == USB_DEVICE_MODE) {
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d115      	bne.n	800639c <USB_SetCurrentMode+0x80>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 800637c:	200a      	movs	r0, #10
 800637e:	f7fa fdeb 	bl	8000f58 <HAL_Delay>
			ms += 10U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	330a      	adds	r3, #10
 8006386:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_DEVICE_MODE)
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f93d 	bl	8006608 <USB_GetMode>
 800638e:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <USB_SetCurrentMode+0x84>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2bc7      	cmp	r3, #199	@ 0xc7
 8006398:	d9f0      	bls.n	800637c <USB_SetCurrentMode+0x60>
 800639a:	e001      	b.n	80063a0 <USB_SetCurrentMode+0x84>
	} else {
		return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e005      	b.n	80063ac <USB_SetCurrentMode+0x90>
	}

	if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS) {
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80063a4:	d101      	bne.n	80063aa <USB_SetCurrentMode+0x8e>
		return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <USB_SetCurrentMode+0x90>
	}

	return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USB_FlushTxFifo>:
 * @param  num  FIFO number
 *         This parameter can be a value from 1 to 15
 15 means Flush all Tx FIFOs
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num) {
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063ce:	d901      	bls.n	80063d4 <USB_FlushTxFifo+0x20>
			return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e01b      	b.n	800640c <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	daf2      	bge.n	80063c2 <USB_FlushTxFifo+0xe>

	/* Flush TX Fifo */
	count = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	019b      	lsls	r3, r3, #6
 80063e4:	f043 0220 	orr.w	r2, r3, #32
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	611a      	str	r2, [r3, #16]

	do {
		count++;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063f8:	d901      	bls.n	80063fe <USB_FlushTxFifo+0x4a>
			return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e006      	b.n	800640c <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0320 	and.w	r3, r3, #32
			== USB_OTG_GRSTCTL_TXFFLSH);
 8006406:	2b20      	cmp	r3, #32
 8006408:	d0f0      	beq.n	80063ec <USB_FlushTxFifo+0x38>

	return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx) {
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006430:	d901      	bls.n	8006436 <USB_FlushRxFifo+0x1e>
			return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e018      	b.n	8006468 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	daf2      	bge.n	8006424 <USB_FlushRxFifo+0xc>

	/* Flush RX Fifo */
	count = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2210      	movs	r2, #16
 8006446:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3301      	adds	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006454:	d901      	bls.n	800645a <USB_FlushRxFifo+0x42>
			return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e006      	b.n	8006468 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f003 0310 	and.w	r3, r3, #16
			== USB_OTG_GRSTCTL_RXFFLSH);
 8006462:	2b10      	cmp	r3, #16
 8006464:	d0f0      	beq.n	8006448 <USB_FlushRxFifo+0x30>

	return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USB_WritePacket>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 8006474:	b480      	push	{r7}
 8006476:	b089      	sub	sp, #36	@ 0x24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	4611      	mov	r1, r2
 8006480:	461a      	mov	r2, r3
 8006482:	460b      	mov	r3, r1
 8006484:	71fb      	strb	r3, [r7, #7]
 8006486:	4613      	mov	r3, r2
 8006488:	80bb      	strh	r3, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	617b      	str	r3, [r7, #20]
	uint8_t *pSrc = src;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	61fb      	str	r3, [r7, #28]
	uint32_t count32b;
	uint32_t i;

	if (dma == 0U) {
 8006492:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d123      	bne.n	80064e2 <USB_WritePacket+0x6e>
		count32b = ((uint32_t) len + 3U) / 4U;
 800649a:	88bb      	ldrh	r3, [r7, #4]
 800649c:	3303      	adds	r3, #3
 800649e:	089b      	lsrs	r3, r3, #2
 80064a0:	613b      	str	r3, [r7, #16]
		for (i = 0U; i < count32b; i++) {
 80064a2:	2300      	movs	r3, #0
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e018      	b.n	80064da <USB_WritePacket+0x66>
			USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	031a      	lsls	r2, r3, #12
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064b4:	461a      	mov	r2, r3
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6013      	str	r3, [r2, #0]
			pSrc++;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	3301      	adds	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
			pSrc++;
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	3301      	adds	r3, #1
 80064c6:	61fb      	str	r3, [r7, #28]
			pSrc++;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	3301      	adds	r3, #1
 80064cc:	61fb      	str	r3, [r7, #28]
			pSrc++;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	3301      	adds	r3, #1
 80064d2:	61fb      	str	r3, [r7, #28]
		for (i = 0U; i < count32b; i++) {
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d3e2      	bcc.n	80064a8 <USB_WritePacket+0x34>
		}
	}

	return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3724      	adds	r7, #36	@ 0x24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_ReadPacket>:
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void* USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest,
		uint16_t len) {
 80064f0:	b480      	push	{r7}
 80064f2:	b08b      	sub	sp, #44	@ 0x2c
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4613      	mov	r3, r2
 80064fc:	80fb      	strh	r3, [r7, #6]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	61bb      	str	r3, [r7, #24]
	uint8_t *pDest = dest;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t pData;
	uint32_t i;
	uint32_t count32b = (uint32_t) len >> 2U;
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	089b      	lsrs	r3, r3, #2
 800650a:	b29b      	uxth	r3, r3
 800650c:	617b      	str	r3, [r7, #20]
	uint16_t remaining_bytes = len % 4U;
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	83fb      	strh	r3, [r7, #30]

	for (i = 0U; i < count32b; i++) {
 8006516:	2300      	movs	r3, #0
 8006518:	623b      	str	r3, [r7, #32]
 800651a:	e014      	b.n	8006546 <USB_ReadPacket+0x56>
		__UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	601a      	str	r2, [r3, #0]
		pDest++;
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	3301      	adds	r3, #1
 800652c:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	3301      	adds	r3, #1
 8006532:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	3301      	adds	r3, #1
 8006538:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	3301      	adds	r3, #1
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0U; i < count32b; i++) {
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	3301      	adds	r3, #1
 8006544:	623b      	str	r3, [r7, #32]
 8006546:	6a3a      	ldr	r2, [r7, #32]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	429a      	cmp	r2, r3
 800654c:	d3e6      	bcc.n	800651c <USB_ReadPacket+0x2c>
	}

	/* When Number of data is not word aligned, read the remaining byte */
	if (remaining_bytes != 0U) {
 800654e:	8bfb      	ldrh	r3, [r7, #30]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01e      	beq.n	8006592 <USB_ReadPacket+0xa2>
		i = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	623b      	str	r3, [r7, #32]
		__UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800655e:	461a      	mov	r2, r3
 8006560:	f107 0310 	add.w	r3, r7, #16
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	601a      	str	r2, [r3, #0]

		do {
			*(uint8_t*) pDest = (uint8_t) (pData >> (8U * (uint8_t) (i)));
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
 8006574:	b2da      	uxtb	r2, r3
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	701a      	strb	r2, [r3, #0]
			i++;
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	3301      	adds	r3, #1
 800657e:	623b      	str	r3, [r7, #32]
			pDest++;
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	3301      	adds	r3, #1
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
			remaining_bytes--;
 8006586:	8bfb      	ldrh	r3, [r7, #30]
 8006588:	3b01      	subs	r3, #1
 800658a:	83fb      	strh	r3, [r7, #30]
		} while (remaining_bytes != 0U);
 800658c:	8bfb      	ldrh	r3, [r7, #30]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1ea      	bne.n	8006568 <USB_ReadPacket+0x78>
	}

	return ((void*) pDest);
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006594:	4618      	mov	r0, r3
 8006596:	372c      	adds	r7, #44	@ 0x2c
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval USB Global Interrupt status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx) {
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;

	tmpreg = USBx->GINTSTS;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	60fb      	str	r3, [r7, #12]
	tmpreg &= USBx->GINTMSK;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4013      	ands	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]

	return tmpreg;
 80065b8:	68fb      	ldr	r3, [r7, #12]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <USB_ReadChInterrupts>:
 * @brief  USB_ReadChInterrupts: return USB channel interrupt status
 * @param  USBx  Selected device
 * @param  chnum Channel number
 * @retval USB Channel Interrupt status
 */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum) {
 80065c6:	b480      	push	{r7}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_HC(chnum)->HCINT;
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4013      	ands	r3, r2
 80065f8:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 80065fa:	68bb      	ldr	r3, [r7, #8]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx) {
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	return ((USBx->GINTSTS) & 0x1U);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	f003 0301 	and.w	r3, r3, #1
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx) {
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3301      	adds	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800663c:	d901      	bls.n	8006642 <USB_CoreReset+0x1e>
			return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e01b      	b.n	800667a <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	daf2      	bge.n	8006630 <USB_CoreReset+0xc>

	/* Core Soft Reset */
	count = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f043 0201 	orr.w	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	611a      	str	r2, [r3, #16]

	do {
		count++;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3301      	adds	r3, #1
 800665e:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006666:	d901      	bls.n	800666c <USB_CoreReset+0x48>
			return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e006      	b.n	800667a <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d0f0      	beq.n	800665a <USB_CoreReset+0x36>

	return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <USB_HostInit>:
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 8006688:	b084      	sub	sp, #16
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret = HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60fb      	str	r3, [r7, #12]
	uint32_t i;

	/* Restart the Phy Clock */
	USBx_PCGCCTL = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066a8:	461a      	mov	r2, r3
 80066aa:	2300      	movs	r3, #0
 80066ac:	6013      	str	r3, [r2, #0]
#else
	/*
	 * Disable HW VBUS sensing. VBUS is internally considered to be always
	 * at VBUS-Valid level (5V).
	 */
	USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	639a      	str	r2, [r3, #56]	@ 0x38
	USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	639a      	str	r2, [r3, #56]	@ 0x38
	USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

	if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d119      	bne.n	8006712 <USB_HostInit+0x8a>
		if (cfg.speed == USBH_FSLS_SPEED) {
 80066de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d10a      	bne.n	80066fc <USB_HostInit+0x74>
			/* Force Device Enumeration to FS/LS mode only */
			USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80066f4:	f043 0304 	orr.w	r3, r3, #4
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e014      	b.n	8006726 <USB_HostInit+0x9e>
		} else {
			/* Set default Max speed support */
			USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800670a:	f023 0304 	bic.w	r3, r3, #4
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	e009      	b.n	8006726 <USB_HostInit+0x9e>
		}
	} else {
		/* Set default Max speed support */
		USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006720:	f023 0304 	bic.w	r3, r3, #4
 8006724:	6013      	str	r3, [r2, #0]
	}

	/* Make sure the FIFOs are flushed. */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006726:	2110      	movs	r1, #16
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff fe43 	bl	80063b4 <USB_FlushTxFifo>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <USB_HostInit+0xb0>
	{
		ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75fb      	strb	r3, [r7, #23]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff fe6d 	bl	8006418 <USB_FlushRxFifo>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <USB_HostInit+0xc0>
		ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	75fb      	strb	r3, [r7, #23]
	}

	/* Clear all pending HC Interrupts */
	for (i = 0U; i < cfg.Host_channels; i++) {
 8006748:	2300      	movs	r3, #0
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	e015      	b.n	800677a <USB_HostInit+0xf2>
		USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675a:	461a      	mov	r2, r3
 800675c:	f04f 33ff 	mov.w	r3, #4294967295
 8006760:	6093      	str	r3, [r2, #8]
		USBx_HC(i)->HCINTMSK = 0U;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676e:	461a      	mov	r2, r3
 8006770:	2300      	movs	r3, #0
 8006772:	60d3      	str	r3, [r2, #12]
	for (i = 0U; i < cfg.Host_channels; i++) {
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	3301      	adds	r3, #1
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800677e:	461a      	mov	r2, r3
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4293      	cmp	r3, r2
 8006784:	d3e3      	bcc.n	800674e <USB_HostInit+0xc6>
	}

	/* Disable all interrupts. */
	USBx->GINTMSK = 0U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	619a      	str	r2, [r3, #24]

	/* Clear any pending interrupts */
	USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f04f 32ff 	mov.w	r2, #4294967295
 8006792:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
	if (USBx == USB_OTG_HS) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a18      	ldr	r2, [pc, #96]	@ (80067f8 <USB_HostInit+0x170>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d10b      	bne.n	80067b4 <USB_HostInit+0x12c>
		/* set Rx FIFO size */
		USBx->GRXFSIZ = 0x200U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067a2:	625a      	str	r2, [r3, #36]	@ 0x24
		USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t) (((0x100U << 16) & USB_OTG_NPTXFD)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a15      	ldr	r2, [pc, #84]	@ (80067fc <USB_HostInit+0x174>)
 80067a8:	629a      	str	r2, [r3, #40]	@ 0x28
				| 0x200U);
		USBx->HPTXFSIZ = (uint32_t) (((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a14      	ldr	r2, [pc, #80]	@ (8006800 <USB_HostInit+0x178>)
 80067ae:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80067b2:	e009      	b.n	80067c8 <USB_HostInit+0x140>
				| 0x300U);
	} else
#endif /* defined (USB_OTG_HS) */
	{
		/* set Rx FIFO size */
		USBx->GRXFSIZ = 0x80U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2280      	movs	r2, #128	@ 0x80
 80067b8:	625a      	str	r2, [r3, #36]	@ 0x24
		USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t) (((0x60U << 16) & USB_OTG_NPTXFD)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a11      	ldr	r2, [pc, #68]	@ (8006804 <USB_HostInit+0x17c>)
 80067be:	629a      	str	r2, [r3, #40]	@ 0x28
				| 0x80U);
		USBx->HPTXFSIZ = (uint32_t) (((0x40U << 16) & USB_OTG_HPTXFSIZ_PTXFD)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a11      	ldr	r2, [pc, #68]	@ (8006808 <USB_HostInit+0x180>)
 80067c4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
				| 0xE0U);
	}

	/* Enable the common interrupts */
	if (cfg.dma_enable == 0U) {
 80067c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d105      	bne.n	80067dc <USB_HostInit+0x154>
		USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f043 0210 	orr.w	r2, r3, #16
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	619a      	str	r2, [r3, #24]
	}

	/* Enable interrupts matching to the Host mode ONLY */
	USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM | USB_OTG_GINTMSK_HCIM |
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699a      	ldr	r2, [r3, #24]
 80067e0:	4b0a      	ldr	r3, [pc, #40]	@ (800680c <USB_HostInit+0x184>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6193      	str	r3, [r2, #24]
	USB_OTG_GINTMSK_SOFM | USB_OTG_GINTSTS_DISCINT |
	USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

	return ret;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067f4:	b004      	add	sp, #16
 80067f6:	4770      	bx	lr
 80067f8:	40040000 	.word	0x40040000
 80067fc:	01000200 	.word	0x01000200
 8006800:	00e00300 	.word	0x00e00300
 8006804:	00600080 	.word	0x00600080
 8006808:	004000e0 	.word	0x004000e0
 800680c:	a3200008 	.word	0xa3200008

08006810 <USB_InitFSLSPClkSel>:
 *           HCFG_48_MHZ : Full Speed 48 MHz Clock
 *           HCFG_6_MHZ : Low Speed 6 MHz Clock
 * @retval HAL status
 */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t freq) {
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	60fb      	str	r3, [r7, #12]

	USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800682e:	f023 0303 	bic.w	r3, r3, #3
 8006832:	6013      	str	r3, [r2, #0]
	USBx_HOST->HCFG |= (uint32_t) freq & USB_OTG_HCFG_FSLSPCS;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	68f9      	ldr	r1, [r7, #12]
 8006844:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006848:	4313      	orrs	r3, r2
 800684a:	600b      	str	r3, [r1, #0]

	if (freq == HCFG_48_MHZ) {
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d107      	bne.n	8006862 <USB_InitFSLSPClkSel+0x52>
		USBx_HOST->HFIR = HFIR_48_MHZ;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006858:	461a      	mov	r2, r3
 800685a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800685e:	6053      	str	r3, [r2, #4]
 8006860:	e00c      	b.n	800687c <USB_InitFSLSPClkSel+0x6c>
	} else if (freq == HCFG_6_MHZ) {
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d107      	bne.n	8006878 <USB_InitFSLSPClkSel+0x68>
		USBx_HOST->HFIR = HFIR_6_MHZ;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800686e:	461a      	mov	r2, r3
 8006870:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006874:	6053      	str	r3, [r2, #4]
 8006876:	e001      	b.n	800687c <USB_InitFSLSPClkSel+0x6c>
	} else {
		return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <USB_InitFSLSPClkSel+0x6e>
	}

	return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <USB_ResetPort>:
 * @param  USBx  Selected device
 * @retval HAL status
 * @note (1)The application must wait at least 10 ms
 *   before clearing the reset bit.
 */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx) {
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	60fb      	str	r3, [r7, #12]

	__IO uint32_t hprt0 = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60bb      	str	r3, [r7, #8]

	hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80068aa:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80068b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b8:	6013      	str	r3, [r2, #0]
	HAL_Delay(100U); /* See Note #1 */
 80068ba:	2064      	movs	r0, #100	@ 0x64
 80068bc:	f7fa fb4c 	bl	8000f58 <HAL_Delay>
	USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80068c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068cc:	6013      	str	r3, [r2, #0]
	HAL_Delay(10U);
 80068ce:	200a      	movs	r0, #10
 80068d0:	f7fa fb42 	bl	8000f58 <HAL_Delay>

	return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USB_DriveVbus>:
 *           0 : Deactivate VBUS
 *           1 : Activate VBUS
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t state) {
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60fb      	str	r3, [r7, #12]
	__IO uint32_t hprt0 = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60bb      	str	r3, [r7, #8]

	hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006902:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U)) {
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <USB_DriveVbus+0x44>
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d106      	bne.n	8006922 <USB_DriveVbus+0x44>
		USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800691c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006920:	6013      	str	r3, [r2, #0]
	}
	if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U)) {
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800692c:	d109      	bne.n	8006942 <USB_DriveVbus+0x64>
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <USB_DriveVbus+0x64>
		USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800693c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006940:	6013      	str	r3, [r2, #0]
	}
	return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_GetHostSpeed>:
 *          This parameter can be one of these values:
 *            @arg HCD_SPEED_HIGH: High speed mode
 *            @arg HCD_SPEED_FULL: Full speed mode
 *            @arg HCD_SPEED_LOW: Low speed mode
 */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx) {
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]
	__IO uint32_t hprt0 = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60bb      	str	r3, [r7, #8]
	return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	0c5b      	lsrs	r3, r3, #17
 800696e:	f003 0303 	and.w	r3, r3, #3
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USB_GetCurrentFrame>:
/**
 * @brief  Return Host Current Frame number
 * @param  USBx  Selected device
 * @retval current frame number
 */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx) {
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60fb      	str	r3, [r7, #12]

	return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	b29b      	uxth	r3, r3
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <USB_HC_Init>:
 *          This parameter can be a value from 0 to 32K
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
		uint8_t epnum, uint8_t dev_address, uint8_t speed, uint8_t ep_type,
		uint16_t mps) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	4608      	mov	r0, r1
 80069aa:	4611      	mov	r1, r2
 80069ac:	461a      	mov	r2, r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	70fb      	strb	r3, [r7, #3]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70bb      	strb	r3, [r7, #2]
 80069b6:	4613      	mov	r3, r2
 80069b8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	77fb      	strb	r3, [r7, #31]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	613b      	str	r3, [r7, #16]
	uint32_t HCcharEpDir;
	uint32_t HCcharLowSpeed;
	uint32_t HostCoreSpeed;

	/* Clear old interrupt conditions for this host channel. */
	USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ce:	461a      	mov	r2, r3
 80069d0:	f04f 33ff 	mov.w	r3, #4294967295
 80069d4:	6093      	str	r3, [r2, #8]

	/* Enable channel interrupts required for this transfer. */
	switch (ep_type) {
 80069d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d87c      	bhi.n	8006ad8 <USB_HC_Init+0x138>
 80069de:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <USB_HC_Init+0x44>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	08006a9b 	.word	0x08006a9b
 80069ec:	080069f5 	.word	0x080069f5
 80069f0:	08006a5d 	.word	0x08006a5d
	case EP_TYPE_CTRL:
	case EP_TYPE_BULK:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a00:	461a      	mov	r2, r3
 8006a02:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006a06:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_TXERRM |
		USB_OTG_HCINTMSK_DTERRM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_NAKM;

		if ((epnum & 0x80U) == 0x80U) {
 8006a08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	da10      	bge.n	8006a32 <USB_HC_Init+0x92>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	78fa      	ldrb	r2, [r7, #3]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a2e:	60d3      	str	r3, [r2, #12]
						USB_OTG_HCINTMSK_NYET |
						USB_OTG_HCINTMSK_ACKM;
			}
#endif /* defined (USB_OTG_HS) */
		}
		break;
 8006a30:	e055      	b.n	8006ade <USB_HC_Init+0x13e>
			if (USBx == USB_OTG_HS) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a6f      	ldr	r2, [pc, #444]	@ (8006bf4 <USB_HC_Init+0x254>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d151      	bne.n	8006ade <USB_HC_Init+0x13e>
				USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	78fa      	ldrb	r2, [r7, #3]
 8006a4a:	0151      	lsls	r1, r2, #5
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	440a      	add	r2, r1
 8006a50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006a58:	60d3      	str	r3, [r2, #12]
		break;
 8006a5a:	e040      	b.n	8006ade <USB_HC_Init+0x13e>

	case EP_TYPE_INTR:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006a6e:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_DTERRM |
		USB_OTG_HCINTMSK_NAKM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_FRMORM;

		if ((epnum & 0x80U) == 0x80U) {
 8006a70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da34      	bge.n	8006ae2 <USB_HC_Init+0x142>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	78fa      	ldrb	r2, [r7, #3]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a96:	60d3      	str	r3, [r2, #12]
					USB_OTG_HCINTMSK_BBERRM;
		}

		break;
 8006a98:	e023      	b.n	8006ae2 <USB_HC_Init+0x142>

	case EP_TYPE_ISOC:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f240 2325 	movw	r3, #549	@ 0x225
 8006aac:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_ACKM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_FRMORM;

		if ((epnum & 0x80U) == 0x80U) {
 8006aae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	da17      	bge.n	8006ae6 <USB_HC_Init+0x146>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	78fa      	ldrb	r2, [r7, #3]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ad0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006ad4:	60d3      	str	r3, [r2, #12]
					(USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
		}
		break;
 8006ad6:	e006      	b.n	8006ae6 <USB_HC_Init+0x146>

	default:
		ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	77fb      	strb	r3, [r7, #31]
		break;
 8006adc:	e004      	b.n	8006ae8 <USB_HC_Init+0x148>
		break;
 8006ade:	bf00      	nop
 8006ae0:	e002      	b.n	8006ae8 <USB_HC_Init+0x148>
		break;
 8006ae2:	bf00      	nop
 8006ae4:	e000      	b.n	8006ae8 <USB_HC_Init+0x148>
		break;
 8006ae6:	bf00      	nop
	}

	/* Clear Hub Start Split transaction */
	USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af4:	461a      	mov	r2, r3
 8006af6:	2300      	movs	r3, #0
 8006af8:	6053      	str	r3, [r2, #4]

	/* Enable host channel Halt interrupt */
	USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	78fa      	ldrb	r2, [r7, #3]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b14:	f043 0302 	orr.w	r3, r3, #2
 8006b18:	60d3      	str	r3, [r2, #12]

	/* Enable the top level host channel interrupt. */
	USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	2101      	movs	r1, #1
 8006b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2e:	6939      	ldr	r1, [r7, #16]
 8006b30:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006b34:	4313      	orrs	r3, r2
 8006b36:	618b      	str	r3, [r1, #24]

	/* Make sure host channel interrupts are enabled. */
	USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	619a      	str	r2, [r3, #24]

	/* Program the HCCHAR register */
	if ((epnum & 0x80U) == 0x80U) {
 8006b44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	da03      	bge.n	8006b54 <USB_HC_Init+0x1b4>
		HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006b4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	e001      	b.n	8006b58 <USB_HC_Init+0x1b8>
	} else {
		HCcharEpDir = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	61bb      	str	r3, [r7, #24]
	}

	HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff fef9 	bl	8006950 <USB_GetHostSpeed>
 8006b5e:	60f8      	str	r0, [r7, #12]

	/* LS device plugged to HUB */
	if ((speed == HPRT0_PRTSPD_LOW_SPEED)
 8006b60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d106      	bne.n	8006b76 <USB_HC_Init+0x1d6>
			&& (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED)) {
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d003      	beq.n	8006b76 <USB_HC_Init+0x1d6>
		HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e001      	b.n	8006b7a <USB_HC_Init+0x1da>
	} else {
		HCcharLowSpeed = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]
	}

	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8006b7a:	787b      	ldrb	r3, [r7, #1]
 8006b7c:	059b      	lsls	r3, r3, #22
			& USB_OTG_HCCHAR_DAD)
 8006b7e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
			| ((((uint32_t) epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM)
 8006b82:	78bb      	ldrb	r3, [r7, #2]
 8006b84:	02db      	lsls	r3, r3, #11
 8006b86:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
 8006b8a:	431a      	orrs	r2, r3
			| (((uint32_t) ep_type << 18) & USB_OTG_HCCHAR_EPTYP)
 8006b8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b90:	049b      	lsls	r3, r3, #18
 8006b92:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006b96:	431a      	orrs	r2, r3
			| ((uint32_t) mps & USB_OTG_HCCHAR_MPSIZ) |
 8006b98:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b9e:	431a      	orrs	r2, r3
			USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8006ba8:	78fa      	ldrb	r2, [r7, #3]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
			USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 8006bb8:	6013      	str	r3, [r2, #0]

	if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC)) {
 8006bba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d003      	beq.n	8006bca <USB_HC_Init+0x22a>
 8006bc2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d10f      	bne.n	8006bea <USB_HC_Init+0x24a>
		USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	0151      	lsls	r1, r2, #5
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	440a      	add	r2, r1
 8006be0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006be4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006be8:	6013      	str	r3, [r2, #0]
	}

	return ret;
 8006bea:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3720      	adds	r7, #32
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40040000 	.word	0x40040000

08006bf8 <USB_HC_StartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_HCTypeDef *hc, uint8_t dma) {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08c      	sub	sp, #48	@ 0x30
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	71fb      	strb	r3, [r7, #7]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	623b      	str	r3, [r7, #32]
	uint32_t ch_num = (uint32_t) hc->ch_num;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	61fb      	str	r3, [r7, #28]
	__IO uint32_t tmpreg;
	uint8_t is_oddframe;
	uint16_t len_words;
	uint16_t num_packets;
	uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c14:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
	if (USBx == USB_OTG_HS) {
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a5d      	ldr	r2, [pc, #372]	@ (8006d90 <USB_HC_StartXfer+0x198>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d12f      	bne.n	8006c7e <USB_HC_StartXfer+0x86>
		/* in DMA mode host Core automatically issues ping in case of NYET/NAK */
		if (dma == 1U) {
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d11c      	bne.n	8006c5e <USB_HC_StartXfer+0x66>
			if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK))
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	7c9b      	ldrb	r3, [r3, #18]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <USB_HC_StartXfer+0x3c>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	7c9b      	ldrb	r3, [r3, #18]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d124      	bne.n	8006c7e <USB_HC_StartXfer+0x86>
					&& (hc->do_ssplit == 0U)) {
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	799b      	ldrb	r3, [r3, #6]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d120      	bne.n	8006c7e <USB_HC_StartXfer+0x86>

				USBx_HC((uint32_t)ch_num)->HCINTMSK &=
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	6a3a      	ldr	r2, [r7, #32]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5a:	60d3      	str	r3, [r2, #12]
 8006c5c:	e00f      	b.n	8006c7e <USB_HC_StartXfer+0x86>
						~(USB_OTG_HCINTMSK_NYET |
						USB_OTG_HCINTMSK_ACKM |
						USB_OTG_HCINTMSK_NAKM);
			}
		} else {
			if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U)) {
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	791b      	ldrb	r3, [r3, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10b      	bne.n	8006c7e <USB_HC_StartXfer+0x86>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	795b      	ldrb	r3, [r3, #5]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d107      	bne.n	8006c7e <USB_HC_StartXfer+0x86>
				(void) USB_DoPing(USBx, hc->ch_num);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	4619      	mov	r1, r3
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 fb6b 	bl	8007350 <USB_DoPing>
				return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e232      	b.n	80070e4 <USB_HC_StartXfer+0x4ec>
			}
		}
	}
#endif /* defined (USB_OTG_HS) */

	if (hc->do_ssplit == 1U) {
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	799b      	ldrb	r3, [r3, #6]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d158      	bne.n	8006d38 <USB_HC_StartXfer+0x140>
		/* Set number of packet to 1 for Split transaction */
		num_packets = 1U;
 8006c86:	2301      	movs	r3, #1
 8006c88:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (hc->ep_is_in != 0U) {
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	78db      	ldrb	r3, [r3, #3]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <USB_HC_StartXfer+0xaa>
			hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8006c92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	8a92      	ldrh	r2, [r2, #20]
 8006c98:	fb03 f202 	mul.w	r2, r3, r2
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	61da      	str	r2, [r3, #28]
 8006ca0:	e07c      	b.n	8006d9c <USB_HC_StartXfer+0x1a4>
		} else {
			if (hc->ep_type == EP_TYPE_ISOC) {
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	7c9b      	ldrb	r3, [r3, #18]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d130      	bne.n	8006d0c <USB_HC_StartXfer+0x114>
				if (hc->xfer_len > ISO_SPLT_MPS) {
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	2bbc      	cmp	r3, #188	@ 0xbc
 8006cb0:	d918      	bls.n	8006ce4 <USB_HC_StartXfer+0xec>
					/* Isochrone Max Packet Size for Split mode */
					hc->XferSize = hc->max_packet;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	8a9b      	ldrh	r3, [r3, #20]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	61da      	str	r2, [r3, #28]
					hc->xfer_len = hc->XferSize;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	621a      	str	r2, [r3, #32]

					if ((hc->iso_splt_xactPos == HCSPLT_BEGIN)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d003      	beq.n	8006cd4 <USB_HC_StartXfer+0xdc>
							|| (hc->iso_splt_xactPos == HCSPLT_MIDDLE)) {
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d103      	bne.n	8006cdc <USB_HC_StartXfer+0xe4>
						hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	60da      	str	r2, [r3, #12]
 8006cda:	e05f      	b.n	8006d9c <USB_HC_StartXfer+0x1a4>
					} else {
						hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	60da      	str	r2, [r3, #12]
 8006ce2:	e05b      	b.n	8006d9c <USB_HC_StartXfer+0x1a4>
					}
				} else {
					hc->XferSize = hc->xfer_len;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	6a1a      	ldr	r2, [r3, #32]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	61da      	str	r2, [r3, #28]

					if ((hc->iso_splt_xactPos != HCSPLT_BEGIN)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d007      	beq.n	8006d04 <USB_HC_StartXfer+0x10c>
							&& (hc->iso_splt_xactPos != HCSPLT_MIDDLE)) {
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d003      	beq.n	8006d04 <USB_HC_StartXfer+0x10c>
						hc->iso_splt_xactPos = HCSPLT_FULL;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2204      	movs	r2, #4
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	e04b      	b.n	8006d9c <USB_HC_StartXfer+0x1a4>
					} else {
						hc->iso_splt_xactPos = HCSPLT_END;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2203      	movs	r2, #3
 8006d08:	60da      	str	r2, [r3, #12]
 8006d0a:	e047      	b.n	8006d9c <USB_HC_StartXfer+0x1a4>
					}
				}
			} else {
				if ((dma == 1U) && (hc->xfer_len > hc->max_packet)) {
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d10d      	bne.n	8006d2e <USB_HC_StartXfer+0x136>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	8a92      	ldrh	r2, [r2, #20]
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d907      	bls.n	8006d2e <USB_HC_StartXfer+0x136>
					hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8006d1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	8a92      	ldrh	r2, [r2, #20]
 8006d24:	fb03 f202 	mul.w	r2, r3, r2
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	61da      	str	r2, [r3, #28]
 8006d2c:	e036      	b.n	8006d9c <USB_HC_StartXfer+0x1a4>
				} else {
					hc->XferSize = hc->xfer_len;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6a1a      	ldr	r2, [r3, #32]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	61da      	str	r2, [r3, #28]
 8006d36:	e031      	b.n	8006d9c <USB_HC_StartXfer+0x1a4>
				}
			}
		}
	} else {
		/* Compute the expected number of packets associated to the transfer */
		if (hc->xfer_len > 0U) {
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d018      	beq.n	8006d72 <USB_HC_StartXfer+0x17a>
			num_packets = (uint16_t) ((hc->xfer_len + hc->max_packet - 1U)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	8a92      	ldrh	r2, [r2, #20]
 8006d48:	4413      	add	r3, r2
 8006d4a:	3b01      	subs	r3, #1
					/ hc->max_packet);
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	8a92      	ldrh	r2, [r2, #20]
 8006d50:	fbb3 f3f2 	udiv	r3, r3, r2
			num_packets = (uint16_t) ((hc->xfer_len + hc->max_packet - 1U)
 8006d54:	84fb      	strh	r3, [r7, #38]	@ 0x26

			if (num_packets > max_hc_pkt_count) {
 8006d56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006d58:	8b7b      	ldrh	r3, [r7, #26]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d90b      	bls.n	8006d76 <USB_HC_StartXfer+0x17e>
				num_packets = max_hc_pkt_count;
 8006d5e:	8b7b      	ldrh	r3, [r7, #26]
 8006d60:	84fb      	strh	r3, [r7, #38]	@ 0x26
				hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8006d62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	8a92      	ldrh	r2, [r2, #20]
 8006d68:	fb03 f202 	mul.w	r2, r3, r2
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	61da      	str	r2, [r3, #28]
 8006d70:	e001      	b.n	8006d76 <USB_HC_StartXfer+0x17e>
			}
		} else {
			num_packets = 1U;
 8006d72:	2301      	movs	r3, #1
 8006d74:	84fb      	strh	r3, [r7, #38]	@ 0x26

		/*
		 * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
		 * max_packet size.
		 */
		if (hc->ep_is_in != 0U) {
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	78db      	ldrb	r3, [r3, #3]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <USB_HC_StartXfer+0x19c>
			hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8006d7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	8a92      	ldrh	r2, [r2, #20]
 8006d84:	fb03 f202 	mul.w	r2, r3, r2
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	61da      	str	r2, [r3, #28]
 8006d8c:	e006      	b.n	8006d9c <USB_HC_StartXfer+0x1a4>
 8006d8e:	bf00      	nop
 8006d90:	40040000 	.word	0x40040000
		} else {
			hc->XferSize = hc->xfer_len;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6a1a      	ldr	r2, [r3, #32]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	61da      	str	r2, [r3, #28]
		}
	}

	/* Initialize the HCTSIZn register */
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	f3c3 0212 	ubfx	r2, r3, #0, #19
			| (((uint32_t) num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT)
 8006da4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006da6:	04d9      	lsls	r1, r3, #19
 8006da8:	4ba3      	ldr	r3, [pc, #652]	@ (8007038 <USB_HC_StartXfer+0x440>)
 8006daa:	400b      	ands	r3, r1
 8006dac:	431a      	orrs	r2, r3
			| (((uint32_t) hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	7d9b      	ldrb	r3, [r3, #22]
 8006db2:	075b      	lsls	r3, r3, #29
 8006db4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8006db8:	69f9      	ldr	r1, [r7, #28]
 8006dba:	0148      	lsls	r0, r1, #5
 8006dbc:	6a39      	ldr	r1, [r7, #32]
 8006dbe:	4401      	add	r1, r0
 8006dc0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
			| (((uint32_t) hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006dc4:	4313      	orrs	r3, r2
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 8006dc6:	610b      	str	r3, [r1, #16]

	if (dma != 0U) {
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <USB_HC_StartXfer+0x1ea>
		/* xfer_buff MUST be 32-bits aligned */
		USBx_HC(ch_num)->HCDMA = (uint32_t) hc->xfer_buff;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	6999      	ldr	r1, [r3, #24]
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dde:	460a      	mov	r2, r1
 8006de0:	615a      	str	r2, [r3, #20]
	}

	is_oddframe = (((uint32_t) USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bf0c      	ite	eq
 8006df2:	2301      	moveq	r3, #1
 8006df4:	2300      	movne	r3, #0
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	767b      	strb	r3, [r7, #25]
	USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	6a3a      	ldr	r2, [r7, #32]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006e18:	6013      	str	r3, [r2, #0]
	USBx_HC(ch_num)->HCCHAR |= (uint32_t) is_oddframe << 29;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	7e7b      	ldrb	r3, [r7, #25]
 8006e2a:	075b      	lsls	r3, r3, #29
 8006e2c:	69f9      	ldr	r1, [r7, #28]
 8006e2e:	0148      	lsls	r0, r1, #5
 8006e30:	6a39      	ldr	r1, [r7, #32]
 8006e32:	4401      	add	r1, r0
 8006e34:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	600b      	str	r3, [r1, #0]

	if (hc->do_ssplit == 1U) {
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	799b      	ldrb	r3, [r3, #6]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	f040 80c3 	bne.w	8006fcc <USB_HC_StartXfer+0x3d4>
		/* Set Hub start Split transaction */
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	7c5b      	ldrb	r3, [r3, #17]
				<< USB_OTG_HCSPLT_HUBADDR_Pos) | (uint32_t) hc->hub_port_nbr
 8006e4a:	01db      	lsls	r3, r3, #7
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	7c12      	ldrb	r2, [r2, #16]
 8006e50:	4313      	orrs	r3, r2
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	0151      	lsls	r1, r2, #5
 8006e56:	6a3a      	ldr	r2, [r7, #32]
 8006e58:	440a      	add	r2, r1
 8006e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
				| USB_OTG_HCSPLT_SPLITEN;
 8006e5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8006e62:	6053      	str	r3, [r2, #4]

		/* unmask ack & nyet for IN/OUT transactions */
		USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	6a3a      	ldr	r2, [r7, #32]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006e82:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_NYET);

		if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U)) {
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	79db      	ldrb	r3, [r3, #7]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d123      	bne.n	8006ed4 <USB_HC_StartXfer+0x2dc>
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	78db      	ldrb	r3, [r3, #3]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d11f      	bne.n	8006ed4 <USB_HC_StartXfer+0x2dc>
			USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	6a3a      	ldr	r2, [r7, #32]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eb2:	6053      	str	r3, [r2, #4]
					USB_OTG_HCSPLT_COMPLSPLT;
			USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	6a3a      	ldr	r2, [r7, #32]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ed2:	60d3      	str	r3, [r2, #12]
		}

		if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	7c9b      	ldrb	r3, [r3, #18]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d003      	beq.n	8006ee4 <USB_HC_StartXfer+0x2ec>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	7c9b      	ldrb	r3, [r3, #18]
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d117      	bne.n	8006f14 <USB_HC_StartXfer+0x31c>
				&& (hc->do_csplit == 1U) && (hc->ep_is_in == 1U)) {
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	79db      	ldrb	r3, [r3, #7]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d113      	bne.n	8006f14 <USB_HC_StartXfer+0x31c>
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	78db      	ldrb	r3, [r3, #3]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d10f      	bne.n	8006f14 <USB_HC_StartXfer+0x31c>
			USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	6a3a      	ldr	r2, [r7, #32]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f12:	6053      	str	r3, [r2, #4]
					USB_OTG_HCSPLT_COMPLSPLT;
		}

		/* Position management for iso out transaction on split mode */
		if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U)) {
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	7c9b      	ldrb	r3, [r3, #18]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d162      	bne.n	8006fe2 <USB_HC_StartXfer+0x3ea>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	78db      	ldrb	r3, [r3, #3]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d15e      	bne.n	8006fe2 <USB_HC_StartXfer+0x3ea>
			/* Set data payload position */
			switch (hc->iso_splt_xactPos) {
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d858      	bhi.n	8006fe0 <USB_HC_StartXfer+0x3e8>
 8006f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f34 <USB_HC_StartXfer+0x33c>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006f45 	.word	0x08006f45
 8006f38:	08006f67 	.word	0x08006f67
 8006f3c:	08006f89 	.word	0x08006f89
 8006f40:	08006fab 	.word	0x08006fab
			case HCSPLT_BEGIN:
				/* First data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f62:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_1;
				break;
 8006f64:	e03d      	b.n	8006fe2 <USB_HC_StartXfer+0x3ea>

			case HCSPLT_MIDDLE:
				/* Middle data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	6a3a      	ldr	r2, [r7, #32]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f80:	f043 030e 	orr.w	r3, r3, #14
 8006f84:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_Pos;
				break;
 8006f86:	e02c      	b.n	8006fe2 <USB_HC_StartXfer+0x3ea>

			case HCSPLT_END:
				/* End data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	0151      	lsls	r1, r2, #5
 8006f9a:	6a3a      	ldr	r2, [r7, #32]
 8006f9c:	440a      	add	r2, r1
 8006f9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fa6:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_0;
				break;
 8006fa8:	e01b      	b.n	8006fe2 <USB_HC_StartXfer+0x3ea>

			case HCSPLT_FULL:
				/* Entire data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	6a3a      	ldr	r2, [r7, #32]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fc8:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS;
				break;
 8006fca:	e00a      	b.n	8006fe2 <USB_HC_StartXfer+0x3ea>
				break;
			}
		}
	} else {
		/* Clear Hub Start Split transaction */
		USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fd8:	461a      	mov	r2, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6053      	str	r3, [r2, #4]
 8006fde:	e000      	b.n	8006fe2 <USB_HC_StartXfer+0x3ea>
				break;
 8006fe0:	bf00      	nop
	}

	/* Set host channel enable */
	tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	613b      	str	r3, [r7, #16]
	tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ff8:	613b      	str	r3, [r7, #16]

	/* make sure to set the correct ep direction */
	if (hc->ep_is_in != 0U) {
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	78db      	ldrb	r3, [r3, #3]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <USB_HC_StartXfer+0x414>
		tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	e003      	b.n	8007014 <USB_HC_StartXfer+0x41c>
	} else {
		tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007012:	613b      	str	r3, [r7, #16]
	}
	tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800701a:	613b      	str	r3, [r7, #16]
	USBx_HC(ch_num)->HCCHAR = tmpreg;
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	4413      	add	r3, r2
 8007024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007028:	461a      	mov	r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	6013      	str	r3, [r2, #0]

	if (dma != 0U) /* dma mode */
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <USB_HC_StartXfer+0x444>
	{
		return HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	e055      	b.n	80070e4 <USB_HC_StartXfer+0x4ec>
 8007038:	1ff80000 	.word	0x1ff80000
	}

	if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U)) {
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	78db      	ldrb	r3, [r3, #3]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d14e      	bne.n	80070e2 <USB_HC_StartXfer+0x4ea>
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d04a      	beq.n	80070e2 <USB_HC_StartXfer+0x4ea>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	79db      	ldrb	r3, [r3, #7]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d146      	bne.n	80070e2 <USB_HC_StartXfer+0x4ea>
		switch (hc->ep_type) {
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	7c9b      	ldrb	r3, [r3, #18]
 8007058:	2b03      	cmp	r3, #3
 800705a:	d831      	bhi.n	80070c0 <USB_HC_StartXfer+0x4c8>
 800705c:	a201      	add	r2, pc, #4	@ (adr r2, 8007064 <USB_HC_StartXfer+0x46c>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007075 	.word	0x08007075
 8007068:	08007099 	.word	0x08007099
 800706c:	08007075 	.word	0x08007075
 8007070:	08007099 	.word	0x08007099
		/* Non periodic transfer */
		case EP_TYPE_CTRL:
		case EP_TYPE_BULK:

			len_words = (uint16_t) ((hc->xfer_len + 3U) / 4U);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	3303      	adds	r3, #3
 800707a:	089b      	lsrs	r3, r3, #2
 800707c:	82fb      	strh	r3, [r7, #22]

			/* check if there is enough space in FIFO space */
			if (len_words > (USBx->HNPTXSTS & 0xFFFFU)) {
 800707e:	8afa      	ldrh	r2, [r7, #22]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	b29b      	uxth	r3, r3
 8007086:	429a      	cmp	r2, r3
 8007088:	d91c      	bls.n	80070c4 <USB_HC_StartXfer+0x4cc>
				/* need to process data in nptxfempty interrupt */
				USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f043 0220 	orr.w	r2, r3, #32
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	619a      	str	r2, [r3, #24]
			}
			break;
 8007096:	e015      	b.n	80070c4 <USB_HC_StartXfer+0x4cc>

			/* Periodic transfer */
		case EP_TYPE_INTR:
		case EP_TYPE_ISOC:
			len_words = (uint16_t) ((hc->xfer_len + 3U) / 4U);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	3303      	adds	r3, #3
 800709e:	089b      	lsrs	r3, r3, #2
 80070a0:	82fb      	strh	r3, [r7, #22]
			/* check if there is enough space in FIFO space */
			if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80070a2:	8afa      	ldrh	r2, [r7, #22]
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d90a      	bls.n	80070c8 <USB_HC_StartXfer+0x4d0>
			{
				/* need to process data in ptxfempty interrupt */
				USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	619a      	str	r2, [r3, #24]
			}
			break;
 80070be:	e003      	b.n	80070c8 <USB_HC_StartXfer+0x4d0>

		default:
			break;
 80070c0:	bf00      	nop
 80070c2:	e002      	b.n	80070ca <USB_HC_StartXfer+0x4d2>
			break;
 80070c4:	bf00      	nop
 80070c6:	e000      	b.n	80070ca <USB_HC_StartXfer+0x4d2>
			break;
 80070c8:	bf00      	nop
		}

		/* Write packet into the Tx FIFO. */
		(void) USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num,
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	6999      	ldr	r1, [r3, #24]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	785a      	ldrb	r2, [r3, #1]
				(uint16_t) hc->xfer_len, 0);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
		(void) USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num,
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2000      	movs	r0, #0
 80070da:	9000      	str	r0, [sp, #0]
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f7ff f9c9 	bl	8006474 <USB_WritePacket>
	}

	return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3728      	adds	r7, #40	@ 0x28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USB_HC_ReadInterrupt>:
/**
 * @brief Read all host channel interrupts status
 * @param  USBx  Selected device
 * @retval HAL state
 */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60fb      	str	r3, [r7, #12]

	return ((USBx_HOST->HAINT) & 0xFFFFU);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	b29b      	uxth	r3, r3
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USB_HC_Halt>:
 * @param  USBx  Selected device
 * @param  hc_num  Host Channel number
 *         This parameter can be a value from 1 to 15
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num) {
 800710e:	b480      	push	{r7}
 8007110:	b089      	sub	sp, #36	@ 0x24
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	61fb      	str	r3, [r7, #28]
	uint32_t hcnum = (uint32_t) hc_num;
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	61bb      	str	r3, [r7, #24]
	__IO uint32_t count = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	60bb      	str	r3, [r7, #8]
	uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4413      	add	r3, r2
 800712e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	0c9b      	lsrs	r3, r3, #18
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	617b      	str	r3, [r7, #20]
	uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	4413      	add	r3, r2
 8007144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	0fdb      	lsrs	r3, r3, #31
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	613b      	str	r3, [r7, #16]
	uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	0fdb      	lsrs	r3, r3, #31
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	60fb      	str	r3, [r7, #12]

	/* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
	 At the end of the next uframe/frame (in the worst case), the core generates a channel halted
	 and disables the channel automatically. */

	if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b20      	cmp	r3, #32
 8007172:	d10d      	bne.n	8007190 <USB_HC_Halt+0x82>
			&& (SplitEna == 0U))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <USB_HC_Halt+0x82>
			&& ((ChannelEna == 0U)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <USB_HC_Halt+0x7e>
					|| (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR))))) {
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d002      	beq.n	800718c <USB_HC_Halt+0x7e>
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b03      	cmp	r3, #3
 800718a:	d101      	bne.n	8007190 <USB_HC_Halt+0x82>
		return HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	e0d8      	b.n	8007342 <USB_HC_Halt+0x234>
	}

	/* Check for space in the request queue to issue the halt. */
	if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK)) {
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <USB_HC_Halt+0x8e>
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d173      	bne.n	8007284 <USB_HC_Halt+0x176>
		USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071ba:	6013      	str	r3, [r2, #0]

		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d14a      	bne.n	800725e <USB_HC_Halt+0x150>
			if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d133      	bne.n	800723c <USB_HC_Halt+0x12e>
				USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	0151      	lsls	r1, r2, #5
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	440a      	add	r2, r1
 80071ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071f2:	6013      	str	r3, [r2, #0]
				USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	440a      	add	r2, r1
 800720a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800720e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007212:	6013      	str	r3, [r2, #0]
				do {
					count++;
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	3301      	adds	r3, #1
 8007218:	60bb      	str	r3, [r7, #8]

					if (count > 1000U) {
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007220:	d82e      	bhi.n	8007280 <USB_HC_Halt+0x172>
						break;
					}
				} while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
						== USB_OTG_HCCHAR_CHENA);
 8007234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007238:	d0ec      	beq.n	8007214 <USB_HC_Halt+0x106>
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 800723a:	e081      	b.n	8007340 <USB_HC_Halt+0x232>
			} else {
				USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	440a      	add	r2, r1
 8007252:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007256:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800725a:	6013      	str	r3, [r2, #0]
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 800725c:	e070      	b.n	8007340 <USB_HC_Halt+0x232>
			}
		} else {
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	4413      	add	r3, r2
 8007266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	440a      	add	r2, r1
 8007274:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007278:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800727c:	6013      	str	r3, [r2, #0]
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 800727e:	e05f      	b.n	8007340 <USB_HC_Halt+0x232>
						break;
 8007280:	bf00      	nop
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8007282:	e05d      	b.n	8007340 <USB_HC_Halt+0x232>
		}
	} else {
		USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	4413      	add	r3, r2
 800728c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	0151      	lsls	r1, r2, #5
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	440a      	add	r2, r1
 800729a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800729e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072a2:	6013      	str	r3, [r2, #0]

		if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U) {
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d133      	bne.n	800731c <USB_HC_Halt+0x20e>
			USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072d2:	6013      	str	r3, [r2, #0]
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072f2:	6013      	str	r3, [r2, #0]
			do {
				count++;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60bb      	str	r3, [r7, #8]

				if (count > 1000U) {
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007300:	d81d      	bhi.n	800733e <USB_HC_Halt+0x230>
					break;
				}
			} while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_HCCHAR_CHENA);
 8007314:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007318:	d0ec      	beq.n	80072f4 <USB_HC_Halt+0x1e6>
 800731a:	e011      	b.n	8007340 <USB_HC_Halt+0x232>
		} else {
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	4413      	add	r3, r2
 8007324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	440a      	add	r2, r1
 8007332:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007336:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	e000      	b.n	8007340 <USB_HC_Halt+0x232>
					break;
 800733e:	bf00      	nop
		}
	}

	return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3724      	adds	r7, #36	@ 0x24
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
	...

08007350 <USB_DoPing>:
 * @param  USBx  Selected device
 * @param  hc_num  Host Channel number
 *         This parameter can be a value from 1 to 15
 * @retval HAL state
 */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num) {
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	617b      	str	r3, [r7, #20]
	uint32_t chnum = (uint32_t) ch_num;
 8007360:	78fb      	ldrb	r3, [r7, #3]
 8007362:	613b      	str	r3, [r7, #16]
	uint32_t num_packets = 1U;
 8007364:	2301      	movs	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	04da      	lsls	r2, r3, #19
 800736c:	4b15      	ldr	r3, [pc, #84]	@ (80073c4 <USB_DoPing+0x74>)
 800736e:	4013      	ands	r3, r2
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	0151      	lsls	r1, r2, #5
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	440a      	add	r2, r1
 8007378:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800737c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007380:	6113      	str	r3, [r2, #16]
	USB_OTG_HCTSIZ_DOPING;

	/* Set host channel enable */
	tmpreg = USBx_HC(chnum)->HCCHAR;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	4413      	add	r3, r2
 800738a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60bb      	str	r3, [r7, #8]
	tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007398:	60bb      	str	r3, [r7, #8]
	tmpreg |= USB_OTG_HCCHAR_CHENA;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073a0:	60bb      	str	r3, [r7, #8]
	USBx_HC(chnum)->HCCHAR = tmpreg;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ae:	461a      	mov	r2, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	1ff80000 	.word	0x1ff80000

080073c8 <USB_StopHost>:
/**
 * @brief  Stop Host Core
 * @param  USBx  Selected device
 * @retval HAL state
 */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	77fb      	strb	r3, [r7, #31]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	617b      	str	r3, [r7, #20]
	__IO uint32_t count = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	60fb      	str	r3, [r7, #12]
	uint32_t value;
	uint32_t i;

	(void) USB_DisableGlobalInt(USBx);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7fe ff8c 	bl	80062fa <USB_DisableGlobalInt>

	/* Flush USB FIFO */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073e2:	2110      	movs	r1, #16
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7fe ffe5 	bl	80063b4 <USB_FlushTxFifo>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <USB_StopHost+0x2c>
	{
		ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	77fb      	strb	r3, [r7, #31]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff f80f 	bl	8006418 <USB_FlushRxFifo>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <USB_StopHost+0x3c>
		ret = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	77fb      	strb	r3, [r7, #31]
	}

	/* Flush out any leftover queued requests. */
	for (i = 0U; i <= 15U; i++) {
 8007404:	2300      	movs	r3, #0
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	e01f      	b.n	800744a <USB_StopHost+0x82>
		value = USBx_HC(i)->HCCHAR;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHDIS;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007420:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_CHENA;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007428:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_EPDIR;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007430:	613b      	str	r3, [r7, #16]
		USBx_HC(i)->HCCHAR = value;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	4413      	add	r3, r2
 800743a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800743e:	461a      	mov	r2, r3
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6013      	str	r3, [r2, #0]
	for (i = 0U; i <= 15U; i++) {
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	3301      	adds	r3, #1
 8007448:	61bb      	str	r3, [r7, #24]
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b0f      	cmp	r3, #15
 800744e:	d9dc      	bls.n	800740a <USB_StopHost+0x42>
	}

	/* Halt all channels to put them into a known state. */
	for (i = 0U; i <= 15U; i++) {
 8007450:	2300      	movs	r3, #0
 8007452:	61bb      	str	r3, [r7, #24]
 8007454:	e034      	b.n	80074c0 <USB_StopHost+0xf8>
		value = USBx_HC(i)->HCCHAR;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	4413      	add	r3, r2
 800745e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHDIS;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800746c:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHENA;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007474:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_EPDIR;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800747c:	613b      	str	r3, [r7, #16]
		USBx_HC(i)->HCCHAR = value;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800748a:	461a      	mov	r2, r3
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	6013      	str	r3, [r2, #0]

		do {
			count++;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3301      	adds	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]

			if (count > 1000U) {
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800749c:	d80c      	bhi.n	80074b8 <USB_StopHost+0xf0>
				break;
			}
		} while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
				== USB_OTG_HCCHAR_CHENA);
 80074b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074b4:	d0ec      	beq.n	8007490 <USB_StopHost+0xc8>
 80074b6:	e000      	b.n	80074ba <USB_StopHost+0xf2>
				break;
 80074b8:	bf00      	nop
	for (i = 0U; i <= 15U; i++) {
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	3301      	adds	r3, #1
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	2b0f      	cmp	r3, #15
 80074c4:	d9c7      	bls.n	8007456 <USB_StopHost+0x8e>
	}

	/* Clear any pending Host interrupts */
	USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074cc:	461a      	mov	r2, r3
 80074ce:	f04f 33ff 	mov.w	r3, #4294967295
 80074d2:	6153      	str	r3, [r2, #20]
	USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f04f 32ff 	mov.w	r2, #4294967295
 80074da:	615a      	str	r2, [r3, #20]

	(void) USB_EnableGlobalInt(USBx);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fe fefb 	bl	80062d8 <USB_EnableGlobalInt>

	return ret;
 80074e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b089      	sub	sp, #36	@ 0x24
 80074f0:	af04      	add	r7, sp, #16
 80074f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80074f4:	2301      	movs	r3, #1
 80074f6:	2202      	movs	r2, #2
 80074f8:	2102      	movs	r1, #2
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fc85 	bl	8007e0a <USBH_FindInterface>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2bff      	cmp	r3, #255	@ 0xff
 8007508:	d002      	beq.n	8007510 <USBH_CDC_InterfaceInit+0x24>
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d901      	bls.n	8007514 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007510:	2302      	movs	r3, #2
 8007512:	e13d      	b.n	8007790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fc5a 	bl	8007dd2 <USBH_SelectInterface>
 800751e:	4603      	mov	r3, r0
 8007520:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007528:	2302      	movs	r3, #2
 800752a:	e131      	b.n	8007790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007532:	2050      	movs	r0, #80	@ 0x50
 8007534:	f002 fb64 	bl	8009c00 <malloc>
 8007538:	4603      	mov	r3, r0
 800753a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800754c:	2302      	movs	r3, #2
 800754e:	e11f      	b.n	8007790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007550:	2250      	movs	r2, #80	@ 0x50
 8007552:	2100      	movs	r1, #0
 8007554:	68b8      	ldr	r0, [r7, #8]
 8007556:	f002 fc11 	bl	8009d7c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	211a      	movs	r1, #26
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	4413      	add	r3, r2
 8007566:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	b25b      	sxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	da15      	bge.n	800759e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	211a      	movs	r1, #26
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	4413      	add	r3, r2
 800757e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007582:	781a      	ldrb	r2, [r3, #0]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	211a      	movs	r1, #26
 800758e:	fb01 f303 	mul.w	r3, r1, r3
 8007592:	4413      	add	r3, r2
 8007594:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007598:	881a      	ldrh	r2, [r3, #0]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 ffbe 	bl	8009526 <USBH_AllocPipe>
 80075aa:	4603      	mov	r3, r0
 80075ac:	461a      	mov	r2, r3
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	7819      	ldrb	r1, [r3, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	7858      	ldrb	r0, [r3, #1]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	8952      	ldrh	r2, [r2, #10]
 80075ca:	9202      	str	r2, [sp, #8]
 80075cc:	2203      	movs	r2, #3
 80075ce:	9201      	str	r2, [sp, #4]
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	4623      	mov	r3, r4
 80075d4:	4602      	mov	r2, r0
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 ff76 	bl	80094c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2200      	movs	r2, #0
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f002 fa85 	bl	8009af4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80075ea:	2300      	movs	r3, #0
 80075ec:	2200      	movs	r2, #0
 80075ee:	210a      	movs	r1, #10
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fc0a 	bl	8007e0a <USBH_FindInterface>
 80075f6:	4603      	mov	r3, r0
 80075f8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2bff      	cmp	r3, #255	@ 0xff
 80075fe:	d002      	beq.n	8007606 <USBH_CDC_InterfaceInit+0x11a>
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d901      	bls.n	800760a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007606:	2302      	movs	r3, #2
 8007608:	e0c2      	b.n	8007790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	211a      	movs	r1, #26
 8007610:	fb01 f303 	mul.w	r3, r1, r3
 8007614:	4413      	add	r3, r2
 8007616:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	b25b      	sxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	da16      	bge.n	8007650 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	211a      	movs	r1, #26
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	4413      	add	r3, r2
 800762e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	211a      	movs	r1, #26
 800763e:	fb01 f303 	mul.w	r3, r1, r3
 8007642:	4413      	add	r3, r2
 8007644:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007648:	881a      	ldrh	r2, [r3, #0]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	835a      	strh	r2, [r3, #26]
 800764e:	e015      	b.n	800767c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	211a      	movs	r1, #26
 8007656:	fb01 f303 	mul.w	r3, r1, r3
 800765a:	4413      	add	r3, r2
 800765c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007660:	781a      	ldrb	r2, [r3, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	211a      	movs	r1, #26
 800766c:	fb01 f303 	mul.w	r3, r1, r3
 8007670:	4413      	add	r3, r2
 8007672:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007676:	881a      	ldrh	r2, [r3, #0]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	211a      	movs	r1, #26
 8007682:	fb01 f303 	mul.w	r3, r1, r3
 8007686:	4413      	add	r3, r2
 8007688:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	b25b      	sxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	da16      	bge.n	80076c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	211a      	movs	r1, #26
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	4413      	add	r3, r2
 80076a0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80076a4:	781a      	ldrb	r2, [r3, #0]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	211a      	movs	r1, #26
 80076b0:	fb01 f303 	mul.w	r3, r1, r3
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80076ba:	881a      	ldrh	r2, [r3, #0]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	835a      	strh	r2, [r3, #26]
 80076c0:	e015      	b.n	80076ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	211a      	movs	r1, #26
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	211a      	movs	r1, #26
 80076de:	fb01 f303 	mul.w	r3, r1, r3
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80076e8:	881a      	ldrh	r2, [r3, #0]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	7b9b      	ldrb	r3, [r3, #14]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 ff16 	bl	8009526 <USBH_AllocPipe>
 80076fa:	4603      	mov	r3, r0
 80076fc:	461a      	mov	r2, r3
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	7bdb      	ldrb	r3, [r3, #15]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 ff0c 	bl	8009526 <USBH_AllocPipe>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	7b59      	ldrb	r1, [r3, #13]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	7b98      	ldrb	r0, [r3, #14]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	8b12      	ldrh	r2, [r2, #24]
 800772e:	9202      	str	r2, [sp, #8]
 8007730:	2202      	movs	r2, #2
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4623      	mov	r3, r4
 8007738:	4602      	mov	r2, r0
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fec4 	bl	80094c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	7b19      	ldrb	r1, [r3, #12]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	7bd8      	ldrb	r0, [r3, #15]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	8b52      	ldrh	r2, [r2, #26]
 8007758:	9202      	str	r2, [sp, #8]
 800775a:	2202      	movs	r2, #2
 800775c:	9201      	str	r2, [sp, #4]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	4623      	mov	r3, r4
 8007762:	4602      	mov	r2, r0
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 feaf 	bl	80094c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	7b5b      	ldrb	r3, [r3, #13]
 8007776:	2200      	movs	r2, #0
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f002 f9ba 	bl	8009af4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	7b1b      	ldrb	r3, [r3, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f002 f9b3 	bl	8009af4 <USBH_LL_SetToggle>

  return USBH_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	bd90      	pop	{r4, r7, pc}

08007798 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00e      	beq.n	80077d0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 fea4 	bl	8009506 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 fecf 	bl	8009568 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	7b1b      	ldrb	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00e      	beq.n	80077f6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	7b1b      	ldrb	r3, [r3, #12]
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fe91 	bl	8009506 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	7b1b      	ldrb	r3, [r3, #12]
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 febc 	bl	8009568 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	7b5b      	ldrb	r3, [r3, #13]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00e      	beq.n	800781c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	7b5b      	ldrb	r3, [r3, #13]
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 fe7e 	bl	8009506 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	7b5b      	ldrb	r3, [r3, #13]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 fea9 	bl	8009568 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00b      	beq.n	8007840 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	4618      	mov	r0, r3
 8007832:	f002 f9ed 	bl	8009c10 <free>
    phost->pActiveClass->pData = 0U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800783c:	2200      	movs	r2, #0
 800783e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3340      	adds	r3, #64	@ 0x40
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8b1 	bl	80079ca <GetLineCoding>
 8007868:	4603      	mov	r3, r0
 800786a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d105      	bne.n	800787e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007878:	2102      	movs	r1, #2
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800787e:	7afb      	ldrb	r3, [r7, #11]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007890:	2301      	movs	r3, #1
 8007892:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d877      	bhi.n	800799c <USBH_CDC_Process+0x114>
 80078ac:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <USBH_CDC_Process+0x2c>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	080078c9 	.word	0x080078c9
 80078b8:	080078cf 	.word	0x080078cf
 80078bc:	080078ff 	.word	0x080078ff
 80078c0:	08007973 	.word	0x08007973
 80078c4:	08007981 	.word	0x08007981
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
      break;
 80078cc:	e06d      	b.n	80079aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f897 	bl	8007a08 <SetLineCoding>
 80078da:	4603      	mov	r3, r0
 80078dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078ec:	e058      	b.n	80079a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d055      	beq.n	80079a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2204      	movs	r2, #4
 80078f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80078fc:	e050      	b.n	80079a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	3340      	adds	r3, #64	@ 0x40
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f860 	bl	80079ca <GetLineCoding>
 800790a:	4603      	mov	r3, r0
 800790c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d126      	bne.n	8007962 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007926:	791b      	ldrb	r3, [r3, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d13b      	bne.n	80079a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007936:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007938:	429a      	cmp	r2, r3
 800793a:	d133      	bne.n	80079a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007946:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007948:	429a      	cmp	r2, r3
 800794a:	d12b      	bne.n	80079a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007954:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007956:	429a      	cmp	r2, r3
 8007958:	d124      	bne.n	80079a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f958 	bl	8007c10 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007960:	e020      	b.n	80079a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d01d      	beq.n	80079a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2204      	movs	r2, #4
 800796c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007970:	e018      	b.n	80079a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f867 	bl	8007a46 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f8da 	bl	8007b32 <CDC_ProcessReception>
      break;
 800797e:	e014      	b.n	80079aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007980:	2100      	movs	r1, #0
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 f81a 	bl	80089bc <USBH_ClrFeature>
 8007988:	4603      	mov	r3, r0
 800798a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800799a:	e005      	b.n	80079a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800799c:	bf00      	nop
 800799e:	e004      	b.n	80079aa <USBH_CDC_Process+0x122>
      break;
 80079a0:	bf00      	nop
 80079a2:	e002      	b.n	80079aa <USBH_CDC_Process+0x122>
      break;
 80079a4:	bf00      	nop
 80079a6:	e000      	b.n	80079aa <USBH_CDC_Process+0x122>
      break;
 80079a8:	bf00      	nop

  }

  return status;
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	22a1      	movs	r2, #161	@ 0xa1
 80079d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2221      	movs	r2, #33	@ 0x21
 80079de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2207      	movs	r2, #7
 80079f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2207      	movs	r2, #7
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 fb14 	bl	8009026 <USBH_CtlReq>
 80079fe:	4603      	mov	r3, r0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2221      	movs	r2, #33	@ 0x21
 8007a16:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2207      	movs	r2, #7
 8007a2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2207      	movs	r2, #7
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 faf5 	bl	8009026 <USBH_CtlReq>
 8007a3c:	4603      	mov	r3, r0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b086      	sub	sp, #24
 8007a4a:	af02      	add	r7, sp, #8
 8007a4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d002      	beq.n	8007a6c <CDC_ProcessTransmission+0x26>
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d023      	beq.n	8007ab2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007a6a:	e05e      	b.n	8007b2a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	8b12      	ldrh	r2, [r2, #24]
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d90b      	bls.n	8007a90 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	69d9      	ldr	r1, [r3, #28]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8b1a      	ldrh	r2, [r3, #24]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	7b5b      	ldrb	r3, [r3, #13]
 8007a84:	2001      	movs	r0, #1
 8007a86:	9000      	str	r0, [sp, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fcda 	bl	8009442 <USBH_BulkSendData>
 8007a8e:	e00b      	b.n	8007aa8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	7b5b      	ldrb	r3, [r3, #13]
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	9000      	str	r0, [sp, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fccd 	bl	8009442 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007ab0:	e03b      	b.n	8007b2a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	7b5b      	ldrb	r3, [r3, #13]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 fff1 	bl	8009aa0 <USBH_LL_GetURBState>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d128      	bne.n	8007b1a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	8b12      	ldrh	r2, [r2, #24]
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d90e      	bls.n	8007af2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	8b12      	ldrh	r2, [r2, #24]
 8007adc:	1a9a      	subs	r2, r3, r2
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	8b12      	ldrh	r2, [r2, #24]
 8007aea:	441a      	add	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	61da      	str	r2, [r3, #28]
 8007af0:	e002      	b.n	8007af8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d004      	beq.n	8007b0a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007b08:	e00e      	b.n	8007b28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f868 	bl	8007be8 <USBH_CDC_TransmitCallback>
      break;
 8007b18:	e006      	b.n	8007b28 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007b1a:	7afb      	ldrb	r3, [r7, #11]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d103      	bne.n	8007b28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007b28:	bf00      	nop
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b086      	sub	sp, #24
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b44:	2300      	movs	r3, #0
 8007b46:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d002      	beq.n	8007b58 <CDC_ProcessReception+0x26>
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d00e      	beq.n	8007b74 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007b56:	e043      	b.n	8007be0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	6a19      	ldr	r1, [r3, #32]
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	8b5a      	ldrh	r2, [r3, #26]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	7b1b      	ldrb	r3, [r3, #12]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 fc91 	bl	800948c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2204      	movs	r2, #4
 8007b6e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007b72:	e035      	b.n	8007be0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	7b1b      	ldrb	r3, [r3, #12]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f001 ff90 	bl	8009aa0 <USBH_LL_GetURBState>
 8007b80:	4603      	mov	r3, r0
 8007b82:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007b84:	7cfb      	ldrb	r3, [r7, #19]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d129      	bne.n	8007bde <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	7b1b      	ldrb	r3, [r3, #12]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 fef3 	bl	800997c <USBH_LL_GetLastXferSize>
 8007b96:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d016      	beq.n	8007bd0 <CDC_ProcessReception+0x9e>
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	8b5b      	ldrh	r3, [r3, #26]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d110      	bne.n	8007bd0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1ad2      	subs	r2, r2, r3
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	441a      	add	r2, r3
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2203      	movs	r2, #3
 8007bca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007bce:	e006      	b.n	8007bde <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f80f 	bl	8007bfc <USBH_CDC_ReceiveCallback>
      break;
 8007bde:	bf00      	nop
  }
}
 8007be0:	bf00      	nop
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e029      	b.n	8007c90 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	79fa      	ldrb	r2, [r7, #7]
 8007c40:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f81f 	bl	8007c98 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f001 fdc3 	bl	8009814 <USBH_LL_Init>

  return USBH_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	e009      	b.n	8007cbe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	33e0      	adds	r3, #224	@ 0xe0
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b0f      	cmp	r3, #15
 8007cc2:	d9f2      	bls.n	8007caa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e009      	b.n	8007cde <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ce4:	d3f1      	bcc.n	8007cca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2240      	movs	r2, #64	@ 0x40
 8007d0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	331c      	adds	r3, #28
 8007d36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f002 f81d 	bl	8009d7c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f002 f814 	bl	8009d7c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007d5a:	2212      	movs	r2, #18
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f002 f80c 	bl	8009d7c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007d6a:	223e      	movs	r2, #62	@ 0x3e
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f002 f804 	bl	8009d7c <memset>

  return USBH_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d016      	beq.n	8007dc0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10e      	bne.n	8007dba <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007da2:	1c59      	adds	r1, r3, #1
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	33de      	adds	r3, #222	@ 0xde
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
 8007db8:	e004      	b.n	8007dc4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007dba:	2302      	movs	r3, #2
 8007dbc:	73fb      	strb	r3, [r7, #15]
 8007dbe:	e001      	b.n	8007dc4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007de8:	78fa      	ldrb	r2, [r7, #3]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d204      	bcs.n	8007df8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	78fa      	ldrb	r2, [r7, #3]
 8007df2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007df6:	e001      	b.n	8007dfc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b087      	sub	sp, #28
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	4608      	mov	r0, r1
 8007e14:	4611      	mov	r1, r2
 8007e16:	461a      	mov	r2, r3
 8007e18:	4603      	mov	r3, r0
 8007e1a:	70fb      	strb	r3, [r7, #3]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70bb      	strb	r3, [r7, #2]
 8007e20:	4613      	mov	r3, r2
 8007e22:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007e32:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e34:	e025      	b.n	8007e82 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	221a      	movs	r2, #26
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	3308      	adds	r3, #8
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4413      	add	r3, r2
 8007e44:	3302      	adds	r3, #2
 8007e46:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	795b      	ldrb	r3, [r3, #5]
 8007e4c:	78fa      	ldrb	r2, [r7, #3]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d002      	beq.n	8007e58 <USBH_FindInterface+0x4e>
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	2bff      	cmp	r3, #255	@ 0xff
 8007e56:	d111      	bne.n	8007e7c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e5c:	78ba      	ldrb	r2, [r7, #2]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d002      	beq.n	8007e68 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e62:	78bb      	ldrb	r3, [r7, #2]
 8007e64:	2bff      	cmp	r3, #255	@ 0xff
 8007e66:	d109      	bne.n	8007e7c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e6c:	787a      	ldrb	r2, [r7, #1]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d002      	beq.n	8007e78 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e72:	787b      	ldrb	r3, [r7, #1]
 8007e74:	2bff      	cmp	r3, #255	@ 0xff
 8007e76:	d101      	bne.n	8007e7c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	e006      	b.n	8007e8a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d9d6      	bls.n	8007e36 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e88:	23ff      	movs	r3, #255	@ 0xff
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b082      	sub	sp, #8
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fcf4 	bl	800988c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 fe0d 	bl	8009ac6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
	...

08007eb8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af04      	add	r7, sp, #16
 8007ebe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d102      	bne.n	8007eda <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b0b      	cmp	r3, #11
 8007ee2:	f200 81bb 	bhi.w	800825c <USBH_Process+0x3a4>
 8007ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eec <USBH_Process+0x34>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f1d 	.word	0x08007f1d
 8007ef0:	08007f4f 	.word	0x08007f4f
 8007ef4:	08007fb7 	.word	0x08007fb7
 8007ef8:	080081f7 	.word	0x080081f7
 8007efc:	0800825d 	.word	0x0800825d
 8007f00:	08008057 	.word	0x08008057
 8007f04:	0800819d 	.word	0x0800819d
 8007f08:	0800808d 	.word	0x0800808d
 8007f0c:	080080ad 	.word	0x080080ad
 8007f10:	080080cb 	.word	0x080080cb
 8007f14:	0800810f 	.word	0x0800810f
 8007f18:	080081df 	.word	0x080081df
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 819b 	beq.w	8008260 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007f30:	20c8      	movs	r0, #200	@ 0xc8
 8007f32:	f001 fe12 	bl	8009b5a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fd05 	bl	8009946 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f4c:	e188      	b.n	8008260 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d107      	bne.n	8007f68 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f66:	e18a      	b.n	800827e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007f6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f72:	d914      	bls.n	8007f9e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d903      	bls.n	8007f96 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	220d      	movs	r2, #13
 8007f92:	701a      	strb	r2, [r3, #0]
      break;
 8007f94:	e173      	b.n	800827e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
      break;
 8007f9c:	e16f      	b.n	800827e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007fa4:	f103 020a 	add.w	r2, r3, #10
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007fae:	200a      	movs	r0, #10
 8007fb0:	f001 fdd3 	bl	8009b5a <USBH_Delay>
      break;
 8007fb4:	e163      	b.n	800827e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fc6:	2104      	movs	r1, #4
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007fcc:	2064      	movs	r0, #100	@ 0x64
 8007fce:	f001 fdc4 	bl	8009b5a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 fc90 	bl	80098f8 <USBH_LL_GetSpeed>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2205      	movs	r2, #5
 8007fe6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007fe8:	2100      	movs	r1, #0
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 fa9b 	bl	8009526 <USBH_AllocPipe>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ff8:	2180      	movs	r1, #128	@ 0x80
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 fa93 	bl	8009526 <USBH_AllocPipe>
 8008000:	4603      	mov	r3, r0
 8008002:	461a      	mov	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7919      	ldrb	r1, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800801c:	9202      	str	r2, [sp, #8]
 800801e:	2200      	movs	r2, #0
 8008020:	9201      	str	r2, [sp, #4]
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	4603      	mov	r3, r0
 8008026:	2280      	movs	r2, #128	@ 0x80
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 fa4d 	bl	80094c8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	7959      	ldrb	r1, [r3, #5]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008042:	9202      	str	r2, [sp, #8]
 8008044:	2200      	movs	r2, #0
 8008046:	9201      	str	r2, [sp, #4]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	4603      	mov	r3, r0
 800804c:	2200      	movs	r2, #0
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fa3a 	bl	80094c8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008054:	e113      	b.n	800827e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f916 	bl	8008288 <USBH_HandleEnum>
 800805c:	4603      	mov	r3, r0
 800805e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	f040 80fd 	bne.w	8008264 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008078:	2b01      	cmp	r3, #1
 800807a:	d103      	bne.n	8008084 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2208      	movs	r2, #8
 8008080:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008082:	e0ef      	b.n	8008264 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2207      	movs	r2, #7
 8008088:	701a      	strb	r2, [r3, #0]
      break;
 800808a:	e0eb      	b.n	8008264 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 80e8 	beq.w	8008268 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800809e:	2101      	movs	r1, #1
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2208      	movs	r2, #8
 80080a8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80080aa:	e0dd      	b.n	8008268 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fc3a 	bl	800892e <USBH_SetCfg>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f040 80d5 	bne.w	800826c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2209      	movs	r2, #9
 80080c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080c8:	e0d0      	b.n	800826c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d016      	beq.n	8008106 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80080d8:	2101      	movs	r1, #1
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fc4a 	bl	8008974 <USBH_SetFeature>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d103      	bne.n	80080f4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	220a      	movs	r2, #10
 80080f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080f2:	e0bd      	b.n	8008270 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	f040 80b9 	bne.w	8008270 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	220a      	movs	r2, #10
 8008102:	701a      	strb	r2, [r3, #0]
      break;
 8008104:	e0b4      	b.n	8008270 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	220a      	movs	r2, #10
 800810a:	701a      	strb	r2, [r3, #0]
      break;
 800810c:	e0b0      	b.n	8008270 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 80ad 	beq.w	8008274 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]
 8008126:	e016      	b.n	8008156 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008128:	7bfa      	ldrb	r2, [r7, #15]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	32de      	adds	r2, #222	@ 0xde
 800812e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008132:	791a      	ldrb	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800813a:	429a      	cmp	r2, r3
 800813c:	d108      	bne.n	8008150 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800813e:	7bfa      	ldrb	r2, [r7, #15]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	32de      	adds	r2, #222	@ 0xde
 8008144:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800814e:	e005      	b.n	800815c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	3301      	adds	r3, #1
 8008154:	73fb      	strb	r3, [r7, #15]
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d0e5      	beq.n	8008128 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d016      	beq.n	8008194 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d109      	bne.n	800818c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2206      	movs	r2, #6
 800817c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008184:	2103      	movs	r1, #3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800818a:	e073      	b.n	8008274 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	220d      	movs	r2, #13
 8008190:	701a      	strb	r2, [r3, #0]
      break;
 8008192:	e06f      	b.n	8008274 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	220d      	movs	r2, #13
 8008198:	701a      	strb	r2, [r3, #0]
      break;
 800819a:	e06b      	b.n	8008274 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d017      	beq.n	80081d6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
 80081b2:	4603      	mov	r3, r0
 80081b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d103      	bne.n	80081c6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	220b      	movs	r2, #11
 80081c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081c4:	e058      	b.n	8008278 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d154      	bne.n	8008278 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	220d      	movs	r2, #13
 80081d2:	701a      	strb	r2, [r3, #0]
      break;
 80081d4:	e050      	b.n	8008278 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	220d      	movs	r2, #13
 80081da:	701a      	strb	r2, [r3, #0]
      break;
 80081dc:	e04c      	b.n	8008278 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d049      	beq.n	800827c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
      }
      break;
 80081f4:	e042      	b.n	800827c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff fd4a 	bl	8007c98 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d009      	beq.n	8008222 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008232:	2105      	movs	r1, #5
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b01      	cmp	r3, #1
 8008242:	d107      	bne.n	8008254 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff fe22 	bl	8007e96 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008252:	e014      	b.n	800827e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 fb19 	bl	800988c <USBH_LL_Start>
      break;
 800825a:	e010      	b.n	800827e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800825c:	bf00      	nop
 800825e:	e00e      	b.n	800827e <USBH_Process+0x3c6>
      break;
 8008260:	bf00      	nop
 8008262:	e00c      	b.n	800827e <USBH_Process+0x3c6>
      break;
 8008264:	bf00      	nop
 8008266:	e00a      	b.n	800827e <USBH_Process+0x3c6>
    break;
 8008268:	bf00      	nop
 800826a:	e008      	b.n	800827e <USBH_Process+0x3c6>
      break;
 800826c:	bf00      	nop
 800826e:	e006      	b.n	800827e <USBH_Process+0x3c6>
      break;
 8008270:	bf00      	nop
 8008272:	e004      	b.n	800827e <USBH_Process+0x3c6>
      break;
 8008274:	bf00      	nop
 8008276:	e002      	b.n	800827e <USBH_Process+0x3c6>
      break;
 8008278:	bf00      	nop
 800827a:	e000      	b.n	800827e <USBH_Process+0x3c6>
      break;
 800827c:	bf00      	nop
  }
  return USBH_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af04      	add	r7, sp, #16
 800828e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008290:	2301      	movs	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008294:	2301      	movs	r3, #1
 8008296:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	2b07      	cmp	r3, #7
 800829e:	f200 81bd 	bhi.w	800861c <USBH_HandleEnum+0x394>
 80082a2:	a201      	add	r2, pc, #4	@ (adr r2, 80082a8 <USBH_HandleEnum+0x20>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082c9 	.word	0x080082c9
 80082ac:	08008383 	.word	0x08008383
 80082b0:	080083ed 	.word	0x080083ed
 80082b4:	08008477 	.word	0x08008477
 80082b8:	080084e1 	.word	0x080084e1
 80082bc:	08008551 	.word	0x08008551
 80082c0:	08008597 	.word	0x08008597
 80082c4:	080085dd 	.word	0x080085dd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80082c8:	2108      	movs	r1, #8
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa4c 	bl	8008768 <USBH_Get_DevDesc>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d12e      	bne.n	8008338 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	7919      	ldrb	r1, [r3, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082fe:	9202      	str	r2, [sp, #8]
 8008300:	2200      	movs	r2, #0
 8008302:	9201      	str	r2, [sp, #4]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	4603      	mov	r3, r0
 8008308:	2280      	movs	r2, #128	@ 0x80
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 f8dc 	bl	80094c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	7959      	ldrb	r1, [r3, #5]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008324:	9202      	str	r2, [sp, #8]
 8008326:	2200      	movs	r2, #0
 8008328:	9201      	str	r2, [sp, #4]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	4603      	mov	r3, r0
 800832e:	2200      	movs	r2, #0
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 f8c9 	bl	80094c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008336:	e173      	b.n	8008620 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b03      	cmp	r3, #3
 800833c:	f040 8170 	bne.w	8008620 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008346:	3301      	adds	r3, #1
 8008348:	b2da      	uxtb	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008356:	2b03      	cmp	r3, #3
 8008358:	d903      	bls.n	8008362 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	220d      	movs	r2, #13
 800835e:	701a      	strb	r2, [r3, #0]
      break;
 8008360:	e15e      	b.n	8008620 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	795b      	ldrb	r3, [r3, #5]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 f8fd 	bl	8009568 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	791b      	ldrb	r3, [r3, #4]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 f8f7 	bl	8009568 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	701a      	strb	r2, [r3, #0]
      break;
 8008380:	e14e      	b.n	8008620 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008382:	2112      	movs	r1, #18
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f9ef 	bl	8008768 <USBH_Get_DevDesc>
 800838a:	4603      	mov	r3, r0
 800838c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d103      	bne.n	800839c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800839a:	e143      	b.n	8008624 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	2b03      	cmp	r3, #3
 80083a0:	f040 8140 	bne.w	8008624 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083aa:	3301      	adds	r3, #1
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d903      	bls.n	80083c6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	220d      	movs	r2, #13
 80083c2:	701a      	strb	r2, [r3, #0]
      break;
 80083c4:	e12e      	b.n	8008624 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	795b      	ldrb	r3, [r3, #5]
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 f8cb 	bl	8009568 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	791b      	ldrb	r3, [r3, #4]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 f8c5 	bl	8009568 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	701a      	strb	r2, [r3, #0]
      break;
 80083ea:	e11b      	b.n	8008624 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80083ec:	2101      	movs	r1, #1
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fa79 	bl	80088e6 <USBH_SetAddress>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d130      	bne.n	8008460 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80083fe:	2002      	movs	r0, #2
 8008400:	f001 fbab 	bl	8009b5a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2203      	movs	r2, #3
 8008410:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7919      	ldrb	r1, [r3, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008426:	9202      	str	r2, [sp, #8]
 8008428:	2200      	movs	r2, #0
 800842a:	9201      	str	r2, [sp, #4]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	4603      	mov	r3, r0
 8008430:	2280      	movs	r2, #128	@ 0x80
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 f848 	bl	80094c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	7959      	ldrb	r1, [r3, #5]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800844c:	9202      	str	r2, [sp, #8]
 800844e:	2200      	movs	r2, #0
 8008450:	9201      	str	r2, [sp, #4]
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	4603      	mov	r3, r0
 8008456:	2200      	movs	r2, #0
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 f835 	bl	80094c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800845e:	e0e3      	b.n	8008628 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	2b03      	cmp	r3, #3
 8008464:	f040 80e0 	bne.w	8008628 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	220d      	movs	r2, #13
 800846c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	705a      	strb	r2, [r3, #1]
      break;
 8008474:	e0d8      	b.n	8008628 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008476:	2109      	movs	r1, #9
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f9a1 	bl	80087c0 <USBH_Get_CfgDesc>
 800847e:	4603      	mov	r3, r0
 8008480:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d103      	bne.n	8008490 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2204      	movs	r2, #4
 800848c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800848e:	e0cd      	b.n	800862c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2b03      	cmp	r3, #3
 8008494:	f040 80ca 	bne.w	800862c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800849e:	3301      	adds	r3, #1
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d903      	bls.n	80084ba <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	220d      	movs	r2, #13
 80084b6:	701a      	strb	r2, [r3, #0]
      break;
 80084b8:	e0b8      	b.n	800862c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	795b      	ldrb	r3, [r3, #5]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 f851 	bl	8009568 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	791b      	ldrb	r3, [r3, #4]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 f84b 	bl	8009568 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	701a      	strb	r2, [r3, #0]
      break;
 80084de:	e0a5      	b.n	800862c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f969 	bl	80087c0 <USBH_Get_CfgDesc>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2205      	movs	r2, #5
 80084fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084fe:	e097      	b.n	8008630 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	2b03      	cmp	r3, #3
 8008504:	f040 8094 	bne.w	8008630 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800850e:	3301      	adds	r3, #1
 8008510:	b2da      	uxtb	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800851e:	2b03      	cmp	r3, #3
 8008520:	d903      	bls.n	800852a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	220d      	movs	r2, #13
 8008526:	701a      	strb	r2, [r3, #0]
      break;
 8008528:	e082      	b.n	8008630 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	795b      	ldrb	r3, [r3, #5]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f819 	bl	8009568 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	791b      	ldrb	r3, [r3, #4]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 f813 	bl	8009568 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
      break;
 800854e:	e06f      	b.n	8008630 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008556:	2b00      	cmp	r3, #0
 8008558:	d019      	beq.n	800858e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008566:	23ff      	movs	r3, #255	@ 0xff
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f953 	bl	8008814 <USBH_Get_StringDesc>
 800856e:	4603      	mov	r3, r0
 8008570:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d103      	bne.n	8008580 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2206      	movs	r2, #6
 800857c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800857e:	e059      	b.n	8008634 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	2b03      	cmp	r3, #3
 8008584:	d156      	bne.n	8008634 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2206      	movs	r2, #6
 800858a:	705a      	strb	r2, [r3, #1]
      break;
 800858c:	e052      	b.n	8008634 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2206      	movs	r2, #6
 8008592:	705a      	strb	r2, [r3, #1]
      break;
 8008594:	e04e      	b.n	8008634 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800859c:	2b00      	cmp	r3, #0
 800859e:	d019      	beq.n	80085d4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80085ac:	23ff      	movs	r3, #255	@ 0xff
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f930 	bl	8008814 <USBH_Get_StringDesc>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2207      	movs	r2, #7
 80085c2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085c4:	e038      	b.n	8008638 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d135      	bne.n	8008638 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2207      	movs	r2, #7
 80085d0:	705a      	strb	r2, [r3, #1]
      break;
 80085d2:	e031      	b.n	8008638 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2207      	movs	r2, #7
 80085d8:	705a      	strb	r2, [r3, #1]
      break;
 80085da:	e02d      	b.n	8008638 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d017      	beq.n	8008616 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085f2:	23ff      	movs	r3, #255	@ 0xff
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f90d 	bl	8008814 <USBH_Get_StringDesc>
 80085fa:	4603      	mov	r3, r0
 80085fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d102      	bne.n	800860a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008608:	e018      	b.n	800863c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b03      	cmp	r3, #3
 800860e:	d115      	bne.n	800863c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
      break;
 8008614:	e012      	b.n	800863c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
      break;
 800861a:	e00f      	b.n	800863c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800861c:	bf00      	nop
 800861e:	e00e      	b.n	800863e <USBH_HandleEnum+0x3b6>
      break;
 8008620:	bf00      	nop
 8008622:	e00c      	b.n	800863e <USBH_HandleEnum+0x3b6>
      break;
 8008624:	bf00      	nop
 8008626:	e00a      	b.n	800863e <USBH_HandleEnum+0x3b6>
      break;
 8008628:	bf00      	nop
 800862a:	e008      	b.n	800863e <USBH_HandleEnum+0x3b6>
      break;
 800862c:	bf00      	nop
 800862e:	e006      	b.n	800863e <USBH_HandleEnum+0x3b6>
      break;
 8008630:	bf00      	nop
 8008632:	e004      	b.n	800863e <USBH_HandleEnum+0x3b6>
      break;
 8008634:	bf00      	nop
 8008636:	e002      	b.n	800863e <USBH_HandleEnum+0x3b6>
      break;
 8008638:	bf00      	nop
 800863a:	e000      	b.n	800863e <USBH_HandleEnum+0x3b6>
      break;
 800863c:	bf00      	nop
  }
  return Status;
 800863e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800865a:	bf00      	nop
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b082      	sub	sp, #8
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f804 	bl	800868a <USBH_HandleSof>
}
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b0b      	cmp	r3, #11
 800869a:	d10a      	bne.n	80086b2 <USBH_HandleSof+0x28>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d005      	beq.n	80086b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4798      	blx	r3
  }
}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80086ca:	bf00      	nop
}
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80086e6:	bf00      	nop
}
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 f8be 	bl	80098c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	791b      	ldrb	r3, [r3, #4]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 ff0b 	bl	8009568 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	795b      	ldrb	r3, [r3, #5]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 ff05 	bl	8009568 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af02      	add	r7, sp, #8
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008774:	887b      	ldrh	r3, [r7, #2]
 8008776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800877a:	d901      	bls.n	8008780 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800877c:	2303      	movs	r3, #3
 800877e:	e01b      	b.n	80087b8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008786:	887b      	ldrh	r3, [r7, #2]
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	4613      	mov	r3, r2
 800878c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008790:	2100      	movs	r1, #0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f872 	bl	800887c <USBH_GetDescriptor>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d109      	bne.n	80087b6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80087a8:	887a      	ldrh	r2, [r7, #2]
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f929 	bl	8008a04 <USBH_ParseDevDesc>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af02      	add	r7, sp, #8
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	331c      	adds	r3, #28
 80087d0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80087d2:	887b      	ldrh	r3, [r7, #2]
 80087d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087d8:	d901      	bls.n	80087de <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80087da:	2303      	movs	r3, #3
 80087dc:	e016      	b.n	800880c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80087de:	887b      	ldrh	r3, [r7, #2]
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087e8:	2100      	movs	r1, #0
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f846 	bl	800887c <USBH_GetDescriptor>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d107      	bne.n	800880a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80087fa:	887b      	ldrh	r3, [r7, #2]
 80087fc:	461a      	mov	r2, r3
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f9af 	bl	8008b64 <USBH_ParseCfgDesc>
 8008806:	4603      	mov	r3, r0
 8008808:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af02      	add	r7, sp, #8
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	607a      	str	r2, [r7, #4]
 800881e:	461a      	mov	r2, r3
 8008820:	460b      	mov	r3, r1
 8008822:	72fb      	strb	r3, [r7, #11]
 8008824:	4613      	mov	r3, r2
 8008826:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008828:	893b      	ldrh	r3, [r7, #8]
 800882a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800882e:	d802      	bhi.n	8008836 <USBH_Get_StringDesc+0x22>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008836:	2303      	movs	r3, #3
 8008838:	e01c      	b.n	8008874 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800883a:	7afb      	ldrb	r3, [r7, #11]
 800883c:	b29b      	uxth	r3, r3
 800883e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008842:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800884a:	893b      	ldrh	r3, [r7, #8]
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	460b      	mov	r3, r1
 8008850:	2100      	movs	r1, #0
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 f812 	bl	800887c <USBH_GetDescriptor>
 8008858:	4603      	mov	r3, r0
 800885a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d107      	bne.n	8008872 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008868:	893a      	ldrh	r2, [r7, #8]
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	4618      	mov	r0, r3
 800886e:	f000 fb8d 	bl	8008f8c <USBH_ParseStringDesc>
  }

  return status;
 8008872:	7dfb      	ldrb	r3, [r7, #23]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	607b      	str	r3, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	72fb      	strb	r3, [r7, #11]
 800888a:	4613      	mov	r3, r2
 800888c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	789b      	ldrb	r3, [r3, #2]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d11c      	bne.n	80088d0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008896:	7afb      	ldrb	r3, [r7, #11]
 8008898:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800889c:	b2da      	uxtb	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2206      	movs	r2, #6
 80088a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	893a      	ldrh	r2, [r7, #8]
 80088ac:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80088ae:	893b      	ldrh	r3, [r7, #8]
 80088b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80088b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088b8:	d104      	bne.n	80088c4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f240 4209 	movw	r2, #1033	@ 0x409
 80088c0:	829a      	strh	r2, [r3, #20]
 80088c2:	e002      	b.n	80088ca <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8b3a      	ldrh	r2, [r7, #24]
 80088ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80088d0:	8b3b      	ldrh	r3, [r7, #24]
 80088d2:	461a      	mov	r2, r3
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fba5 	bl	8009026 <USBH_CtlReq>
 80088dc:	4603      	mov	r3, r0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	460b      	mov	r3, r1
 80088f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	789b      	ldrb	r3, [r3, #2]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d10f      	bne.n	800891a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2205      	movs	r2, #5
 8008904:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	b29a      	uxth	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800891a:	2200      	movs	r2, #0
 800891c:	2100      	movs	r1, #0
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fb81 	bl	8009026 <USBH_CtlReq>
 8008924:	4603      	mov	r3, r0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	460b      	mov	r3, r1
 8008938:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	789b      	ldrb	r3, [r3, #2]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d10e      	bne.n	8008960 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2209      	movs	r2, #9
 800894c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	887a      	ldrh	r2, [r7, #2]
 8008952:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008960:	2200      	movs	r2, #0
 8008962:	2100      	movs	r1, #0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fb5e 	bl	8009026 <USBH_CtlReq>
 800896a:	4603      	mov	r3, r0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	789b      	ldrb	r3, [r3, #2]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d10f      	bne.n	80089a8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2203      	movs	r2, #3
 8008992:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	b29a      	uxth	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089a8:	2200      	movs	r2, #0
 80089aa:	2100      	movs	r1, #0
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fb3a 	bl	8009026 <USBH_CtlReq>
 80089b2:	4603      	mov	r3, r0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	789b      	ldrb	r3, [r3, #2]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d10f      	bne.n	80089f0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089f0:	2200      	movs	r2, #0
 80089f2:	2100      	movs	r1, #0
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fb16 	bl	8009026 <USBH_CtlReq>
 80089fa:	4603      	mov	r3, r0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008a18:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008a24:	2302      	movs	r3, #2
 8008a26:	e094      	b.n	8008b52 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	781a      	ldrb	r2, [r3, #0]
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	785a      	ldrb	r2, [r3, #1]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	3302      	adds	r3, #2
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	3303      	adds	r3, #3
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	021b      	lsls	r3, r3, #8
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	791a      	ldrb	r2, [r3, #4]
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	795a      	ldrb	r2, [r3, #5]
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	799a      	ldrb	r2, [r3, #6]
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	79da      	ldrb	r2, [r3, #7]
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d11b      	bne.n	8008abe <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	79db      	ldrb	r3, [r3, #7]
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	dc0f      	bgt.n	8008aae <USBH_ParseDevDesc+0xaa>
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	db0f      	blt.n	8008ab2 <USBH_ParseDevDesc+0xae>
 8008a92:	3b08      	subs	r3, #8
 8008a94:	4a32      	ldr	r2, [pc, #200]	@ (8008b60 <USBH_ParseDevDesc+0x15c>)
 8008a96:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bf14      	ite	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	2300      	moveq	r3, #0
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d106      	bne.n	8008aba <USBH_ParseDevDesc+0xb6>
 8008aac:	e001      	b.n	8008ab2 <USBH_ParseDevDesc+0xae>
 8008aae:	2b40      	cmp	r3, #64	@ 0x40
 8008ab0:	d003      	beq.n	8008aba <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	2208      	movs	r2, #8
 8008ab6:	71da      	strb	r2, [r3, #7]
        break;
 8008ab8:	e000      	b.n	8008abc <USBH_ParseDevDesc+0xb8>
        break;
 8008aba:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008abc:	e00e      	b.n	8008adc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d107      	bne.n	8008ad8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	79db      	ldrb	r3, [r3, #7]
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d005      	beq.n	8008adc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	2208      	movs	r2, #8
 8008ad4:	71da      	strb	r2, [r3, #7]
 8008ad6:	e001      	b.n	8008adc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008adc:	88fb      	ldrh	r3, [r7, #6]
 8008ade:	2b08      	cmp	r3, #8
 8008ae0:	d936      	bls.n	8008b50 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	3309      	adds	r3, #9
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	4313      	orrs	r3, r2
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	330a      	adds	r3, #10
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	330b      	adds	r3, #11
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	021b      	lsls	r3, r3, #8
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	330d      	adds	r3, #13
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	7b9a      	ldrb	r2, [r3, #14]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	7bda      	ldrb	r2, [r3, #15]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	7c1a      	ldrb	r2, [r3, #16]
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	7c5a      	ldrb	r2, [r3, #17]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	01000101 	.word	0x01000101

08008b64 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08c      	sub	sp, #48	@ 0x30
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008b78:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008b92:	2302      	movs	r3, #2
 8008b94:	e0da      	b.n	8008d4c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b09      	cmp	r3, #9
 8008ba0:	d002      	beq.n	8008ba8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba4:	2209      	movs	r2, #9
 8008ba6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	781a      	ldrb	r2, [r3, #0]
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	785a      	ldrb	r2, [r3, #1]
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	3302      	adds	r3, #2
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	3303      	adds	r3, #3
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	021b      	lsls	r3, r3, #8
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bd2:	bf28      	it	cs
 8008bd4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	791a      	ldrb	r2, [r3, #4]
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	795a      	ldrb	r2, [r3, #5]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	799a      	ldrb	r2, [r3, #6]
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	79da      	ldrb	r2, [r3, #7]
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	7a1a      	ldrb	r2, [r3, #8]
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c06:	88fb      	ldrh	r3, [r7, #6]
 8008c08:	2b09      	cmp	r3, #9
 8008c0a:	f240 809d 	bls.w	8008d48 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c0e:	2309      	movs	r3, #9
 8008c10:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c16:	e081      	b.n	8008d1c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c18:	f107 0316 	add.w	r3, r7, #22
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c20:	f000 f9e7 	bl	8008ff2 <USBH_GetNextDesc>
 8008c24:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d176      	bne.n	8008d1c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	2b09      	cmp	r3, #9
 8008c34:	d002      	beq.n	8008c3c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c38:	2209      	movs	r2, #9
 8008c3a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c40:	221a      	movs	r2, #26
 8008c42:	fb02 f303 	mul.w	r3, r2, r3
 8008c46:	3308      	adds	r3, #8
 8008c48:	6a3a      	ldr	r2, [r7, #32]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	3302      	adds	r3, #2
 8008c4e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c52:	69f8      	ldr	r0, [r7, #28]
 8008c54:	f000 f87e 	bl	8008d54 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c62:	e043      	b.n	8008cec <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c64:	f107 0316 	add.w	r3, r7, #22
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c6c:	f000 f9c1 	bl	8008ff2 <USBH_GetNextDesc>
 8008c70:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c74:	785b      	ldrb	r3, [r3, #1]
 8008c76:	2b05      	cmp	r3, #5
 8008c78:	d138      	bne.n	8008cec <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	795b      	ldrb	r3, [r3, #5]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d113      	bne.n	8008caa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d003      	beq.n	8008c92 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	799b      	ldrb	r3, [r3, #6]
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d10b      	bne.n	8008caa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	79db      	ldrb	r3, [r3, #7]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10b      	bne.n	8008cb2 <USBH_ParseCfgDesc+0x14e>
 8008c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b09      	cmp	r3, #9
 8008ca0:	d007      	beq.n	8008cb2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca4:	2209      	movs	r2, #9
 8008ca6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ca8:	e003      	b.n	8008cb2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cac:	2207      	movs	r2, #7
 8008cae:	701a      	strb	r2, [r3, #0]
 8008cb0:	e000      	b.n	8008cb4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cb2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cb8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008cbc:	3201      	adds	r2, #1
 8008cbe:	00d2      	lsls	r2, r2, #3
 8008cc0:	211a      	movs	r1, #26
 8008cc2:	fb01 f303 	mul.w	r3, r1, r3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3308      	adds	r3, #8
 8008cca:	6a3a      	ldr	r2, [r7, #32]
 8008ccc:	4413      	add	r3, r2
 8008cce:	3304      	adds	r3, #4
 8008cd0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008cd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cd4:	69b9      	ldr	r1, [r7, #24]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 f870 	bl	8008dbc <USBH_ParseEPDesc>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008ce2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	791b      	ldrb	r3, [r3, #4]
 8008cf0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d204      	bcs.n	8008d02 <USBH_ParseCfgDesc+0x19e>
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	885a      	ldrh	r2, [r3, #2]
 8008cfc:	8afb      	ldrh	r3, [r7, #22]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d8b0      	bhi.n	8008c64 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	791b      	ldrb	r3, [r3, #4]
 8008d06:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d201      	bcs.n	8008d12 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e01c      	b.n	8008d4c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008d12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d16:	3301      	adds	r3, #1
 8008d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d805      	bhi.n	8008d30 <USBH_ParseCfgDesc+0x1cc>
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	885a      	ldrh	r2, [r3, #2]
 8008d28:	8afb      	ldrh	r3, [r7, #22]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	f63f af74 	bhi.w	8008c18 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	791b      	ldrb	r3, [r3, #4]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	bf28      	it	cs
 8008d38:	2302      	movcs	r3, #2
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d201      	bcs.n	8008d48 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e001      	b.n	8008d4c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008d48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3730      	adds	r7, #48	@ 0x30
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781a      	ldrb	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	785a      	ldrb	r2, [r3, #1]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	789a      	ldrb	r2, [r3, #2]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	78da      	ldrb	r2, [r3, #3]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	3304      	adds	r3, #4
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	bf28      	it	cs
 8008d88:	2302      	movcs	r3, #2
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	795a      	ldrb	r2, [r3, #5]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	799a      	ldrb	r2, [r3, #6]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	79da      	ldrb	r2, [r3, #7]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	7a1a      	ldrb	r2, [r3, #8]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	721a      	strb	r2, [r3, #8]
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	781a      	ldrb	r2, [r3, #0]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	785a      	ldrb	r2, [r3, #1]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	789a      	ldrb	r2, [r3, #2]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	78da      	ldrb	r2, [r3, #3]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3304      	adds	r3, #4
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3305      	adds	r3, #5
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	799a      	ldrb	r2, [r3, #6]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	889b      	ldrh	r3, [r3, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d009      	beq.n	8008e2a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e1e:	d804      	bhi.n	8008e2a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e28:	d901      	bls.n	8008e2e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d136      	bne.n	8008ea6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	78db      	ldrb	r3, [r3, #3]
 8008e3c:	f003 0303 	and.w	r3, r3, #3
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d108      	bne.n	8008e56 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	889b      	ldrh	r3, [r3, #4]
 8008e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e4c:	f240 8097 	bls.w	8008f7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e50:	2303      	movs	r3, #3
 8008e52:	75fb      	strb	r3, [r7, #23]
 8008e54:	e093      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	78db      	ldrb	r3, [r3, #3]
 8008e5a:	f003 0303 	and.w	r3, r3, #3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d107      	bne.n	8008e72 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	889b      	ldrh	r3, [r3, #4]
 8008e66:	2b40      	cmp	r3, #64	@ 0x40
 8008e68:	f240 8089 	bls.w	8008f7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	75fb      	strb	r3, [r7, #23]
 8008e70:	e085      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	78db      	ldrb	r3, [r3, #3]
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d005      	beq.n	8008e8a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	78db      	ldrb	r3, [r3, #3]
 8008e82:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d10a      	bne.n	8008ea0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	799b      	ldrb	r3, [r3, #6]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <USBH_ParseEPDesc+0xde>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	799b      	ldrb	r3, [r3, #6]
 8008e96:	2b10      	cmp	r3, #16
 8008e98:	d970      	bls.n	8008f7c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e9e:	e06d      	b.n	8008f7c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	75fb      	strb	r3, [r7, #23]
 8008ea4:	e06b      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d13c      	bne.n	8008f2a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	78db      	ldrb	r3, [r3, #3]
 8008eb4:	f003 0303 	and.w	r3, r3, #3
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d005      	beq.n	8008ec8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	78db      	ldrb	r3, [r3, #3]
 8008ec0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d106      	bne.n	8008ed6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	889b      	ldrh	r3, [r3, #4]
 8008ecc:	2b40      	cmp	r3, #64	@ 0x40
 8008ece:	d956      	bls.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008ed4:	e053      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	78db      	ldrb	r3, [r3, #3]
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d10e      	bne.n	8008f00 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	799b      	ldrb	r3, [r3, #6]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d007      	beq.n	8008efa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008eee:	2b10      	cmp	r3, #16
 8008ef0:	d803      	bhi.n	8008efa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008ef6:	2b40      	cmp	r3, #64	@ 0x40
 8008ef8:	d941      	bls.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008efa:	2303      	movs	r3, #3
 8008efc:	75fb      	strb	r3, [r7, #23]
 8008efe:	e03e      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	78db      	ldrb	r3, [r3, #3]
 8008f04:	f003 0303 	and.w	r3, r3, #3
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d10b      	bne.n	8008f24 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	799b      	ldrb	r3, [r3, #6]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d004      	beq.n	8008f1e <USBH_ParseEPDesc+0x162>
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	889b      	ldrh	r3, [r3, #4]
 8008f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f1c:	d32f      	bcc.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	75fb      	strb	r3, [r7, #23]
 8008f22:	e02c      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008f24:	2303      	movs	r3, #3
 8008f26:	75fb      	strb	r3, [r7, #23]
 8008f28:	e029      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d120      	bne.n	8008f76 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	78db      	ldrb	r3, [r3, #3]
 8008f38:	f003 0303 	and.w	r3, r3, #3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d106      	bne.n	8008f4e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	889b      	ldrh	r3, [r3, #4]
 8008f44:	2b08      	cmp	r3, #8
 8008f46:	d01a      	beq.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	75fb      	strb	r3, [r7, #23]
 8008f4c:	e017      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	78db      	ldrb	r3, [r3, #3]
 8008f52:	f003 0303 	and.w	r3, r3, #3
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d10a      	bne.n	8008f70 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	799b      	ldrb	r3, [r3, #6]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <USBH_ParseEPDesc+0x1ae>
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	889b      	ldrh	r3, [r3, #4]
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	d909      	bls.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	75fb      	strb	r3, [r7, #23]
 8008f6e:	e006      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008f70:	2303      	movs	r3, #3
 8008f72:	75fb      	strb	r3, [r7, #23]
 8008f74:	e003      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008f76:	2303      	movs	r3, #3
 8008f78:	75fb      	strb	r3, [r7, #23]
 8008f7a:	e000      	b.n	8008f7e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f7c:	bf00      	nop
  }

  return status;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b087      	sub	sp, #28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	4613      	mov	r3, r2
 8008f98:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d120      	bne.n	8008fe6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	1e9a      	subs	r2, r3, #2
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	4293      	cmp	r3, r2
 8008fae:	bf28      	it	cs
 8008fb0:	4613      	movcs	r3, r2
 8008fb2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3302      	adds	r3, #2
 8008fb8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008fba:	2300      	movs	r3, #0
 8008fbc:	82fb      	strh	r3, [r7, #22]
 8008fbe:	e00b      	b.n	8008fd8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008fc0:	8afb      	ldrh	r3, [r7, #22]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008fd2:	8afb      	ldrh	r3, [r7, #22]
 8008fd4:	3302      	adds	r3, #2
 8008fd6:	82fb      	strh	r3, [r7, #22]
 8008fd8:	8afa      	ldrh	r2, [r7, #22]
 8008fda:	8abb      	ldrh	r3, [r7, #20]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d3ef      	bcc.n	8008fc0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	701a      	strb	r2, [r3, #0]
  }
}
 8008fe6:	bf00      	nop
 8008fe8:	371c      	adds	r7, #28
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b085      	sub	sp, #20
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	4413      	add	r3, r2
 8009006:	b29a      	uxth	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4413      	add	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009018:	68fb      	ldr	r3, [r7, #12]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b086      	sub	sp, #24
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	4613      	mov	r3, r2
 8009032:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009034:	2301      	movs	r3, #1
 8009036:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	789b      	ldrb	r3, [r3, #2]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d002      	beq.n	8009046 <USBH_CtlReq+0x20>
 8009040:	2b02      	cmp	r3, #2
 8009042:	d00f      	beq.n	8009064 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009044:	e027      	b.n	8009096 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	88fa      	ldrh	r2, [r7, #6]
 8009050:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2201      	movs	r2, #1
 8009056:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2202      	movs	r2, #2
 800905c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800905e:	2301      	movs	r3, #1
 8009060:	75fb      	strb	r3, [r7, #23]
      break;
 8009062:	e018      	b.n	8009096 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f81b 	bl	80090a0 <USBH_HandleControl>
 800906a:	4603      	mov	r3, r0
 800906c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800906e:	7dfb      	ldrb	r3, [r7, #23]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <USBH_CtlReq+0x54>
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	2b03      	cmp	r3, #3
 8009078:	d106      	bne.n	8009088 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2201      	movs	r2, #1
 800907e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	761a      	strb	r2, [r3, #24]
      break;
 8009086:	e005      	b.n	8009094 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	2b02      	cmp	r3, #2
 800908c:	d102      	bne.n	8009094 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2201      	movs	r2, #1
 8009092:	709a      	strb	r2, [r3, #2]
      break;
 8009094:	bf00      	nop
  }
  return status;
 8009096:	7dfb      	ldrb	r3, [r7, #23]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80090a8:	2301      	movs	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	7e1b      	ldrb	r3, [r3, #24]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	2b0a      	cmp	r3, #10
 80090b8:	f200 8156 	bhi.w	8009368 <USBH_HandleControl+0x2c8>
 80090bc:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <USBH_HandleControl+0x24>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	080090f1 	.word	0x080090f1
 80090c8:	0800910b 	.word	0x0800910b
 80090cc:	08009175 	.word	0x08009175
 80090d0:	0800919b 	.word	0x0800919b
 80090d4:	080091d3 	.word	0x080091d3
 80090d8:	080091fd 	.word	0x080091fd
 80090dc:	0800924f 	.word	0x0800924f
 80090e0:	08009271 	.word	0x08009271
 80090e4:	080092ad 	.word	0x080092ad
 80090e8:	080092d3 	.word	0x080092d3
 80090ec:	08009311 	.word	0x08009311
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f103 0110 	add.w	r1, r3, #16
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	795b      	ldrb	r3, [r3, #5]
 80090fa:	461a      	mov	r2, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f943 	bl	8009388 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	761a      	strb	r2, [r3, #24]
      break;
 8009108:	e139      	b.n	800937e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	795b      	ldrb	r3, [r3, #5]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fcc5 	bl	8009aa0 <USBH_LL_GetURBState>
 8009116:	4603      	mov	r3, r0
 8009118:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d11e      	bne.n	800915e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	7c1b      	ldrb	r3, [r3, #16]
 8009124:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009128:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	8adb      	ldrh	r3, [r3, #22]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009132:	7b7b      	ldrb	r3, [r7, #13]
 8009134:	2b80      	cmp	r3, #128	@ 0x80
 8009136:	d103      	bne.n	8009140 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2203      	movs	r2, #3
 800913c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800913e:	e115      	b.n	800936c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2205      	movs	r2, #5
 8009144:	761a      	strb	r2, [r3, #24]
      break;
 8009146:	e111      	b.n	800936c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009148:	7b7b      	ldrb	r3, [r7, #13]
 800914a:	2b80      	cmp	r3, #128	@ 0x80
 800914c:	d103      	bne.n	8009156 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2209      	movs	r2, #9
 8009152:	761a      	strb	r2, [r3, #24]
      break;
 8009154:	e10a      	b.n	800936c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2207      	movs	r2, #7
 800915a:	761a      	strb	r2, [r3, #24]
      break;
 800915c:	e106      	b.n	800936c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b04      	cmp	r3, #4
 8009162:	d003      	beq.n	800916c <USBH_HandleControl+0xcc>
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	2b02      	cmp	r3, #2
 8009168:	f040 8100 	bne.w	800936c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	220b      	movs	r2, #11
 8009170:	761a      	strb	r2, [r3, #24]
      break;
 8009172:	e0fb      	b.n	800936c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800917a:	b29a      	uxth	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6899      	ldr	r1, [r3, #8]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	899a      	ldrh	r2, [r3, #12]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	791b      	ldrb	r3, [r3, #4]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f93a 	bl	8009406 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2204      	movs	r2, #4
 8009196:	761a      	strb	r2, [r3, #24]
      break;
 8009198:	e0f1      	b.n	800937e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	791b      	ldrb	r3, [r3, #4]
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fc7d 	bl	8009aa0 <USBH_LL_GetURBState>
 80091a6:	4603      	mov	r3, r0
 80091a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d102      	bne.n	80091b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2209      	movs	r2, #9
 80091b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	2b05      	cmp	r3, #5
 80091ba:	d102      	bne.n	80091c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80091bc:	2303      	movs	r3, #3
 80091be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091c0:	e0d6      	b.n	8009370 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80091c2:	7bbb      	ldrb	r3, [r7, #14]
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	f040 80d3 	bne.w	8009370 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	220b      	movs	r2, #11
 80091ce:	761a      	strb	r2, [r3, #24]
      break;
 80091d0:	e0ce      	b.n	8009370 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6899      	ldr	r1, [r3, #8]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	899a      	ldrh	r2, [r3, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	795b      	ldrb	r3, [r3, #5]
 80091de:	2001      	movs	r0, #1
 80091e0:	9000      	str	r0, [sp, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f8ea 	bl	80093bc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2206      	movs	r2, #6
 80091f8:	761a      	strb	r2, [r3, #24]
      break;
 80091fa:	e0c0      	b.n	800937e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	795b      	ldrb	r3, [r3, #5]
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fc4c 	bl	8009aa0 <USBH_LL_GetURBState>
 8009208:	4603      	mov	r3, r0
 800920a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800920c:	7bbb      	ldrb	r3, [r7, #14]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d103      	bne.n	800921a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2207      	movs	r2, #7
 8009216:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009218:	e0ac      	b.n	8009374 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	2b05      	cmp	r3, #5
 800921e:	d105      	bne.n	800922c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	220c      	movs	r2, #12
 8009224:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009226:	2303      	movs	r3, #3
 8009228:	73fb      	strb	r3, [r7, #15]
      break;
 800922a:	e0a3      	b.n	8009374 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	2b02      	cmp	r3, #2
 8009230:	d103      	bne.n	800923a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2205      	movs	r2, #5
 8009236:	761a      	strb	r2, [r3, #24]
      break;
 8009238:	e09c      	b.n	8009374 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	2b04      	cmp	r3, #4
 800923e:	f040 8099 	bne.w	8009374 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	220b      	movs	r2, #11
 8009246:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009248:	2302      	movs	r3, #2
 800924a:	73fb      	strb	r3, [r7, #15]
      break;
 800924c:	e092      	b.n	8009374 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	791b      	ldrb	r3, [r3, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	2100      	movs	r1, #0
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f8d5 	bl	8009406 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009262:	b29a      	uxth	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2208      	movs	r2, #8
 800926c:	761a      	strb	r2, [r3, #24]

      break;
 800926e:	e086      	b.n	800937e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	791b      	ldrb	r3, [r3, #4]
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fc12 	bl	8009aa0 <USBH_LL_GetURBState>
 800927c:	4603      	mov	r3, r0
 800927e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009280:	7bbb      	ldrb	r3, [r7, #14]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d105      	bne.n	8009292 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	220d      	movs	r2, #13
 800928a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009290:	e072      	b.n	8009378 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b04      	cmp	r3, #4
 8009296:	d103      	bne.n	80092a0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	220b      	movs	r2, #11
 800929c:	761a      	strb	r2, [r3, #24]
      break;
 800929e:	e06b      	b.n	8009378 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	2b05      	cmp	r3, #5
 80092a4:	d168      	bne.n	8009378 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80092a6:	2303      	movs	r3, #3
 80092a8:	73fb      	strb	r3, [r7, #15]
      break;
 80092aa:	e065      	b.n	8009378 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	795b      	ldrb	r3, [r3, #5]
 80092b0:	2201      	movs	r2, #1
 80092b2:	9200      	str	r2, [sp, #0]
 80092b4:	2200      	movs	r2, #0
 80092b6:	2100      	movs	r1, #0
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f87f 	bl	80093bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	220a      	movs	r2, #10
 80092ce:	761a      	strb	r2, [r3, #24]
      break;
 80092d0:	e055      	b.n	800937e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	795b      	ldrb	r3, [r3, #5]
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fbe1 	bl	8009aa0 <USBH_LL_GetURBState>
 80092de:	4603      	mov	r3, r0
 80092e0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d105      	bne.n	80092f4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	220d      	movs	r2, #13
 80092f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092f2:	e043      	b.n	800937c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d103      	bne.n	8009302 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2209      	movs	r2, #9
 80092fe:	761a      	strb	r2, [r3, #24]
      break;
 8009300:	e03c      	b.n	800937c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	2b04      	cmp	r3, #4
 8009306:	d139      	bne.n	800937c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	220b      	movs	r2, #11
 800930c:	761a      	strb	r2, [r3, #24]
      break;
 800930e:	e035      	b.n	800937c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	7e5b      	ldrb	r3, [r3, #25]
 8009314:	3301      	adds	r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	765a      	strb	r2, [r3, #25]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7e5b      	ldrb	r3, [r3, #25]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d806      	bhi.n	8009332 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009330:	e025      	b.n	800937e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009338:	2106      	movs	r1, #6
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	795b      	ldrb	r3, [r3, #5]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f90c 	bl	8009568 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	791b      	ldrb	r3, [r3, #4]
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f906 	bl	8009568 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009362:	2302      	movs	r3, #2
 8009364:	73fb      	strb	r3, [r7, #15]
      break;
 8009366:	e00a      	b.n	800937e <USBH_HandleControl+0x2de>

    default:
      break;
 8009368:	bf00      	nop
 800936a:	e008      	b.n	800937e <USBH_HandleControl+0x2de>
      break;
 800936c:	bf00      	nop
 800936e:	e006      	b.n	800937e <USBH_HandleControl+0x2de>
      break;
 8009370:	bf00      	nop
 8009372:	e004      	b.n	800937e <USBH_HandleControl+0x2de>
      break;
 8009374:	bf00      	nop
 8009376:	e002      	b.n	800937e <USBH_HandleControl+0x2de>
      break;
 8009378:	bf00      	nop
 800937a:	e000      	b.n	800937e <USBH_HandleControl+0x2de>
      break;
 800937c:	bf00      	nop
  }

  return status;
 800937e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af04      	add	r7, sp, #16
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	4613      	mov	r3, r2
 8009394:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009396:	79f9      	ldrb	r1, [r7, #7]
 8009398:	2300      	movs	r3, #0
 800939a:	9303      	str	r3, [sp, #12]
 800939c:	2308      	movs	r3, #8
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	2300      	movs	r3, #0
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	2300      	movs	r3, #0
 80093aa:	2200      	movs	r2, #0
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 fb46 	bl	8009a3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af04      	add	r7, sp, #16
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4611      	mov	r1, r2
 80093c8:	461a      	mov	r2, r3
 80093ca:	460b      	mov	r3, r1
 80093cc:	80fb      	strh	r3, [r7, #6]
 80093ce:	4613      	mov	r3, r2
 80093d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093e0:	7979      	ldrb	r1, [r7, #5]
 80093e2:	7e3b      	ldrb	r3, [r7, #24]
 80093e4:	9303      	str	r3, [sp, #12]
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	9302      	str	r3, [sp, #8]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	2301      	movs	r3, #1
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	2300      	movs	r3, #0
 80093f4:	2200      	movs	r2, #0
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 fb21 	bl	8009a3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b088      	sub	sp, #32
 800940a:	af04      	add	r7, sp, #16
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	60b9      	str	r1, [r7, #8]
 8009410:	4611      	mov	r1, r2
 8009412:	461a      	mov	r2, r3
 8009414:	460b      	mov	r3, r1
 8009416:	80fb      	strh	r3, [r7, #6]
 8009418:	4613      	mov	r3, r2
 800941a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800941c:	7979      	ldrb	r1, [r7, #5]
 800941e:	2300      	movs	r3, #0
 8009420:	9303      	str	r3, [sp, #12]
 8009422:	88fb      	ldrh	r3, [r7, #6]
 8009424:	9302      	str	r3, [sp, #8]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	2301      	movs	r3, #1
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	2300      	movs	r3, #0
 8009430:	2201      	movs	r2, #1
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fb03 	bl	8009a3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009438:	2300      	movs	r3, #0

}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b088      	sub	sp, #32
 8009446:	af04      	add	r7, sp, #16
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	4611      	mov	r1, r2
 800944e:	461a      	mov	r2, r3
 8009450:	460b      	mov	r3, r1
 8009452:	80fb      	strh	r3, [r7, #6]
 8009454:	4613      	mov	r3, r2
 8009456:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009466:	7979      	ldrb	r1, [r7, #5]
 8009468:	7e3b      	ldrb	r3, [r7, #24]
 800946a:	9303      	str	r3, [sp, #12]
 800946c:	88fb      	ldrh	r3, [r7, #6]
 800946e:	9302      	str	r3, [sp, #8]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	2301      	movs	r3, #1
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	2302      	movs	r3, #2
 800947a:	2200      	movs	r2, #0
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 fade 	bl	8009a3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af04      	add	r7, sp, #16
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	4611      	mov	r1, r2
 8009498:	461a      	mov	r2, r3
 800949a:	460b      	mov	r3, r1
 800949c:	80fb      	strh	r3, [r7, #6]
 800949e:	4613      	mov	r3, r2
 80094a0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094a2:	7979      	ldrb	r1, [r7, #5]
 80094a4:	2300      	movs	r3, #0
 80094a6:	9303      	str	r3, [sp, #12]
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	9302      	str	r3, [sp, #8]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	2301      	movs	r3, #1
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	2302      	movs	r3, #2
 80094b6:	2201      	movs	r2, #1
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 fac0 	bl	8009a3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af04      	add	r7, sp, #16
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	4608      	mov	r0, r1
 80094d2:	4611      	mov	r1, r2
 80094d4:	461a      	mov	r2, r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	70fb      	strb	r3, [r7, #3]
 80094da:	460b      	mov	r3, r1
 80094dc:	70bb      	strb	r3, [r7, #2]
 80094de:	4613      	mov	r3, r2
 80094e0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80094e2:	7878      	ldrb	r0, [r7, #1]
 80094e4:	78ba      	ldrb	r2, [r7, #2]
 80094e6:	78f9      	ldrb	r1, [r7, #3]
 80094e8:	8b3b      	ldrh	r3, [r7, #24]
 80094ea:	9302      	str	r3, [sp, #8]
 80094ec:	7d3b      	ldrb	r3, [r7, #20]
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	7c3b      	ldrb	r3, [r7, #16]
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	4603      	mov	r3, r0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa53 	bl	80099a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fa72 	bl	8009a00 <USBH_LL_ClosePipe>

  return USBH_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f836 	bl	80095a4 <USBH_GetFreePipe>
 8009538:	4603      	mov	r3, r0
 800953a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800953c:	89fb      	ldrh	r3, [r7, #14]
 800953e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009542:	4293      	cmp	r3, r2
 8009544:	d00a      	beq.n	800955c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	89fb      	ldrh	r3, [r7, #14]
 800954a:	f003 030f 	and.w	r3, r3, #15
 800954e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	33e0      	adds	r3, #224	@ 0xe0
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	b2db      	uxtb	r3, r3
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	2b0f      	cmp	r3, #15
 8009578:	d80d      	bhi.n	8009596 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	33e0      	adds	r3, #224	@ 0xe0
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	33e0      	adds	r3, #224	@ 0xe0
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	440b      	add	r3, r1
 8009594:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
 80095b4:	e00f      	b.n	80095d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	33e0      	adds	r3, #224	@ 0xe0
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d102      	bne.n	80095d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	e007      	b.n	80095e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	3301      	adds	r3, #1
 80095d4:	73fb      	strb	r3, [r7, #15]
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	2b0f      	cmp	r3, #15
 80095da:	d9ec      	bls.n	80095b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80095dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80095f0:	2201      	movs	r2, #1
 80095f2:	490e      	ldr	r1, [pc, #56]	@ (800962c <MX_USB_HOST_Init+0x40>)
 80095f4:	480e      	ldr	r0, [pc, #56]	@ (8009630 <MX_USB_HOST_Init+0x44>)
 80095f6:	f7fe fb15 	bl	8007c24 <USBH_Init>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009600:	f7f7 f9f4 	bl	80009ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009604:	490b      	ldr	r1, [pc, #44]	@ (8009634 <MX_USB_HOST_Init+0x48>)
 8009606:	480a      	ldr	r0, [pc, #40]	@ (8009630 <MX_USB_HOST_Init+0x44>)
 8009608:	f7fe fbb9 	bl	8007d7e <USBH_RegisterClass>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009612:	f7f7 f9eb 	bl	80009ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009616:	4806      	ldr	r0, [pc, #24]	@ (8009630 <MX_USB_HOST_Init+0x44>)
 8009618:	f7fe fc3d 	bl	8007e96 <USBH_Start>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009622:	f7f7 f9e3 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009626:	bf00      	nop
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	0800964d 	.word	0x0800964d
 8009630:	200001e0 	.word	0x200001e0
 8009634:	20000010 	.word	0x20000010

08009638 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800963c:	4802      	ldr	r0, [pc, #8]	@ (8009648 <MX_USB_HOST_Process+0x10>)
 800963e:	f7fe fc3b 	bl	8007eb8 <USBH_Process>
}
 8009642:	bf00      	nop
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	200001e0 	.word	0x200001e0

0800964c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	3b01      	subs	r3, #1
 800965c:	2b04      	cmp	r3, #4
 800965e:	d819      	bhi.n	8009694 <USBH_UserProcess+0x48>
 8009660:	a201      	add	r2, pc, #4	@ (adr r2, 8009668 <USBH_UserProcess+0x1c>)
 8009662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009666:	bf00      	nop
 8009668:	08009695 	.word	0x08009695
 800966c:	08009685 	.word	0x08009685
 8009670:	08009695 	.word	0x08009695
 8009674:	0800968d 	.word	0x0800968d
 8009678:	0800967d 	.word	0x0800967d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800967c:	4b09      	ldr	r3, [pc, #36]	@ (80096a4 <USBH_UserProcess+0x58>)
 800967e:	2203      	movs	r2, #3
 8009680:	701a      	strb	r2, [r3, #0]
  break;
 8009682:	e008      	b.n	8009696 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009684:	4b07      	ldr	r3, [pc, #28]	@ (80096a4 <USBH_UserProcess+0x58>)
 8009686:	2202      	movs	r2, #2
 8009688:	701a      	strb	r2, [r3, #0]
  break;
 800968a:	e004      	b.n	8009696 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800968c:	4b05      	ldr	r3, [pc, #20]	@ (80096a4 <USBH_UserProcess+0x58>)
 800968e:	2201      	movs	r2, #1
 8009690:	701a      	strb	r2, [r3, #0]
  break;
 8009692:	e000      	b.n	8009696 <USBH_UserProcess+0x4a>

  default:
  break;
 8009694:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	200005b8 	.word	0x200005b8

080096a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08a      	sub	sp, #40	@ 0x28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096b0:	f107 0314 	add.w	r3, r7, #20
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	605a      	str	r2, [r3, #4]
 80096ba:	609a      	str	r2, [r3, #8]
 80096bc:	60da      	str	r2, [r3, #12]
 80096be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096c8:	d147      	bne.n	800975a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096ca:	2300      	movs	r3, #0
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	4b25      	ldr	r3, [pc, #148]	@ (8009764 <HAL_HCD_MspInit+0xbc>)
 80096d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d2:	4a24      	ldr	r2, [pc, #144]	@ (8009764 <HAL_HCD_MspInit+0xbc>)
 80096d4:	f043 0301 	orr.w	r3, r3, #1
 80096d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80096da:	4b22      	ldr	r3, [pc, #136]	@ (8009764 <HAL_HCD_MspInit+0xbc>)
 80096dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	613b      	str	r3, [r7, #16]
 80096e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80096e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f0:	2300      	movs	r3, #0
 80096f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80096f4:	f107 0314 	add.w	r3, r7, #20
 80096f8:	4619      	mov	r1, r3
 80096fa:	481b      	ldr	r0, [pc, #108]	@ (8009768 <HAL_HCD_MspInit+0xc0>)
 80096fc:	f7f7 fdf4 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009700:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009706:	2302      	movs	r3, #2
 8009708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800970a:	2300      	movs	r3, #0
 800970c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800970e:	2300      	movs	r3, #0
 8009710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009712:	230a      	movs	r3, #10
 8009714:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009716:	f107 0314 	add.w	r3, r7, #20
 800971a:	4619      	mov	r1, r3
 800971c:	4812      	ldr	r0, [pc, #72]	@ (8009768 <HAL_HCD_MspInit+0xc0>)
 800971e:	f7f7 fde3 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009722:	4b10      	ldr	r3, [pc, #64]	@ (8009764 <HAL_HCD_MspInit+0xbc>)
 8009724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009726:	4a0f      	ldr	r2, [pc, #60]	@ (8009764 <HAL_HCD_MspInit+0xbc>)
 8009728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800972c:	6353      	str	r3, [r2, #52]	@ 0x34
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	4b0c      	ldr	r3, [pc, #48]	@ (8009764 <HAL_HCD_MspInit+0xbc>)
 8009734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009736:	4a0b      	ldr	r2, [pc, #44]	@ (8009764 <HAL_HCD_MspInit+0xbc>)
 8009738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800973c:	6453      	str	r3, [r2, #68]	@ 0x44
 800973e:	4b09      	ldr	r3, [pc, #36]	@ (8009764 <HAL_HCD_MspInit+0xbc>)
 8009740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800974a:	2200      	movs	r2, #0
 800974c:	2100      	movs	r1, #0
 800974e:	2043      	movs	r0, #67	@ 0x43
 8009750:	f7f7 fd01 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009754:	2043      	movs	r0, #67	@ 0x43
 8009756:	f7f7 fd1a 	bl	800118e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800975a:	bf00      	nop
 800975c:	3728      	adds	r7, #40	@ 0x28
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	40023800 	.word	0x40023800
 8009768:	40020000 	.word	0x40020000

0800976c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe ff73 	bl	8008666 <USBH_LL_IncTimer>
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe ffab 	bl	80086f2 <USBH_LL_Connect>
}
 800979c:	bf00      	nop
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe ffb4 	bl	8008720 <USBH_LL_Disconnect>
}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	460b      	mov	r3, r1
 80097ca:	70fb      	strb	r3, [r7, #3]
 80097cc:	4613      	mov	r3, r2
 80097ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe ff65 	bl	80086ba <USBH_LL_PortEnabled>
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe ff65 	bl	80086d6 <USBH_LL_PortDisabled>
}
 800980c:	bf00      	nop
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009822:	2b01      	cmp	r3, #1
 8009824:	d12a      	bne.n	800987c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009826:	4a18      	ldr	r2, [pc, #96]	@ (8009888 <USBH_LL_Init+0x74>)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a15      	ldr	r2, [pc, #84]	@ (8009888 <USBH_LL_Init+0x74>)
 8009832:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009836:	4b14      	ldr	r3, [pc, #80]	@ (8009888 <USBH_LL_Init+0x74>)
 8009838:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800983c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800983e:	4b12      	ldr	r3, [pc, #72]	@ (8009888 <USBH_LL_Init+0x74>)
 8009840:	2208      	movs	r2, #8
 8009842:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009844:	4b10      	ldr	r3, [pc, #64]	@ (8009888 <USBH_LL_Init+0x74>)
 8009846:	2201      	movs	r2, #1
 8009848:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800984a:	4b0f      	ldr	r3, [pc, #60]	@ (8009888 <USBH_LL_Init+0x74>)
 800984c:	2200      	movs	r2, #0
 800984e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009850:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <USBH_LL_Init+0x74>)
 8009852:	2202      	movs	r2, #2
 8009854:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009856:	4b0c      	ldr	r3, [pc, #48]	@ (8009888 <USBH_LL_Init+0x74>)
 8009858:	2200      	movs	r2, #0
 800985a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800985c:	480a      	ldr	r0, [pc, #40]	@ (8009888 <USBH_LL_Init+0x74>)
 800985e:	f7f7 fef8 	bl	8001652 <HAL_HCD_Init>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009868:	f7f7 f8c0 	bl	80009ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800986c:	4806      	ldr	r0, [pc, #24]	@ (8009888 <USBH_LL_Init+0x74>)
 800986e:	f7f8 fb59 	bl	8001f24 <HAL_HCD_GetCurrentFrame>
 8009872:	4603      	mov	r3, r0
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7fe fee6 	bl	8008648 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	200005bc 	.word	0x200005bc

0800988c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7f8 fac6 	bl	8001e34 <HAL_HCD_Start>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 f95e 	bl	8009b70 <USBH_Get_USB_Status>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098d8:	4618      	mov	r0, r3
 80098da:	f7f8 face 	bl	8001e7a <HAL_HCD_Stop>
 80098de:	4603      	mov	r3, r0
 80098e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 f943 	bl	8009b70 <USBH_Get_USB_Status>
 80098ea:	4603      	mov	r3, r0
 80098ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009900:	2301      	movs	r3, #1
 8009902:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800990a:	4618      	mov	r0, r3
 800990c:	f7f8 fb18 	bl	8001f40 <HAL_HCD_GetCurrentSpeed>
 8009910:	4603      	mov	r3, r0
 8009912:	2b02      	cmp	r3, #2
 8009914:	d00c      	beq.n	8009930 <USBH_LL_GetSpeed+0x38>
 8009916:	2b02      	cmp	r3, #2
 8009918:	d80d      	bhi.n	8009936 <USBH_LL_GetSpeed+0x3e>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <USBH_LL_GetSpeed+0x2c>
 800991e:	2b01      	cmp	r3, #1
 8009920:	d003      	beq.n	800992a <USBH_LL_GetSpeed+0x32>
 8009922:	e008      	b.n	8009936 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
    break;
 8009928:	e008      	b.n	800993c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800992a:	2301      	movs	r3, #1
 800992c:	73fb      	strb	r3, [r7, #15]
    break;
 800992e:	e005      	b.n	800993c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009930:	2302      	movs	r3, #2
 8009932:	73fb      	strb	r3, [r7, #15]
    break;
 8009934:	e002      	b.n	800993c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009936:	2301      	movs	r3, #1
 8009938:	73fb      	strb	r3, [r7, #15]
    break;
 800993a:	bf00      	nop
  }
  return  speed;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800995c:	4618      	mov	r0, r3
 800995e:	f7f8 faa9 	bl	8001eb4 <HAL_HCD_ResetPort>
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f901 	bl	8009b70 <USBH_Get_USB_Status>
 800996e:	4603      	mov	r3, r0
 8009970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009972:	7bbb      	ldrb	r3, [r7, #14]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800998e:	78fa      	ldrb	r2, [r7, #3]
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f7f8 fab1 	bl	8001efa <HAL_HCD_HC_GetXferCount>
 8009998:	4603      	mov	r3, r0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099a2:	b590      	push	{r4, r7, lr}
 80099a4:	b089      	sub	sp, #36	@ 0x24
 80099a6:	af04      	add	r7, sp, #16
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	461a      	mov	r2, r3
 80099b0:	4603      	mov	r3, r0
 80099b2:	70fb      	strb	r3, [r7, #3]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70bb      	strb	r3, [r7, #2]
 80099b8:	4613      	mov	r3, r2
 80099ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80099ca:	787c      	ldrb	r4, [r7, #1]
 80099cc:	78ba      	ldrb	r2, [r7, #2]
 80099ce:	78f9      	ldrb	r1, [r7, #3]
 80099d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80099d2:	9302      	str	r3, [sp, #8]
 80099d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	4623      	mov	r3, r4
 80099e2:	f7f7 fe9d 	bl	8001720 <HAL_HCD_HC_Init>
 80099e6:	4603      	mov	r3, r0
 80099e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f8bf 	bl	8009b70 <USBH_Get_USB_Status>
 80099f2:	4603      	mov	r3, r0
 80099f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd90      	pop	{r4, r7, pc}

08009a00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f7 ff36 	bl	8001890 <HAL_HCD_HC_Halt>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f8a0 	bl	8009b70 <USBH_Get_USB_Status>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009a3e:	b590      	push	{r4, r7, lr}
 8009a40:	b089      	sub	sp, #36	@ 0x24
 8009a42:	af04      	add	r7, sp, #16
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	4608      	mov	r0, r1
 8009a48:	4611      	mov	r1, r2
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	70fb      	strb	r3, [r7, #3]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70bb      	strb	r3, [r7, #2]
 8009a54:	4613      	mov	r3, r2
 8009a56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009a66:	787c      	ldrb	r4, [r7, #1]
 8009a68:	78ba      	ldrb	r2, [r7, #2]
 8009a6a:	78f9      	ldrb	r1, [r7, #3]
 8009a6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a70:	9303      	str	r3, [sp, #12]
 8009a72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009a74:	9302      	str	r3, [sp, #8]
 8009a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	4623      	mov	r3, r4
 8009a82:	f7f7 ff29 	bl	80018d8 <HAL_HCD_HC_SubmitRequest>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 f86f 	bl	8009b70 <USBH_Get_USB_Status>
 8009a92:	4603      	mov	r3, r0
 8009a94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd90      	pop	{r4, r7, pc}

08009aa0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ab2:	78fa      	ldrb	r2, [r7, #3]
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7f8 fa0a 	bl	8001ed0 <HAL_HCD_HC_GetURBState>
 8009abc:	4603      	mov	r3, r0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d103      	bne.n	8009ae4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 f872 	bl	8009bc8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009ae4:	20c8      	movs	r0, #200	@ 0xc8
 8009ae6:	f7f7 fa37 	bl	8000f58 <HAL_Delay>
  return USBH_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
 8009b00:	4613      	mov	r3, r2
 8009b02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009b0c:	78fa      	ldrb	r2, [r7, #3]
 8009b0e:	68f9      	ldr	r1, [r7, #12]
 8009b10:	4613      	mov	r3, r2
 8009b12:	011b      	lsls	r3, r3, #4
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	3317      	adds	r3, #23
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00a      	beq.n	8009b38 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009b22:	78fa      	ldrb	r2, [r7, #3]
 8009b24:	68f9      	ldr	r1, [r7, #12]
 8009b26:	4613      	mov	r3, r2
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	1a9b      	subs	r3, r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	333c      	adds	r3, #60	@ 0x3c
 8009b32:	78ba      	ldrb	r2, [r7, #2]
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	e009      	b.n	8009b4c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009b38:	78fa      	ldrb	r2, [r7, #3]
 8009b3a:	68f9      	ldr	r1, [r7, #12]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	011b      	lsls	r3, r3, #4
 8009b40:	1a9b      	subs	r3, r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	440b      	add	r3, r1
 8009b46:	333d      	adds	r3, #61	@ 0x3d
 8009b48:	78ba      	ldrb	r2, [r7, #2]
 8009b4a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7f7 f9f8 	bl	8000f58 <HAL_Delay>
}
 8009b68:	bf00      	nop
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	2b03      	cmp	r3, #3
 8009b82:	d817      	bhi.n	8009bb4 <USBH_Get_USB_Status+0x44>
 8009b84:	a201      	add	r2, pc, #4	@ (adr r2, 8009b8c <USBH_Get_USB_Status+0x1c>)
 8009b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8a:	bf00      	nop
 8009b8c:	08009b9d 	.word	0x08009b9d
 8009b90:	08009ba3 	.word	0x08009ba3
 8009b94:	08009ba9 	.word	0x08009ba9
 8009b98:	08009baf 	.word	0x08009baf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba0:	e00b      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba6:	e008      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	73fb      	strb	r3, [r7, #15]
    break;
 8009bac:	e005      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009bae:	2302      	movs	r3, #2
 8009bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb2:	e002      	b.n	8009bba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb8:	bf00      	nop
  }
  return usb_status;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009bd2:	79fb      	ldrb	r3, [r7, #7]
 8009bd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009bd6:	79fb      	ldrb	r3, [r7, #7]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d102      	bne.n	8009be2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
 8009be0:	e001      	b.n	8009be6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009be2:	2301      	movs	r3, #1
 8009be4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	461a      	mov	r2, r3
 8009bea:	2101      	movs	r1, #1
 8009bec:	4803      	ldr	r0, [pc, #12]	@ (8009bfc <MX_DriverVbusFS+0x34>)
 8009bee:	f7f7 fd17 	bl	8001620 <HAL_GPIO_WritePin>
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	40020800 	.word	0x40020800

08009c00 <malloc>:
 8009c00:	4b02      	ldr	r3, [pc, #8]	@ (8009c0c <malloc+0xc>)
 8009c02:	4601      	mov	r1, r0
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	f000 b82d 	b.w	8009c64 <_malloc_r>
 8009c0a:	bf00      	nop
 8009c0c:	20000030 	.word	0x20000030

08009c10 <free>:
 8009c10:	4b02      	ldr	r3, [pc, #8]	@ (8009c1c <free+0xc>)
 8009c12:	4601      	mov	r1, r0
 8009c14:	6818      	ldr	r0, [r3, #0]
 8009c16:	f000 b8f5 	b.w	8009e04 <_free_r>
 8009c1a:	bf00      	nop
 8009c1c:	20000030 	.word	0x20000030

08009c20 <sbrk_aligned>:
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	4e0f      	ldr	r6, [pc, #60]	@ (8009c60 <sbrk_aligned+0x40>)
 8009c24:	460c      	mov	r4, r1
 8009c26:	6831      	ldr	r1, [r6, #0]
 8009c28:	4605      	mov	r5, r0
 8009c2a:	b911      	cbnz	r1, 8009c32 <sbrk_aligned+0x12>
 8009c2c:	f000 f8ae 	bl	8009d8c <_sbrk_r>
 8009c30:	6030      	str	r0, [r6, #0]
 8009c32:	4621      	mov	r1, r4
 8009c34:	4628      	mov	r0, r5
 8009c36:	f000 f8a9 	bl	8009d8c <_sbrk_r>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	d103      	bne.n	8009c46 <sbrk_aligned+0x26>
 8009c3e:	f04f 34ff 	mov.w	r4, #4294967295
 8009c42:	4620      	mov	r0, r4
 8009c44:	bd70      	pop	{r4, r5, r6, pc}
 8009c46:	1cc4      	adds	r4, r0, #3
 8009c48:	f024 0403 	bic.w	r4, r4, #3
 8009c4c:	42a0      	cmp	r0, r4
 8009c4e:	d0f8      	beq.n	8009c42 <sbrk_aligned+0x22>
 8009c50:	1a21      	subs	r1, r4, r0
 8009c52:	4628      	mov	r0, r5
 8009c54:	f000 f89a 	bl	8009d8c <_sbrk_r>
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d1f2      	bne.n	8009c42 <sbrk_aligned+0x22>
 8009c5c:	e7ef      	b.n	8009c3e <sbrk_aligned+0x1e>
 8009c5e:	bf00      	nop
 8009c60:	2000099c 	.word	0x2000099c

08009c64 <_malloc_r>:
 8009c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c68:	1ccd      	adds	r5, r1, #3
 8009c6a:	f025 0503 	bic.w	r5, r5, #3
 8009c6e:	3508      	adds	r5, #8
 8009c70:	2d0c      	cmp	r5, #12
 8009c72:	bf38      	it	cc
 8009c74:	250c      	movcc	r5, #12
 8009c76:	2d00      	cmp	r5, #0
 8009c78:	4606      	mov	r6, r0
 8009c7a:	db01      	blt.n	8009c80 <_malloc_r+0x1c>
 8009c7c:	42a9      	cmp	r1, r5
 8009c7e:	d904      	bls.n	8009c8a <_malloc_r+0x26>
 8009c80:	230c      	movs	r3, #12
 8009c82:	6033      	str	r3, [r6, #0]
 8009c84:	2000      	movs	r0, #0
 8009c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d60 <_malloc_r+0xfc>
 8009c8e:	f000 f869 	bl	8009d64 <__malloc_lock>
 8009c92:	f8d8 3000 	ldr.w	r3, [r8]
 8009c96:	461c      	mov	r4, r3
 8009c98:	bb44      	cbnz	r4, 8009cec <_malloc_r+0x88>
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f7ff ffbf 	bl	8009c20 <sbrk_aligned>
 8009ca2:	1c43      	adds	r3, r0, #1
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	d158      	bne.n	8009d5a <_malloc_r+0xf6>
 8009ca8:	f8d8 4000 	ldr.w	r4, [r8]
 8009cac:	4627      	mov	r7, r4
 8009cae:	2f00      	cmp	r7, #0
 8009cb0:	d143      	bne.n	8009d3a <_malloc_r+0xd6>
 8009cb2:	2c00      	cmp	r4, #0
 8009cb4:	d04b      	beq.n	8009d4e <_malloc_r+0xea>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	4639      	mov	r1, r7
 8009cba:	4630      	mov	r0, r6
 8009cbc:	eb04 0903 	add.w	r9, r4, r3
 8009cc0:	f000 f864 	bl	8009d8c <_sbrk_r>
 8009cc4:	4581      	cmp	r9, r0
 8009cc6:	d142      	bne.n	8009d4e <_malloc_r+0xea>
 8009cc8:	6821      	ldr	r1, [r4, #0]
 8009cca:	1a6d      	subs	r5, r5, r1
 8009ccc:	4629      	mov	r1, r5
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f7ff ffa6 	bl	8009c20 <sbrk_aligned>
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d03a      	beq.n	8009d4e <_malloc_r+0xea>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	442b      	add	r3, r5
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	f8d8 3000 	ldr.w	r3, [r8]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	bb62      	cbnz	r2, 8009d40 <_malloc_r+0xdc>
 8009ce6:	f8c8 7000 	str.w	r7, [r8]
 8009cea:	e00f      	b.n	8009d0c <_malloc_r+0xa8>
 8009cec:	6822      	ldr	r2, [r4, #0]
 8009cee:	1b52      	subs	r2, r2, r5
 8009cf0:	d420      	bmi.n	8009d34 <_malloc_r+0xd0>
 8009cf2:	2a0b      	cmp	r2, #11
 8009cf4:	d917      	bls.n	8009d26 <_malloc_r+0xc2>
 8009cf6:	1961      	adds	r1, r4, r5
 8009cf8:	42a3      	cmp	r3, r4
 8009cfa:	6025      	str	r5, [r4, #0]
 8009cfc:	bf18      	it	ne
 8009cfe:	6059      	strne	r1, [r3, #4]
 8009d00:	6863      	ldr	r3, [r4, #4]
 8009d02:	bf08      	it	eq
 8009d04:	f8c8 1000 	streq.w	r1, [r8]
 8009d08:	5162      	str	r2, [r4, r5]
 8009d0a:	604b      	str	r3, [r1, #4]
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f000 f82f 	bl	8009d70 <__malloc_unlock>
 8009d12:	f104 000b 	add.w	r0, r4, #11
 8009d16:	1d23      	adds	r3, r4, #4
 8009d18:	f020 0007 	bic.w	r0, r0, #7
 8009d1c:	1ac2      	subs	r2, r0, r3
 8009d1e:	bf1c      	itt	ne
 8009d20:	1a1b      	subne	r3, r3, r0
 8009d22:	50a3      	strne	r3, [r4, r2]
 8009d24:	e7af      	b.n	8009c86 <_malloc_r+0x22>
 8009d26:	6862      	ldr	r2, [r4, #4]
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	bf0c      	ite	eq
 8009d2c:	f8c8 2000 	streq.w	r2, [r8]
 8009d30:	605a      	strne	r2, [r3, #4]
 8009d32:	e7eb      	b.n	8009d0c <_malloc_r+0xa8>
 8009d34:	4623      	mov	r3, r4
 8009d36:	6864      	ldr	r4, [r4, #4]
 8009d38:	e7ae      	b.n	8009c98 <_malloc_r+0x34>
 8009d3a:	463c      	mov	r4, r7
 8009d3c:	687f      	ldr	r7, [r7, #4]
 8009d3e:	e7b6      	b.n	8009cae <_malloc_r+0x4a>
 8009d40:	461a      	mov	r2, r3
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	42a3      	cmp	r3, r4
 8009d46:	d1fb      	bne.n	8009d40 <_malloc_r+0xdc>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	6053      	str	r3, [r2, #4]
 8009d4c:	e7de      	b.n	8009d0c <_malloc_r+0xa8>
 8009d4e:	230c      	movs	r3, #12
 8009d50:	6033      	str	r3, [r6, #0]
 8009d52:	4630      	mov	r0, r6
 8009d54:	f000 f80c 	bl	8009d70 <__malloc_unlock>
 8009d58:	e794      	b.n	8009c84 <_malloc_r+0x20>
 8009d5a:	6005      	str	r5, [r0, #0]
 8009d5c:	e7d6      	b.n	8009d0c <_malloc_r+0xa8>
 8009d5e:	bf00      	nop
 8009d60:	200009a0 	.word	0x200009a0

08009d64 <__malloc_lock>:
 8009d64:	4801      	ldr	r0, [pc, #4]	@ (8009d6c <__malloc_lock+0x8>)
 8009d66:	f000 b84b 	b.w	8009e00 <__retarget_lock_acquire_recursive>
 8009d6a:	bf00      	nop
 8009d6c:	20000ae0 	.word	0x20000ae0

08009d70 <__malloc_unlock>:
 8009d70:	4801      	ldr	r0, [pc, #4]	@ (8009d78 <__malloc_unlock+0x8>)
 8009d72:	f000 b846 	b.w	8009e02 <__retarget_lock_release_recursive>
 8009d76:	bf00      	nop
 8009d78:	20000ae0 	.word	0x20000ae0

08009d7c <memset>:
 8009d7c:	4402      	add	r2, r0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d100      	bne.n	8009d86 <memset+0xa>
 8009d84:	4770      	bx	lr
 8009d86:	f803 1b01 	strb.w	r1, [r3], #1
 8009d8a:	e7f9      	b.n	8009d80 <memset+0x4>

08009d8c <_sbrk_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d06      	ldr	r5, [pc, #24]	@ (8009da8 <_sbrk_r+0x1c>)
 8009d90:	2300      	movs	r3, #0
 8009d92:	4604      	mov	r4, r0
 8009d94:	4608      	mov	r0, r1
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	f7f6 fffa 	bl	8000d90 <_sbrk>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d102      	bne.n	8009da6 <_sbrk_r+0x1a>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	b103      	cbz	r3, 8009da6 <_sbrk_r+0x1a>
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	20000adc 	.word	0x20000adc

08009dac <__errno>:
 8009dac:	4b01      	ldr	r3, [pc, #4]	@ (8009db4 <__errno+0x8>)
 8009dae:	6818      	ldr	r0, [r3, #0]
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	20000030 	.word	0x20000030

08009db8 <__libc_init_array>:
 8009db8:	b570      	push	{r4, r5, r6, lr}
 8009dba:	4d0d      	ldr	r5, [pc, #52]	@ (8009df0 <__libc_init_array+0x38>)
 8009dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8009df4 <__libc_init_array+0x3c>)
 8009dbe:	1b64      	subs	r4, r4, r5
 8009dc0:	10a4      	asrs	r4, r4, #2
 8009dc2:	2600      	movs	r6, #0
 8009dc4:	42a6      	cmp	r6, r4
 8009dc6:	d109      	bne.n	8009ddc <__libc_init_array+0x24>
 8009dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8009df8 <__libc_init_array+0x40>)
 8009dca:	4c0c      	ldr	r4, [pc, #48]	@ (8009dfc <__libc_init_array+0x44>)
 8009dcc:	f000 f864 	bl	8009e98 <_init>
 8009dd0:	1b64      	subs	r4, r4, r5
 8009dd2:	10a4      	asrs	r4, r4, #2
 8009dd4:	2600      	movs	r6, #0
 8009dd6:	42a6      	cmp	r6, r4
 8009dd8:	d105      	bne.n	8009de6 <__libc_init_array+0x2e>
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009de0:	4798      	blx	r3
 8009de2:	3601      	adds	r6, #1
 8009de4:	e7ee      	b.n	8009dc4 <__libc_init_array+0xc>
 8009de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dea:	4798      	blx	r3
 8009dec:	3601      	adds	r6, #1
 8009dee:	e7f2      	b.n	8009dd6 <__libc_init_array+0x1e>
 8009df0:	08009ed4 	.word	0x08009ed4
 8009df4:	08009ed4 	.word	0x08009ed4
 8009df8:	08009ed4 	.word	0x08009ed4
 8009dfc:	08009ed8 	.word	0x08009ed8

08009e00 <__retarget_lock_acquire_recursive>:
 8009e00:	4770      	bx	lr

08009e02 <__retarget_lock_release_recursive>:
 8009e02:	4770      	bx	lr

08009e04 <_free_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4605      	mov	r5, r0
 8009e08:	2900      	cmp	r1, #0
 8009e0a:	d041      	beq.n	8009e90 <_free_r+0x8c>
 8009e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e10:	1f0c      	subs	r4, r1, #4
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bfb8      	it	lt
 8009e16:	18e4      	addlt	r4, r4, r3
 8009e18:	f7ff ffa4 	bl	8009d64 <__malloc_lock>
 8009e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009e94 <_free_r+0x90>)
 8009e1e:	6813      	ldr	r3, [r2, #0]
 8009e20:	b933      	cbnz	r3, 8009e30 <_free_r+0x2c>
 8009e22:	6063      	str	r3, [r4, #4]
 8009e24:	6014      	str	r4, [r2, #0]
 8009e26:	4628      	mov	r0, r5
 8009e28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e2c:	f7ff bfa0 	b.w	8009d70 <__malloc_unlock>
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	d908      	bls.n	8009e46 <_free_r+0x42>
 8009e34:	6820      	ldr	r0, [r4, #0]
 8009e36:	1821      	adds	r1, r4, r0
 8009e38:	428b      	cmp	r3, r1
 8009e3a:	bf01      	itttt	eq
 8009e3c:	6819      	ldreq	r1, [r3, #0]
 8009e3e:	685b      	ldreq	r3, [r3, #4]
 8009e40:	1809      	addeq	r1, r1, r0
 8009e42:	6021      	streq	r1, [r4, #0]
 8009e44:	e7ed      	b.n	8009e22 <_free_r+0x1e>
 8009e46:	461a      	mov	r2, r3
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	b10b      	cbz	r3, 8009e50 <_free_r+0x4c>
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	d9fa      	bls.n	8009e46 <_free_r+0x42>
 8009e50:	6811      	ldr	r1, [r2, #0]
 8009e52:	1850      	adds	r0, r2, r1
 8009e54:	42a0      	cmp	r0, r4
 8009e56:	d10b      	bne.n	8009e70 <_free_r+0x6c>
 8009e58:	6820      	ldr	r0, [r4, #0]
 8009e5a:	4401      	add	r1, r0
 8009e5c:	1850      	adds	r0, r2, r1
 8009e5e:	4283      	cmp	r3, r0
 8009e60:	6011      	str	r1, [r2, #0]
 8009e62:	d1e0      	bne.n	8009e26 <_free_r+0x22>
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	6053      	str	r3, [r2, #4]
 8009e6a:	4408      	add	r0, r1
 8009e6c:	6010      	str	r0, [r2, #0]
 8009e6e:	e7da      	b.n	8009e26 <_free_r+0x22>
 8009e70:	d902      	bls.n	8009e78 <_free_r+0x74>
 8009e72:	230c      	movs	r3, #12
 8009e74:	602b      	str	r3, [r5, #0]
 8009e76:	e7d6      	b.n	8009e26 <_free_r+0x22>
 8009e78:	6820      	ldr	r0, [r4, #0]
 8009e7a:	1821      	adds	r1, r4, r0
 8009e7c:	428b      	cmp	r3, r1
 8009e7e:	bf04      	itt	eq
 8009e80:	6819      	ldreq	r1, [r3, #0]
 8009e82:	685b      	ldreq	r3, [r3, #4]
 8009e84:	6063      	str	r3, [r4, #4]
 8009e86:	bf04      	itt	eq
 8009e88:	1809      	addeq	r1, r1, r0
 8009e8a:	6021      	streq	r1, [r4, #0]
 8009e8c:	6054      	str	r4, [r2, #4]
 8009e8e:	e7ca      	b.n	8009e26 <_free_r+0x22>
 8009e90:	bd38      	pop	{r3, r4, r5, pc}
 8009e92:	bf00      	nop
 8009e94:	200009a0 	.word	0x200009a0

08009e98 <_init>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	bf00      	nop
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr

08009ea4 <_fini>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	bf00      	nop
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr
