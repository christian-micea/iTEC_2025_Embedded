
PWM_1_Motor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009960  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009ae8  08009ae8  0000aae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b04  08009b04  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b04  08009b04  0000ab04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b0c  08009b0c  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b0c  08009b0c  0000ab0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b10  08009b10  0000ab10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009b14  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019149  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dd3  00000000  00000000  000241f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  00027fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001178  00000000  00000000  00029660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243aa  00000000  00000000  0002a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d836  00000000  00000000  0004eb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d40e6  00000000  00000000  0006c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014049e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006358  00000000  00000000  001404e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0014683c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009ad0 	.word	0x08009ad0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009ad0 	.word	0x08009ad0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fd4e 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f86c 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9ea 	bl	80008d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f8d2 	bl	80006ac <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8fe 	bl	8000708 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f92c 	bl	8000768 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 fe88 	bl	8009224 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 8000514:	f000 f95e 	bl	80007d4 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000518:	f008 feaa 	bl	8009270 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2102      	movs	r1, #2
 8000520:	482a      	ldr	r0, [pc, #168]	@ (80005cc <main+0xd8>)
 8000522:	f001 f87d 	bl	8001620 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2104      	movs	r1, #4
 800052a:	4828      	ldr	r0, [pc, #160]	@ (80005cc <main+0xd8>)
 800052c:	f001 f878 	bl	8001620 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000536:	4826      	ldr	r0, [pc, #152]	@ (80005d0 <main+0xdc>)
 8000538:	f001 f872 	bl	8001620 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000542:	4822      	ldr	r0, [pc, #136]	@ (80005cc <main+0xd8>)
 8000544:	f001 f86c 	bl	8001620 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 200);
 8000548:	4b22      	ldr	r3, [pc, #136]	@ (80005d4 <main+0xe0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	22c8      	movs	r2, #200	@ 0xc8
 800054e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 200);
 8000550:	4b20      	ldr	r3, [pc, #128]	@ (80005d4 <main+0xe0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	22c8      	movs	r2, #200	@ 0xc8
 8000556:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000558:	2100      	movs	r1, #0
 800055a:	481e      	ldr	r0, [pc, #120]	@ (80005d4 <main+0xe0>)
 800055c:	f004 fe8a 	bl	8005274 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000560:	2108      	movs	r1, #8
 8000562:	481c      	ldr	r0, [pc, #112]	@ (80005d4 <main+0xe0>)
 8000564:	f004 fe86 	bl	8005274 <HAL_TIM_PWM_Start>

    HAL_Delay(1000);
 8000568:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800056c:	f000 fd86 	bl	800107c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2102      	movs	r1, #2
 8000574:	4815      	ldr	r0, [pc, #84]	@ (80005cc <main+0xd8>)
 8000576:	f001 f853 	bl	8001620 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2104      	movs	r1, #4
 800057e:	4813      	ldr	r0, [pc, #76]	@ (80005cc <main+0xd8>)
 8000580:	f001 f84e 	bl	8001620 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800058a:	4811      	ldr	r0, [pc, #68]	@ (80005d0 <main+0xdc>)
 800058c:	f001 f848 	bl	8001620 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000596:	480d      	ldr	r0, [pc, #52]	@ (80005cc <main+0xd8>)
 8000598:	f001 f842 	bl	8001620 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 400);
 800059c:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <main+0xe0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80005a4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 200);
 80005a6:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <main+0xe0>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	22c8      	movs	r2, #200	@ 0xc8
 80005ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80005ae:	2100      	movs	r1, #0
 80005b0:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <main+0xe0>)
 80005b2:	f004 fe5f 	bl	8005274 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80005b6:	2108      	movs	r1, #8
 80005b8:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <main+0xe0>)
 80005ba:	f004 fe5b 	bl	8005274 <HAL_TIM_PWM_Start>

    HAL_Delay(1000);
 80005be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c2:	f000 fd5b 	bl	800107c <HAL_Delay>
    MX_USB_HOST_Process();
 80005c6:	bf00      	nop
 80005c8:	e7a6      	b.n	8000518 <main+0x24>
 80005ca:	bf00      	nop
 80005cc:	40020800 	.word	0x40020800
 80005d0:	40020000 	.word	0x40020000
 80005d4:	2000018c 	.word	0x2000018c

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	@ 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f009 f9e4 	bl	80099b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4618      	mov	r0, r3
 8000660:	f003 ff10 	bl	8004484 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066a:	f000 fa4f 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2105      	movs	r1, #5
 800068c:	4618      	mov	r0, r3
 800068e:	f004 f971 	bl	8004974 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000698:	f000 fa38 	bl	8000b0c <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	@ 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	@ (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f003 f8e7 	bl	80038bc <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 fa0a 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000098 	.word	0x20000098
 8000700:	40005400 	.word	0x40005400
 8000704:	000186a0 	.word	0x000186a0

08000708 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <MX_I2S3_Init+0x54>)
 800070e:	4a14      	ldr	r2, [pc, #80]	@ (8000760 <MX_I2S3_Init+0x58>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2S3_Init+0x54>)
 8000714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000718:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_I2S3_Init+0x54>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_I2S3_Init+0x54>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <MX_I2S3_Init+0x54>)
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_I2S3_Init+0x54>)
 8000730:	4a0c      	ldr	r2, [pc, #48]	@ (8000764 <MX_I2S3_Init+0x5c>)
 8000732:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_I2S3_Init+0x54>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_I2S3_Init+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_I2S3_Init+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_I2S3_Init+0x54>)
 8000748:	f003 f9fc 	bl	8003b44 <HAL_I2S_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000752:	f000 f9db 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000ec 	.word	0x200000ec
 8000760:	40003c00 	.word	0x40003c00
 8000764:	00017700 	.word	0x00017700

08000768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800076c:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_SPI1_Init+0x64>)
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <MX_SPI1_Init+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000774:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_SPI1_Init+0x64>)
 8000794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000798:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_SPI1_Init+0x64>)
 80007ba:	f004 fc29 	bl	8005010 <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 f9a2 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000134 	.word	0x20000134
 80007d0:	40013000 	.word	0x40013000

080007d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	@ 0x38
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000804:	4b32      	ldr	r3, [pc, #200]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 8000806:	4a33      	ldr	r2, [pc, #204]	@ (80008d4 <MX_TIM3_Init+0x100>)
 8000808:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800080a:	4b31      	ldr	r3, [pc, #196]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 800080c:	22a7      	movs	r2, #167	@ 0xa7
 800080e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000816:	4b2e      	ldr	r3, [pc, #184]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 8000818:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800081c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800082a:	4829      	ldr	r0, [pc, #164]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 800082c:	f004 fc79 	bl	8005122 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000836:	f000 f969 	bl	8000b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000844:	4619      	mov	r1, r3
 8000846:	4822      	ldr	r0, [pc, #136]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 8000848:	f004 fe9e 	bl	8005588 <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000852:	f000 f95b 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000856:	481e      	ldr	r0, [pc, #120]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 8000858:	f004 fcb2 	bl	80051c0 <HAL_TIM_PWM_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000862:	f000 f953 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	4619      	mov	r1, r3
 8000874:	4816      	ldr	r0, [pc, #88]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 8000876:	f005 fa6b 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000880:	f000 f944 	bl	8000b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000884:	2360      	movs	r3, #96	@ 0x60
 8000886:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	4619      	mov	r1, r3
 800089a:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 800089c:	f004 fdb2 	bl	8005404 <HAL_TIM_PWM_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008a6:	f000 f931 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2208      	movs	r2, #8
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 80008b2:	f004 fda7 	bl	8005404 <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80008bc:	f000 f926 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008c0:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <MX_TIM3_Init+0xfc>)
 80008c2:	f000 fa83 	bl	8000dcc <HAL_TIM_MspPostInit>

}
 80008c6:	bf00      	nop
 80008c8:	3738      	adds	r7, #56	@ 0x38
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000018c 	.word	0x2000018c
 80008d4:	40000400 	.word	0x40000400

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	@ 0x30
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
 80008f2:	4b80      	ldr	r3, [pc, #512]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a7f      	ldr	r2, [pc, #508]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 80008f8:	f043 0310 	orr.w	r3, r3, #16
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b7d      	ldr	r3, [pc, #500]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	4b79      	ldr	r3, [pc, #484]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a78      	ldr	r2, [pc, #480]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b76      	ldr	r3, [pc, #472]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b72      	ldr	r3, [pc, #456]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a71      	ldr	r2, [pc, #452]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b6f      	ldr	r3, [pc, #444]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b6b      	ldr	r3, [pc, #428]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a6a      	ldr	r2, [pc, #424]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b68      	ldr	r3, [pc, #416]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b64      	ldr	r3, [pc, #400]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a63      	ldr	r2, [pc, #396]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b61      	ldr	r3, [pc, #388]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b5d      	ldr	r3, [pc, #372]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a5c      	ldr	r2, [pc, #368]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b5a      	ldr	r3, [pc, #360]	@ (8000af4 <MX_GPIO_Init+0x21c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	4857      	ldr	r0, [pc, #348]	@ (8000af8 <MX_GPIO_Init+0x220>)
 800099c:	f000 fe40 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2101      	movs	r1, #1
 80009a4:	4855      	ldr	r0, [pc, #340]	@ (8000afc <MX_GPIO_Init+0x224>)
 80009a6:	f000 fe3b 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f240 2106 	movw	r1, #518	@ 0x206
 80009b0:	4852      	ldr	r0, [pc, #328]	@ (8000afc <MX_GPIO_Init+0x224>)
 80009b2:	f000 fe35 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b6:	2200      	movs	r2, #0
 80009b8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009bc:	4850      	ldr	r0, [pc, #320]	@ (8000b00 <MX_GPIO_Init+0x228>)
 80009be:	f000 fe2f 	bl	8001620 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c8:	484e      	ldr	r0, [pc, #312]	@ (8000b04 <MX_GPIO_Init+0x22c>)
 80009ca:	f000 fe29 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ce:	2308      	movs	r3, #8
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4844      	ldr	r0, [pc, #272]	@ (8000af8 <MX_GPIO_Init+0x220>)
 80009e6:	f000 fc7f 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC1 PC2 PC9 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
 80009ea:	f240 2307 	movw	r3, #519	@ 0x207
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	483e      	ldr	r0, [pc, #248]	@ (8000afc <MX_GPIO_Init+0x224>)
 8000a04:	f000 fc70 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4836      	ldr	r0, [pc, #216]	@ (8000afc <MX_GPIO_Init+0x224>)
 8000a24:	f000 fc60 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a2c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4831      	ldr	r0, [pc, #196]	@ (8000b04 <MX_GPIO_Init+0x22c>)
 8000a3e:	f000 fc53 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a42:	2304      	movs	r3, #4
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	482c      	ldr	r0, [pc, #176]	@ (8000b08 <MX_GPIO_Init+0x230>)
 8000a56:	f000 fc47 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a6c:	2305      	movs	r3, #5
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4824      	ldr	r0, [pc, #144]	@ (8000b08 <MX_GPIO_Init+0x230>)
 8000a78:	f000 fc36 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a7c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a80:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	481a      	ldr	r0, [pc, #104]	@ (8000b00 <MX_GPIO_Init+0x228>)
 8000a96:	f000 fc27 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4814      	ldr	r0, [pc, #80]	@ (8000b04 <MX_GPIO_Init+0x22c>)
 8000ab4:	f000 fc18 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_GPIO_Init+0x228>)
 8000acc:	f000 fc0c 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ad4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_GPIO_Init+0x220>)
 8000ae6:	f000 fbff 	bl	80012e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	3730      	adds	r7, #48	@ 0x30
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	4a0f      	ldr	r2, [pc, #60]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b56:	2007      	movs	r0, #7
 8000b58:	f000 fb84 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	@ (8000bec <HAL_I2C_MspInit+0x84>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12c      	bne.n	8000be4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ba6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bac:	2312      	movs	r3, #18
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480c      	ldr	r0, [pc, #48]	@ (8000bf4 <HAL_I2C_MspInit+0x8c>)
 8000bc4:	f000 fb90 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd0:	4a07      	ldr	r2, [pc, #28]	@ (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000bd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	@ 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	@ 0x38
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a31      	ldr	r2, [pc, #196]	@ (8000ce8 <HAL_I2S_MspInit+0xf0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d15a      	bne.n	8000cde <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c2c:	23c0      	movs	r3, #192	@ 0xc0
 8000c2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 f8a7 	bl	8004d8c <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c44:	f7ff ff62 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	4b27      	ldr	r3, [pc, #156]	@ (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	4a26      	ldr	r2, [pc, #152]	@ (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c58:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c74:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c88:	4a18      	ldr	r2, [pc, #96]	@ (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c90:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <HAL_I2S_MspInit+0xf4>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cac:	2306      	movs	r3, #6
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480e      	ldr	r0, [pc, #56]	@ (8000cf0 <HAL_I2S_MspInit+0xf8>)
 8000cb8:	f000 fb16 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cbc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <HAL_I2S_MspInit+0xfc>)
 8000cda:	f000 fb05 	bl	80012e8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000cde:	bf00      	nop
 8000ce0:	3738      	adds	r7, #56	@ 0x38
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40003c00 	.word	0x40003c00
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40020800 	.word	0x40020800

08000cf8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	@ (8000d7c <HAL_SPI_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12b      	bne.n	8000d72 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d52:	23e0      	movs	r3, #224	@ 0xe0
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d62:	2305      	movs	r3, #5
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <HAL_SPI_MspInit+0x8c>)
 8000d6e:	f000 fabb 	bl	80012e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	@ 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40013000 	.word	0x40013000
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10d      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x40>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x40>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x40>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40000400 	.word	0x40000400
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <HAL_TIM_MspPostInit+0x68>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d11e      	bne.n	8000e2c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <HAL_TIM_MspPostInit+0x6c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a10      	ldr	r2, [pc, #64]	@ (8000e38 <HAL_TIM_MspPostInit+0x6c>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_TIM_MspPostInit+0x6c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000e0a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <HAL_TIM_MspPostInit+0x70>)
 8000e28:	f000 fa5e 	bl	80012e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40000400 	.word	0x40000400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020800 	.word	0x40020800

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <NMI_Handler+0x4>

08000e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <MemManage_Handler+0x4>

08000e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e96:	f000 f8d1 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <OTG_FS_IRQHandler+0x10>)
 8000ea6:	f000 feb5 	bl	8001c14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200005b8 	.word	0x200005b8

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	@ (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f008 fd7e 	bl	80099e4 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20020000 	.word	0x20020000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	200001d4 	.word	0x200001d4
 8000f1c:	20000ae0 	.word	0x20000ae0

08000f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f48:	f7ff ffea 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	@ (8000f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	@ (8000f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	@ (8000f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f008 fd3d 	bl	80099f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fabd 	bl	80004f4 <main>
  bx  lr    
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f88:	08009b14 	.word	0x08009b14
  ldr r2, =_sbss
 8000f8c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f90:	20000ae0 	.word	0x20000ae0

08000f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC_IRQHandler>
	...

08000f98 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f94f 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8000fcc:	f7ff fda4 	bl	8000b18 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f967 	bl	80012ce <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
		return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f92f 	bl	800127a <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
		return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000000 	.word	0x20000000
 8001034:	20000008 	.word	0x20000008
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	200001d8 	.word	0x200001d8

08001064 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200001d8 	.word	0x200001d8

0800107c <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
	}
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	@ (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff29 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff3e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff31 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa2 	bl	8001220 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e16b      	b.n	80015dc <HAL_GPIO_Init+0x2f4>
		/* Get the IO position */
		ioposition = 0x01U << position;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 815a 	bne.w	80015d6 <HAL_GPIO_Init+0x2ee>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
						<< position);
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d017      	beq.n	80013d8 <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80b4 	beq.w	80015d6 <HAL_GPIO_Init+0x2ee>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b60      	ldr	r3, [pc, #384]	@ (80015f4 <HAL_GPIO_Init+0x30c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a5f      	ldr	r2, [pc, #380]	@ (80015f4 <HAL_GPIO_Init+0x30c>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b5d      	ldr	r3, [pc, #372]	@ (80015f4 <HAL_GPIO_Init+0x30c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a5b      	ldr	r2, [pc, #364]	@ (80015f8 <HAL_GPIO_Init+0x310>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a52      	ldr	r2, [pc, #328]	@ (80015fc <HAL_GPIO_Init+0x314>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02b      	beq.n	800150e <HAL_GPIO_Init+0x226>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a51      	ldr	r2, [pc, #324]	@ (8001600 <HAL_GPIO_Init+0x318>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x222>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a50      	ldr	r2, [pc, #320]	@ (8001604 <HAL_GPIO_Init+0x31c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x21e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001608 <HAL_GPIO_Init+0x320>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x21a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4e      	ldr	r2, [pc, #312]	@ (800160c <HAL_GPIO_Init+0x324>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x216>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001610 <HAL_GPIO_Init+0x328>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x212>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001614 <HAL_GPIO_Init+0x32c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x20e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001618 <HAL_GPIO_Init+0x330>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x20a>
 80014ee:	2307      	movs	r3, #7
 80014f0:	e00e      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014f2:	2308      	movs	r3, #8
 80014f4:	e00c      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014f6:	2306      	movs	r3, #6
 80014f8:	e00a      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014fa:	2305      	movs	r3, #5
 80014fc:	e008      	b.n	8001510 <HAL_GPIO_Init+0x228>
 80014fe:	2304      	movs	r3, #4
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x228>
 8001502:	2303      	movs	r3, #3
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x228>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x228>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x228>
 800150e:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 8001520:	4935      	ldr	r1, [pc, #212]	@ (80015f8 <HAL_GPIO_Init+0x310>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 800152e:	4b3b      	ldr	r3, [pc, #236]	@ (800161c <HAL_GPIO_Init+0x334>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x26a>
					temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 8001552:	4a32      	ldr	r2, [pc, #200]	@ (800161c <HAL_GPIO_Init+0x334>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8001558:	4b30      	ldr	r3, [pc, #192]	@ (800161c <HAL_GPIO_Init+0x334>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x294>
					temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 800157c:	4a27      	ldr	r2, [pc, #156]	@ (800161c <HAL_GPIO_Init+0x334>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 8001582:	4b26      	ldr	r3, [pc, #152]	@ (800161c <HAL_GPIO_Init+0x334>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2be>
					temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 80015a6:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <HAL_GPIO_Init+0x334>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <HAL_GPIO_Init+0x334>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2e8>
					temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 80015d0:	4a12      	ldr	r2, [pc, #72]	@ (800161c <HAL_GPIO_Init+0x334>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	f67f ae90 	bls.w	8001304 <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3724      	adds	r7, #36	@ 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40013800 	.word	0x40013800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40020800 	.word	0x40020800
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40021000 	.word	0x40021000
 8001610:	40021400 	.word	0x40021400
 8001614:	40021800 	.word	0x40021800
 8001618:	40021c00 	.word	0x40021c00
 800161c:	40013c00 	.word	0x40013c00

08001620 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <HAL_HCD_Init>:
/**
 * @brief  Initialize the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd) {
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af02      	add	r7, sp, #8
 8001658:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
	const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

	/* Check the HCD handle allocation */
	if (hhcd == NULL) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_HCD_Init+0x12>
		return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e059      	b.n	8001718 <HAL_HCD_Init+0xc6>

	/* Check the parameters */
	assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
	USBx = hhcd->Instance;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

	if (hhcd->State == HAL_HCD_STATE_RESET) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <HAL_HCD_Init+0x32>
		/* Allocate lock resource and initialize it */
		hhcd->Lock = HAL_UNLOCKED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_HCD_MspInit(hhcd);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f007 fe2e 	bl	80092e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
	}

	hhcd->State = HAL_HCD_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2203      	movs	r2, #3
 8001688:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
	/* Disable DMA mode for FS instance */
	if (USBx == USB_OTG_FS) {
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001692:	d102      	bne.n	800169a <HAL_HCD_Init+0x48>
		hhcd->Init.dma_enable = 0U;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	719a      	strb	r2, [r3, #6]
	}
#endif /* defined (USB_OTG_FS) */

	/* Disable the Interrupts */
	__HAL_HCD_DISABLE(hhcd);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 fc47 	bl	8005f32 <USB_DisableGlobalInt>

	/* Init the Core (common init.) */
	if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7c1a      	ldrb	r2, [r3, #16]
 80016ac:	f88d 2000 	strb.w	r2, [sp]
 80016b0:	3304      	adds	r3, #4
 80016b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b4:	f004 fbc8 	bl	8005e48 <USB_CoreInit>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_HCD_Init+0x78>
		hhcd->State = HAL_HCD_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2202      	movs	r2, #2
 80016c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e026      	b.n	8001718 <HAL_HCD_Init+0xc6>
	}

	/* Force Host Mode */
	if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK) {
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2101      	movs	r1, #1
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fc3f 	bl	8005f54 <USB_SetCurrentMode>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_HCD_Init+0x96>
		hhcd->State = HAL_HCD_STATE_ERROR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e017      	b.n	8001718 <HAL_HCD_Init+0xc6>
	}

	/* Init Host */
	if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7c1a      	ldrb	r2, [r3, #16]
 80016f0:	f88d 2000 	strb.w	r2, [sp]
 80016f4:	3304      	adds	r3, #4
 80016f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f8:	f004 fde2 	bl	80062c0 <USB_HostInit>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_HCD_Init+0xbc>
		hhcd->State = HAL_HCD_STATE_ERROR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2202      	movs	r2, #2
 8001706:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
		return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e004      	b.n	8001718 <HAL_HCD_Init+0xc6>
	}

	hhcd->State = HAL_HCD_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

	return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_HCD_HC_Init>:
 *          This parameter can be a value from 0 to32K
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
		uint8_t epnum, uint8_t dev_address, uint8_t speed, uint8_t ep_type,
		uint16_t mps) {
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b08b      	sub	sp, #44	@ 0x2c
 8001724:	af04      	add	r7, sp, #16
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	70fb      	strb	r3, [r7, #3]
 8001732:	460b      	mov	r3, r1
 8001734:	70bb      	strb	r3, [r7, #2]
 8001736:	4613      	mov	r3, r2
 8001738:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status;
	uint32_t HostCoreSpeed;
	uint32_t HCcharMps = mps;
 800173a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800173c:	617b      	str	r3, [r7, #20]

	__HAL_LOCK(hhcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_HCD_HC_Init+0x2c>
 8001748:	2302      	movs	r3, #2
 800174a:	e09d      	b.n	8001888 <HAL_HCD_HC_Init+0x168>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	hhcd->hc[ch_num].do_ping = 0U;
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	3319      	adds	r3, #25
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].dev_addr = dev_address;
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	3314      	adds	r3, #20
 8001778:	787a      	ldrb	r2, [r7, #1]
 800177a:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ch_num = ch_num;
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	3315      	adds	r3, #21
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_type = ep_type;
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	3326      	adds	r3, #38	@ 0x26
 80017a0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017a4:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	78bb      	ldrb	r3, [r7, #2]
 80017aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017ae:	b2d8      	uxtb	r0, r3
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	3316      	adds	r3, #22
 80017be:	4602      	mov	r2, r0
 80017c0:	701a      	strb	r2, [r3, #0]

	(void) HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	4619      	mov	r1, r3
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 fbc8 	bl	8001f5c <HAL_HCD_HC_ClearHubInfo>

	if ((epnum & 0x80U) == 0x80U) {
 80017cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da0a      	bge.n	80017ea <HAL_HCD_HC_Init+0xca>
		hhcd->hc[ch_num].ep_is_in = 1U;
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3317      	adds	r3, #23
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
 80017e8:	e009      	b.n	80017fe <HAL_HCD_HC_Init+0xde>
	} else {
		hhcd->hc[ch_num].ep_is_in = 0U;
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	3317      	adds	r3, #23
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
	}

	HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fec0 	bl	8006588 <USB_GetHostSpeed>
 8001808:	6138      	str	r0, [r7, #16]

	if (ep_type == EP_TYPE_ISOC) {
 800180a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10b      	bne.n	800182a <HAL_HCD_HC_Init+0x10a>
		/* FS device plugged to HS HUB */
		if ((speed == HCD_DEVICE_SPEED_FULL)
 8001812:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <HAL_HCD_HC_Init+0x10a>
				&& (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED)) {
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d104      	bne.n	800182a <HAL_HCD_HC_Init+0x10a>
			if (HCcharMps > ISO_SPLT_MPS) {
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2bbc      	cmp	r3, #188	@ 0xbc
 8001824:	d901      	bls.n	800182a <HAL_HCD_HC_Init+0x10a>
				/* ISO Max Packet Size for Split mode */
				HCcharMps = ISO_SPLT_MPS;
 8001826:	23bc      	movs	r3, #188	@ 0xbc
 8001828:	617b      	str	r3, [r7, #20]
			}
		}
	}

	hhcd->hc[ch_num].speed = speed;
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	3318      	adds	r3, #24
 800183a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800183e:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].max_packet = (uint16_t) HCcharMps;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	b298      	uxth	r0, r3
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3328      	adds	r3, #40	@ 0x28
 8001854:	4602      	mov	r2, r0
 8001856:	801a      	strh	r2, [r3, #0]

	status = USB_HC_Init(hhcd->Instance, ch_num, epnum, dev_address, speed,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	b29b      	uxth	r3, r3
 8001860:	787c      	ldrb	r4, [r7, #1]
 8001862:	78ba      	ldrb	r2, [r7, #2]
 8001864:	78f9      	ldrb	r1, [r7, #3]
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	4623      	mov	r3, r4
 8001876:	f004 feaf 	bl	80065d8 <USB_HC_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
			ep_type, (uint16_t) HCcharMps);

	__HAL_UNLOCK(hhcd);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return status;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}

08001890 <HAL_HCD_HC_Halt>:
 * @param  hhcd HCD handle
 * @param  ch_num Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]

	__HAL_LOCK(hhcd);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_HCD_HC_Halt+0x1e>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e00f      	b.n	80018ce <HAL_HCD_HC_Halt+0x3e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	(void) USB_HC_Halt(hhcd->Instance, ch_num);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f005 fa41 	bl	8006d46 <USB_HC_Halt>
	__HAL_UNLOCK(hhcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_HCD_HC_SubmitRequest>:
 *           0 : do ping inactive / 1 : do ping active
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_SubmitRequest(HCD_HandleTypeDef *hhcd,
		uint8_t ch_num, uint8_t direction, uint8_t ep_type, uint8_t token,
		uint8_t *pbuff, uint16_t length, uint8_t do_ping) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	4608      	mov	r0, r1
 80018e2:	4611      	mov	r1, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	70fb      	strb	r3, [r7, #3]
 80018ea:	460b      	mov	r3, r1
 80018ec:	70bb      	strb	r3, [r7, #2]
 80018ee:	4613      	mov	r3, r2
 80018f0:	707b      	strb	r3, [r7, #1]
	hhcd->hc[ch_num].ep_is_in = direction;
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3317      	adds	r3, #23
 8001902:	78ba      	ldrb	r2, [r7, #2]
 8001904:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].ep_type = ep_type;
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	3326      	adds	r3, #38	@ 0x26
 8001916:	787a      	ldrb	r2, [r7, #1]
 8001918:	701a      	strb	r2, [r3, #0]

	if (token == 0U) {
 800191a:	7c3b      	ldrb	r3, [r7, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d114      	bne.n	800194a <HAL_HCD_HC_SubmitRequest+0x72>
		hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	332a      	adds	r3, #42	@ 0x2a
 8001930:	2203      	movs	r2, #3
 8001932:	701a      	strb	r2, [r3, #0]
		hhcd->hc[ch_num].do_ping = do_ping;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3319      	adds	r3, #25
 8001944:	7f3a      	ldrb	r2, [r7, #28]
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e009      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x86>
	} else {
		hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	332a      	adds	r3, #42	@ 0x2a
 800195a:	2202      	movs	r2, #2
 800195c:	701a      	strb	r2, [r3, #0]
	}

	/* Manage Data Toggle */
	switch (ep_type) {
 800195e:	787b      	ldrb	r3, [r7, #1]
 8001960:	2b03      	cmp	r3, #3
 8001962:	f200 8102 	bhi.w	8001b6a <HAL_HCD_HC_SubmitRequest+0x292>
 8001966:	a201      	add	r2, pc, #4	@ (adr r2, 800196c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	0800197d 	.word	0x0800197d
 8001970:	08001b55 	.word	0x08001b55
 8001974:	08001a41 	.word	0x08001a41
 8001978:	08001acb 	.word	0x08001acb
	case EP_TYPE_CTRL:
		if (token == 1U) /* send data */
 800197c:	7c3b      	ldrb	r3, [r7, #16]
 800197e:	2b01      	cmp	r3, #1
 8001980:	f040 80f5 	bne.w	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>
		{
			if (direction == 0U) {
 8001984:	78bb      	ldrb	r3, [r7, #2]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d12d      	bne.n	80019e6 <HAL_HCD_HC_SubmitRequest+0x10e>
				if (length == 0U) {
 800198a:	8b3b      	ldrh	r3, [r7, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <HAL_HCD_HC_SubmitRequest+0xcc>
					/* For Status OUT stage, Length == 0U, Status Out PID = 1 */
					hhcd->hc[ch_num].toggle_out = 1U;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	333d      	adds	r3, #61	@ 0x3d
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
				}

				/* Set the Data Toggle bit as per the Flag */
				if (hhcd->hc[ch_num].toggle_out == 0U) {
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	333d      	adds	r3, #61	@ 0x3d
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <HAL_HCD_HC_SubmitRequest+0xf8>
					/* Put the PID 0 */
					hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ba:	78fa      	ldrb	r2, [r7, #3]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	1a9b      	subs	r3, r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	332a      	adds	r3, #42	@ 0x2a
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
						hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
					}
				}
			}
		}
		break;
 80019ce:	e0ce      	b.n	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>
					hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	332a      	adds	r3, #42	@ 0x2a
 80019e0:	2202      	movs	r2, #2
 80019e2:	701a      	strb	r2, [r3, #0]
		break;
 80019e4:	e0c3      	b.n	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>
				if (hhcd->hc[ch_num].do_ssplit == 1U) {
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	331a      	adds	r3, #26
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	f040 80b8 	bne.w	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>
					if (hhcd->hc[ch_num].toggle_in == 0U) {
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	333c      	adds	r3, #60	@ 0x3c
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <HAL_HCD_HC_SubmitRequest+0x152>
						hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	332a      	adds	r3, #42	@ 0x2a
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
		break;
 8001a28:	e0a1      	b.n	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>
						hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	332a      	adds	r3, #42	@ 0x2a
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
		break;
 8001a3e:	e096      	b.n	8001b6e <HAL_HCD_HC_SubmitRequest+0x296>

	case EP_TYPE_BULK:
		if (direction == 0U) {
 8001a40:	78bb      	ldrb	r3, [r7, #2]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d120      	bne.n	8001a88 <HAL_HCD_HC_SubmitRequest+0x1b0>
			/* Set the Data Toggle bit as per the Flag */
			if (hhcd->hc[ch_num].toggle_out == 0U) {
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	333d      	adds	r3, #61	@ 0x3d
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10a      	bne.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x19a>
				/* Put the PID 0 */
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	332a      	adds	r3, #42	@ 0x2a
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
			} else {
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
			}
		}

		break;
 8001a70:	e07e      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	332a      	adds	r3, #42	@ 0x2a
 8001a82:	2202      	movs	r2, #2
 8001a84:	701a      	strb	r2, [r3, #0]
		break;
 8001a86:	e073      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
			if (hhcd->hc[ch_num].toggle_in == 0U) {
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	333c      	adds	r3, #60	@ 0x3c
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10a      	bne.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x1dc>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	332a      	adds	r3, #42	@ 0x2a
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
		break;
 8001ab2:	e05d      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	332a      	adds	r3, #42	@ 0x2a
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	701a      	strb	r2, [r3, #0]
		break;
 8001ac8:	e052      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
	case EP_TYPE_INTR:
		if (direction == 0U) {
 8001aca:	78bb      	ldrb	r3, [r7, #2]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d120      	bne.n	8001b12 <HAL_HCD_HC_SubmitRequest+0x23a>
			/* Set the Data Toggle bit as per the Flag */
			if (hhcd->hc[ch_num].toggle_out == 0U) {
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	333d      	adds	r3, #61	@ 0x3d
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_HCD_HC_SubmitRequest+0x224>
				/* Put the PID 0 */
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	332a      	adds	r3, #42	@ 0x2a
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
			} else {
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
			}
		}
		break;
 8001afa:	e039      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	332a      	adds	r3, #42	@ 0x2a
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	701a      	strb	r2, [r3, #0]
		break;
 8001b10:	e02e      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
			if (hhcd->hc[ch_num].toggle_in == 0U) {
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	333c      	adds	r3, #60	@ 0x3c
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10a      	bne.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x266>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	332a      	adds	r3, #42	@ 0x2a
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
		break;
 8001b3c:	e018      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
				hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	332a      	adds	r3, #42	@ 0x2a
 8001b4e:	2202      	movs	r2, #2
 8001b50:	701a      	strb	r2, [r3, #0]
		break;
 8001b52:	e00d      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>

	case EP_TYPE_ISOC:
		hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	332a      	adds	r3, #42	@ 0x2a
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
		break;
 8001b68:	e002      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>

	default:
		break;
 8001b6a:	bf00      	nop
 8001b6c:	e000      	b.n	8001b70 <HAL_HCD_HC_SubmitRequest+0x298>
		break;
 8001b6e:	bf00      	nop
	}

	hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	332c      	adds	r3, #44	@ 0x2c
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	601a      	str	r2, [r3, #0]
	hhcd->hc[ch_num].xfer_len = length;
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	8b39      	ldrh	r1, [r7, #24]
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4403      	add	r3, r0
 8001b94:	3334      	adds	r3, #52	@ 0x34
 8001b96:	6019      	str	r1, [r3, #0]
	hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	334c      	adds	r3, #76	@ 0x4c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].xfer_count = 0U;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3338      	adds	r3, #56	@ 0x38
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
	hhcd->hc[ch_num].ch_num = ch_num;
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	3315      	adds	r3, #21
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].state = HC_IDLE;
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	334d      	adds	r3, #77	@ 0x4d
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]

	return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num],
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	1a9b      	subs	r3, r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	3310      	adds	r3, #16
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	1d19      	adds	r1, r3, #4
			(uint8_t) hhcd->Init.dma_enable);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	799b      	ldrb	r3, [r3, #6]
	return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num],
 8001c02:	461a      	mov	r2, r3
 8001c04:	f004 fe14 	bl	8006830 <USB_HC_StartXfer>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop

08001c14 <HAL_HCD_IRQHandler>:
/**
 * @brief  Handle HCD interrupt request.
 * @param  hhcd HCD handle
 * @retval None
 */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	613b      	str	r3, [r7, #16]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	60fb      	str	r3, [r7, #12]
	uint32_t i;
	uint32_t interrupt;

	/* Ensure that we are in device mode */
	if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST) {
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f004 fb08 	bl	8006240 <USB_GetMode>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f040 80fb 	bne.w	8001e2e <HAL_HCD_IRQHandler+0x21a>
		/* Avoid spurious interrupt */
		if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 facb 	bl	80061d8 <USB_ReadInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80f1 	beq.w	8001e2c <HAL_HCD_IRQHandler+0x218>
			return;
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT)) {
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 fac2 	bl	80061d8 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c5e:	d104      	bne.n	8001c6a <HAL_HCD_IRQHandler+0x56>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c68:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR)) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fab2 	bl	80061d8 <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c7e:	d104      	bne.n	8001c8a <HAL_HCD_IRQHandler+0x76>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c88:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE)) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 faa2 	bl	80061d8 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c9e:	d104      	bne.n	8001caa <HAL_HCD_IRQHandler+0x96>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ca8:	615a      	str	r2, [r3, #20]
		}

		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS)) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 fa92 	bl	80061d8 <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d103      	bne.n	8001cc6 <HAL_HCD_IRQHandler+0xb2>
			/* Incorrect mode, acknowledge the interrupt */
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	615a      	str	r2, [r3, #20]
		}

		/* Handle Host Disconnect Interrupts */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT)) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fa84 	bl	80061d8 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cda:	d120      	bne.n	8001d1e <HAL_HCD_IRQHandler+0x10a>
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001ce4:	615a      	str	r2, [r3, #20]

			if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U) {
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d113      	bne.n	8001d1e <HAL_HCD_IRQHandler+0x10a>
				/* Flush USB Fifo */
				(void) USB_FlushTxFifo(USBx, 0x10U);
 8001cf6:	2110      	movs	r1, #16
 8001cf8:	6938      	ldr	r0, [r7, #16]
 8001cfa:	f004 f977 	bl	8005fec <USB_FlushTxFifo>
				(void) USB_FlushRxFifo(USBx);
 8001cfe:	6938      	ldr	r0, [r7, #16]
 8001d00:	f004 f9a6 	bl	8006050 <USB_FlushRxFifo>

				if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7a5b      	ldrb	r3, [r3, #9]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d105      	bne.n	8001d18 <HAL_HCD_IRQHandler+0x104>
					/* Restore FS Clock */
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 fb98 	bl	8006448 <USB_InitFSLSPClkSel>

				/* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
				HAL_HCD_Disconnect_Callback(hhcd);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f007 fb5f 	bl	80093dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
			}
		}

		/* Handle Host Port Interrupts */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT)) {
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 fa58 	bl	80061d8 <USB_ReadInterrupts>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d32:	d102      	bne.n	8001d3a <HAL_HCD_IRQHandler+0x126>
			HCD_Port_IRQHandler(hhcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f001 fd4d 	bl	80037d4 <HCD_Port_IRQHandler>
		}

		/* Handle Host SOF Interrupt */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF)) {
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fa4a 	bl	80061d8 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d106      	bne.n	8001d5c <HAL_HCD_IRQHandler+0x148>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
			HAL_HCD_SOF_Callback(hhcd);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f007 fb28 	bl	80093a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2208      	movs	r2, #8
 8001d5a:	615a      	str	r2, [r3, #20]
		}

		/* Handle Host channel Interrupt */
		if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT)) {
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f004 fa39 	bl	80061d8 <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d70:	d139      	bne.n	8001de6 <HAL_HCD_IRQHandler+0x1d2>
			interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 ffd4 	bl	8006d24 <USB_HC_ReadInterrupt>
 8001d7c:	60b8      	str	r0, [r7, #8]
			for (i = 0U; i < hhcd->Init.Host_channels; i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e025      	b.n	8001dd0 <HAL_HCD_IRQHandler+0x1bc>
				if ((interrupt & (1UL << (i & 0xFU))) != 0U) {
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d018      	beq.n	8001dca <HAL_HCD_IRQHandler+0x1b6>
					if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dae:	d106      	bne.n	8001dbe <HAL_HCD_IRQHandler+0x1aa>
							== USB_OTG_HCCHAR_EPDIR) {
						HCD_HC_IN_IRQHandler(hhcd, (uint8_t) i);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f905 	bl	8001fc6 <HCD_HC_IN_IRQHandler>
 8001dbc:	e005      	b.n	8001dca <HAL_HCD_IRQHandler+0x1b6>
					} else {
						HCD_HC_OUT_IRQHandler(hhcd, (uint8_t) i);
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 ff67 	bl	8002c98 <HCD_HC_OUT_IRQHandler>
			for (i = 0U; i < hhcd->Init.Host_channels; i++) {
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	795b      	ldrb	r3, [r3, #5]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d3d3      	bcc.n	8001d84 <HAL_HCD_IRQHandler+0x170>
					}
				}
			}
			__HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001de4:	615a      	str	r2, [r3, #20]
		}

		/* Handle Rx Queue Level Interrupts */
		if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U) {
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 f9f4 	bl	80061d8 <USB_ReadInterrupts>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d101      	bne.n	8001dfe <HAL_HCD_IRQHandler+0x1ea>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_HCD_IRQHandler+0x1ec>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d014      	beq.n	8001e2e <HAL_HCD_IRQHandler+0x21a>
			USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0210 	bic.w	r2, r2, #16
 8001e12:	619a      	str	r2, [r3, #24]

			HCD_RXQLVL_IRQHandler(hhcd);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f001 fbfe 	bl	8003616 <HCD_RXQLVL_IRQHandler>

			USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0210 	orr.w	r2, r2, #16
 8001e28:	619a      	str	r2, [r3, #24]
 8001e2a:	e000      	b.n	8001e2e <HAL_HCD_IRQHandler+0x21a>
			return;
 8001e2c:	bf00      	nop
		}
	}
}
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_HCD_Start>:
/**
 * @brief  Start the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	__HAL_LOCK(hhcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_HCD_Start+0x16>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e013      	b.n	8001e72 <HAL_HCD_Start+0x3e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	/* Enable port power */
	(void) USB_DriveVbus(hhcd->Instance, 1U);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2101      	movs	r1, #1
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 fb5c 	bl	8006516 <USB_DriveVbus>

	/* Enable global interrupt */
	__HAL_HCD_ENABLE(hhcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 f854 	bl	8005f10 <USB_EnableGlobalInt>
	__HAL_UNLOCK(hhcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_HCD_Stop>:
 * @brief  Stop the host driver.
 * @param  hhcd HCD handle
 * @retval HAL status
 */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd) {
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	__HAL_LOCK(hhcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_HCD_Stop+0x16>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e00d      	b.n	8001eac <HAL_HCD_Stop+0x32>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
	(void) USB_StopHost(hhcd->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 f8af 	bl	8007000 <USB_StopHost>
	__HAL_UNLOCK(hhcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

	return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_HCD_ResetPort>:
/**
 * @brief  Reset the host port.
 * @param  hhcd HCD handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	return (USB_ResetPort(hhcd->Instance));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 fafe 	bl	80064c2 <USB_ResetPort>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_HCD_HC_GetURBState>:
 *            URB_NYET/
 *            URB_ERROR/
 *            URB_STALL
 */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd,
		uint8_t chnum) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
	return hhcd->hc[chnum].urb_state;
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	334c      	adds	r3, #76	@ 0x4c
 8001eec:	781b      	ldrb	r3, [r3, #0]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_HCD_HC_GetXferCount>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval last transfer size in byte
 */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum) {
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
	return hhcd->hc[chnum].xfer_count;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3338      	adds	r3, #56	@ 0x38
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_HCD_GetCurrentFrame>:
/**
 * @brief  Return the current Host frame number.
 * @param  hhcd HCD handle
 * @retval Current Host frame number
 */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	return (USB_GetCurrentFrame(hhcd->Instance));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fb40 	bl	80065b6 <USB_GetCurrentFrame>
 8001f36:	4603      	mov	r3, r0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_HCD_GetCurrentSpeed>:
/**
 * @brief  Return the Host enumeration speed.
 * @param  hhcd HCD handle
 * @retval Enumeration speed
 */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	return (USB_GetHostSpeed(hhcd->Instance));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f004 fb1b 	bl	8006588 <USB_GetHostSpeed>
 8001f52:	4603      	mov	r3, r0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_HCD_HC_ClearHubInfo>:
 * @param  ch_num Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd,
		uint8_t ch_num) {
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
	hhcd->hc[ch_num].do_ssplit = 0U;
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	331a      	adds	r3, #26
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].do_csplit = 0U;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	331b      	adds	r3, #27
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].hub_addr = 0U;
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3325      	adds	r3, #37	@ 0x25
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
	hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3324      	adds	r3, #36	@ 0x24
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HCD_HC_IN_IRQHandler>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval none
 */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum) {
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	70fb      	strb	r3, [r7, #3]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg;

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR)) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 f90a 	bl	80061fe <USB_ReadChInterrupts>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d11a      	bne.n	800202a <HCD_HC_IN_IRQHandler+0x64>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	2304      	movs	r3, #4
 8002004:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	334d      	adds	r3, #77	@ 0x4d
 8002016:	2207      	movs	r2, #7
 8002018:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f004 fe8f 	bl	8006d46 <USB_HC_Halt>
 8002028:	e09e      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR)) {
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f004 f8e3 	bl	80061fe <USB_ReadChInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002042:	d11b      	bne.n	800207c <HCD_HC_IN_IRQHandler+0xb6>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002056:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_BBLERR;
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	334d      	adds	r3, #77	@ 0x4d
 8002068:	2208      	movs	r2, #8
 800206a:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f004 fe66 	bl	8006d46 <USB_HC_Halt>
 800207a:	e075      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL)) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f004 f8ba 	bl	80061fe <USB_ReadChInterrupts>
 800208a:	4603      	mov	r3, r0
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b08      	cmp	r3, #8
 8002092:	d11a      	bne.n	80020ca <HCD_HC_IN_IRQHandler+0x104>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a0:	461a      	mov	r2, r3
 80020a2:	2308      	movs	r3, #8
 80020a4:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_STALL;
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	334d      	adds	r3, #77	@ 0x4d
 80020b6:	2206      	movs	r2, #6
 80020b8:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 fe3f 	bl	8006d46 <USB_HC_Halt>
 80020c8:	e04e      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR)) {
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 f893 	bl	80061fe <USB_ReadChInterrupts>
 80020d8:	4603      	mov	r3, r0
 80020da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e2:	d11b      	bne.n	800211c <HCD_HC_IN_IRQHandler+0x156>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f0:	461a      	mov	r2, r3
 80020f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f6:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_DATATGLERR;
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	334d      	adds	r3, #77	@ 0x4d
 8002108:	2209      	movs	r2, #9
 800210a:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f004 fe16 	bl	8006d46 <USB_HC_Halt>
 800211a:	e025      	b.n	8002168 <HCD_HC_IN_IRQHandler+0x1a2>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR)) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f004 f86a 	bl	80061fe <USB_ReadChInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002130:	2b80      	cmp	r3, #128	@ 0x80
 8002132:	d119      	bne.n	8002168 <HCD_HC_IN_IRQHandler+0x1a2>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002140:	461a      	mov	r2, r3
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	334d      	adds	r3, #77	@ 0x4d
 8002156:	2207      	movs	r2, #7
 8002158:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f004 fdef 	bl	8006d46 <USB_HC_Halt>
	} else {
		/* ... */
	}

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR)) {
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f004 f844 	bl	80061fe <USB_ReadChInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800217c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002180:	d112      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x1e2>
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f004 fddb 	bl	8006d46 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800219c:	461a      	mov	r2, r3
 800219e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021a2:	6093      	str	r3, [r2, #8]
 80021a4:	f000 bd75 	b.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC)) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 f824 	bl	80061fe <USB_ReadChInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	f040 8128 	bne.w	8002412 <HCD_HC_IN_IRQHandler+0x44c>
		/* Clear any pending ACK IT */
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ce:	461a      	mov	r2, r3
 80021d0:	2320      	movs	r3, #32
 80021d2:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_csplit == 1U) {
 80021d4:	78fa      	ldrb	r2, [r7, #3]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	331b      	adds	r3, #27
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d119      	bne.n	800221e <HCD_HC_IN_IRQHandler+0x258>
			hhcd->hc[chnum].do_csplit = 0U;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	331b      	adds	r3, #27
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	0151      	lsls	r1, r2, #5
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	440a      	add	r2, r1
 8002214:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221c:	6053      	str	r3, [r2, #4]
		}

		if (hhcd->Init.dma_enable != 0U) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	799b      	ldrb	r3, [r3, #6]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01b      	beq.n	800225e <HCD_HC_IN_IRQHandler+0x298>
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	3330      	adds	r3, #48	@ 0x30
 8002236:	6819      	ldr	r1, [r3, #0]
					- (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 800224a:	78fa      	ldrb	r2, [r7, #3]
					- (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800224c:	1ac9      	subs	r1, r1, r3
			hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4403      	add	r3, r0
 800225a:	3338      	adds	r3, #56	@ 0x38
 800225c:	6019      	str	r1, [r3, #0]
		}

		hhcd->hc[chnum].state = HC_XFRC;
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	334d      	adds	r3, #77	@ 0x4d
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
		hhcd->hc[chnum].ErrCnt = 0U;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	3344      	adds	r3, #68	@ 0x44
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002292:	461a      	mov	r2, r3
 8002294:	2301      	movs	r3, #1
 8002296:	6093      	str	r3, [r2, #8]

		if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3326      	adds	r3, #38	@ 0x26
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HCD_HC_IN_IRQHandler+0x2fe>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	3326      	adds	r3, #38	@ 0x26
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d110      	bne.n	80022e6 <HCD_HC_IN_IRQHandler+0x320>
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 fd3a 	bl	8006d46 <USB_HC_Halt>
			__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022de:	461a      	mov	r2, r3
 80022e0:	2310      	movs	r3, #16
 80022e2:	6093      	str	r3, [r2, #8]
 80022e4:	e03d      	b.n	8002362 <HCD_HC_IN_IRQHandler+0x39c>
		} else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3326      	adds	r3, #38	@ 0x26
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d00a      	beq.n	8002312 <HCD_HC_IN_IRQHandler+0x34c>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC)) {
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3326      	adds	r3, #38	@ 0x26
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d127      	bne.n	8002362 <HCD_HC_IN_IRQHandler+0x39c>
			USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	0151      	lsls	r1, r2, #5
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	440a      	add	r2, r1
 8002328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800232c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002330:	6013      	str	r3, [r2, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	334c      	adds	r3, #76	@ 0x4c
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
			HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	334c      	adds	r3, #76	@ 0x4c
 8002356:	781a      	ldrb	r2, [r3, #0]
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f007 f84b 	bl	80093f8 <HAL_HCD_HC_NotifyURBChange_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		} else {
			/* ... */
		}

		if (hhcd->Init.dma_enable == 1U) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	799b      	ldrb	r3, [r3, #6]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d13b      	bne.n	80023e2 <HCD_HC_IN_IRQHandler+0x41c>
			if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U)
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	3338      	adds	r3, #56	@ 0x38
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4403      	add	r3, r0
 800238a:	3328      	adds	r3, #40	@ 0x28
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	440b      	add	r3, r1
 8002390:	1e59      	subs	r1, r3, #1
					/ hhcd->hc[chnum].max_packet) & 1U) != 0U) {
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4403      	add	r3, r0
 80023a0:	3328      	adds	r3, #40	@ 0x28
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a8:	f003 0301 	and.w	r3, r3, #1
			if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U)
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8470 	beq.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
				hhcd->hc[chnum].toggle_in ^= 1U;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	333c      	adds	r3, #60	@ 0x3c
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	b2d8      	uxtb	r0, r3
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	333c      	adds	r3, #60	@ 0x3c
 80023da:	4602      	mov	r2, r0
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	f000 bc58 	b.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
			}
		} else {
			hhcd->hc[chnum].toggle_in ^= 1U;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	333c      	adds	r3, #60	@ 0x3c
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	f083 0301 	eor.w	r3, r3, #1
 80023fa:	b2d8      	uxtb	r0, r3
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	333c      	adds	r3, #60	@ 0x3c
 800240a:	4602      	mov	r2, r0
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	f000 bc40 	b.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK)) {
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f003 feef 	bl	80061fe <USB_ReadChInterrupts>
 8002420:	4603      	mov	r3, r0
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b20      	cmp	r3, #32
 8002428:	d131      	bne.n	800248e <HCD_HC_IN_IRQHandler+0x4c8>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002436:	461a      	mov	r2, r3
 8002438:	2320      	movs	r3, #32
 800243a:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_ssplit == 1U) {
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	331a      	adds	r3, #26
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	f040 841f 	bne.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
			hhcd->hc[chnum].do_csplit = 1U;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	331b      	adds	r3, #27
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_ACK;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	334d      	adds	r3, #77	@ 0x4d
 8002478:	2203      	movs	r2, #3
 800247a:	701a      	strb	r2, [r3, #0]

			(void) USB_HC_Halt(hhcd->Instance, chnum);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f004 fc5e 	bl	8006d46 <USB_HC_Halt>
 800248a:	f000 bc02 	b.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH)) {
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f003 feb1 	bl	80061fe <USB_ReadChInterrupts>
 800249c:	4603      	mov	r3, r0
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	f040 8305 	bne.w	8002ab2 <HCD_HC_IN_IRQHandler+0xaec>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b4:	461a      	mov	r2, r3
 80024b6:	2302      	movs	r3, #2
 80024b8:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].state == HC_XFRC) {
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	334d      	adds	r3, #77	@ 0x4d
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d114      	bne.n	80024fa <HCD_HC_IN_IRQHandler+0x534>
			hhcd->hc[chnum].state = HC_HALTED;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	334d      	adds	r3, #77	@ 0x4d
 80024e0:	2202      	movs	r2, #2
 80024e2:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334c      	adds	r3, #76	@ 0x4c
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e2cc      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
		} else if (hhcd->hc[chnum].state == HC_STALL) {
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	334d      	adds	r3, #77	@ 0x4d
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d114      	bne.n	800253a <HCD_HC_IN_IRQHandler+0x574>
			hhcd->hc[chnum].state = HC_HALTED;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	334d      	adds	r3, #77	@ 0x4d
 8002520:	2202      	movs	r2, #2
 8002522:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_STALL;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	334c      	adds	r3, #76	@ 0x4c
 8002534:	2205      	movs	r2, #5
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e2ac      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
		} else if ((hhcd->hc[chnum].state == HC_XACTERR)
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	334d      	adds	r3, #77	@ 0x4d
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b07      	cmp	r3, #7
 800254e:	d00b      	beq.n	8002568 <HCD_HC_IN_IRQHandler+0x5a2>
				|| (hhcd->hc[chnum].state == HC_DATATGLERR)) {
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	334d      	adds	r3, #77	@ 0x4d
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b09      	cmp	r3, #9
 8002564:	f040 80a6 	bne.w	80026b4 <HCD_HC_IN_IRQHandler+0x6ee>
			hhcd->hc[chnum].state = HC_HALTED;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	334d      	adds	r3, #77	@ 0x4d
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	3344      	adds	r3, #68	@ 0x44
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1c59      	adds	r1, r3, #1
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4403      	add	r3, r0
 800259c:	3344      	adds	r3, #68	@ 0x44
 800259e:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3344      	adds	r3, #68	@ 0x44
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d943      	bls.n	800263e <HCD_HC_IN_IRQHandler+0x678>
				hhcd->hc[chnum].ErrCnt = 0U;
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3344      	adds	r3, #68	@ 0x44
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]

				if (hhcd->hc[chnum].do_ssplit == 1U) {
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	331a      	adds	r3, #26
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d123      	bne.n	8002628 <HCD_HC_IN_IRQHandler+0x662>
					hhcd->hc[chnum].do_csplit = 0U;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	331b      	adds	r3, #27
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
					hhcd->hc[chnum].ep_ss_schedule = 0U;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	331c      	adds	r3, #28
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
					__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	0151      	lsls	r1, r2, #5
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	440a      	add	r2, r1
 800261e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002626:	6053      	str	r3, [r2, #4]
				}

				hhcd->hc[chnum].urb_state = URB_ERROR;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	334c      	adds	r3, #76	@ 0x4c
 8002638:	2204      	movs	r2, #4
 800263a:	701a      	strb	r2, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 800263c:	e229      	b.n	8002a92 <HCD_HC_IN_IRQHandler+0xacc>
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	334c      	adds	r3, #76	@ 0x4c
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	3326      	adds	r3, #38	@ 0x26
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <HCD_HC_IN_IRQHandler+0x6ba>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3326      	adds	r3, #38	@ 0x26
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b02      	cmp	r3, #2
 800267c:	f040 8209 	bne.w	8002a92 <HCD_HC_IN_IRQHandler+0xacc>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002696:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800269e:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ac:	461a      	mov	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6013      	str	r3, [r2, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80026b2:	e1ee      	b.n	8002a92 <HCD_HC_IN_IRQHandler+0xacc>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_NYET) {
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	334d      	adds	r3, #77	@ 0x4d
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	f040 80c8 	bne.w	800285c <HCD_HC_IN_IRQHandler+0x896>
			hhcd->hc[chnum].state = HC_HALTED;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334d      	adds	r3, #77	@ 0x4d
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	331b      	adds	r3, #27
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	f040 81ce 	bne.w	8002a94 <HCD_HC_IN_IRQHandler+0xace>
				if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR) {
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3326      	adds	r3, #38	@ 0x26
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d16b      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0x820>
					hhcd->hc[chnum].NyetErrCnt++;
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	3348      	adds	r3, #72	@ 0x48
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1c59      	adds	r1, r3, #1
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4403      	add	r3, r0
 800272e:	3348      	adds	r3, #72	@ 0x48
 8002730:	6019      	str	r1, [r3, #0]
					if (hhcd->hc[chnum].NyetErrCnt > 2U) {
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3348      	adds	r3, #72	@ 0x48
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d943      	bls.n	80027d0 <HCD_HC_IN_IRQHandler+0x80a>
						hhcd->hc[chnum].NyetErrCnt = 0U;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3348      	adds	r3, #72	@ 0x48
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
						hhcd->hc[chnum].do_csplit = 0U;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	331b      	adds	r3, #27
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]

						if (hhcd->hc[chnum].ErrCnt < 3U) {
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3344      	adds	r3, #68	@ 0x44
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d809      	bhi.n	800279a <HCD_HC_IN_IRQHandler+0x7d4>
							hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	331c      	adds	r3, #28
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
						}
						__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b8:	6053      	str	r3, [r2, #4]
						hhcd->hc[chnum].urb_state = URB_ERROR;
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	334c      	adds	r3, #76	@ 0x4c
 80027ca:	2204      	movs	r2, #4
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e014      	b.n	80027fa <HCD_HC_IN_IRQHandler+0x834>
					} else {
						hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	334c      	adds	r3, #76	@ 0x4c
 80027e0:	2202      	movs	r2, #2
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e009      	b.n	80027fa <HCD_HC_IN_IRQHandler+0x834>
					}
				} else {
					hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	334c      	adds	r3, #76	@ 0x4c
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
				}

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3326      	adds	r3, #38	@ 0x26
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00b      	beq.n	8002828 <HCD_HC_IN_IRQHandler+0x862>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3326      	adds	r3, #38	@ 0x26
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b02      	cmp	r3, #2
 8002824:	f040 8136 	bne.w	8002a94 <HCD_HC_IN_IRQHandler+0xace>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800283e:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002846:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e11b      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_ACK) {
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	334d      	adds	r3, #77	@ 0x4d
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b03      	cmp	r3, #3
 8002870:	f040 8081 	bne.w	8002976 <HCD_HC_IN_IRQHandler+0x9b0>
			hhcd->hc[chnum].state = HC_HALTED;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334d      	adds	r3, #77	@ 0x4d
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	331b      	adds	r3, #27
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	f040 80fa 	bne.w	8002a94 <HCD_HC_IN_IRQHandler+0xace>
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334c      	adds	r3, #76	@ 0x4c
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]

				/* Set Complete split and re-activate the channel */
				USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	0151      	lsls	r1, r2, #5
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	440a      	add	r2, r1
 80028ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d2:	6053      	str	r3, [r2, #4]
				USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	0151      	lsls	r1, r2, #5
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	440a      	add	r2, r1
 80028ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f2:	60d3      	str	r3, [r2, #12]
				USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	0151      	lsls	r1, r2, #5
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	440a      	add	r2, r1
 800290a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800290e:	f023 0320 	bic.w	r3, r3, #32
 8002912:	60d3      	str	r3, [r2, #12]

				if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3326      	adds	r3, #38	@ 0x26
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HCD_HC_IN_IRQHandler+0x97c>
						|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3326      	adds	r3, #38	@ 0x26
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	f040 80a9 	bne.w	8002a94 <HCD_HC_IN_IRQHandler+0xace>
					/* re-activate the channel */
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002958:	60fb      	str	r3, [r7, #12]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002960:	60fb      	str	r3, [r7, #12]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	e08e      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
				}
			}
		} else if (hhcd->hc[chnum].state == HC_NAK) {
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	334d      	adds	r3, #77	@ 0x4d
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d143      	bne.n	8002a14 <HCD_HC_IN_IRQHandler+0xa4e>
			hhcd->hc[chnum].state = HC_HALTED;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	334d      	adds	r3, #77	@ 0x4d
 800299c:	2202      	movs	r2, #2
 800299e:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	334c      	adds	r3, #76	@ 0x4c
 80029b0:	2202      	movs	r2, #2
 80029b2:	701a      	strb	r2, [r3, #0]

			if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3326      	adds	r3, #38	@ 0x26
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HCD_HC_IN_IRQHandler+0xa1a>
					|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3326      	adds	r3, #38	@ 0x26
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d159      	bne.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
				/* re-activate the channel */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029f6:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029fe:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e03f      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
			}
		} else if (hhcd->hc[chnum].state == HC_BBLERR) {
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	334d      	adds	r3, #77	@ 0x4d
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d126      	bne.n	8002a78 <HCD_HC_IN_IRQHandler+0xab2>
			hhcd->hc[chnum].state = HC_HALTED;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	334d      	adds	r3, #77	@ 0x4d
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3344      	adds	r3, #68	@ 0x44
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	1c59      	adds	r1, r3, #1
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4403      	add	r3, r0
 8002a5e:	3344      	adds	r3, #68	@ 0x44
 8002a60:	6019      	str	r1, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	334c      	adds	r3, #76	@ 0x4c
 8002a72:	2204      	movs	r2, #4
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e00d      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
		} else {
			if (hhcd->hc[chnum].state == HC_HALTED) {
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	334d      	adds	r3, #77	@ 0x4d
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	f000 8100 	beq.w	8002c90 <HCD_HC_IN_IRQHandler+0xcca>
 8002a90:	e000      	b.n	8002a94 <HCD_HC_IN_IRQHandler+0xace>
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8002a92:	bf00      	nop
		}

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
		HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	334c      	adds	r3, #76	@ 0x4c
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f006 fca4 	bl	80093f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ab0:	e0ef      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
				hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 fb9f 	bl	80061fe <USB_ReadChInterrupts>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac6:	2b40      	cmp	r3, #64	@ 0x40
 8002ac8:	d12f      	bne.n	8002b2a <HCD_HC_IN_IRQHandler+0xb64>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2340      	movs	r3, #64	@ 0x40
 8002ada:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_NYET;
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	334d      	adds	r3, #77	@ 0x4d
 8002aec:	2205      	movs	r2, #5
 8002aee:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ssplit == 0U) {
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	331a      	adds	r3, #26
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HCD_HC_IN_IRQHandler+0xb54>
			hhcd->hc[chnum].ErrCnt = 0U;
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	3344      	adds	r3, #68	@ 0x44
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
		}

		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 f90f 	bl	8006d46 <USB_HC_Halt>
 8002b28:	e0b3      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK)) {
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f003 fb63 	bl	80061fe <USB_ReadChInterrupts>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	f040 80a7 	bne.w	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
		if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR) {
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	3326      	adds	r3, #38	@ 0x26
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d11b      	bne.n	8002b92 <HCD_HC_IN_IRQHandler+0xbcc>
			hhcd->hc[chnum].ErrCnt = 0U;
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3344      	adds	r3, #68	@ 0x44
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_NAK;
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	334d      	adds	r3, #77	@ 0x4d
 8002b7e:	2204      	movs	r2, #4
 8002b80:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 f8db 	bl	8006d46 <USB_HC_Halt>
 8002b90:	e03f      	b.n	8002c12 <HCD_HC_IN_IRQHandler+0xc4c>
		} else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3326      	adds	r3, #38	@ 0x26
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HCD_HC_IN_IRQHandler+0xbf8>
				|| (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)) {
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3326      	adds	r3, #38	@ 0x26
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d129      	bne.n	8002c12 <HCD_HC_IN_IRQHandler+0xc4c>
			hhcd->hc[chnum].ErrCnt = 0U;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3344      	adds	r3, #68	@ 0x44
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

			if ((hhcd->Init.dma_enable == 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	799b      	ldrb	r3, [r3, #6]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HCD_HC_IN_IRQHandler+0xc2a>
					|| (hhcd->hc[chnum].do_csplit == 1U)) {
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	331b      	adds	r3, #27
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d110      	bne.n	8002c12 <HCD_HC_IN_IRQHandler+0xc4c>
				hhcd->hc[chnum].state = HC_NAK;
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334d      	adds	r3, #77	@ 0x4d
 8002c00:	2204      	movs	r2, #4
 8002c02:	701a      	strb	r2, [r3, #0]
				(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f004 f89a 	bl	8006d46 <USB_HC_Halt>
			}
		} else {
			/* ... */
		}

		if (hhcd->hc[chnum].do_csplit == 1U) {
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	331b      	adds	r3, #27
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d129      	bne.n	8002c7c <HCD_HC_IN_IRQHandler+0xcb6>
			hhcd->hc[chnum].do_csplit = 0U;
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	331b      	adds	r3, #27
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	0151      	lsls	r1, r2, #5
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	440a      	add	r2, r1
 8002c52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5a:	6053      	str	r3, [r2, #4]
			__HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	0151      	lsls	r1, r2, #5
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	440a      	add	r2, r1
 8002c72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c76:	f043 0320 	orr.w	r3, r3, #32
 8002c7a:	60d3      	str	r3, [r2, #12]
		}

		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2310      	movs	r3, #16
 8002c8c:	6093      	str	r3, [r2, #8]
 8002c8e:	e000      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0xccc>
				return;
 8002c90:	bf00      	nop
	} else {
		/* ... */
	}
}
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HCD_HC_OUT_IRQHandler>:
 * @param  hhcd HCD handle
 * @param  chnum Channel number.
 *         This parameter can be a value from 1 to 15
 * @retval none
 */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg;
	uint32_t num_packets;

	if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR)) {
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 faa1 	bl	80061fe <USB_ReadChInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d11b      	bne.n	8002cfe <HCD_HC_OUT_IRQHandler+0x66>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XACTERR;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334d      	adds	r3, #77	@ 0x4d
 8002ce8:	2207      	movs	r2, #7
 8002cea:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f004 f826 	bl	8006d46 <USB_HC_Halt>
 8002cfa:	f000 bc89 	b.w	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK)) {
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 fa79 	bl	80061fe <USB_ReadChInterrupts>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	f040 8082 	bne.w	8002e1c <HCD_HC_OUT_IRQHandler+0x184>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d24:	461a      	mov	r2, r3
 8002d26:	2320      	movs	r3, #32
 8002d28:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].do_ping == 1U) {
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3319      	adds	r3, #25
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d124      	bne.n	8002d8a <HCD_HC_OUT_IRQHandler+0xf2>
			hhcd->hc[chnum].do_ping = 0U;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3319      	adds	r3, #25
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	334c      	adds	r3, #76	@ 0x4c
 8002d64:	2202      	movs	r2, #2
 8002d66:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].state = HC_ACK;
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	334d      	adds	r3, #77	@ 0x4d
 8002d78:	2203      	movs	r2, #3
 8002d7a:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 ffde 	bl	8006d46 <USB_HC_Halt>
		}

		if ((hhcd->hc[chnum].do_ssplit == 1U)
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	331a      	adds	r3, #26
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f040 8437 	bne.w	8003610 <HCD_HC_OUT_IRQHandler+0x978>
				&& (hhcd->hc[chnum].do_csplit == 0U)) {
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	331b      	adds	r3, #27
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 842b 	bne.w	8003610 <HCD_HC_OUT_IRQHandler+0x978>
			if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC) {
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3326      	adds	r3, #38	@ 0x26
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d009      	beq.n	8002de4 <HCD_HC_OUT_IRQHandler+0x14c>
				hhcd->hc[chnum].do_csplit = 1U;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	331b      	adds	r3, #27
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
			}

			hhcd->hc[chnum].state = HC_ACK;
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	334d      	adds	r3, #77	@ 0x4d
 8002df4:	2203      	movs	r2, #3
 8002df6:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 ffa0 	bl	8006d46 <USB_HC_Halt>

			/* reset error_count */
			hhcd->hc[chnum].ErrCnt = 0U;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3344      	adds	r3, #68	@ 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e3f9      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
		}
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR)) {
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 f9ea 	bl	80061fe <USB_ReadChInterrupts>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e34:	d111      	bne.n	8002e5a <HCD_HC_OUT_IRQHandler+0x1c2>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e42:	461a      	mov	r2, r3
 8002e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e48:	6093      	str	r3, [r2, #8]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 ff77 	bl	8006d46 <USB_HC_Halt>
 8002e58:	e3da      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC)) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 f9cb 	bl	80061fe <USB_ReadChInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d168      	bne.n	8002f44 <HCD_HC_OUT_IRQHandler+0x2ac>
		hhcd->hc[chnum].ErrCnt = 0U;
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3344      	adds	r3, #68	@ 0x44
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

		/* transaction completed with NYET state, update do ping state */
		if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 f9b5 	bl	80061fe <USB_ReadChInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b40      	cmp	r3, #64	@ 0x40
 8002e9c:	d112      	bne.n	8002ec4 <HCD_HC_OUT_IRQHandler+0x22c>
			hhcd->hc[chnum].do_ping = 1U;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3319      	adds	r3, #25
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2340      	movs	r3, #64	@ 0x40
 8002ec2:	6093      	str	r3, [r2, #8]
		}

		if (hhcd->hc[chnum].do_csplit != 0U) {
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	331b      	adds	r3, #27
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d019      	beq.n	8002f0e <HCD_HC_OUT_IRQHandler+0x276>
			hhcd->hc[chnum].do_csplit = 0U;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	331b      	adds	r3, #27
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
			__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	0151      	lsls	r1, r2, #5
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	440a      	add	r2, r1
 8002f04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0c:	6053      	str	r3, [r2, #4]
		}

		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_XFRC;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	334d      	adds	r3, #77	@ 0x4d
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 ff02 	bl	8006d46 <USB_HC_Halt>
 8002f42:	e365      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET)) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 f956 	bl	80061fe <USB_ReadChInterrupts>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	d139      	bne.n	8002fd0 <HCD_HC_OUT_IRQHandler+0x338>
		hhcd->hc[chnum].state = HC_NYET;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	334d      	adds	r3, #77	@ 0x4d
 8002f6c:	2205      	movs	r2, #5
 8002f6e:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ssplit == 0U) {
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	331a      	adds	r3, #26
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HCD_HC_OUT_IRQHandler+0x302>
			hhcd->hc[chnum].do_ping = 1U;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3319      	adds	r3, #25
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
		}

		hhcd->hc[chnum].ErrCnt = 0U;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3344      	adds	r3, #68	@ 0x44
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 fec5 	bl	8006d46 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2340      	movs	r3, #64	@ 0x40
 8002fcc:	6093      	str	r3, [r2, #8]
 8002fce:	e31f      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL)) {
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 f910 	bl	80061fe <USB_ReadChInterrupts>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d11a      	bne.n	800301e <HCD_HC_OUT_IRQHandler+0x386>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	6093      	str	r3, [r2, #8]
		hhcd->hc[chnum].state = HC_STALL;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	334d      	adds	r3, #77	@ 0x4d
 800300a:	2206      	movs	r2, #6
 800300c:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f003 fe95 	bl	8006d46 <USB_HC_Halt>
 800301c:	e2f8      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK)) {
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f003 f8e9 	bl	80061fe <USB_ReadChInterrupts>
 800302c:	4603      	mov	r3, r0
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b10      	cmp	r3, #16
 8003034:	d144      	bne.n	80030c0 <HCD_HC_OUT_IRQHandler+0x428>
		hhcd->hc[chnum].ErrCnt = 0U;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3344      	adds	r3, #68	@ 0x44
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
		hhcd->hc[chnum].state = HC_NAK;
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	334d      	adds	r3, #77	@ 0x4d
 800305a:	2204      	movs	r2, #4
 800305c:	701a      	strb	r2, [r3, #0]

		if (hhcd->hc[chnum].do_ping == 0U) {
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3319      	adds	r3, #25
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d114      	bne.n	800309e <HCD_HC_OUT_IRQHandler+0x406>
			if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH) {
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3318      	adds	r3, #24
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HCD_HC_OUT_IRQHandler+0x406>
				hhcd->hc[chnum].do_ping = 1U;
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3319      	adds	r3, #25
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
			}
		}

		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 fe4d 	bl	8006d46 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	2310      	movs	r3, #16
 80030bc:	6093      	str	r3, [r2, #8]
 80030be:	e2a7      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR)) {
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 f898 	bl	80061fe <USB_ReadChInterrupts>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d4:	2b80      	cmp	r3, #128	@ 0x80
 80030d6:	f040 8083 	bne.w	80031e0 <HCD_HC_OUT_IRQHandler+0x548>
		if (hhcd->Init.dma_enable == 0U) {
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	799b      	ldrb	r3, [r3, #6]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d111      	bne.n	8003106 <HCD_HC_OUT_IRQHandler+0x46e>
			hhcd->hc[chnum].state = HC_XACTERR;
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	334d      	adds	r3, #77	@ 0x4d
 80030f2:	2207      	movs	r2, #7
 80030f4:	701a      	strb	r2, [r3, #0]
			(void) USB_HC_Halt(hhcd->Instance, chnum);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 fe21 	bl	8006d46 <USB_HC_Halt>
 8003104:	e062      	b.n	80031cc <HCD_HC_OUT_IRQHandler+0x534>
		} else {
			hhcd->hc[chnum].ErrCnt++;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3344      	adds	r3, #68	@ 0x44
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1c59      	adds	r1, r3, #1
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4403      	add	r3, r0
 8003126:	3344      	adds	r3, #68	@ 0x44
 8003128:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3344      	adds	r3, #68	@ 0x44
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d922      	bls.n	8003186 <HCD_HC_OUT_IRQHandler+0x4ee>
				hhcd->hc[chnum].ErrCnt = 0U;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3344      	adds	r3, #68	@ 0x44
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
				hhcd->hc[chnum].urb_state = URB_ERROR;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334c      	adds	r3, #76	@ 0x4c
 8003164:	2204      	movs	r2, #4
 8003166:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
				HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334c      	adds	r3, #76	@ 0x4c
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f006 f93a 	bl	80093f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003184:	e022      	b.n	80031cc <HCD_HC_OUT_IRQHandler+0x534>
						hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	334c      	adds	r3, #76	@ 0x4c
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]

				/* Re-activate the channel  */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031b0:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031b8:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6013      	str	r3, [r2, #0]
			}
		}
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	e217      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR)) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f003 f808 	bl	80061fe <USB_ReadChInterrupts>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f8:	d11b      	bne.n	8003232 <HCD_HC_OUT_IRQHandler+0x59a>
		hhcd->hc[chnum].state = HC_DATATGLERR;
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	334d      	adds	r3, #77	@ 0x4d
 800320a:	2209      	movs	r2, #9
 800320c:	701a      	strb	r2, [r3, #0]
		(void) USB_HC_Halt(hhcd->Instance, chnum);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f003 fd95 	bl	8006d46 <USB_HC_Halt>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003228:	461a      	mov	r2, r3
 800322a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800322e:	6093      	str	r3, [r2, #8]
 8003230:	e1ee      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
	} else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH)) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f002 ffdf 	bl	80061fe <USB_ReadChInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	f040 81df 	bne.w	800360a <HCD_HC_OUT_IRQHandler+0x972>
		__HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003258:	461a      	mov	r2, r3
 800325a:	2302      	movs	r3, #2
 800325c:	6093      	str	r3, [r2, #8]

		if (hhcd->hc[chnum].state == HC_XFRC) {
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	334d      	adds	r3, #77	@ 0x4d
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 8093 	bne.w	800339c <HCD_HC_OUT_IRQHandler+0x704>
			hhcd->hc[chnum].state = HC_HALTED;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334d      	adds	r3, #77	@ 0x4d
 8003286:	2202      	movs	r2, #2
 8003288:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_DONE;
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	334c      	adds	r3, #76	@ 0x4c
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]

			if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	3326      	adds	r3, #38	@ 0x26
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d00b      	beq.n	80032cc <HCD_HC_OUT_IRQHandler+0x634>
					|| (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)) {
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	3326      	adds	r3, #38	@ 0x26
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	f040 8190 	bne.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
				if (hhcd->Init.dma_enable == 0U) {
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	799b      	ldrb	r3, [r3, #6]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d115      	bne.n	8003300 <HCD_HC_OUT_IRQHandler+0x668>
					hhcd->hc[chnum].toggle_out ^= 1U;
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	333d      	adds	r3, #61	@ 0x3d
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	f083 0301 	eor.w	r3, r3, #1
 80032ec:	b2d8      	uxtb	r0, r3
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	333d      	adds	r3, #61	@ 0x3d
 80032fc:	4602      	mov	r2, r0
 80032fe:	701a      	strb	r2, [r3, #0]
				}

				if ((hhcd->Init.dma_enable == 1U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	799b      	ldrb	r3, [r3, #6]
 8003304:	2b01      	cmp	r3, #1
 8003306:	f040 8171 	bne.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
						&& (hhcd->hc[chnum].xfer_len > 0U)) {
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	3334      	adds	r3, #52	@ 0x34
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8165 	beq.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
					num_packets = (hhcd->hc[chnum].xfer_len
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3334      	adds	r3, #52	@ 0x34
 8003332:	6819      	ldr	r1, [r3, #0]
							+ hhcd->hc[chnum].max_packet - 1U)
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4403      	add	r3, r0
 8003342:	3328      	adds	r3, #40	@ 0x28
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	440b      	add	r3, r1
 8003348:	1e59      	subs	r1, r3, #1
							/ hhcd->hc[chnum].max_packet;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4403      	add	r3, r0
 8003358:	3328      	adds	r3, #40	@ 0x28
 800335a:	881b      	ldrh	r3, [r3, #0]
					num_packets = (hhcd->hc[chnum].xfer_len
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	60bb      	str	r3, [r7, #8]

					if ((num_packets & 1U) != 0U) {
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 813f 	beq.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
						hhcd->hc[chnum].toggle_out ^= 1U;
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	333d      	adds	r3, #61	@ 0x3d
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	f083 0301 	eor.w	r3, r3, #1
 8003386:	b2d8      	uxtb	r0, r3
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	333d      	adds	r3, #61	@ 0x3d
 8003396:	4602      	mov	r2, r0
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e127      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x954>
					}
				}
			}
		} else if (hhcd->hc[chnum].state == HC_ACK) {
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334d      	adds	r3, #77	@ 0x4d
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d120      	bne.n	80033f4 <HCD_HC_OUT_IRQHandler+0x75c>
			hhcd->hc[chnum].state = HC_HALTED;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	334d      	adds	r3, #77	@ 0x4d
 80033c2:	2202      	movs	r2, #2
 80033c4:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	331b      	adds	r3, #27
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 8107 	bne.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	334c      	adds	r3, #76	@ 0x4c
 80033ee:	2202      	movs	r2, #2
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e0fb      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x954>
			}
		} else if (hhcd->hc[chnum].state == HC_NAK) {
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	334d      	adds	r3, #77	@ 0x4d
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d13a      	bne.n	8003480 <HCD_HC_OUT_IRQHandler+0x7e8>
			hhcd->hc[chnum].state = HC_HALTED;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	334d      	adds	r3, #77	@ 0x4d
 800341a:	2202      	movs	r2, #2
 800341c:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	334c      	adds	r3, #76	@ 0x4c
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]

			if (hhcd->hc[chnum].do_csplit == 1U) {
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	331b      	adds	r3, #27
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 80d1 	bne.w	80035ec <HCD_HC_OUT_IRQHandler+0x954>
				hhcd->hc[chnum].do_csplit = 0U;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	331b      	adds	r3, #27
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
				__HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	0151      	lsls	r1, r2, #5
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	440a      	add	r2, r1
 8003474:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800347c:	6053      	str	r3, [r2, #4]
 800347e:	e0b5      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x954>
			}
		} else if (hhcd->hc[chnum].state == HC_NYET) {
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	334d      	adds	r3, #77	@ 0x4d
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b05      	cmp	r3, #5
 8003494:	d114      	bne.n	80034c0 <HCD_HC_OUT_IRQHandler+0x828>
			hhcd->hc[chnum].state = HC_HALTED;
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	334d      	adds	r3, #77	@ 0x4d
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	334c      	adds	r3, #76	@ 0x4c
 80034ba:	2202      	movs	r2, #2
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e095      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x954>
		} else if (hhcd->hc[chnum].state == HC_STALL) {
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	334d      	adds	r3, #77	@ 0x4d
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d114      	bne.n	8003500 <HCD_HC_OUT_IRQHandler+0x868>
			hhcd->hc[chnum].state = HC_HALTED;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	334d      	adds	r3, #77	@ 0x4d
 80034e6:	2202      	movs	r2, #2
 80034e8:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].urb_state = URB_STALL;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	334c      	adds	r3, #76	@ 0x4c
 80034fa:	2205      	movs	r2, #5
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e075      	b.n	80035ec <HCD_HC_OUT_IRQHandler+0x954>
		} else if ((hhcd->hc[chnum].state == HC_XACTERR)
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334d      	adds	r3, #77	@ 0x4d
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b07      	cmp	r3, #7
 8003514:	d00a      	beq.n	800352c <HCD_HC_OUT_IRQHandler+0x894>
				|| (hhcd->hc[chnum].state == HC_DATATGLERR)) {
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	334d      	adds	r3, #77	@ 0x4d
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b09      	cmp	r3, #9
 800352a:	d170      	bne.n	800360e <HCD_HC_OUT_IRQHandler+0x976>
			hhcd->hc[chnum].state = HC_HALTED;
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	334d      	adds	r3, #77	@ 0x4d
 800353c:	2202      	movs	r2, #2
 800353e:	701a      	strb	r2, [r3, #0]
			hhcd->hc[chnum].ErrCnt++;
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3344      	adds	r3, #68	@ 0x44
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4403      	add	r3, r0
 8003560:	3344      	adds	r3, #68	@ 0x44
 8003562:	6019      	str	r1, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3344      	adds	r3, #68	@ 0x44
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d914      	bls.n	80035a4 <HCD_HC_OUT_IRQHandler+0x90c>
				hhcd->hc[chnum].ErrCnt = 0U;
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3344      	adds	r3, #68	@ 0x44
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
				hhcd->hc[chnum].urb_state = URB_ERROR;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	334c      	adds	r3, #76	@ 0x4c
 800359e:	2204      	movs	r2, #4
 80035a0:	701a      	strb	r2, [r3, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80035a2:	e022      	b.n	80035ea <HCD_HC_OUT_IRQHandler+0x952>
			} else {
				hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	334c      	adds	r3, #76	@ 0x4c
 80035b4:	2202      	movs	r2, #2
 80035b6:	701a      	strb	r2, [r3, #0]

				/* re-activate the channel  */
				tmpreg = USBx_HC(chnum)->HCCHAR;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]
				tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035ce:	60fb      	str	r3, [r7, #12]
				tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035d6:	60fb      	str	r3, [r7, #12]
				USBx_HC(chnum)->HCCHAR = tmpreg;
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6013      	str	r3, [r2, #0]
			if (hhcd->hc[chnum].ErrCnt > 2U) {
 80035ea:	bf00      	nop
		}

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
		HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum,
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334c      	adds	r3, #76	@ 0x4c
 80035fc:	781a      	ldrb	r2, [r3, #0]
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f005 fef8 	bl	80093f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003608:	e002      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
				hhcd->hc[chnum].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
	} else {
		return;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <HCD_HC_OUT_IRQHandler+0x978>
			return;
 800360e:	bf00      	nop
	}
}
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HCD_RXQLVL_IRQHandler>:
/**
 * @brief  Handle Rx Queue Level interrupt requests.
 * @param  hhcd HCD handle
 * @retval none
 */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd) {
 8003616:	b580      	push	{r7, lr}
 8003618:	b08a      	sub	sp, #40	@ 0x28
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t USBx_BASE = (uint32_t) USBx;
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	623b      	str	r3, [r7, #32]
	uint32_t GrxstspReg;
	uint32_t xferSizePktCnt;
	uint32_t tmpreg;
	uint32_t chnum;

	GrxstspReg = hhcd->Instance->GRXSTSP;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	61fb      	str	r3, [r7, #28]
	chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	61bb      	str	r3, [r7, #24]
	pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	0c5b      	lsrs	r3, r3, #17
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	617b      	str	r3, [r7, #20]
	pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800364a:	613b      	str	r3, [r7, #16]

	switch (pktsts) {
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d004      	beq.n	800365c <HCD_RXQLVL_IRQHandler+0x46>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b05      	cmp	r3, #5
 8003656:	f000 80b6 	beq.w	80037c6 <HCD_RXQLVL_IRQHandler+0x1b0>
		break;

	case GRXSTS_PKTSTS_IN_XFER_COMP:
	case GRXSTS_PKTSTS_CH_HALTED:
	default:
		break;
 800365a:	e0b7      	b.n	80037cc <HCD_RXQLVL_IRQHandler+0x1b6>
		if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void*) 0)) {
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80b3 	beq.w	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	332c      	adds	r3, #44	@ 0x2c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80a7 	beq.w	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
			if ((hhcd->hc[chnum].xfer_count + pktcnt)
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	3338      	adds	r3, #56	@ 0x38
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	18d1      	adds	r1, r2, r3
					<= hhcd->hc[chnum].xfer_len) {
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4403      	add	r3, r0
 80036a0:	3334      	adds	r3, #52	@ 0x34
 80036a2:	681b      	ldr	r3, [r3, #0]
			if ((hhcd->hc[chnum].xfer_count + pktcnt)
 80036a4:	4299      	cmp	r1, r3
 80036a6:	f200 8083 	bhi.w	80037b0 <HCD_RXQLVL_IRQHandler+0x19a>
				(void) USB_ReadPacket(hhcd->Instance, hhcd->hc[chnum].xfer_buff,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4613      	mov	r3, r2
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	332c      	adds	r3, #44	@ 0x2c
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	b292      	uxth	r2, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f002 fd2f 	bl	8006128 <USB_ReadPacket>
				hhcd->hc[chnum].xfer_buff += pktcnt;
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	332c      	adds	r3, #44	@ 0x2c
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	18d1      	adds	r1, r2, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4403      	add	r3, r0
 80036ee:	332c      	adds	r3, #44	@ 0x2c
 80036f0:	6019      	str	r1, [r3, #0]
				hhcd->hc[chnum].xfer_count += pktcnt;
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3338      	adds	r3, #56	@ 0x38
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	18d1      	adds	r1, r2, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4403      	add	r3, r0
 8003716:	3338      	adds	r3, #56	@ 0x38
 8003718:	6019      	str	r1, [r3, #0]
						(USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	0cdb      	lsrs	r3, r3, #19
				xferSizePktCnt =
 800372a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372e:	60fb      	str	r3, [r7, #12]
				if ((hhcd->hc[chnum].max_packet == pktcnt)
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3328      	adds	r3, #40	@ 0x28
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4293      	cmp	r3, r2
 8003748:	d13f      	bne.n	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
						&& (xferSizePktCnt > 0U)) {
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03c      	beq.n	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
					tmpreg = USBx_HC(chnum)->HCCHAR;
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60bb      	str	r3, [r7, #8]
					tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003766:	60bb      	str	r3, [r7, #8]
					tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800376e:	60bb      	str	r3, [r7, #8]
					USBx_HC(chnum)->HCCHAR = tmpreg;
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800377c:	461a      	mov	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6013      	str	r3, [r2, #0]
					hhcd->hc[chnum].toggle_in ^= 1U;
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	333c      	adds	r3, #60	@ 0x3c
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2d8      	uxtb	r0, r3
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	333c      	adds	r3, #60	@ 0x3c
 80037aa:	4602      	mov	r2, r0
 80037ac:	701a      	strb	r2, [r3, #0]
		break;
 80037ae:	e00c      	b.n	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
				hhcd->hc[chnum].urb_state = URB_ERROR;
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	334c      	adds	r3, #76	@ 0x4c
 80037c0:	2204      	movs	r2, #4
 80037c2:	701a      	strb	r2, [r3, #0]
		break;
 80037c4:	e001      	b.n	80037ca <HCD_RXQLVL_IRQHandler+0x1b4>
		break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HCD_RXQLVL_IRQHandler+0x1b6>
		break;
 80037ca:	bf00      	nop
	}
}
 80037cc:	bf00      	nop
 80037ce:	3728      	adds	r7, #40	@ 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HCD_Port_IRQHandler>:
/**
 * @brief  Handle Host Port interrupt requests.
 * @param  hhcd HCD handle
 * @retval None
 */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	617b      	str	r3, [r7, #20]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	613b      	str	r3, [r7, #16]
	__IO uint32_t hprt0;
	__IO uint32_t hprt0_dup;

	/* Handle Host Port Interrupts */
	hprt0 = USBx_HPRT0;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]
	hprt0_dup = USBx_HPRT0;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]

	hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003800:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	/* Check whether Port Connect detected */
	if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET) {
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b02      	cmp	r3, #2
 800380a:	d10b      	bne.n	8003824 <HCD_Port_IRQHandler+0x50>
		if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS) {
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HCD_Port_IRQHandler+0x48>
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
			HAL_HCD_Connect_Callback(hhcd);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f005 fdd2 	bl	80093c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		}
		hprt0_dup |= USB_OTG_HPRT_PCDET;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f043 0302 	orr.w	r3, r3, #2
 8003822:	60bb      	str	r3, [r7, #8]
	}

	/* Check whether Port Enable Changed */
	if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG) {
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b08      	cmp	r3, #8
 800382c:	d132      	bne.n	8003894 <HCD_Port_IRQHandler+0xc0>
		hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f043 0308 	orr.w	r3, r3, #8
 8003834:	60bb      	str	r3, [r7, #8]

		if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA) {
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b04      	cmp	r3, #4
 800383e:	d126      	bne.n	800388e <HCD_Port_IRQHandler+0xba>
			if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY) {
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7a5b      	ldrb	r3, [r3, #9]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d113      	bne.n	8003870 <HCD_Port_IRQHandler+0x9c>
				if ((hprt0 & USB_OTG_HPRT_PSPD)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800384e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003852:	d106      	bne.n	8003862 <HCD_Port_IRQHandler+0x8e>
						== (HPRT0_PRTSPD_LOW_SPEED << 17)) {
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f002 fdf4 	bl	8006448 <USB_InitFSLSPClkSel>
 8003860:	e011      	b.n	8003886 <HCD_Port_IRQHandler+0xb2>
				} else {
					(void) USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f002 fded 	bl	8006448 <USB_InitFSLSPClkSel>
 800386e:	e00a      	b.n	8003886 <HCD_Port_IRQHandler+0xb2>
				}
			} else {
				if (hhcd->Init.speed == HCD_SPEED_FULL) {
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	79db      	ldrb	r3, [r3, #7]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d106      	bne.n	8003886 <HCD_Port_IRQHandler+0xb2>
					USBx_HOST->HFIR = HFIR_60_MHZ;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800387e:	461a      	mov	r2, r3
 8003880:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003884:	6053      	str	r3, [r2, #4]
				}
			}
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
			HAL_HCD_PortEnabled_Callback(hhcd);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f005 fdc4 	bl	8009414 <HAL_HCD_PortEnabled_Callback>
 800388c:	e002      	b.n	8003894 <HCD_Port_IRQHandler+0xc0>

		} else {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
			HAL_HCD_PortDisabled_Callback(hhcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f005 fdce 	bl	8009430 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
		}
	}

	/* Check for an overcurrent */
	if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG) {
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b20      	cmp	r3, #32
 800389c:	d103      	bne.n	80038a6 <HCD_Port_IRQHandler+0xd2>
		hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f043 0320 	orr.w	r3, r3, #32
 80038a4:	60bb      	str	r3, [r7, #8]
	}

	/* Clear Port Interrupts */
	USBx_HPRT0 = hprt0_dup;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038ac:	461a      	mov	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	6013      	str	r3, [r2, #0]
}
 80038b2:	bf00      	nop
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e12b      	b.n	8003b26 <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd f940 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	@ 0x24
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800390e:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800391e:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8003920:	f001 fa20 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 8003924:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4a81      	ldr	r2, [pc, #516]	@ (8003b30 <HAL_I2C_Init+0x274>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d807      	bhi.n	8003940 <HAL_I2C_Init+0x84>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a80      	ldr	r2, [pc, #512]	@ (8003b34 <HAL_I2C_Init+0x278>)
 8003934:	4293      	cmp	r3, r2
 8003936:	bf94      	ite	ls
 8003938:	2301      	movls	r3, #1
 800393a:	2300      	movhi	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e006      	b.n	800394e <HAL_I2C_Init+0x92>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a7d      	ldr	r2, [pc, #500]	@ (8003b38 <HAL_I2C_Init+0x27c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	bf94      	ite	ls
 8003948:	2301      	movls	r3, #1
 800394a:	2300      	movhi	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0e7      	b.n	8003b26 <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a78      	ldr	r2, [pc, #480]	@ (8003b3c <HAL_I2C_Init+0x280>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0c9b      	lsrs	r3, r3, #18
 8003960:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a6a      	ldr	r2, [pc, #424]	@ (8003b30 <HAL_I2C_Init+0x274>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d802      	bhi.n	8003990 <HAL_I2C_Init+0xd4>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3301      	adds	r3, #1
 800398e:	e009      	b.n	80039a4 <HAL_I2C_Init+0xe8>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	4a69      	ldr	r2, [pc, #420]	@ (8003b40 <HAL_I2C_Init+0x284>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	3301      	adds	r3, #1
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	495c      	ldr	r1, [pc, #368]	@ (8003b30 <HAL_I2C_Init+0x274>)
 80039c0:	428b      	cmp	r3, r1
 80039c2:	d819      	bhi.n	80039f8 <HAL_I2C_Init+0x13c>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e59      	subs	r1, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d2:	1c59      	adds	r1, r3, #1
 80039d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039d8:	400b      	ands	r3, r1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_I2C_Init+0x138>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1e59      	subs	r1, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f2:	e051      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 80039f4:	2304      	movs	r3, #4
 80039f6:	e04f      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <HAL_I2C_Init+0x168>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	440b      	add	r3, r1
 8003a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e012      	b.n	8003a4a <HAL_I2C_Init+0x18e>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1e58      	subs	r0, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	0099      	lsls	r1, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Init+0x196>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e022      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10e      	bne.n	8003a78 <HAL_I2C_Init+0x1bc>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1e58      	subs	r0, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	440b      	add	r3, r1
 8003a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a76:	e00f      	b.n	8003a98 <HAL_I2C_Init+0x1dc>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1e58      	subs	r0, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	0099      	lsls	r1, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	6809      	ldr	r1, [r1, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69da      	ldr	r2, [r3, #28]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6911      	ldr	r1, [r2, #16]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68d2      	ldr	r2, [r2, #12]
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	@ 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	000186a0 	.word	0x000186a0
 8003b34:	001e847f 	.word	0x001e847f
 8003b38:	003d08ff 	.word	0x003d08ff
 8003b3c:	431bde83 	.word	0x431bde83
 8003b40:	10624dd3 	.word	0x10624dd3

08003b44 <HAL_I2S_Init>:
 *         in the I2S_InitTypeDef and create the associated handle.
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
	uint16_t tmpreg;
#endif

	/* Check the I2S handle allocation */
	if (hi2s == NULL) {
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_I2S_Init+0x12>
		return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e128      	b.n	8003da8 <HAL_I2S_Init+0x264>
	assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
	assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
	assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
	assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

	if (hi2s->State == HAL_I2S_STATE_RESET) {
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_I2S_Init+0x32>
		/* Allocate lock resource and initialize it */
		hi2s->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

		/* Initialize Default I2S IrqHandler ISR */
		hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a90      	ldr	r2, [pc, #576]	@ (8003db0 <HAL_I2S_Init+0x26c>)
 8003b6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
		/* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
		HAL_I2S_MspInit(hi2s);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7fd f841 	bl	8000bf8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}

	hi2s->State = HAL_I2S_STATE_BUSY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	CLEAR_BIT(hi2s->Instance->I2SCFGR,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b8c:	f023 030f 	bic.w	r3, r3, #15
 8003b90:	61d3      	str	r3, [r2, #28]
			(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
	hi2s->Instance->I2SPR = 0x0002U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2202      	movs	r2, #2
 8003b98:	621a      	str	r2, [r3, #32]

	/*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
	/* If the requested audio frequency is not the default, compute the prescaler */
	if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT) {
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d060      	beq.n	8003c64 <HAL_I2S_Init+0x120>
		/* Check the frame length (For the Prescaler computing) ********************/
		if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B) {
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <HAL_I2S_Init+0x6c>
			/* Packet length is 16 bits */
			packetlength = 16U;
 8003baa:	2310      	movs	r3, #16
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e001      	b.n	8003bb4 <HAL_I2S_Init+0x70>
		} else {
			/* Packet length is 32 bits */
			packetlength = 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	617b      	str	r3, [r7, #20]
		}

		/* I2S standard */
		if (hi2s->Init.Standard <= I2S_STANDARD_LSB) {
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d802      	bhi.n	8003bc2 <HAL_I2S_Init+0x7e>
			/* In I2S standard packet length is multiplied by 2 */
			packetlength = packetlength * 2U;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
		i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	f001 f9c4 	bl	8004f50 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bc8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

		/* Compute the Real divider depending on the MCLK output state, with a floating point */
		if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE) {
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bd2:	d125      	bne.n	8003c20 <HAL_I2S_Init+0xdc>
			/* MCLK output is enabled */
			if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_I2S_Init+0xba>
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 4U)) * 10U)
 8003bf8:	3305      	adds	r3, #5
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e01f      	b.n	8003c3e <HAL_I2S_Init+0xfa>
			} else {
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	461a      	mov	r2, r3
						/ hi2s->Init.AudioFreq)) + 5U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
				tmp = (uint32_t) (((((i2sclk / (packetlength * 8U)) * 10U)
 8003c1a:	3305      	adds	r3, #5
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e00e      	b.n	8003c3e <HAL_I2S_Init+0xfa>
			}
		} else {
			/* MCLK output is disabled */
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	461a      	mov	r2, r3
					/ hi2s->Init.AudioFreq)) + 5U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
			tmp = (uint32_t) (((((i2sclk / packetlength) * 10U)
 8003c3a:	3305      	adds	r3, #5
 8003c3c:	613b      	str	r3, [r7, #16]
		}

		/* Remove the flatting point */
		tmp = tmp / 10U;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4a5c      	ldr	r2, [pc, #368]	@ (8003db4 <HAL_I2S_Init+0x270>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	08db      	lsrs	r3, r3, #3
 8003c48:	613b      	str	r3, [r7, #16]

		/* Check the parity of the divider */
		i2sodd = (uint32_t) (tmp & (uint32_t) 1U);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]

		/* Compute the i2sdiv prescaler */
		i2sdiv = (uint32_t) ((tmp - i2sodd) / 2U);
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]

		/* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
		i2sodd = (uint32_t) (i2sodd << 8U);
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	e003      	b.n	8003c6c <HAL_I2S_Init+0x128>
	} else {
		/* Set the default values */
		i2sdiv = 2U;
 8003c64:	2302      	movs	r3, #2
 8003c66:	61fb      	str	r3, [r7, #28]
		i2sodd = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
	}

	/* Test if the divider is 1 or 0 or greater than 0xFF */
	if ((i2sdiv < 2U) || (i2sdiv > 0xFFU)) {
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d902      	bls.n	8003c78 <HAL_I2S_Init+0x134>
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2bff      	cmp	r3, #255	@ 0xff
 8003c76:	d907      	bls.n	8003c88 <HAL_I2S_Init+0x144>
		/* Set the error code and execute error callback*/
		SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7c:	f043 0210 	orr.w	r2, r3, #16
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	645a      	str	r2, [r3, #68]	@ 0x44
		return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e08f      	b.n	8003da8 <HAL_I2S_Init+0x264>

	/*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

	/* Write to SPIx I2SPR register the computed value */
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
			| (uint32_t) (i2sodd | (uint32_t) hi2s->Init.MCLKOutput));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	ea42 0103 	orr.w	r1, r2, r3
	hi2s->Instance->I2SPR = (uint32_t) ((uint32_t) i2sdiv
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	621a      	str	r2, [r3, #32]

	/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
	/* And configure the I2S with the I2S_InitStruct values                      */
	MODIFY_REG(hi2s->Instance->I2SCFGR,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ca6:	f023 030f 	bic.w	r3, r3, #15
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6851      	ldr	r1, [r2, #4]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6892      	ldr	r2, [r2, #8]
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68d2      	ldr	r2, [r2, #12]
 8003cb8:	4311      	orrs	r1, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6992      	ldr	r2, [r2, #24]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

	/* Configure the I2S extended if the full duplex mode is enabled */
	assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

	if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d161      	bne.n	8003d98 <HAL_I2S_Init+0x254>
		/* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
		hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a38      	ldr	r2, [pc, #224]	@ (8003db8 <HAL_I2S_Init+0x274>)
 8003cd8:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
		CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a37      	ldr	r2, [pc, #220]	@ (8003dbc <HAL_I2S_Init+0x278>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2S_Init+0x1a4>
 8003ce4:	4b36      	ldr	r3, [pc, #216]	@ (8003dc0 <HAL_I2S_Init+0x27c>)
 8003ce6:	e001      	b.n	8003cec <HAL_I2S_Init+0x1a8>
 8003ce8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	4932      	ldr	r1, [pc, #200]	@ (8003dbc <HAL_I2S_Init+0x278>)
 8003cf4:	428a      	cmp	r2, r1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2S_Init+0x1b8>
 8003cf8:	4a31      	ldr	r2, [pc, #196]	@ (8003dc0 <HAL_I2S_Init+0x27c>)
 8003cfa:	e001      	b.n	8003d00 <HAL_I2S_Init+0x1bc>
 8003cfc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003d00:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d04:	f023 030f 	bic.w	r3, r3, #15
 8003d08:	61d3      	str	r3, [r2, #28]
				(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
		I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8003dbc <HAL_I2S_Init+0x278>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d101      	bne.n	8003d18 <HAL_I2S_Init+0x1d4>
 8003d14:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc0 <HAL_I2S_Init+0x27c>)
 8003d16:	e001      	b.n	8003d1c <HAL_I2S_Init+0x1d8>
 8003d18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	621a      	str	r2, [r3, #32]

		/* Get the I2SCFGR register value */
		tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a25      	ldr	r2, [pc, #148]	@ (8003dbc <HAL_I2S_Init+0x278>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_I2S_Init+0x1ea>
 8003d2a:	4b25      	ldr	r3, [pc, #148]	@ (8003dc0 <HAL_I2S_Init+0x27c>)
 8003d2c:	e001      	b.n	8003d32 <HAL_I2S_Init+0x1ee>
 8003d2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	817b      	strh	r3, [r7, #10]

		/* Get the mode to be configured for the extended I2S */
		if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d3e:	d003      	beq.n	8003d48 <HAL_I2S_Init+0x204>
				|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <HAL_I2S_Init+0x20c>
			tmp = I2S_MODE_SLAVE_RX;
 8003d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e001      	b.n	8003d54 <HAL_I2S_Init+0x210>
		} else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
		{
			tmp = I2S_MODE_SLAVE_TX;
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]
		}

		/* Configure the I2S Slave with the I2S Master parameter values */
		tmpreg |=
				(uint16_t) ((uint16_t) SPI_I2SCFGR_I2SMOD | (uint16_t) tmp
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.Standard
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	b29b      	uxth	r3, r3
		tmpreg |=
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.DataFormat
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	b29b      	uxth	r3, r3
		tmpreg |=
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	b29a      	uxth	r2, r3
						| (uint16_t) hi2s->Init.CPOL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	b29b      	uxth	r3, r3
		tmpreg |=
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	897b      	ldrh	r3, [r7, #10]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d80:	817b      	strh	r3, [r7, #10]

		/* Write to SPIx I2SCFGR */
		WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a0d      	ldr	r2, [pc, #52]	@ (8003dbc <HAL_I2S_Init+0x278>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_I2S_Init+0x24c>
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc0 <HAL_I2S_Init+0x27c>)
 8003d8e:	e001      	b.n	8003d94 <HAL_I2S_Init+0x250>
 8003d90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d94:	897a      	ldrh	r2, [r7, #10]
 8003d96:	61da      	str	r2, [r3, #28]
	}
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	645a      	str	r2, [r3, #68]	@ 0x44
	hi2s->State = HAL_I2S_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	08003ebb 	.word	0x08003ebb
 8003db4:	cccccccd 	.word	0xcccccccd
 8003db8:	08003fd1 	.word	0x08003fd1
 8003dbc:	40003800 	.word	0x40003800
 8003dc0:	40003400 	.word	0x40003400

08003dc4 <HAL_I2S_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_TxCpltCallback could be implemented in the user file
	 */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_I2S_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_I2S_ErrorCallback>:
 * @brief  I2S error callbacks
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_I2S_ErrorCallback could be implemented in the user file
	 */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <I2S_Transmit_IT>:
 * @brief  Transmit an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	/* Transmit data */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60da      	str	r2, [r3, #12]
	hi2s->pTxBuffPtr++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	1c9a      	adds	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	@ 0x24
	hi2s->TxXferCount--;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10e      	bne.n	8003e54 <I2S_Transmit_IT+0x54>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e44:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
		HAL_I2S_TxCpltCallback(hi2s);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ffb8 	bl	8003dc4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <I2S_Receive_IT>:
 * @brief  Receive an amount of data in non-blocking mode with Interrupt
 * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	/* Receive data */
	(*hi2s->pRxBuffPtr) = (uint16_t) hi2s->Instance->DR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	801a      	strh	r2, [r3, #0]
	hi2s->pRxBuffPtr++;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	1c9a      	adds	r2, r3, #2
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hi2s->RxXferCount--;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10e      	bne.n	8003eb2 <I2S_Receive_IT+0x56>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ea2:	605a      	str	r2, [r3, #4]

		hi2s->State = HAL_I2S_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		/* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
		HAL_I2S_RxCpltCallback(hi2s);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff ff93 	bl	8003dd8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
	}
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <I2S_IRQHandler>:
 * @brief  This function handles I2S interrupt request.
 * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
 *         the configuration information for I2S module
 * @retval None
 */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s) {
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b086      	sub	sp, #24
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	617b      	str	r3, [r7, #20]

	if (hi2s->State == HAL_I2S_STATE_BUSY_RX) {
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d13a      	bne.n	8003f4c <I2S_IRQHandler+0x92>
		/* I2S in mode Receiver ------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d109      	bne.n	8003ef4 <I2S_IRQHandler+0x3a>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET)) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d102      	bne.n	8003ef4 <I2S_IRQHandler+0x3a>
			I2S_Receive_IT(hi2s);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ffb4 	bl	8003e5c <I2S_Receive_IT>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efa:	2b40      	cmp	r3, #64	@ 0x40
 8003efc:	d126      	bne.n	8003f4c <I2S_IRQHandler+0x92>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d11f      	bne.n	8003f4c <I2S_IRQHandler+0x92>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f1a:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	693b      	ldr	r3, [r7, #16]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f043 0202 	orr.w	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ff50 	bl	8003dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}

	if (hi2s->State == HAL_I2S_STATE_BUSY_TX) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d136      	bne.n	8003fc6 <I2S_IRQHandler+0x10c>
		/* I2S in mode Transmitter -----------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d109      	bne.n	8003f76 <I2S_IRQHandler+0xbc>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET)) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6c:	2b80      	cmp	r3, #128	@ 0x80
 8003f6e:	d102      	bne.n	8003f76 <I2S_IRQHandler+0xbc>
			I2S_Transmit_IT(hi2s);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ff45 	bl	8003e00 <I2S_Transmit_IT>
		}

		/* I2S Underrun error interrupt occurred --------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d122      	bne.n	8003fc6 <I2S_IRQHandler+0x10c>
				&& (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET)) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d11b      	bne.n	8003fc6 <I2S_IRQHandler+0x10c>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f9c:	605a      	str	r2, [r3, #4]

			/* Clear Underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb8:	f043 0204 	orr.w	r2, r3, #4
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ff13 	bl	8003dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8003fc6:	bf00      	nop
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_I2SEx_FullDuplex_IRQHandler>:
/**
 * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
 * @param  hi2s I2S handle
 * @retval HAL status
 */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a92      	ldr	r2, [pc, #584]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003fea:	4b92      	ldr	r3, [pc, #584]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fec:	e001      	b.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003fee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	61bb      	str	r3, [r7, #24]
	__IO uint32_t i2scr2 = hi2s->Instance->CR2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	617b      	str	r3, [r7, #20]
	__IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a8b      	ldr	r2, [pc, #556]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004008:	4b8a      	ldr	r3, [pc, #552]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800400a:	e001      	b.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800400c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	613b      	str	r3, [r7, #16]

	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800401c:	d004      	beq.n	8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
			|| (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 8099 	bne.w	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
		/* I2S in mode Transmitter -------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d107      	bne.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
				&& ((i2scr2 & I2S_IT_TXE) != RESET)) {
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2S(hi2s);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f925 	bl	800428c <I2SEx_TxISR_I2S>
		}

		/* I2Sext in mode Receiver -----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d107      	bne.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
				&& ((i2sextcr2 & I2S_IT_RXNE) != RESET)) {
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2SExt(hi2s);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9c8 	bl	80043ec <I2SEx_RxISR_I2SExt>
		}

		/* I2Sext Overrun error interrupt occurred --------------------------------*/
		if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d13a      	bne.n	80040dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d035      	beq.n	80040dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a6e      	ldr	r2, [pc, #440]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800407a:	4b6e      	ldr	r3, [pc, #440]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800407c:	e001      	b.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800407e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4969      	ldr	r1, [pc, #420]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800408a:	428b      	cmp	r3, r1
 800408c:	d101      	bne.n	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800408e:	4b69      	ldr	r3, [pc, #420]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004090:	e001      	b.n	8004096 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004092:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004096:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800409a:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040aa:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	f043 0202 	orr.w	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fe88 	bl	8003dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2S Underrun error interrupt occurred ----------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	f040 80c3 	bne.w	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80bd 	beq.w	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004102:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a49      	ldr	r2, [pc, #292]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800410e:	4b49      	ldr	r3, [pc, #292]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004110:	e001      	b.n	8004116 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004112:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4944      	ldr	r1, [pc, #272]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800411e:	428b      	cmp	r3, r1
 8004120:	d101      	bne.n	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004122:	4b44      	ldr	r3, [pc, #272]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004124:	e001      	b.n	800412a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004126:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800412a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800412e:	605a      	str	r2, [r3, #4]

			/* Clear underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004130:	2300      	movs	r3, #0
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f043 0204 	orr.w	r2, r3, #4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fe4a 	bl	8003dec <HAL_I2S_ErrorCallback>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 8004158:	e089      	b.n	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
		}
	}
	/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
	else {
		/* I2Sext in mode Transmitter ----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d107      	bne.n	8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
				&& ((i2sextcr2 & I2S_IT_TXE) != RESET)) {
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2SExt(hi2s);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8be 	bl	80042f0 <I2SEx_TxISR_I2SExt>
		}

		/* I2S in mode Receiver --------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d107      	bne.n	800418e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
				&& ((i2scr2 & I2S_IT_RXNE) != RESET)) {
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2S(hi2s);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8fd 	bl	8004388 <I2SEx_RxISR_I2S>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d12f      	bne.n	80041f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
				&& ((i2scr2 & I2S_IT_ERR) != RESET)) {
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02a      	beq.n	80041f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041b0:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041be:	e001      	b.n	80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4919      	ldr	r1, [pc, #100]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041cc:	428b      	cmp	r3, r1
 80041ce:	d101      	bne.n	80041d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80041d0:	4b18      	ldr	r3, [pc, #96]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041d2:	e001      	b.n	80041d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80041d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041dc:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	f043 0202 	orr.w	r2, r3, #2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff fdfa 	bl	8003dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2Sext Underrun error interrupt occurred -------------------------------*/
		if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d136      	bne.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
				&& ((i2sextcr2 & I2S_IT_ERR) != RESET)) {
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d031      	beq.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a07      	ldr	r2, [pc, #28]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d101      	bne.n	800421a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004216:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004218:	e001      	b.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800421a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4902      	ldr	r1, [pc, #8]	@ (8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004226:	428b      	cmp	r3, r1
 8004228:	d106      	bne.n	8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800422a:	4b02      	ldr	r3, [pc, #8]	@ (8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800422c:	e006      	b.n	800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800422e:	bf00      	nop
 8004230:	40003800 	.word	0x40003800
 8004234:	40003400 	.word	0x40003400
 8004238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800423c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004240:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004250:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	645a      	str	r2, [r3, #68]	@ 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fdc0 	bl	8003dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 800426c:	e000      	b.n	8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR)
 800426e:	bf00      	nop
}
 8004270:	bf00      	nop
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_I2SEx_TxRxCpltCallback>:
/**
 * @brief  Tx and Rx Transfer completed callback
 * @param  hi2s I2S handle
 * @retval None
 */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
	 */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <I2SEx_TxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	1c99      	adds	r1, r3, #2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6251      	str	r1, [r2, #36]	@ 0x24
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d113      	bne.n	80042e6 <I2SEx_TxISR_I2S+0x5a>
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042cc:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <I2SEx_TxISR_I2S+0x5a>
			hi2s->State = HAL_I2S_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff ffc9 	bl	8004278 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <I2SEx_TxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	1c99      	adds	r1, r3, #2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6251      	str	r1, [r2, #36]	@ 0x24
 8004302:	8819      	ldrh	r1, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1d      	ldr	r2, [pc, #116]	@ (8004380 <I2SEx_TxISR_I2SExt+0x90>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <I2SEx_TxISR_I2SExt+0x22>
 800430e:	4b1d      	ldr	r3, [pc, #116]	@ (8004384 <I2SEx_TxISR_I2SExt+0x94>)
 8004310:	e001      	b.n	8004316 <I2SEx_TxISR_I2SExt+0x26>
 8004312:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004316:	460a      	mov	r2, r1
 8004318:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	855a      	strh	r2, [r3, #42]	@ 0x2a

	if (hi2s->TxXferCount == 0U) {
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d121      	bne.n	8004376 <I2SEx_TxISR_I2SExt+0x86>
		/* Disable I2Sext TXE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a12      	ldr	r2, [pc, #72]	@ (8004380 <I2SEx_TxISR_I2SExt+0x90>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <I2SEx_TxISR_I2SExt+0x50>
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <I2SEx_TxISR_I2SExt+0x94>)
 800433e:	e001      	b.n	8004344 <I2SEx_TxISR_I2SExt+0x54>
 8004340:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	490d      	ldr	r1, [pc, #52]	@ (8004380 <I2SEx_TxISR_I2SExt+0x90>)
 800434c:	428b      	cmp	r3, r1
 800434e:	d101      	bne.n	8004354 <I2SEx_TxISR_I2SExt+0x64>
 8004350:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <I2SEx_TxISR_I2SExt+0x94>)
 8004352:	e001      	b.n	8004358 <I2SEx_TxISR_I2SExt+0x68>
 8004354:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004358:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800435c:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U) {
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <I2SEx_TxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff81 	bl	8004278 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40003800 	.word	0x40003800
 8004384:	40003400 	.word	0x40003400

08004388 <I2SEx_RxISR_I2S>:
/**
 * @brief  I2S Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68d8      	ldr	r0, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	1c99      	adds	r1, r3, #2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80043a0:	b282      	uxth	r2, r0
 80043a2:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d113      	bne.n	80043e4 <I2SEx_RxISR_I2S+0x5c>
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043ca:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <I2SEx_RxISR_I2S+0x5c>
			hi2s->State = HAL_I2S_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff ff4a 	bl	8004278 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <I2SEx_RxISR_I2SExt>:
/**
 * @brief  I2SExt Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a20      	ldr	r2, [pc, #128]	@ (800447c <I2SEx_RxISR_I2SExt+0x90>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <I2SEx_RxISR_I2SExt+0x16>
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <I2SEx_RxISR_I2SExt+0x94>)
 8004400:	e001      	b.n	8004406 <I2SEx_RxISR_I2SExt+0x1a>
 8004402:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004406:	68d8      	ldr	r0, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	1c99      	adds	r1, r3, #2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004412:	b282      	uxth	r2, r0
 8004414:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	865a      	strh	r2, [r3, #50]	@ 0x32

	if (hi2s->RxXferCount == 0U) {
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d121      	bne.n	8004472 <I2SEx_RxISR_I2SExt+0x86>
		/* Disable I2Sext RXNE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a12      	ldr	r2, [pc, #72]	@ (800447c <I2SEx_RxISR_I2SExt+0x90>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <I2SEx_RxISR_I2SExt+0x50>
 8004438:	4b11      	ldr	r3, [pc, #68]	@ (8004480 <I2SEx_RxISR_I2SExt+0x94>)
 800443a:	e001      	b.n	8004440 <I2SEx_RxISR_I2SExt+0x54>
 800443c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	490d      	ldr	r1, [pc, #52]	@ (800447c <I2SEx_RxISR_I2SExt+0x90>)
 8004448:	428b      	cmp	r3, r1
 800444a:	d101      	bne.n	8004450 <I2SEx_RxISR_I2SExt+0x64>
 800444c:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <I2SEx_RxISR_I2SExt+0x94>)
 800444e:	e001      	b.n	8004454 <I2SEx_RxISR_I2SExt+0x68>
 8004450:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004454:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004458:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U) {
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <I2SEx_RxISR_I2SExt+0x86>
			hi2s->State = HAL_I2S_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ff03 	bl	8004278 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40003800 	.word	0x40003800
 8004480:	40003400 	.word	0x40003400

08004484 <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e267      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d075      	beq.n	800458e <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044a2:	4b88      	ldr	r3, [pc, #544]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d00c      	beq.n	80044c8 <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044ae:	4b85      	ldr	r3, [pc, #532]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d112      	bne.n	80044e0 <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80044ba:	4b82      	ldr	r3, [pc, #520]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c8:	4b7e      	ldr	r3, [pc, #504]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d05b      	beq.n	800458c <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d157      	bne.n	800458c <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e242      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e8:	d106      	bne.n	80044f8 <HAL_RCC_OscConfig+0x74>
 80044ea:	4b76      	ldr	r3, [pc, #472]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a75      	ldr	r2, [pc, #468]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e01d      	b.n	8004534 <HAL_RCC_OscConfig+0xb0>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004500:	d10c      	bne.n	800451c <HAL_RCC_OscConfig+0x98>
 8004502:	4b70      	ldr	r3, [pc, #448]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6f      	ldr	r2, [pc, #444]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b6d      	ldr	r3, [pc, #436]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6c      	ldr	r2, [pc, #432]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e00b      	b.n	8004534 <HAL_RCC_OscConfig+0xb0>
 800451c:	4b69      	ldr	r3, [pc, #420]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a68      	ldr	r2, [pc, #416]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b66      	ldr	r3, [pc, #408]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a65      	ldr	r2, [pc, #404]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 800452e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004532:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d013      	beq.n	8004564 <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800453c:	f7fc fd92 	bl	8001064 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004544:	f7fc fd8e 	bl	8001064 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	@ 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e207      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004556:	4b5b      	ldr	r3, [pc, #364]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0xc0>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004564:	f7fc fd7e 	bl	8001064 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800456c:	f7fc fd7a 	bl	8001064 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	@ 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e1f3      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800457e:	4b51      	ldr	r3, [pc, #324]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0xe8>
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458c:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d063      	beq.n	8004662 <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800459a:	4b4a      	ldr	r3, [pc, #296]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045a6:	4b47      	ldr	r3, [pc, #284]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d11c      	bne.n	80045ec <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80045b2:	4b44      	ldr	r3, [pc, #272]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d116      	bne.n	80045ec <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045be:	4b41      	ldr	r3, [pc, #260]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d001      	beq.n	80045d6 <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e1c7      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80045d6:	4b3b      	ldr	r3, [pc, #236]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4937      	ldr	r1, [pc, #220]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e03a      	b.n	8004662 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d020      	beq.n	8004636 <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80045f4:	4b34      	ldr	r3, [pc, #208]	@ (80046c8 <HAL_RCC_OscConfig+0x244>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80045fa:	f7fc fd33 	bl	8001064 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004602:	f7fc fd2f 	bl	8001064 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e1a8      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004614:	4b2b      	ldr	r3, [pc, #172]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004620:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4925      	ldr	r1, [pc, #148]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004630:	4313      	orrs	r3, r2
 8004632:	600b      	str	r3, [r1, #0]
 8004634:	e015      	b.n	8004662 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8004636:	4b24      	ldr	r3, [pc, #144]	@ (80046c8 <HAL_RCC_OscConfig+0x244>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800463c:	f7fc fd12 	bl	8001064 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8004644:	f7fc fd0e 	bl	8001064 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e187      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8004656:	4b1b      	ldr	r3, [pc, #108]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d036      	beq.n	80046dc <HAL_RCC_OscConfig+0x258>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d016      	beq.n	80046a4 <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8004676:	4b15      	ldr	r3, [pc, #84]	@ (80046cc <HAL_RCC_OscConfig+0x248>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800467c:	f7fc fcf2 	bl	8001064 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8004684:	f7fc fcee 	bl	8001064 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e167      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8004696:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x200>
 80046a2:	e01b      	b.n	80046dc <HAL_RCC_OscConfig+0x258>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80046a4:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <HAL_RCC_OscConfig+0x248>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80046aa:	f7fc fcdb 	bl	8001064 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80046b0:	e00e      	b.n	80046d0 <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80046b2:	f7fc fcd7 	bl	8001064 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d907      	bls.n	80046d0 <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e150      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
 80046c4:	40023800 	.word	0x40023800
 80046c8:	42470000 	.word	0x42470000
 80046cc:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80046d0:	4b88      	ldr	r3, [pc, #544]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80046d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ea      	bne.n	80046b2 <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8097 	beq.w	8004818 <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80046ee:	4b81      	ldr	r3, [pc, #516]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10f      	bne.n	800471a <HAL_RCC_OscConfig+0x296>
			__HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	4b7d      	ldr	r3, [pc, #500]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	4a7c      	ldr	r2, [pc, #496]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004708:	6413      	str	r3, [r2, #64]	@ 0x40
 800470a:	4b7a      	ldr	r3, [pc, #488]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800471a:	4b77      	ldr	r3, [pc, #476]	@ (80048f8 <HAL_RCC_OscConfig+0x474>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d118      	bne.n	8004758 <HAL_RCC_OscConfig+0x2d4>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8004726:	4b74      	ldr	r3, [pc, #464]	@ (80048f8 <HAL_RCC_OscConfig+0x474>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a73      	ldr	r2, [pc, #460]	@ (80048f8 <HAL_RCC_OscConfig+0x474>)
 800472c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004730:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8004732:	f7fc fc97 	bl	8001064 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x2c8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800473a:	f7fc fc93 	bl	8001064 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x2c8>
					return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e10c      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800474c:	4b6a      	ldr	r3, [pc, #424]	@ (80048f8 <HAL_RCC_OscConfig+0x474>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d106      	bne.n	800476e <HAL_RCC_OscConfig+0x2ea>
 8004760:	4b64      	ldr	r3, [pc, #400]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004764:	4a63      	ldr	r2, [pc, #396]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6713      	str	r3, [r2, #112]	@ 0x70
 800476c:	e01c      	b.n	80047a8 <HAL_RCC_OscConfig+0x324>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b05      	cmp	r3, #5
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0x30c>
 8004776:	4b5f      	ldr	r3, [pc, #380]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477a:	4a5e      	ldr	r2, [pc, #376]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 800477c:	f043 0304 	orr.w	r3, r3, #4
 8004780:	6713      	str	r3, [r2, #112]	@ 0x70
 8004782:	4b5c      	ldr	r3, [pc, #368]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004786:	4a5b      	ldr	r2, [pc, #364]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	6713      	str	r3, [r2, #112]	@ 0x70
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0x324>
 8004790:	4b58      	ldr	r3, [pc, #352]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	4a57      	ldr	r2, [pc, #348]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	6713      	str	r3, [r2, #112]	@ 0x70
 800479c:	4b55      	ldr	r3, [pc, #340]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a0:	4a54      	ldr	r2, [pc, #336]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80047a2:	f023 0304 	bic.w	r3, r3, #4
 80047a6:	6713      	str	r3, [r2, #112]	@ 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d015      	beq.n	80047dc <HAL_RCC_OscConfig+0x358>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80047b0:	f7fc fc58 	bl	8001064 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_OscConfig+0x34a>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80047b8:	f7fc fc54 	bl	8001064 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x34a>
					return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e0cb      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80047ce:	4b49      	ldr	r3, [pc, #292]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0ee      	beq.n	80047b8 <HAL_RCC_OscConfig+0x334>
 80047da:	e014      	b.n	8004806 <HAL_RCC_OscConfig+0x382>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80047dc:	f7fc fc42 	bl	8001064 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_OscConfig+0x376>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80047e4:	f7fc fc3e 	bl	8001064 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x376>
					return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e0b5      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80047fa:	4b3e      	ldr	r3, [pc, #248]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1ee      	bne.n	80047e4 <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <HAL_RCC_OscConfig+0x394>
			__HAL_RCC_PWR_CLK_DISABLE();
 800480c:	4b39      	ldr	r3, [pc, #228]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 800480e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004810:	4a38      	ldr	r2, [pc, #224]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004816:	6413      	str	r3, [r2, #64]	@ 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80a1 	beq.w	8004964 <HAL_RCC_OscConfig+0x4e0>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8004822:	4b34      	ldr	r3, [pc, #208]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b08      	cmp	r3, #8
 800482c:	d05c      	beq.n	80048e8 <HAL_RCC_OscConfig+0x464>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d141      	bne.n	80048ba <HAL_RCC_OscConfig+0x436>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8004836:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <HAL_RCC_OscConfig+0x478>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800483c:	f7fc fc12 	bl	8001064 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x3d2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004844:	f7fc fc0e 	bl	8001064 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x3d2>
						return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e087      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004856:	4b27      	ldr	r3, [pc, #156]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	3b01      	subs	r3, #1
 800487c:	041b      	lsls	r3, r3, #16
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	061b      	lsls	r3, r3, #24
 8004886:	491b      	ldr	r1, [pc, #108]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 800488c:	4b1b      	ldr	r3, [pc, #108]	@ (80048fc <HAL_RCC_OscConfig+0x478>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004892:	f7fc fbe7 	bl	8001064 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x428>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800489a:	f7fc fbe3 	bl	8001064 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x428>
						return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e05c      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80048ac:	4b11      	ldr	r3, [pc, #68]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x416>
 80048b8:	e054      	b.n	8004964 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80048ba:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <HAL_RCC_OscConfig+0x478>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80048c0:	f7fc fbd0 	bl	8001064 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x456>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80048c8:	f7fc fbcc 	bl	8001064 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x456>
						return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e045      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80048da:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <HAL_RCC_OscConfig+0x470>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x444>
 80048e6:	e03d      	b.n	8004964 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d107      	bne.n	8004900 <HAL_RCC_OscConfig+0x47c>
				return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e038      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40007000 	.word	0x40007000
 80048fc:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 8004900:	4b1b      	ldr	r3, [pc, #108]	@ (8004970 <HAL_RCC_OscConfig+0x4ec>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d028      	beq.n	8004960 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8004918:	429a      	cmp	r2, r3
 800491a:	d121      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8004926:	429a      	cmp	r2, r3
 8004928:	d11a      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004930:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6a52      	ldr	r2, [r2, #36]	@ 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 8004936:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8004938:	4293      	cmp	r3, r2
 800493a:	d111      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 800494a:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800494c:	429a      	cmp	r2, r3
 800494e:	d107      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 800495a:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
						{
					return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
				}
			}
		}
	}
	return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800

08004974 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0cc      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8004988:	4b68      	ldr	r3, [pc, #416]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d90c      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b65      	ldr	r3, [pc, #404]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800499e:	4b63      	ldr	r3, [pc, #396]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0b8      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c8:	4b59      	ldr	r3, [pc, #356]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a58      	ldr	r2, [pc, #352]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049d2:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e0:	4b53      	ldr	r3, [pc, #332]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a52      	ldr	r2, [pc, #328]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049ea:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b50      	ldr	r3, [pc, #320]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	494d      	ldr	r1, [pc, #308]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d044      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004a12:	4b47      	ldr	r3, [pc, #284]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d119      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d003      	beq.n	8004a32 <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004a32:	4b3f      	ldr	r3, [pc, #252]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e06f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004a42:	4b3b      	ldr	r3, [pc, #236]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e067      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a52:	4b37      	ldr	r3, [pc, #220]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f023 0203 	bic.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4934      	ldr	r1, [pc, #208]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8004a64:	f7fc fafe 	bl	8001064 <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8004a6c:	f7fc fafa 	bl	8001064 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e04f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004a82:	4b2b      	ldr	r3, [pc, #172]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d1eb      	bne.n	8004a6c <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8004a94:	4b25      	ldr	r3, [pc, #148]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d20c      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b22      	ldr	r3, [pc, #136]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8004aaa:	4b20      	ldr	r3, [pc, #128]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e032      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8004ac8:	4b19      	ldr	r3, [pc, #100]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4916      	ldr	r1, [pc, #88]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8004ae6:	4b12      	ldr	r3, [pc, #72]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490e      	ldr	r1, [pc, #56]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004afa:	f000 f821 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490a      	ldr	r1, [pc, #40]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004b12:	4a09      	ldr	r2, [pc, #36]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 8004b16:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fc fa5e 	bl	8000fdc <HAL_InitTick>

	return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023c00 	.word	0x40023c00
 8004b30:	40023800 	.word	0x40023800
 8004b34:	08009aec 	.word	0x08009aec
 8004b38:	20000000 	.word	0x20000000
 8004b3c:	20000004 	.word	0x20000004

08004b40 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8004b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b44:	b094      	sub	sp, #80	@ 0x50
 8004b46:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t pllvco = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t pllp = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t sysclockfreq = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	64bb      	str	r3, [r7, #72]	@ 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8004b58:	4b79      	ldr	r3, [pc, #484]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 030c 	and.w	r3, r3, #12
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d00d      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x40>
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	f200 80e1 	bhi.w	8004d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x34>
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d003      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b72:	e0db      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x1ec>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8004b74:	4b73      	ldr	r3, [pc, #460]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004b78:	e0db      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 8004b7a:	4b73      	ldr	r3, [pc, #460]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004b7e:	e0d8      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b80:	4b6f      	ldr	r3, [pc, #444]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b88:	647b      	str	r3, [r7, #68]	@ 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d063      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x11e>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004b96:	4b6a      	ldr	r3, [pc, #424]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b98:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004b9a:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ba0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004baa:	2300      	movs	r3, #0
 8004bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	f04f 0000 	mov.w	r0, #0
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	0159      	lsls	r1, r3, #5
 8004bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc4:	0150      	lsls	r0, r2, #5
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4621      	mov	r1, r4
 8004bcc:	1a51      	subs	r1, r2, r1
 8004bce:	6139      	str	r1, [r7, #16]
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be4:	4659      	mov	r1, fp
 8004be6:	018b      	lsls	r3, r1, #6
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bee:	4651      	mov	r1, sl
 8004bf0:	018a      	lsls	r2, r1, #6
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c12:	4690      	mov	r8, r2
 8004c14:	4699      	mov	r9, r3
 8004c16:	4623      	mov	r3, r4
 8004c18:	eb18 0303 	adds.w	r3, r8, r3
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	462b      	mov	r3, r5
 8004c20:	eb49 0303 	adc.w	r3, r9, r3
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c32:	4629      	mov	r1, r5
 8004c34:	024b      	lsls	r3, r1, #9
 8004c36:	4621      	mov	r1, r4
 8004c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	024a      	lsls	r2, r1, #9
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c46:	2200      	movs	r2, #0
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c50:	f7fb faba 	bl	80001c8 <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8004c58:	4613      	mov	r3, r2
 8004c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c5c:	e058      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x1d0>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004c5e:	4b38      	ldr	r3, [pc, #224]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c60:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004c62:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8004c64:	2200      	movs	r2, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	4611      	mov	r1, r2
 8004c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	2300      	movs	r3, #0
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c78:	4642      	mov	r2, r8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	f04f 0000 	mov.w	r0, #0
 8004c80:	f04f 0100 	mov.w	r1, #0
 8004c84:	0159      	lsls	r1, r3, #5
 8004c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c8a:	0150      	lsls	r0, r2, #5
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4641      	mov	r1, r8
 8004c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c96:	4649      	mov	r1, r9
 8004c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8004cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	00eb      	lsls	r3, r5, #3
 8004cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc6:	00e2      	lsls	r2, r4, #3
 8004cc8:	4614      	mov	r4, r2
 8004cca:	461d      	mov	r5, r3
 8004ccc:	4643      	mov	r3, r8
 8004cce:	18e3      	adds	r3, r4, r3
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	eb45 0303 	adc.w	r3, r5, r3
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	028b      	lsls	r3, r1, #10
 8004cea:	4621      	mov	r1, r4
 8004cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	028a      	lsls	r2, r1, #10
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	61fa      	str	r2, [r7, #28]
 8004d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d04:	f7fb fa60 	bl	80001c8 <__aeabi_uldivmod>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8004d10:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	0c1b      	lsrs	r3, r3, #16
 8004d16:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 8004d1a:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	643b      	str	r3, [r7, #64]	@ 0x40

		sysclockfreq = pllvco / pllp;
 8004d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
		break;
 8004d30:	bf00      	nop
	}
	}
	return sysclockfreq;
 8004d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3750      	adds	r7, #80	@ 0x50
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	007a1200 	.word	0x007a1200

08004d4c <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8004d50:	4b03      	ldr	r3, [pc, #12]	@ (8004d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000000 	.word	0x20000000

08004d64 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8004d68:	f7ff fff0 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d6e:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0a9b      	lsrs	r3, r3, #10
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4903      	ldr	r1, [pc, #12]	@ (8004d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40023800 	.word	0x40023800
 8004d88:	08009afc 	.word	0x08009afc

08004d8c <HAL_RCCEx_PeriphCLKConfig>:
 *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg1 = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*---------------------------- I2S configuration ---------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x28>
			== RCC_PERIPHCLK_I2S)
			|| (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d035      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x94>
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8004db4:	4b62      	ldr	r3, [pc, #392]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8004dba:	f7fc f953 	bl	8001064 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8004dc2:	f7fc f94f 	bl	8001064 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e0b0      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 8004dd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f0      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
		/* Configure the PLLI2S division factors */
		/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
		/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
		__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	019a      	lsls	r2, r3, #6
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	071b      	lsls	r3, r3, #28
 8004dec:	4955      	ldr	r1, [pc, #340]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
				PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 8004df4:	4b52      	ldr	r3, [pc, #328]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
		/* Get tick */
		tickstart = HAL_GetTick();
 8004dfa:	f7fc f933 	bl	8001064 <HAL_GetTick>
 8004dfe:	6178      	str	r0, [r7, #20]
		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8004e00:	e008      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x88>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8004e02:	f7fc f92f 	bl	8001064 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x88>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e090      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8004e14:	4b4b      	ldr	r3, [pc, #300]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f0      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
			}
		}
	}

	/*---------------------------- RTC configuration ---------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 8083 	beq.w	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
			== (RCC_PERIPHCLK_RTC)) {
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	4b44      	ldr	r3, [pc, #272]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e36:	4a43      	ldr	r2, [pc, #268]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e3e:	4b41      	ldr	r3, [pc, #260]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e54:	6013      	str	r3, [r2, #0]

		/* Get tick */
		tickstart = HAL_GetTick();
 8004e56:	f7fc f905 	bl	8001064 <HAL_GetTick>
 8004e5a:	6178      	str	r0, [r7, #20]

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8004e5c:	e008      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8004e5e:	f7fc f901 	bl	8001064 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
				return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e062      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8004e70:	4b35      	ldr	r3, [pc, #212]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
			}
		}
		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e7c:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e84:	613b      	str	r3, [r7, #16]
		if ((tmpreg1 != 0x00000000U)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02f      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>
				&& ((tmpreg1)
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
				&& ((tmpreg1)
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d028      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea2:	613b      	str	r3, [r7, #16]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8004ea4:	4b29      	ldr	r3, [pc, #164]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 8004eaa:	4b28      	ldr	r3, [pc, #160]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg1;
 8004eb0:	4a24      	ldr	r2, [pc, #144]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6713      	str	r3, [r2, #112]	@ 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 8004eb6:	4b23      	ldr	r3, [pc, #140]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d114      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x160>
				/* Get tick */
				tickstart = HAL_GetTick();
 8004ec2:	f7fc f8cf 	bl	8001064 <HAL_GetTick>
 8004ec6:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004ec8:	e00a      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004eca:	f7fc f8cb 	bl	8001064 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
						return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e02a      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004ee0:	4b18      	ldr	r3, [pc, #96]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ee      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x13e>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ef4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ef8:	d10d      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004efa:	4b12      	ldr	r3, [pc, #72]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f0e:	490d      	ldr	r1, [pc, #52]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	608b      	str	r3, [r1, #8]
 8004f14:	e005      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f16:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f1c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f20:	6093      	str	r3, [r2, #8]
 8004f22:	4b08      	ldr	r3, [pc, #32]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f2e:	4905      	ldr	r1, [pc, #20]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
	return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	42470068 	.word	0x42470068
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40007000 	.word	0x40007000
 8004f4c:	42470e40 	.word	0x42470e40

08004f50 <HAL_RCCEx_GetPeriphCLKFreq>:
 * @param  PeriphClk Peripheral clock identifier
 *         This parameter can be one of the following values:
 *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
 * @retval Frequency in KHz
 */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk) {
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	/* This variable used to store the I2S clock frequency (value in Hz) */
	uint32_t frequency = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
	/* This variable used to store the VCO Input (value in Hz) */
	uint32_t vcoinput = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]
	uint32_t srcclk = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
	/* This variable used to store the VCO Output (value in Hz) */
	uint32_t vcooutput = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60bb      	str	r3, [r7, #8]
	switch (PeriphClk) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d13f      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
	case RCC_PERIPHCLK_I2S: {
		/* Get the current I2S source */
		srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f6e:	4b24      	ldr	r3, [pc, #144]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f76:	60fb      	str	r3, [r7, #12]
		switch (srcclk) {
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d006      	beq.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f84:	d12f      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
		/* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
		case RCC_I2SCLKSOURCE_EXT: {
			/* Set the I2S clock to the external clock  value */
			frequency = EXTERNAL_CLOCK_VALUE;
 8004f86:	4b1f      	ldr	r3, [pc, #124]	@ (8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f88:	617b      	str	r3, [r7, #20]
			break;
 8004f8a:	e02f      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
			/* Configure the PLLI2S division factor */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE) {
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f98:	d108      	bne.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSE_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f9a:	4b19      	ldr	r3, [pc, #100]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSE_VALUE
 8004fa2:	4a19      	ldr	r2, [pc, #100]	@ (8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	e007      	b.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
			} else {
				/* Get the I2S source clock value */
				vcoinput = (uint32_t) (HSI_VALUE
						/ (uint32_t) (RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004fac:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
				vcoinput = (uint32_t) (HSI_VALUE
 8004fb4:	4a15      	ldr	r2, [pc, #84]	@ (800500c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	613b      	str	r3, [r7, #16]
			}
#endif /* STM32F411xE */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			vcooutput = (uint32_t) (vcoinput
					* (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)
 8004fbc:	4b10      	ldr	r3, [pc, #64]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fc2:	099b      	lsrs	r3, r3, #6
							& (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004fc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
			vcooutput = (uint32_t) (vcoinput
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	fb02 f303 	mul.w	r3, r2, r3
 8004fce:	60bb      	str	r3, [r7, #8]
			/* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
			frequency = (uint32_t) (vcooutput
					/ (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U)
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd6:	0f1b      	lsrs	r3, r3, #28
							& (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004fd8:	f003 0307 	and.w	r3, r3, #7
			frequency = (uint32_t) (vcooutput
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	617b      	str	r3, [r7, #20]
			break;
 8004fe4:	e002      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
		}
			/* Clock not enabled for I2S*/
		default: {
			frequency = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
			break;
 8004fea:	bf00      	nop
		}
		}
		break;
 8004fec:	e000      	b.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
	}
	default: {
		break;
 8004fee:	bf00      	nop
	}
	}
	return frequency;
 8004ff0:	697b      	ldr	r3, [r7, #20]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40023800 	.word	0x40023800
 8005004:	00bb8000 	.word	0x00bb8000
 8005008:	007a1200 	.word	0x007a1200
 800500c:	00f42400 	.word	0x00f42400

08005010 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e07b      	b.n	800511a <HAL_SPI_Init+0x10a>
	assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
	assert_param(IS_SPI_NSS(hspi->Init.NSS));
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	d108      	bne.n	800503c <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005032:	d009      	beq.n	8005048 <HAL_SPI_Init+0x38>
			assert_param(
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	61da      	str	r2, [r3, #28]
 800503a:	e005      	b.n	8005048 <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fb fe48 	bl	8000cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800507e:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050cc:	ea42 0103 	orr.w	r1, r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
			((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) | (hspi->Init.Direction & (SPI_CR1_RXONLY | SPI_CR1_BIDIMODE)) | (hspi->Init.DataSize & SPI_CR1_DFF) | (hspi->Init.CLKPolarity & SPI_CR1_CPOL) | (hspi->Init.CLKPhase & SPI_CR1_CPHA) | (hspi->Init.NSS & SPI_CR1_SSM) | (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) | (hspi->Init.FirstBit & SPI_CR1_LSBFIRST) | (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management, TI Mode */
	WRITE_REG(hspi->Instance->CR2,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	f003 0104 	and.w	r1, r3, #4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	f003 0210 	and.w	r2, r3, #16
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->State = HAL_SPI_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e041      	b.n	80051b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d106      	bne.n	800514e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fb fe1d 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f000 fad9 	bl	8005718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e041      	b.n	8005256 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f839 	bl	800525e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f000 fa8a 	bl	8005718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d109      	bne.n	8005298 <HAL_TIM_PWM_Start+0x24>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	bf14      	ite	ne
 8005290:	2301      	movne	r3, #1
 8005292:	2300      	moveq	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	e022      	b.n	80052de <HAL_TIM_PWM_Start+0x6a>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d109      	bne.n	80052b2 <HAL_TIM_PWM_Start+0x3e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e015      	b.n	80052de <HAL_TIM_PWM_Start+0x6a>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d109      	bne.n	80052cc <HAL_TIM_PWM_Start+0x58>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e008      	b.n	80052de <HAL_TIM_PWM_Start+0x6a>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e07c      	b.n	80053e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <HAL_TIM_PWM_Start+0x82>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f4:	e013      	b.n	800531e <HAL_TIM_PWM_Start+0xaa>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_PWM_Start+0x92>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005304:	e00b      	b.n	800531e <HAL_TIM_PWM_Start+0xaa>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d104      	bne.n	8005316 <HAL_TIM_PWM_Start+0xa2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005314:	e003      	b.n	800531e <HAL_TIM_PWM_Start+0xaa>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2202      	movs	r2, #2
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2201      	movs	r2, #1
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fcec 	bl	8005d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2d      	ldr	r2, [pc, #180]	@ (80053e8 <HAL_TIM_PWM_Start+0x174>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d004      	beq.n	8005340 <HAL_TIM_PWM_Start+0xcc>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2c      	ldr	r2, [pc, #176]	@ (80053ec <HAL_TIM_PWM_Start+0x178>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d101      	bne.n	8005344 <HAL_TIM_PWM_Start+0xd0>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <HAL_TIM_PWM_Start+0xd2>
 8005344:	2300      	movs	r3, #0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <HAL_TIM_PWM_Start+0x174>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d022      	beq.n	80053aa <HAL_TIM_PWM_Start+0x136>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536c:	d01d      	beq.n	80053aa <HAL_TIM_PWM_Start+0x136>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1f      	ldr	r2, [pc, #124]	@ (80053f0 <HAL_TIM_PWM_Start+0x17c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d018      	beq.n	80053aa <HAL_TIM_PWM_Start+0x136>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1d      	ldr	r2, [pc, #116]	@ (80053f4 <HAL_TIM_PWM_Start+0x180>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <HAL_TIM_PWM_Start+0x136>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1c      	ldr	r2, [pc, #112]	@ (80053f8 <HAL_TIM_PWM_Start+0x184>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_TIM_PWM_Start+0x136>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a16      	ldr	r2, [pc, #88]	@ (80053ec <HAL_TIM_PWM_Start+0x178>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_TIM_PWM_Start+0x136>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a18      	ldr	r2, [pc, #96]	@ (80053fc <HAL_TIM_PWM_Start+0x188>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_TIM_PWM_Start+0x136>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a16      	ldr	r2, [pc, #88]	@ (8005400 <HAL_TIM_PWM_Start+0x18c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d111      	bne.n	80053ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b06      	cmp	r3, #6
 80053ba:	d010      	beq.n	80053de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053cc:	e007      	b.n	80053de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40010000 	.word	0x40010000
 80053ec:	40010400 	.word	0x40010400
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40014000 	.word	0x40014000
 8005400:	40001800 	.word	0x40001800

08005404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800541e:	2302      	movs	r3, #2
 8005420:	e0ae      	b.n	8005580 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b0c      	cmp	r3, #12
 800542e:	f200 809f 	bhi.w	8005570 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005432:	a201      	add	r2, pc, #4	@ (adr r2, 8005438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	0800546d 	.word	0x0800546d
 800543c:	08005571 	.word	0x08005571
 8005440:	08005571 	.word	0x08005571
 8005444:	08005571 	.word	0x08005571
 8005448:	080054ad 	.word	0x080054ad
 800544c:	08005571 	.word	0x08005571
 8005450:	08005571 	.word	0x08005571
 8005454:	08005571 	.word	0x08005571
 8005458:	080054ef 	.word	0x080054ef
 800545c:	08005571 	.word	0x08005571
 8005460:	08005571 	.word	0x08005571
 8005464:	08005571 	.word	0x08005571
 8005468:	0800552f 	.word	0x0800552f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f9fc 	bl	8005870 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0208 	orr.w	r2, r2, #8
 8005486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6999      	ldr	r1, [r3, #24]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	619a      	str	r2, [r3, #24]
      break;
 80054aa:	e064      	b.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fa4c 	bl	8005950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6999      	ldr	r1, [r3, #24]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	021a      	lsls	r2, r3, #8
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	619a      	str	r2, [r3, #24]
      break;
 80054ec:	e043      	b.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 faa1 	bl	8005a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0208 	orr.w	r2, r2, #8
 8005508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0204 	bic.w	r2, r2, #4
 8005518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69d9      	ldr	r1, [r3, #28]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	61da      	str	r2, [r3, #28]
      break;
 800552c:	e023      	b.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 faf5 	bl	8005b24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69d9      	ldr	r1, [r3, #28]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	021a      	lsls	r2, r3, #8
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	61da      	str	r2, [r3, #28]
      break;
 800556e:	e002      	b.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	75fb      	strb	r3, [r7, #23]
      break;
 8005574:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800557e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_TIM_ConfigClockSource+0x1c>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e0b4      	b.n	800570e <HAL_TIM_ConfigClockSource+0x186>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055dc:	d03e      	beq.n	800565c <HAL_TIM_ConfigClockSource+0xd4>
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e2:	f200 8087 	bhi.w	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ea:	f000 8086 	beq.w	80056fa <HAL_TIM_ConfigClockSource+0x172>
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f2:	d87f      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b70      	cmp	r3, #112	@ 0x70
 80055f6:	d01a      	beq.n	800562e <HAL_TIM_ConfigClockSource+0xa6>
 80055f8:	2b70      	cmp	r3, #112	@ 0x70
 80055fa:	d87b      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b60      	cmp	r3, #96	@ 0x60
 80055fe:	d050      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005600:	2b60      	cmp	r3, #96	@ 0x60
 8005602:	d877      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005604:	2b50      	cmp	r3, #80	@ 0x50
 8005606:	d03c      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0xfa>
 8005608:	2b50      	cmp	r3, #80	@ 0x50
 800560a:	d873      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d058      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005610:	2b40      	cmp	r3, #64	@ 0x40
 8005612:	d86f      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005614:	2b30      	cmp	r3, #48	@ 0x30
 8005616:	d064      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005618:	2b30      	cmp	r3, #48	@ 0x30
 800561a:	d86b      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 800561c:	2b20      	cmp	r3, #32
 800561e:	d060      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005620:	2b20      	cmp	r3, #32
 8005622:	d867      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d05c      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005628:	2b10      	cmp	r3, #16
 800562a:	d05a      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	e062      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800563e:	f000 fb41 	bl	8005cc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	609a      	str	r2, [r3, #8]
      break;
 800565a:	e04f      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800566c:	f000 fb2a 	bl	8005cc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800567e:	609a      	str	r2, [r3, #8]
      break;
 8005680:	e03c      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800568e:	461a      	mov	r2, r3
 8005690:	f000 fa9e 	bl	8005bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2150      	movs	r1, #80	@ 0x50
 800569a:	4618      	mov	r0, r3
 800569c:	f000 faf7 	bl	8005c8e <TIM_ITRx_SetConfig>
      break;
 80056a0:	e02c      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ae:	461a      	mov	r2, r3
 80056b0:	f000 fabd 	bl	8005c2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2160      	movs	r1, #96	@ 0x60
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fae7 	bl	8005c8e <TIM_ITRx_SetConfig>
      break;
 80056c0:	e01c      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ce:	461a      	mov	r2, r3
 80056d0:	f000 fa7e 	bl	8005bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2140      	movs	r1, #64	@ 0x40
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fad7 	bl	8005c8e <TIM_ITRx_SetConfig>
      break;
 80056e0:	e00c      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f000 face 	bl	8005c8e <TIM_ITRx_SetConfig>
      break;
 80056f2:	e003      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
      break;
 80056f8:	e000      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a46      	ldr	r2, [pc, #280]	@ (8005844 <TIM_Base_SetConfig+0x12c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d013      	beq.n	8005758 <TIM_Base_SetConfig+0x40>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005736:	d00f      	beq.n	8005758 <TIM_Base_SetConfig+0x40>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a43      	ldr	r2, [pc, #268]	@ (8005848 <TIM_Base_SetConfig+0x130>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00b      	beq.n	8005758 <TIM_Base_SetConfig+0x40>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a42      	ldr	r2, [pc, #264]	@ (800584c <TIM_Base_SetConfig+0x134>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d007      	beq.n	8005758 <TIM_Base_SetConfig+0x40>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a41      	ldr	r2, [pc, #260]	@ (8005850 <TIM_Base_SetConfig+0x138>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_Base_SetConfig+0x40>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a40      	ldr	r2, [pc, #256]	@ (8005854 <TIM_Base_SetConfig+0x13c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d108      	bne.n	800576a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a35      	ldr	r2, [pc, #212]	@ (8005844 <TIM_Base_SetConfig+0x12c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d02b      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005778:	d027      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a32      	ldr	r2, [pc, #200]	@ (8005848 <TIM_Base_SetConfig+0x130>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d023      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a31      	ldr	r2, [pc, #196]	@ (800584c <TIM_Base_SetConfig+0x134>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d01f      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a30      	ldr	r2, [pc, #192]	@ (8005850 <TIM_Base_SetConfig+0x138>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01b      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a2f      	ldr	r2, [pc, #188]	@ (8005854 <TIM_Base_SetConfig+0x13c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d017      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a2e      	ldr	r2, [pc, #184]	@ (8005858 <TIM_Base_SetConfig+0x140>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2d      	ldr	r2, [pc, #180]	@ (800585c <TIM_Base_SetConfig+0x144>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00f      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005860 <TIM_Base_SetConfig+0x148>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005864 <TIM_Base_SetConfig+0x14c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005868 <TIM_Base_SetConfig+0x150>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a29      	ldr	r2, [pc, #164]	@ (800586c <TIM_Base_SetConfig+0x154>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d108      	bne.n	80057dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a10      	ldr	r2, [pc, #64]	@ (8005844 <TIM_Base_SetConfig+0x12c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_Base_SetConfig+0xf8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a12      	ldr	r2, [pc, #72]	@ (8005854 <TIM_Base_SetConfig+0x13c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d103      	bne.n	8005818 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d105      	bne.n	8005836 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f023 0201 	bic.w	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	611a      	str	r2, [r3, #16]
  }
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40010400 	.word	0x40010400
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800
 8005864:	40001800 	.word	0x40001800
 8005868:	40001c00 	.word	0x40001c00
 800586c:	40002000 	.word	0x40002000

08005870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	f023 0201 	bic.w	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f023 0302 	bic.w	r3, r3, #2
 80058b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a20      	ldr	r2, [pc, #128]	@ (8005948 <TIM_OC1_SetConfig+0xd8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC1_SetConfig+0x64>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a1f      	ldr	r2, [pc, #124]	@ (800594c <TIM_OC1_SetConfig+0xdc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10c      	bne.n	80058ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0308 	bic.w	r3, r3, #8
 80058da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f023 0304 	bic.w	r3, r3, #4
 80058ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <TIM_OC1_SetConfig+0xd8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_OC1_SetConfig+0x8e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a14      	ldr	r2, [pc, #80]	@ (800594c <TIM_OC1_SetConfig+0xdc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d111      	bne.n	8005922 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	621a      	str	r2, [r3, #32]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	40010000 	.word	0x40010000
 800594c:	40010400 	.word	0x40010400

08005950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f023 0210 	bic.w	r2, r3, #16
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0320 	bic.w	r3, r3, #32
 800599a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a22      	ldr	r2, [pc, #136]	@ (8005a34 <TIM_OC2_SetConfig+0xe4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_OC2_SetConfig+0x68>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a21      	ldr	r2, [pc, #132]	@ (8005a38 <TIM_OC2_SetConfig+0xe8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d10d      	bne.n	80059d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a17      	ldr	r2, [pc, #92]	@ (8005a34 <TIM_OC2_SetConfig+0xe4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_OC2_SetConfig+0x94>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a16      	ldr	r2, [pc, #88]	@ (8005a38 <TIM_OC2_SetConfig+0xe8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d113      	bne.n	8005a0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40010400 	.word	0x40010400

08005a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a21      	ldr	r2, [pc, #132]	@ (8005b1c <TIM_OC3_SetConfig+0xe0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_OC3_SetConfig+0x66>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a20      	ldr	r2, [pc, #128]	@ (8005b20 <TIM_OC3_SetConfig+0xe4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10d      	bne.n	8005abe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a16      	ldr	r2, [pc, #88]	@ (8005b1c <TIM_OC3_SetConfig+0xe0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC3_SetConfig+0x92>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a15      	ldr	r2, [pc, #84]	@ (8005b20 <TIM_OC3_SetConfig+0xe4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d113      	bne.n	8005af6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	621a      	str	r2, [r3, #32]
}
 8005b10:	bf00      	nop
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400

08005b24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	031b      	lsls	r3, r3, #12
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a12      	ldr	r2, [pc, #72]	@ (8005bc8 <TIM_OC4_SetConfig+0xa4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC4_SetConfig+0x68>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a11      	ldr	r2, [pc, #68]	@ (8005bcc <TIM_OC4_SetConfig+0xa8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	019b      	lsls	r3, r3, #6
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f023 0201 	bic.w	r2, r3, #1
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f023 030a 	bic.w	r3, r3, #10
 8005c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b087      	sub	sp, #28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f023 0210 	bic.w	r2, r3, #16
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	031b      	lsls	r3, r3, #12
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f043 0307 	orr.w	r3, r3, #7
 8005cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	609a      	str	r2, [r3, #8]
}
 8005cb8:	bf00      	nop
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	021a      	lsls	r2, r3, #8
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	609a      	str	r2, [r3, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	2201      	movs	r2, #1
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1a      	ldr	r2, [r3, #32]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	43db      	mvns	r3, r3
 8005d26:	401a      	ands	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a1a      	ldr	r2, [r3, #32]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e05a      	b.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a21      	ldr	r2, [pc, #132]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d022      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db4:	d01d      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1d      	ldr	r2, [pc, #116]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d018      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1a      	ldr	r2, [pc, #104]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00e      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a18      	ldr	r2, [pc, #96]	@ (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d009      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a17      	ldr	r2, [pc, #92]	@ (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d004      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a15      	ldr	r2, [pc, #84]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d10c      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40010000 	.word	0x40010000
 8005e30:	40000400 	.word	0x40000400
 8005e34:	40000800 	.word	0x40000800
 8005e38:	40000c00 	.word	0x40000c00
 8005e3c:	40010400 	.word	0x40010400
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40001800 	.word	0x40001800

08005e48 <USB_CoreInit>:
 * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 8005e48:	b084      	sub	sp, #16
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	f107 001c 	add.w	r0, r7, #28
 8005e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret;
	if (cfg.phy_itface == USB_OTG_ULPI_PHY) {
 8005e5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d123      	bne.n	8005eaa <USB_CoreInit+0x62>
		USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	639a      	str	r2, [r3, #56]	@ 0x38

		/* Init The ULPI Interface */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	60d3      	str	r3, [r2, #12]
				| USB_OTG_GUSBCFG_PHYSEL);

		/* Select vbus source */
		USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60da      	str	r2, [r3, #12]
				| USB_OTG_GUSBCFG_ULPIEVBUSI);
		if (cfg.use_external_vbus == 1U) {
 8005e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d105      	bne.n	8005e9e <USB_CoreInit+0x56>
			USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60da      	str	r2, [r3, #12]
		}

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f9dc 	bl	800625c <USB_CoreReset>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73fb      	strb	r3, [r7, #15]
 8005ea8:	e01b      	b.n	8005ee2 <USB_CoreInit+0x9a>
	} else /* FS interface (embedded Phy) */
	{
		/* Select FS Embedded PHY */
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60da      	str	r2, [r3, #12]

		/* Reset after a PHY select */
		ret = USB_CoreReset(USBx);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f9d0 	bl	800625c <USB_CoreReset>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	73fb      	strb	r3, [r7, #15]

		if (cfg.battery_charging_enable == 0U) {
 8005ec0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d106      	bne.n	8005ed6 <USB_CoreInit+0x8e>
			/* Activate the USB Transceiver */
			USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ecc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ed4:	e005      	b.n	8005ee2 <USB_CoreInit+0x9a>
		} else {
			/* Deactivate the USB Transceiver */
			USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (cfg.dma_enable == 1U) {
 8005ee2:	7fbb      	ldrb	r3, [r7, #30]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10b      	bne.n	8005f00 <USB_CoreInit+0xb8>
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f043 0206 	orr.w	r2, r3, #6
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	609a      	str	r2, [r3, #8]
		USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	609a      	str	r2, [r3, #8]
	}

	return ret;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f0c:	b004      	add	sp, #16
 8005f0e:	4770      	bx	lr

08005f10 <USB_EnableGlobalInt>:
 * @brief  USB_EnableGlobalInt
 *         Enables the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f043 0201 	orr.w	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_DisableGlobalInt>:
 * @brief  USB_DisableGlobalInt
 *         Disable the controller's Global Int in the AHB Config reg
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx) {
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
	USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f023 0201 	bic.w	r2, r3, #1
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_SetCurrentMode>:
 *            @arg USB_DEVICE_MODE Peripheral mode
 *            @arg USB_HOST_MODE Host mode
 * @retval HAL status
 */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_ModeTypeDef mode) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
	uint32_t ms = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

	USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60da      	str	r2, [r3, #12]

	if (mode == USB_HOST_MODE) {
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d115      	bne.n	8005fa2 <USB_SetCurrentMode+0x4e>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 8005f82:	200a      	movs	r0, #10
 8005f84:	f7fb f87a 	bl	800107c <HAL_Delay>
			ms += 10U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	330a      	adds	r3, #10
 8005f8c:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_HOST_MODE)
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f956 	bl	8006240 <USB_GetMode>
 8005f94:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d01e      	beq.n	8005fd8 <USB_SetCurrentMode+0x84>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f9e:	d9f0      	bls.n	8005f82 <USB_SetCurrentMode+0x2e>
 8005fa0:	e01a      	b.n	8005fd8 <USB_SetCurrentMode+0x84>
	} else if (mode == USB_DEVICE_MODE) {
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d115      	bne.n	8005fd4 <USB_SetCurrentMode+0x80>
		USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]

		do {
			HAL_Delay(10U);
 8005fb4:	200a      	movs	r0, #10
 8005fb6:	f7fb f861 	bl	800107c <HAL_Delay>
			ms += 10U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	330a      	adds	r3, #10
 8005fbe:	60fb      	str	r3, [r7, #12]
		} while ((USB_GetMode(USBx) != (uint32_t) USB_DEVICE_MODE)
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f93d 	bl	8006240 <USB_GetMode>
 8005fc6:	4603      	mov	r3, r0
				&& (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <USB_SetCurrentMode+0x84>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fd0:	d9f0      	bls.n	8005fb4 <USB_SetCurrentMode+0x60>
 8005fd2:	e001      	b.n	8005fd8 <USB_SetCurrentMode+0x84>
	} else {
		return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e005      	b.n	8005fe4 <USB_SetCurrentMode+0x90>
	}

	if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS) {
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2bc8      	cmp	r3, #200	@ 0xc8
 8005fdc:	d101      	bne.n	8005fe2 <USB_SetCurrentMode+0x8e>
		return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <USB_SetCurrentMode+0x90>
	}

	return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USB_FlushTxFifo>:
 * @param  num  FIFO number
 *         This parameter can be a value from 1 to 15
 15 means Flush all Tx FIFOs
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num) {
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
	__IO uint32_t count = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006006:	d901      	bls.n	800600c <USB_FlushTxFifo+0x20>
			return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e01b      	b.n	8006044 <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	daf2      	bge.n	8005ffa <USB_FlushTxFifo+0xe>

	/* Flush TX Fifo */
	count = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	019b      	lsls	r3, r3, #6
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3301      	adds	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006030:	d901      	bls.n	8006036 <USB_FlushTxFifo+0x4a>
			return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e006      	b.n	8006044 <USB_FlushTxFifo+0x58>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0320 	and.w	r3, r3, #32
			== USB_OTG_GRSTCTL_TXFFLSH);
 800603e:	2b20      	cmp	r3, #32
 8006040:	d0f0      	beq.n	8006024 <USB_FlushTxFifo+0x38>

	return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_FlushRxFifo>:
/**
 * @brief  USB_FlushRxFifo  Flush Rx FIFO
 * @param  USBx  Selected device
 * @retval HAL status
 */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx) {
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006068:	d901      	bls.n	800606e <USB_FlushRxFifo+0x1e>
			return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e018      	b.n	80060a0 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	daf2      	bge.n	800605c <USB_FlushRxFifo+0xc>

	/* Flush RX Fifo */
	count = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2210      	movs	r2, #16
 800607e:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800608c:	d901      	bls.n	8006092 <USB_FlushRxFifo+0x42>
			return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e006      	b.n	80060a0 <USB_FlushRxFifo+0x50>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0310 	and.w	r3, r3, #16
			== USB_OTG_GRSTCTL_RXFFLSH);
 800609a:	2b10      	cmp	r3, #16
 800609c:	d0f0      	beq.n	8006080 <USB_FlushRxFifo+0x30>

	return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_WritePacket>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL status
 */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma) {
 80060ac:	b480      	push	{r7}
 80060ae:	b089      	sub	sp, #36	@ 0x24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	4611      	mov	r1, r2
 80060b8:	461a      	mov	r2, r3
 80060ba:	460b      	mov	r3, r1
 80060bc:	71fb      	strb	r3, [r7, #7]
 80060be:	4613      	mov	r3, r2
 80060c0:	80bb      	strh	r3, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	617b      	str	r3, [r7, #20]
	uint8_t *pSrc = src;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	61fb      	str	r3, [r7, #28]
	uint32_t count32b;
	uint32_t i;

	if (dma == 0U) {
 80060ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d123      	bne.n	800611a <USB_WritePacket+0x6e>
		count32b = ((uint32_t) len + 3U) / 4U;
 80060d2:	88bb      	ldrh	r3, [r7, #4]
 80060d4:	3303      	adds	r3, #3
 80060d6:	089b      	lsrs	r3, r3, #2
 80060d8:	613b      	str	r3, [r7, #16]
		for (i = 0U; i < count32b; i++) {
 80060da:	2300      	movs	r3, #0
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	e018      	b.n	8006112 <USB_WritePacket+0x66>
			USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	031a      	lsls	r2, r3, #12
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ec:	461a      	mov	r2, r3
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6013      	str	r3, [r2, #0]
			pSrc++;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	3301      	adds	r3, #1
 80060f8:	61fb      	str	r3, [r7, #28]
			pSrc++;
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	3301      	adds	r3, #1
 80060fe:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	3301      	adds	r3, #1
 8006104:	61fb      	str	r3, [r7, #28]
			pSrc++;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	3301      	adds	r3, #1
 800610a:	61fb      	str	r3, [r7, #28]
		for (i = 0U; i < count32b; i++) {
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	3301      	adds	r3, #1
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	429a      	cmp	r2, r3
 8006118:	d3e2      	bcc.n	80060e0 <USB_WritePacket+0x34>
		}
	}

	return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3724      	adds	r7, #36	@ 0x24
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USB_ReadPacket>:
 * @param  dest  source pointer
 * @param  len  Number of bytes to read
 * @retval pointer to destination buffer
 */
void* USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest,
		uint16_t len) {
 8006128:	b480      	push	{r7}
 800612a:	b08b      	sub	sp, #44	@ 0x2c
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	61bb      	str	r3, [r7, #24]
	uint8_t *pDest = dest;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t pData;
	uint32_t i;
	uint32_t count32b = (uint32_t) len >> 2U;
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	089b      	lsrs	r3, r3, #2
 8006142:	b29b      	uxth	r3, r3
 8006144:	617b      	str	r3, [r7, #20]
	uint16_t remaining_bytes = len % 4U;
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	83fb      	strh	r3, [r7, #30]

	for (i = 0U; i < count32b; i++) {
 800614e:	2300      	movs	r3, #0
 8006150:	623b      	str	r3, [r7, #32]
 8006152:	e014      	b.n	800617e <USB_ReadPacket+0x56>
		__UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	601a      	str	r2, [r3, #0]
		pDest++;
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	3301      	adds	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	3301      	adds	r3, #1
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	3301      	adds	r3, #1
 8006170:	627b      	str	r3, [r7, #36]	@ 0x24
		pDest++;
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	3301      	adds	r3, #1
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0U; i < count32b; i++) {
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	3301      	adds	r3, #1
 800617c:	623b      	str	r3, [r7, #32]
 800617e:	6a3a      	ldr	r2, [r7, #32]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	429a      	cmp	r2, r3
 8006184:	d3e6      	bcc.n	8006154 <USB_ReadPacket+0x2c>
	}

	/* When Number of data is not word aligned, read the remaining byte */
	if (remaining_bytes != 0U) {
 8006186:	8bfb      	ldrh	r3, [r7, #30]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01e      	beq.n	80061ca <USB_ReadPacket+0xa2>
		i = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	623b      	str	r3, [r7, #32]
		__UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006196:	461a      	mov	r2, r3
 8006198:	f107 0310 	add.w	r3, r7, #16
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	601a      	str	r2, [r3, #0]

		do {
			*(uint8_t*) pDest = (uint8_t) (pData >> (8U * (uint8_t) (i)));
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	701a      	strb	r2, [r3, #0]
			i++;
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	3301      	adds	r3, #1
 80061b6:	623b      	str	r3, [r7, #32]
			pDest++;
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	3301      	adds	r3, #1
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
			remaining_bytes--;
 80061be:	8bfb      	ldrh	r3, [r7, #30]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	83fb      	strh	r3, [r7, #30]
		} while (remaining_bytes != 0U);
 80061c4:	8bfb      	ldrh	r3, [r7, #30]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1ea      	bne.n	80061a0 <USB_ReadPacket+0x78>
	}

	return ((void*) pDest);
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	372c      	adds	r7, #44	@ 0x2c
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USB_ReadInterrupts>:
/**
 * @brief  USB_ReadInterrupts: return the global USB interrupt status
 * @param  USBx  Selected device
 * @retval USB Global Interrupt status
 */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx) {
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;

	tmpreg = USBx->GINTSTS;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	60fb      	str	r3, [r7, #12]
	tmpreg &= USBx->GINTMSK;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4013      	ands	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

	return tmpreg;
 80061f0:	68fb      	ldr	r3, [r7, #12]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USB_ReadChInterrupts>:
 * @brief  USB_ReadChInterrupts: return USB channel interrupt status
 * @param  USBx  Selected device
 * @param  chnum Channel number
 * @retval USB Channel Interrupt status
 */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum) {
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	tmpreg = USBx_HC(chnum)->HCINT;
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	60bb      	str	r3, [r7, #8]
	tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	4013      	ands	r3, r2
 8006230:	60bb      	str	r3, [r7, #8]

	return tmpreg;
 8006232:	68bb      	ldr	r3, [r7, #8]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_GetMode>:
 * @retval return core mode : Host or Device
 *          This parameter can be one of these values:
 *           0 : Host
 *           1 : Device
 */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx) {
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	return ((USBx->GINTSTS) & 0x1U);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	f003 0301 	and.w	r3, r3, #1
}
 8006250:	4618      	mov	r0, r3
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USB_CoreReset>:
/**
 * @brief  Reset the USB Core (needed after USB clock settings change)
 * @param  USBx  Selected device
 * @retval HAL status
 */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx) {
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
	__IO uint32_t count = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]

	/* Wait for AHB master IDLE state. */
	do {
		count++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3301      	adds	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006274:	d901      	bls.n	800627a <USB_CoreReset+0x1e>
			return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e01b      	b.n	80062b2 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	daf2      	bge.n	8006268 <USB_CoreReset+0xc>

	/* Core Soft Reset */
	count = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
	USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f043 0201 	orr.w	r2, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	611a      	str	r2, [r3, #16]

	do {
		count++;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3301      	adds	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]

		if (count > HAL_USB_TIMEOUT) {
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800629e:	d901      	bls.n	80062a4 <USB_CoreReset+0x48>
			return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e006      	b.n	80062b2 <USB_CoreReset+0x56>
		}
	} while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d0f0      	beq.n	8006292 <USB_CoreReset+0x36>

	return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <USB_HostInit>:
 * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
 *         the configuration information for the specified USBx peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_CfgTypeDef cfg) {
 80062c0:	b084      	sub	sp, #16
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b086      	sub	sp, #24
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80062ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	75fb      	strb	r3, [r7, #23]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60fb      	str	r3, [r7, #12]
	uint32_t i;

	/* Restart the Phy Clock */
	USBx_PCGCCTL = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062e0:	461a      	mov	r2, r3
 80062e2:	2300      	movs	r3, #0
 80062e4:	6013      	str	r3, [r2, #0]
#else
	/*
	 * Disable HW VBUS sensing. VBUS is internally considered to be always
	 * at VBUS-Valid level (5V).
	 */
	USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	639a      	str	r2, [r3, #56]	@ 0x38
	USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	639a      	str	r2, [r3, #56]	@ 0x38
	USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006302:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

	if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U) {
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d119      	bne.n	800634a <USB_HostInit+0x8a>
		if (cfg.speed == USBH_FSLS_SPEED) {
 8006316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800631a:	2b01      	cmp	r3, #1
 800631c:	d10a      	bne.n	8006334 <USB_HostInit+0x74>
			/* Force Device Enumeration to FS/LS mode only */
			USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800632c:	f043 0304 	orr.w	r3, r3, #4
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e014      	b.n	800635e <USB_HostInit+0x9e>
		} else {
			/* Set default Max speed support */
			USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006342:	f023 0304 	bic.w	r3, r3, #4
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	e009      	b.n	800635e <USB_HostInit+0x9e>
		}
	} else {
		/* Set default Max speed support */
		USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006358:	f023 0304 	bic.w	r3, r3, #4
 800635c:	6013      	str	r3, [r2, #0]
	}

	/* Make sure the FIFOs are flushed. */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800635e:	2110      	movs	r1, #16
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff fe43 	bl	8005fec <USB_FlushTxFifo>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <USB_HostInit+0xb0>
	{
		ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff fe6d 	bl	8006050 <USB_FlushRxFifo>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <USB_HostInit+0xc0>
		ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	75fb      	strb	r3, [r7, #23]
	}

	/* Clear all pending HC Interrupts */
	for (i = 0U; i < cfg.Host_channels; i++) {
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	e015      	b.n	80063b2 <USB_HostInit+0xf2>
		USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006392:	461a      	mov	r2, r3
 8006394:	f04f 33ff 	mov.w	r3, #4294967295
 8006398:	6093      	str	r3, [r2, #8]
		USBx_HC(i)->HCINTMSK = 0U;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a6:	461a      	mov	r2, r3
 80063a8:	2300      	movs	r3, #0
 80063aa:	60d3      	str	r3, [r2, #12]
	for (i = 0U; i < cfg.Host_channels; i++) {
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	3301      	adds	r3, #1
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063b6:	461a      	mov	r2, r3
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d3e3      	bcc.n	8006386 <USB_HostInit+0xc6>
	}

	/* Disable all interrupts. */
	USBx->GINTMSK = 0U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	619a      	str	r2, [r3, #24]

	/* Clear any pending interrupts */
	USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ca:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
	if (USBx == USB_OTG_HS) {
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a18      	ldr	r2, [pc, #96]	@ (8006430 <USB_HostInit+0x170>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d10b      	bne.n	80063ec <USB_HostInit+0x12c>
		/* set Rx FIFO size */
		USBx->GRXFSIZ = 0x200U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063da:	625a      	str	r2, [r3, #36]	@ 0x24
		USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t) (((0x100U << 16) & USB_OTG_NPTXFD)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <USB_HostInit+0x174>)
 80063e0:	629a      	str	r2, [r3, #40]	@ 0x28
				| 0x200U);
		USBx->HPTXFSIZ = (uint32_t) (((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a14      	ldr	r2, [pc, #80]	@ (8006438 <USB_HostInit+0x178>)
 80063e6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80063ea:	e009      	b.n	8006400 <USB_HostInit+0x140>
				| 0x300U);
	} else
#endif /* defined (USB_OTG_HS) */
	{
		/* set Rx FIFO size */
		USBx->GRXFSIZ = 0x80U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2280      	movs	r2, #128	@ 0x80
 80063f0:	625a      	str	r2, [r3, #36]	@ 0x24
		USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t) (((0x60U << 16) & USB_OTG_NPTXFD)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a11      	ldr	r2, [pc, #68]	@ (800643c <USB_HostInit+0x17c>)
 80063f6:	629a      	str	r2, [r3, #40]	@ 0x28
				| 0x80U);
		USBx->HPTXFSIZ = (uint32_t) (((0x40U << 16) & USB_OTG_HPTXFSIZ_PTXFD)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a11      	ldr	r2, [pc, #68]	@ (8006440 <USB_HostInit+0x180>)
 80063fc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
				| 0xE0U);
	}

	/* Enable the common interrupts */
	if (cfg.dma_enable == 0U) {
 8006400:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <USB_HostInit+0x154>
		USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f043 0210 	orr.w	r2, r3, #16
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	619a      	str	r2, [r3, #24]
	}

	/* Enable interrupts matching to the Host mode ONLY */
	USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM | USB_OTG_GINTMSK_HCIM |
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <USB_HostInit+0x184>)
 800641a:	4313      	orrs	r3, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6193      	str	r3, [r2, #24]
	USB_OTG_GINTMSK_SOFM | USB_OTG_GINTSTS_DISCINT |
	USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

	return ret;
 8006420:	7dfb      	ldrb	r3, [r7, #23]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800642c:	b004      	add	sp, #16
 800642e:	4770      	bx	lr
 8006430:	40040000 	.word	0x40040000
 8006434:	01000200 	.word	0x01000200
 8006438:	00e00300 	.word	0x00e00300
 800643c:	00600080 	.word	0x00600080
 8006440:	004000e0 	.word	0x004000e0
 8006444:	a3200008 	.word	0xa3200008

08006448 <USB_InitFSLSPClkSel>:
 *           HCFG_48_MHZ : Full Speed 48 MHz Clock
 *           HCFG_6_MHZ : Low Speed 6 MHz Clock
 * @retval HAL status
 */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t freq) {
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60fb      	str	r3, [r7, #12]

	USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	6013      	str	r3, [r2, #0]
	USBx_HOST->HCFG |= (uint32_t) freq & USB_OTG_HCFG_FSLSPCS;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	68f9      	ldr	r1, [r7, #12]
 800647c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006480:	4313      	orrs	r3, r2
 8006482:	600b      	str	r3, [r1, #0]

	if (freq == HCFG_48_MHZ) {
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d107      	bne.n	800649a <USB_InitFSLSPClkSel+0x52>
		USBx_HOST->HFIR = HFIR_48_MHZ;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006490:	461a      	mov	r2, r3
 8006492:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006496:	6053      	str	r3, [r2, #4]
 8006498:	e00c      	b.n	80064b4 <USB_InitFSLSPClkSel+0x6c>
	} else if (freq == HCFG_6_MHZ) {
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d107      	bne.n	80064b0 <USB_InitFSLSPClkSel+0x68>
		USBx_HOST->HFIR = HFIR_6_MHZ;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064a6:	461a      	mov	r2, r3
 80064a8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80064ac:	6053      	str	r3, [r2, #4]
 80064ae:	e001      	b.n	80064b4 <USB_InitFSLSPClkSel+0x6c>
	} else {
		return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <USB_InitFSLSPClkSel+0x6e>
	}

	return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USB_ResetPort>:
 * @param  USBx  Selected device
 * @retval HAL status
 * @note (1)The application must wait at least 10 ms
 *   before clearing the reset bit.
 */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx) {
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60fb      	str	r3, [r7, #12]

	__IO uint32_t hprt0 = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60bb      	str	r3, [r7, #8]

	hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80064e2:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80064ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064f0:	6013      	str	r3, [r2, #0]
	HAL_Delay(100U); /* See Note #1 */
 80064f2:	2064      	movs	r0, #100	@ 0x64
 80064f4:	f7fa fdc2 	bl	800107c <HAL_Delay>
	USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006504:	6013      	str	r3, [r2, #0]
	HAL_Delay(10U);
 8006506:	200a      	movs	r0, #10
 8006508:	f7fa fdb8 	bl	800107c <HAL_Delay>

	return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <USB_DriveVbus>:
 *           0 : Deactivate VBUS
 *           1 : Activate VBUS
 * @retval HAL status
 */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx,
		uint8_t state) {
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]
	__IO uint32_t hprt0 = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60bb      	str	r3, [r7, #8]

	hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800653a:	60bb      	str	r3, [r7, #8]
	USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

	if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U)) {
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <USB_DriveVbus+0x44>
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d106      	bne.n	800655a <USB_DriveVbus+0x44>
		USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006554:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006558:	6013      	str	r3, [r2, #0]
	}
	if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U)) {
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006564:	d109      	bne.n	800657a <USB_DriveVbus+0x64>
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <USB_DriveVbus+0x64>
		USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006574:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006578:	6013      	str	r3, [r2, #0]
	}
	return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_GetHostSpeed>:
 *          This parameter can be one of these values:
 *            @arg HCD_SPEED_HIGH: High speed mode
 *            @arg HCD_SPEED_FULL: Full speed mode
 *            @arg HCD_SPEED_LOW: Low speed mode
 */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx) {
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	60fb      	str	r3, [r7, #12]
	__IO uint32_t hprt0 = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	60bb      	str	r3, [r7, #8]

	hprt0 = USBx_HPRT0;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]
	return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	0c5b      	lsrs	r3, r3, #17
 80065a6:	f003 0303 	and.w	r3, r3, #3
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_GetCurrentFrame>:
/**
 * @brief  Return Host Current Frame number
 * @param  USBx  Selected device
 * @retval current frame number
 */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx) {
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60fb      	str	r3, [r7, #12]

	return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	b29b      	uxth	r3, r3
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_HC_Init>:
 *          This parameter can be a value from 0 to 32K
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
		uint8_t epnum, uint8_t dev_address, uint8_t speed, uint8_t ep_type,
		uint16_t mps) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	4608      	mov	r0, r1
 80065e2:	4611      	mov	r1, r2
 80065e4:	461a      	mov	r2, r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	70fb      	strb	r3, [r7, #3]
 80065ea:	460b      	mov	r3, r1
 80065ec:	70bb      	strb	r3, [r7, #2]
 80065ee:	4613      	mov	r3, r2
 80065f0:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	77fb      	strb	r3, [r7, #31]
	uint32_t USBx_BASE = (uint32_t) USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	613b      	str	r3, [r7, #16]
	uint32_t HCcharEpDir;
	uint32_t HCcharLowSpeed;
	uint32_t HostCoreSpeed;

	/* Clear old interrupt conditions for this host channel. */
	USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006606:	461a      	mov	r2, r3
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
 800660c:	6093      	str	r3, [r2, #8]

	/* Enable channel interrupts required for this transfer. */
	switch (ep_type) {
 800660e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006612:	2b03      	cmp	r3, #3
 8006614:	d87c      	bhi.n	8006710 <USB_HC_Init+0x138>
 8006616:	a201      	add	r2, pc, #4	@ (adr r2, 800661c <USB_HC_Init+0x44>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	0800662d 	.word	0x0800662d
 8006620:	080066d3 	.word	0x080066d3
 8006624:	0800662d 	.word	0x0800662d
 8006628:	08006695 	.word	0x08006695
	case EP_TYPE_CTRL:
	case EP_TYPE_BULK:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006638:	461a      	mov	r2, r3
 800663a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800663e:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_TXERRM |
		USB_OTG_HCINTMSK_DTERRM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_NAKM;

		if ((epnum & 0x80U) == 0x80U) {
 8006640:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006644:	2b00      	cmp	r3, #0
 8006646:	da10      	bge.n	800666a <USB_HC_Init+0x92>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4413      	add	r3, r2
 8006650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	78fa      	ldrb	r2, [r7, #3]
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	440a      	add	r2, r1
 800665e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006666:	60d3      	str	r3, [r2, #12]
						USB_OTG_HCINTMSK_NYET |
						USB_OTG_HCINTMSK_ACKM;
			}
#endif /* defined (USB_OTG_HS) */
		}
		break;
 8006668:	e055      	b.n	8006716 <USB_HC_Init+0x13e>
			if (USBx == USB_OTG_HS) {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a6f      	ldr	r2, [pc, #444]	@ (800682c <USB_HC_Init+0x254>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d151      	bne.n	8006716 <USB_HC_Init+0x13e>
				USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	78fa      	ldrb	r2, [r7, #3]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	440a      	add	r2, r1
 8006688:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800668c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006690:	60d3      	str	r3, [r2, #12]
		break;
 8006692:	e040      	b.n	8006716 <USB_HC_Init+0x13e>

	case EP_TYPE_INTR:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a0:	461a      	mov	r2, r3
 80066a2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80066a6:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_DTERRM |
		USB_OTG_HCINTMSK_NAKM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_FRMORM;

		if ((epnum & 0x80U) == 0x80U) {
 80066a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	da34      	bge.n	800671a <USB_HC_Init+0x142>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ce:	60d3      	str	r3, [r2, #12]
					USB_OTG_HCINTMSK_BBERRM;
		}

		break;
 80066d0:	e023      	b.n	800671a <USB_HC_Init+0x142>

	case EP_TYPE_ISOC:
		USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM |
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066de:	461a      	mov	r2, r3
 80066e0:	f240 2325 	movw	r3, #549	@ 0x225
 80066e4:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_ACKM |
		USB_OTG_HCINTMSK_AHBERR |
		USB_OTG_HCINTMSK_FRMORM;

		if ((epnum & 0x80U) == 0x80U) {
 80066e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	da17      	bge.n	800671e <USB_HC_Init+0x146>
			USBx_HC((uint32_t)ch_num)->HCINTMSK |=
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	78fa      	ldrb	r2, [r7, #3]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	440a      	add	r2, r1
 8006704:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006708:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800670c:	60d3      	str	r3, [r2, #12]
					(USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
		}
		break;
 800670e:	e006      	b.n	800671e <USB_HC_Init+0x146>

	default:
		ret = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	77fb      	strb	r3, [r7, #31]
		break;
 8006714:	e004      	b.n	8006720 <USB_HC_Init+0x148>
		break;
 8006716:	bf00      	nop
 8006718:	e002      	b.n	8006720 <USB_HC_Init+0x148>
		break;
 800671a:	bf00      	nop
 800671c:	e000      	b.n	8006720 <USB_HC_Init+0x148>
		break;
 800671e:	bf00      	nop
	}

	/* Clear Hub Start Split transaction */
	USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4413      	add	r3, r2
 8006728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800672c:	461a      	mov	r2, r3
 800672e:	2300      	movs	r3, #0
 8006730:	6053      	str	r3, [r2, #4]

	/* Enable host channel Halt interrupt */
	USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4413      	add	r3, r2
 800673a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	78fa      	ldrb	r2, [r7, #3]
 8006742:	0151      	lsls	r1, r2, #5
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	440a      	add	r2, r1
 8006748:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800674c:	f043 0302 	orr.w	r3, r3, #2
 8006750:	60d3      	str	r3, [r2, #12]

	/* Enable the top level host channel interrupt. */
	USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	2101      	movs	r1, #1
 8006762:	fa01 f303 	lsl.w	r3, r1, r3
 8006766:	6939      	ldr	r1, [r7, #16]
 8006768:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800676c:	4313      	orrs	r3, r2
 800676e:	618b      	str	r3, [r1, #24]

	/* Make sure host channel interrupts are enabled. */
	USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	619a      	str	r2, [r3, #24]

	/* Program the HCCHAR register */
	if ((epnum & 0x80U) == 0x80U) {
 800677c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006780:	2b00      	cmp	r3, #0
 8006782:	da03      	bge.n	800678c <USB_HC_Init+0x1b4>
		HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	e001      	b.n	8006790 <USB_HC_Init+0x1b8>
	} else {
		HCcharEpDir = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	61bb      	str	r3, [r7, #24]
	}

	HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff fef9 	bl	8006588 <USB_GetHostSpeed>
 8006796:	60f8      	str	r0, [r7, #12]

	/* LS device plugged to HUB */
	if ((speed == HPRT0_PRTSPD_LOW_SPEED)
 8006798:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800679c:	2b02      	cmp	r3, #2
 800679e:	d106      	bne.n	80067ae <USB_HC_Init+0x1d6>
			&& (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED)) {
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d003      	beq.n	80067ae <USB_HC_Init+0x1d6>
		HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80067a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e001      	b.n	80067b2 <USB_HC_Init+0x1da>
	} else {
		HCcharLowSpeed = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
	}

	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 80067b2:	787b      	ldrb	r3, [r7, #1]
 80067b4:	059b      	lsls	r3, r3, #22
			& USB_OTG_HCCHAR_DAD)
 80067b6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
			| ((((uint32_t) epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM)
 80067ba:	78bb      	ldrb	r3, [r7, #2]
 80067bc:	02db      	lsls	r3, r3, #11
 80067be:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
 80067c2:	431a      	orrs	r2, r3
			| (((uint32_t) ep_type << 18) & USB_OTG_HCCHAR_EPTYP)
 80067c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067c8:	049b      	lsls	r3, r3, #18
 80067ca:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80067ce:	431a      	orrs	r2, r3
			| ((uint32_t) mps & USB_OTG_HCCHAR_MPSIZ) |
 80067d0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80067d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067d6:	431a      	orrs	r2, r3
			USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	431a      	orrs	r2, r3
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4313      	orrs	r3, r2
	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 80067e0:	78fa      	ldrb	r2, [r7, #3]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
			USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80067ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
	USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t) dev_address << 22)
 80067f0:	6013      	str	r3, [r2, #0]

	if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC)) {
 80067f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d003      	beq.n	8006802 <USB_HC_Init+0x22a>
 80067fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d10f      	bne.n	8006822 <USB_HC_Init+0x24a>
		USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006802:	78fb      	ldrb	r3, [r7, #3]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4413      	add	r3, r2
 800680a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	78fa      	ldrb	r2, [r7, #3]
 8006812:	0151      	lsls	r1, r2, #5
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	440a      	add	r2, r1
 8006818:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800681c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006820:	6013      	str	r3, [r2, #0]
	}

	return ret;
 8006822:	7ffb      	ldrb	r3, [r7, #31]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40040000 	.word	0x40040000

08006830 <USB_HC_StartXfer>:
 *           0 : DMA feature not used
 *           1 : DMA feature used
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx,
		USB_OTG_HCTypeDef *hc, uint8_t dma) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	@ 0x30
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	4613      	mov	r3, r2
 800683c:	71fb      	strb	r3, [r7, #7]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	623b      	str	r3, [r7, #32]
	uint32_t ch_num = (uint32_t) hc->ch_num;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	61fb      	str	r3, [r7, #28]
	__IO uint32_t tmpreg;
	uint8_t is_oddframe;
	uint16_t len_words;
	uint16_t num_packets;
	uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800684c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
	if (USBx == USB_OTG_HS) {
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4a5d      	ldr	r2, [pc, #372]	@ (80069c8 <USB_HC_StartXfer+0x198>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d12f      	bne.n	80068b6 <USB_HC_StartXfer+0x86>
		/* in DMA mode host Core automatically issues ping in case of NYET/NAK */
		if (dma == 1U) {
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d11c      	bne.n	8006896 <USB_HC_StartXfer+0x66>
			if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	7c9b      	ldrb	r3, [r3, #18]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <USB_HC_StartXfer+0x3c>
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	7c9b      	ldrb	r3, [r3, #18]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d124      	bne.n	80068b6 <USB_HC_StartXfer+0x86>
					&& (hc->do_ssplit == 0U)) {
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	799b      	ldrb	r3, [r3, #6]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d120      	bne.n	80068b6 <USB_HC_StartXfer+0x86>

				USBx_HC((uint32_t)ch_num)->HCINTMSK &=
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	4413      	add	r3, r2
 800687c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	6a3a      	ldr	r2, [r7, #32]
 8006888:	440a      	add	r2, r1
 800688a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800688e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006892:	60d3      	str	r3, [r2, #12]
 8006894:	e00f      	b.n	80068b6 <USB_HC_StartXfer+0x86>
						~(USB_OTG_HCINTMSK_NYET |
						USB_OTG_HCINTMSK_ACKM |
						USB_OTG_HCINTMSK_NAKM);
			}
		} else {
			if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U)) {
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	791b      	ldrb	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <USB_HC_StartXfer+0x86>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	795b      	ldrb	r3, [r3, #5]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d107      	bne.n	80068b6 <USB_HC_StartXfer+0x86>
				(void) USB_DoPing(USBx, hc->ch_num);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	4619      	mov	r1, r3
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fb6b 	bl	8006f88 <USB_DoPing>
				return HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e232      	b.n	8006d1c <USB_HC_StartXfer+0x4ec>
			}
		}
	}
#endif /* defined (USB_OTG_HS) */

	if (hc->do_ssplit == 1U) {
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	799b      	ldrb	r3, [r3, #6]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d158      	bne.n	8006970 <USB_HC_StartXfer+0x140>
		/* Set number of packet to 1 for Split transaction */
		num_packets = 1U;
 80068be:	2301      	movs	r3, #1
 80068c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (hc->ep_is_in != 0U) {
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	78db      	ldrb	r3, [r3, #3]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <USB_HC_StartXfer+0xaa>
			hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 80068ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	8a92      	ldrh	r2, [r2, #20]
 80068d0:	fb03 f202 	mul.w	r2, r3, r2
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	61da      	str	r2, [r3, #28]
 80068d8:	e07c      	b.n	80069d4 <USB_HC_StartXfer+0x1a4>
		} else {
			if (hc->ep_type == EP_TYPE_ISOC) {
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	7c9b      	ldrb	r3, [r3, #18]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d130      	bne.n	8006944 <USB_HC_StartXfer+0x114>
				if (hc->xfer_len > ISO_SPLT_MPS) {
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	2bbc      	cmp	r3, #188	@ 0xbc
 80068e8:	d918      	bls.n	800691c <USB_HC_StartXfer+0xec>
					/* Isochrone Max Packet Size for Split mode */
					hc->XferSize = hc->max_packet;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	8a9b      	ldrh	r3, [r3, #20]
 80068ee:	461a      	mov	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	61da      	str	r2, [r3, #28]
					hc->xfer_len = hc->XferSize;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	621a      	str	r2, [r3, #32]

					if ((hc->iso_splt_xactPos == HCSPLT_BEGIN)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d003      	beq.n	800690c <USB_HC_StartXfer+0xdc>
							|| (hc->iso_splt_xactPos == HCSPLT_MIDDLE)) {
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d103      	bne.n	8006914 <USB_HC_StartXfer+0xe4>
						hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2202      	movs	r2, #2
 8006910:	60da      	str	r2, [r3, #12]
 8006912:	e05f      	b.n	80069d4 <USB_HC_StartXfer+0x1a4>
					} else {
						hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2201      	movs	r2, #1
 8006918:	60da      	str	r2, [r3, #12]
 800691a:	e05b      	b.n	80069d4 <USB_HC_StartXfer+0x1a4>
					}
				} else {
					hc->XferSize = hc->xfer_len;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	61da      	str	r2, [r3, #28]

					if ((hc->iso_splt_xactPos != HCSPLT_BEGIN)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d007      	beq.n	800693c <USB_HC_StartXfer+0x10c>
							&& (hc->iso_splt_xactPos != HCSPLT_MIDDLE)) {
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d003      	beq.n	800693c <USB_HC_StartXfer+0x10c>
						hc->iso_splt_xactPos = HCSPLT_FULL;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2204      	movs	r2, #4
 8006938:	60da      	str	r2, [r3, #12]
 800693a:	e04b      	b.n	80069d4 <USB_HC_StartXfer+0x1a4>
					} else {
						hc->iso_splt_xactPos = HCSPLT_END;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2203      	movs	r2, #3
 8006940:	60da      	str	r2, [r3, #12]
 8006942:	e047      	b.n	80069d4 <USB_HC_StartXfer+0x1a4>
					}
				}
			} else {
				if ((dma == 1U) && (hc->xfer_len > hc->max_packet)) {
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d10d      	bne.n	8006966 <USB_HC_StartXfer+0x136>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	8a92      	ldrh	r2, [r2, #20]
 8006952:	4293      	cmp	r3, r2
 8006954:	d907      	bls.n	8006966 <USB_HC_StartXfer+0x136>
					hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 8006956:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	8a92      	ldrh	r2, [r2, #20]
 800695c:	fb03 f202 	mul.w	r2, r3, r2
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	61da      	str	r2, [r3, #28]
 8006964:	e036      	b.n	80069d4 <USB_HC_StartXfer+0x1a4>
				} else {
					hc->XferSize = hc->xfer_len;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	6a1a      	ldr	r2, [r3, #32]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	61da      	str	r2, [r3, #28]
 800696e:	e031      	b.n	80069d4 <USB_HC_StartXfer+0x1a4>
				}
			}
		}
	} else {
		/* Compute the expected number of packets associated to the transfer */
		if (hc->xfer_len > 0U) {
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d018      	beq.n	80069aa <USB_HC_StartXfer+0x17a>
			num_packets = (uint16_t) ((hc->xfer_len + hc->max_packet - 1U)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	8a92      	ldrh	r2, [r2, #20]
 8006980:	4413      	add	r3, r2
 8006982:	3b01      	subs	r3, #1
					/ hc->max_packet);
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	8a92      	ldrh	r2, [r2, #20]
 8006988:	fbb3 f3f2 	udiv	r3, r3, r2
			num_packets = (uint16_t) ((hc->xfer_len + hc->max_packet - 1U)
 800698c:	84fb      	strh	r3, [r7, #38]	@ 0x26

			if (num_packets > max_hc_pkt_count) {
 800698e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006990:	8b7b      	ldrh	r3, [r7, #26]
 8006992:	429a      	cmp	r2, r3
 8006994:	d90b      	bls.n	80069ae <USB_HC_StartXfer+0x17e>
				num_packets = max_hc_pkt_count;
 8006996:	8b7b      	ldrh	r3, [r7, #26]
 8006998:	84fb      	strh	r3, [r7, #38]	@ 0x26
				hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 800699a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	8a92      	ldrh	r2, [r2, #20]
 80069a0:	fb03 f202 	mul.w	r2, r3, r2
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	61da      	str	r2, [r3, #28]
 80069a8:	e001      	b.n	80069ae <USB_HC_StartXfer+0x17e>
			}
		} else {
			num_packets = 1U;
 80069aa:	2301      	movs	r3, #1
 80069ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

		/*
		 * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
		 * max_packet size.
		 */
		if (hc->ep_is_in != 0U) {
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	78db      	ldrb	r3, [r3, #3]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <USB_HC_StartXfer+0x19c>
			hc->XferSize = (uint32_t) num_packets * hc->max_packet;
 80069b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	8a92      	ldrh	r2, [r2, #20]
 80069bc:	fb03 f202 	mul.w	r2, r3, r2
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	61da      	str	r2, [r3, #28]
 80069c4:	e006      	b.n	80069d4 <USB_HC_StartXfer+0x1a4>
 80069c6:	bf00      	nop
 80069c8:	40040000 	.word	0x40040000
		} else {
			hc->XferSize = hc->xfer_len;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	6a1a      	ldr	r2, [r3, #32]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	61da      	str	r2, [r3, #28]
		}
	}

	/* Initialize the HCTSIZn register */
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
			| (((uint32_t) num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT)
 80069dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069de:	04d9      	lsls	r1, r3, #19
 80069e0:	4ba3      	ldr	r3, [pc, #652]	@ (8006c70 <USB_HC_StartXfer+0x440>)
 80069e2:	400b      	ands	r3, r1
 80069e4:	431a      	orrs	r2, r3
			| (((uint32_t) hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	7d9b      	ldrb	r3, [r3, #22]
 80069ea:	075b      	lsls	r3, r3, #29
 80069ec:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 80069f0:	69f9      	ldr	r1, [r7, #28]
 80069f2:	0148      	lsls	r0, r1, #5
 80069f4:	6a39      	ldr	r1, [r7, #32]
 80069f6:	4401      	add	r1, r0
 80069f8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
			| (((uint32_t) hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80069fc:	4313      	orrs	r3, r2
	USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ)
 80069fe:	610b      	str	r3, [r1, #16]

	if (dma != 0U) {
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <USB_HC_StartXfer+0x1ea>
		/* xfer_buff MUST be 32-bits aligned */
		USBx_HC(ch_num)->HCDMA = (uint32_t) hc->xfer_buff;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6999      	ldr	r1, [r3, #24]
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a16:	460a      	mov	r2, r1
 8006a18:	615a      	str	r2, [r3, #20]
	}

	is_oddframe = (((uint32_t) USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf0c      	ite	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	2300      	movne	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	767b      	strb	r3, [r7, #25]
	USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	0151      	lsls	r1, r2, #5
 8006a44:	6a3a      	ldr	r2, [r7, #32]
 8006a46:	440a      	add	r2, r1
 8006a48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a50:	6013      	str	r3, [r2, #0]
	USBx_HC(ch_num)->HCCHAR |= (uint32_t) is_oddframe << 29;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	7e7b      	ldrb	r3, [r7, #25]
 8006a62:	075b      	lsls	r3, r3, #29
 8006a64:	69f9      	ldr	r1, [r7, #28]
 8006a66:	0148      	lsls	r0, r1, #5
 8006a68:	6a39      	ldr	r1, [r7, #32]
 8006a6a:	4401      	add	r1, r0
 8006a6c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006a70:	4313      	orrs	r3, r2
 8006a72:	600b      	str	r3, [r1, #0]

	if (hc->do_ssplit == 1U) {
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	799b      	ldrb	r3, [r3, #6]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	f040 80c3 	bne.w	8006c04 <USB_HC_StartXfer+0x3d4>
		/* Set Hub start Split transaction */
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	7c5b      	ldrb	r3, [r3, #17]
				<< USB_OTG_HCSPLT_HUBADDR_Pos) | (uint32_t) hc->hub_port_nbr
 8006a82:	01db      	lsls	r3, r3, #7
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	7c12      	ldrb	r2, [r2, #16]
 8006a88:	4313      	orrs	r3, r2
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	6a3a      	ldr	r2, [r7, #32]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
				| USB_OTG_HCSPLT_SPLITEN;
 8006a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
		USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t) hc->hub_addr
 8006a9a:	6053      	str	r3, [r2, #4]

		/* unmask ack & nyet for IN/OUT transactions */
		USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	0151      	lsls	r1, r2, #5
 8006aae:	6a3a      	ldr	r2, [r7, #32]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ab6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006aba:	60d3      	str	r3, [r2, #12]
		USB_OTG_HCINTMSK_NYET);

		if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U)) {
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	79db      	ldrb	r3, [r3, #7]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d123      	bne.n	8006b0c <USB_HC_StartXfer+0x2dc>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	78db      	ldrb	r3, [r3, #3]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11f      	bne.n	8006b0c <USB_HC_StartXfer+0x2dc>
			USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	6a3a      	ldr	r2, [r7, #32]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aea:	6053      	str	r3, [r2, #4]
					USB_OTG_HCSPLT_COMPLSPLT;
			USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	6a3a      	ldr	r2, [r7, #32]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b0a:	60d3      	str	r3, [r2, #12]
		}

		if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	7c9b      	ldrb	r3, [r3, #18]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d003      	beq.n	8006b1c <USB_HC_StartXfer+0x2ec>
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	7c9b      	ldrb	r3, [r3, #18]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d117      	bne.n	8006b4c <USB_HC_StartXfer+0x31c>
				&& (hc->do_csplit == 1U) && (hc->ep_is_in == 1U)) {
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	79db      	ldrb	r3, [r3, #7]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d113      	bne.n	8006b4c <USB_HC_StartXfer+0x31c>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	78db      	ldrb	r3, [r3, #3]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d10f      	bne.n	8006b4c <USB_HC_StartXfer+0x31c>
			USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	0151      	lsls	r1, r2, #5
 8006b3e:	6a3a      	ldr	r2, [r7, #32]
 8006b40:	440a      	add	r2, r1
 8006b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b4a:	6053      	str	r3, [r2, #4]
					USB_OTG_HCSPLT_COMPLSPLT;
		}

		/* Position management for iso out transaction on split mode */
		if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U)) {
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	7c9b      	ldrb	r3, [r3, #18]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d162      	bne.n	8006c1a <USB_HC_StartXfer+0x3ea>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	78db      	ldrb	r3, [r3, #3]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d15e      	bne.n	8006c1a <USB_HC_StartXfer+0x3ea>
			/* Set data payload position */
			switch (hc->iso_splt_xactPos) {
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d858      	bhi.n	8006c18 <USB_HC_StartXfer+0x3e8>
 8006b66:	a201      	add	r2, pc, #4	@ (adr r2, 8006b6c <USB_HC_StartXfer+0x33c>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006b9f 	.word	0x08006b9f
 8006b74:	08006bc1 	.word	0x08006bc1
 8006b78:	08006be3 	.word	0x08006be3
			case HCSPLT_BEGIN:
				/* First data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	6a3a      	ldr	r2, [r7, #32]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b9a:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_1;
				break;
 8006b9c:	e03d      	b.n	8006c1a <USB_HC_StartXfer+0x3ea>

			case HCSPLT_MIDDLE:
				/* Middle data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	6a3a      	ldr	r2, [r7, #32]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bb8:	f043 030e 	orr.w	r3, r3, #14
 8006bbc:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_Pos;
				break;
 8006bbe:	e02c      	b.n	8006c1a <USB_HC_StartXfer+0x3ea>

			case HCSPLT_END:
				/* End data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	6a3a      	ldr	r2, [r7, #32]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bde:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS_0;
				break;
 8006be0:	e01b      	b.n	8006c1a <USB_HC_StartXfer+0x3ea>

			case HCSPLT_FULL:
				/* Entire data payload for OUT Transaction */
				USBx_HC((uint32_t)ch_num)->HCSPLT |=
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	0151      	lsls	r1, r2, #5
 8006bf4:	6a3a      	ldr	r2, [r7, #32]
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c00:	6053      	str	r3, [r2, #4]
						USB_OTG_HCSPLT_XACTPOS;
				break;
 8006c02:	e00a      	b.n	8006c1a <USB_HC_StartXfer+0x3ea>
				break;
			}
		}
	} else {
		/* Clear Hub Start Split transaction */
		USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c10:	461a      	mov	r2, r3
 8006c12:	2300      	movs	r3, #0
 8006c14:	6053      	str	r3, [r2, #4]
 8006c16:	e000      	b.n	8006c1a <USB_HC_StartXfer+0x3ea>
				break;
 8006c18:	bf00      	nop
	}

	/* Set host channel enable */
	tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	613b      	str	r3, [r7, #16]
	tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c30:	613b      	str	r3, [r7, #16]

	/* make sure to set the correct ep direction */
	if (hc->ep_is_in != 0U) {
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	78db      	ldrb	r3, [r3, #3]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <USB_HC_StartXfer+0x414>
		tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	e003      	b.n	8006c4c <USB_HC_StartXfer+0x41c>
	} else {
		tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c4a:	613b      	str	r3, [r7, #16]
	}
	tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c52:	613b      	str	r3, [r7, #16]
	USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c60:	461a      	mov	r2, r3
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	6013      	str	r3, [r2, #0]

	if (dma != 0U) /* dma mode */
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <USB_HC_StartXfer+0x444>
	{
		return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e055      	b.n	8006d1c <USB_HC_StartXfer+0x4ec>
 8006c70:	1ff80000 	.word	0x1ff80000
	}

	if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U)) {
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	78db      	ldrb	r3, [r3, #3]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d14e      	bne.n	8006d1a <USB_HC_StartXfer+0x4ea>
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d04a      	beq.n	8006d1a <USB_HC_StartXfer+0x4ea>
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	79db      	ldrb	r3, [r3, #7]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d146      	bne.n	8006d1a <USB_HC_StartXfer+0x4ea>
		switch (hc->ep_type) {
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	7c9b      	ldrb	r3, [r3, #18]
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d831      	bhi.n	8006cf8 <USB_HC_StartXfer+0x4c8>
 8006c94:	a201      	add	r2, pc, #4	@ (adr r2, 8006c9c <USB_HC_StartXfer+0x46c>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006cad 	.word	0x08006cad
 8006ca8:	08006cd1 	.word	0x08006cd1
		/* Non periodic transfer */
		case EP_TYPE_CTRL:
		case EP_TYPE_BULK:

			len_words = (uint16_t) ((hc->xfer_len + 3U) / 4U);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	3303      	adds	r3, #3
 8006cb2:	089b      	lsrs	r3, r3, #2
 8006cb4:	82fb      	strh	r3, [r7, #22]

			/* check if there is enough space in FIFO space */
			if (len_words > (USBx->HNPTXSTS & 0xFFFFU)) {
 8006cb6:	8afa      	ldrh	r2, [r7, #22]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d91c      	bls.n	8006cfc <USB_HC_StartXfer+0x4cc>
				/* need to process data in nptxfempty interrupt */
				USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f043 0220 	orr.w	r2, r3, #32
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	619a      	str	r2, [r3, #24]
			}
			break;
 8006cce:	e015      	b.n	8006cfc <USB_HC_StartXfer+0x4cc>

			/* Periodic transfer */
		case EP_TYPE_INTR:
		case EP_TYPE_ISOC:
			len_words = (uint16_t) ((hc->xfer_len + 3U) / 4U);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	3303      	adds	r3, #3
 8006cd6:	089b      	lsrs	r3, r3, #2
 8006cd8:	82fb      	strh	r3, [r7, #22]
			/* check if there is enough space in FIFO space */
			if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cda:	8afa      	ldrh	r2, [r7, #22]
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d90a      	bls.n	8006d00 <USB_HC_StartXfer+0x4d0>
			{
				/* need to process data in ptxfempty interrupt */
				USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	619a      	str	r2, [r3, #24]
			}
			break;
 8006cf6:	e003      	b.n	8006d00 <USB_HC_StartXfer+0x4d0>

		default:
			break;
 8006cf8:	bf00      	nop
 8006cfa:	e002      	b.n	8006d02 <USB_HC_StartXfer+0x4d2>
			break;
 8006cfc:	bf00      	nop
 8006cfe:	e000      	b.n	8006d02 <USB_HC_StartXfer+0x4d2>
			break;
 8006d00:	bf00      	nop
		}

		/* Write packet into the Tx FIFO. */
		(void) USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num,
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	6999      	ldr	r1, [r3, #24]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	785a      	ldrb	r2, [r3, #1]
				(uint16_t) hc->xfer_len, 0);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
		(void) USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num,
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2000      	movs	r0, #0
 8006d12:	9000      	str	r0, [sp, #0]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff f9c9 	bl	80060ac <USB_WritePacket>
	}

	return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3728      	adds	r7, #40	@ 0x28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USB_HC_ReadInterrupt>:
/**
 * @brief Read all host channel interrupts status
 * @param  USBx  Selected device
 * @retval HAL state
 */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx) {
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60fb      	str	r3, [r7, #12]

	return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	b29b      	uxth	r3, r3
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <USB_HC_Halt>:
 * @param  USBx  Selected device
 * @param  hc_num  Host Channel number
 *         This parameter can be a value from 1 to 15
 * @retval HAL state
 */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num) {
 8006d46:	b480      	push	{r7}
 8006d48:	b089      	sub	sp, #36	@ 0x24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	460b      	mov	r3, r1
 8006d50:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	61fb      	str	r3, [r7, #28]
	uint32_t hcnum = (uint32_t) hc_num;
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	61bb      	str	r3, [r7, #24]
	__IO uint32_t count = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
	uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	0c9b      	lsrs	r3, r3, #18
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	617b      	str	r3, [r7, #20]
	uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	0fdb      	lsrs	r3, r3, #31
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	613b      	str	r3, [r7, #16]
	uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	0fdb      	lsrs	r3, r3, #31
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	60fb      	str	r3, [r7, #12]

	/* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
	 At the end of the next uframe/frame (in the worst case), the core generates a channel halted
	 and disables the channel automatically. */

	if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d10d      	bne.n	8006dc8 <USB_HC_Halt+0x82>
			&& (SplitEna == 0U))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <USB_HC_Halt+0x82>
			&& ((ChannelEna == 0U)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <USB_HC_Halt+0x7e>
					|| (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR))))) {
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d002      	beq.n	8006dc4 <USB_HC_Halt+0x7e>
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d101      	bne.n	8006dc8 <USB_HC_Halt+0x82>
		return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e0d8      	b.n	8006f7a <USB_HC_Halt+0x234>
	}

	/* Check for space in the request queue to issue the halt. */
	if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK)) {
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <USB_HC_Halt+0x8e>
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d173      	bne.n	8006ebc <USB_HC_Halt+0x176>
		USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006df2:	6013      	str	r3, [r2, #0]

		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d14a      	bne.n	8006e96 <USB_HC_Halt+0x150>
			if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U) {
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d133      	bne.n	8006e74 <USB_HC_Halt+0x12e>
				USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e2a:	6013      	str	r3, [r2, #0]
				USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e4a:	6013      	str	r3, [r2, #0]
				do {
					count++;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	60bb      	str	r3, [r7, #8]

					if (count > 1000U) {
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e58:	d82e      	bhi.n	8006eb8 <USB_HC_Halt+0x172>
						break;
					}
				} while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
						== USB_OTG_HCCHAR_CHENA);
 8006e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e70:	d0ec      	beq.n	8006e4c <USB_HC_Halt+0x106>
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8006e72:	e081      	b.n	8006f78 <USB_HC_Halt+0x232>
			} else {
				USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	69fa      	ldr	r2, [r7, #28]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e92:	6013      	str	r3, [r2, #0]
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8006e94:	e070      	b.n	8006f78 <USB_HC_Halt+0x232>
			}
		} else {
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006eb4:	6013      	str	r3, [r2, #0]
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8006eb6:	e05f      	b.n	8006f78 <USB_HC_Halt+0x232>
						break;
 8006eb8:	bf00      	nop
		if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U) {
 8006eba:	e05d      	b.n	8006f78 <USB_HC_Halt+0x232>
		}
	} else {
		USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ed6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006eda:	6013      	str	r3, [r2, #0]

		if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U) {
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d133      	bne.n	8006f54 <USB_HC_Halt+0x20e>
			USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f0a:	6013      	str	r3, [r2, #0]
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f2a:	6013      	str	r3, [r2, #0]
			do {
				count++;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60bb      	str	r3, [r7, #8]

				if (count > 1000U) {
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f38:	d81d      	bhi.n	8006f76 <USB_HC_Halt+0x230>
					break;
				}
			} while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
					== USB_OTG_HCCHAR_CHENA);
 8006f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f50:	d0ec      	beq.n	8006f2c <USB_HC_Halt+0x1e6>
 8006f52:	e011      	b.n	8006f78 <USB_HC_Halt+0x232>
		} else {
			USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	e000      	b.n	8006f78 <USB_HC_Halt+0x232>
					break;
 8006f76:	bf00      	nop
		}
	}

	return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3724      	adds	r7, #36	@ 0x24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <USB_DoPing>:
 * @param  USBx  Selected device
 * @param  hc_num  Host Channel number
 *         This parameter can be a value from 1 to 15
 * @retval HAL state
 */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num) {
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
	uint32_t USBx_BASE = (uint32_t) USBx;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	617b      	str	r3, [r7, #20]
	uint32_t chnum = (uint32_t) ch_num;
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	613b      	str	r3, [r7, #16]
	uint32_t num_packets = 1U;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	60fb      	str	r3, [r7, #12]
	uint32_t tmpreg;

	USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	04da      	lsls	r2, r3, #19
 8006fa4:	4b15      	ldr	r3, [pc, #84]	@ (8006ffc <USB_DoPing+0x74>)
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	0151      	lsls	r1, r2, #5
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	440a      	add	r2, r1
 8006fb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fb8:	6113      	str	r3, [r2, #16]
	USB_OTG_HCTSIZ_DOPING;

	/* Set host channel enable */
	tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60bb      	str	r3, [r7, #8]
	tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006fd0:	60bb      	str	r3, [r7, #8]
	tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fd8:	60bb      	str	r3, [r7, #8]
	USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	1ff80000 	.word	0x1ff80000

08007000 <USB_StopHost>:
/**
 * @brief  Stop Host Core
 * @param  USBx  Selected device
 * @retval HAL state
 */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	77fb      	strb	r3, [r7, #31]
	uint32_t USBx_BASE = (uint32_t) USBx;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	617b      	str	r3, [r7, #20]
	__IO uint32_t count = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]
	uint32_t value;
	uint32_t i;

	(void) USB_DisableGlobalInt(USBx);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7fe ff8c 	bl	8005f32 <USB_DisableGlobalInt>

	/* Flush USB FIFO */
	if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800701a:	2110      	movs	r1, #16
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7fe ffe5 	bl	8005fec <USB_FlushTxFifo>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <USB_StopHost+0x2c>
	{
		ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	77fb      	strb	r3, [r7, #31]
	}

	if (USB_FlushRxFifo(USBx) != HAL_OK) {
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff f80f 	bl	8006050 <USB_FlushRxFifo>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <USB_StopHost+0x3c>
		ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	77fb      	strb	r3, [r7, #31]
	}

	/* Flush out any leftover queued requests. */
	for (i = 0U; i <= 15U; i++) {
 800703c:	2300      	movs	r3, #0
 800703e:	61bb      	str	r3, [r7, #24]
 8007040:	e01f      	b.n	8007082 <USB_StopHost+0x82>
		value = USBx_HC(i)->HCCHAR;
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	4413      	add	r3, r2
 800704a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHDIS;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007058:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_CHENA;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007060:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_EPDIR;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007068:	613b      	str	r3, [r7, #16]
		USBx_HC(i)->HCCHAR = value;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	4413      	add	r3, r2
 8007072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007076:	461a      	mov	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	6013      	str	r3, [r2, #0]
	for (i = 0U; i <= 15U; i++) {
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	3301      	adds	r3, #1
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b0f      	cmp	r3, #15
 8007086:	d9dc      	bls.n	8007042 <USB_StopHost+0x42>
	}

	/* Halt all channels to put them into a known state. */
	for (i = 0U; i <= 15U; i++) {
 8007088:	2300      	movs	r3, #0
 800708a:	61bb      	str	r3, [r7, #24]
 800708c:	e034      	b.n	80070f8 <USB_StopHost+0xf8>
		value = USBx_HC(i)->HCCHAR;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	4413      	add	r3, r2
 8007096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHDIS;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070a4:	613b      	str	r3, [r7, #16]
		value |= USB_OTG_HCCHAR_CHENA;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070ac:	613b      	str	r3, [r7, #16]
		value &= ~USB_OTG_HCCHAR_EPDIR;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070b4:	613b      	str	r3, [r7, #16]
		USBx_HC(i)->HCCHAR = value;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c2:	461a      	mov	r2, r3
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	6013      	str	r3, [r2, #0]

		do {
			count++;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]

			if (count > 1000U) {
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070d4:	d80c      	bhi.n	80070f0 <USB_StopHost+0xf0>
				break;
			}
		} while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA)
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
				== USB_OTG_HCCHAR_CHENA);
 80070e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070ec:	d0ec      	beq.n	80070c8 <USB_StopHost+0xc8>
 80070ee:	e000      	b.n	80070f2 <USB_StopHost+0xf2>
				break;
 80070f0:	bf00      	nop
	for (i = 0U; i <= 15U; i++) {
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	3301      	adds	r3, #1
 80070f6:	61bb      	str	r3, [r7, #24]
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	2b0f      	cmp	r3, #15
 80070fc:	d9c7      	bls.n	800708e <USB_StopHost+0x8e>
	}

	/* Clear any pending Host interrupts */
	USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007104:	461a      	mov	r2, r3
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	6153      	str	r3, [r2, #20]
	USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	615a      	str	r2, [r3, #20]

	(void) USB_EnableGlobalInt(USBx);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7fe fefb 	bl	8005f10 <USB_EnableGlobalInt>

	return ret;
 800711a:	7ffb      	ldrb	r3, [r7, #31]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007124:	b590      	push	{r4, r7, lr}
 8007126:	b089      	sub	sp, #36	@ 0x24
 8007128:	af04      	add	r7, sp, #16
 800712a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800712c:	2301      	movs	r3, #1
 800712e:	2202      	movs	r2, #2
 8007130:	2102      	movs	r1, #2
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fc85 	bl	8007a42 <USBH_FindInterface>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2bff      	cmp	r3, #255	@ 0xff
 8007140:	d002      	beq.n	8007148 <USBH_CDC_InterfaceInit+0x24>
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d901      	bls.n	800714c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007148:	2302      	movs	r3, #2
 800714a:	e13d      	b.n	80073c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fc5a 	bl	8007a0a <USBH_SelectInterface>
 8007156:	4603      	mov	r3, r0
 8007158:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007160:	2302      	movs	r3, #2
 8007162:	e131      	b.n	80073c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800716a:	2050      	movs	r0, #80	@ 0x50
 800716c:	f002 fb64 	bl	8009838 <malloc>
 8007170:	4603      	mov	r3, r0
 8007172:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007184:	2302      	movs	r3, #2
 8007186:	e11f      	b.n	80073c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007188:	2250      	movs	r2, #80	@ 0x50
 800718a:	2100      	movs	r1, #0
 800718c:	68b8      	ldr	r0, [r7, #8]
 800718e:	f002 fc11 	bl	80099b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	211a      	movs	r1, #26
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	4413      	add	r3, r2
 800719e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	b25b      	sxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	da15      	bge.n	80071d6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	211a      	movs	r1, #26
 80071b0:	fb01 f303 	mul.w	r3, r1, r3
 80071b4:	4413      	add	r3, r2
 80071b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071ba:	781a      	ldrb	r2, [r3, #0]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	211a      	movs	r1, #26
 80071c6:	fb01 f303 	mul.w	r3, r1, r3
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80071d0:	881a      	ldrh	r2, [r3, #0]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 ffbe 	bl	800915e <USBH_AllocPipe>
 80071e2:	4603      	mov	r3, r0
 80071e4:	461a      	mov	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	7819      	ldrb	r1, [r3, #0]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	7858      	ldrb	r0, [r3, #1]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	8952      	ldrh	r2, [r2, #10]
 8007202:	9202      	str	r2, [sp, #8]
 8007204:	2203      	movs	r2, #3
 8007206:	9201      	str	r2, [sp, #4]
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	4623      	mov	r3, r4
 800720c:	4602      	mov	r2, r0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 ff76 	bl	8009100 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2200      	movs	r2, #0
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f002 fa85 	bl	800972c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007222:	2300      	movs	r3, #0
 8007224:	2200      	movs	r2, #0
 8007226:	210a      	movs	r1, #10
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fc0a 	bl	8007a42 <USBH_FindInterface>
 800722e:	4603      	mov	r3, r0
 8007230:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2bff      	cmp	r3, #255	@ 0xff
 8007236:	d002      	beq.n	800723e <USBH_CDC_InterfaceInit+0x11a>
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d901      	bls.n	8007242 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800723e:	2302      	movs	r3, #2
 8007240:	e0c2      	b.n	80073c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	211a      	movs	r1, #26
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	4413      	add	r3, r2
 800724e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b25b      	sxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	da16      	bge.n	8007288 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	211a      	movs	r1, #26
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	4413      	add	r3, r2
 8007266:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800726a:	781a      	ldrb	r2, [r3, #0]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	211a      	movs	r1, #26
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007280:	881a      	ldrh	r2, [r3, #0]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	835a      	strh	r2, [r3, #26]
 8007286:	e015      	b.n	80072b4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	211a      	movs	r1, #26
 800728e:	fb01 f303 	mul.w	r3, r1, r3
 8007292:	4413      	add	r3, r2
 8007294:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	211a      	movs	r1, #26
 80072a4:	fb01 f303 	mul.w	r3, r1, r3
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80072ae:	881a      	ldrh	r2, [r3, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	211a      	movs	r1, #26
 80072ba:	fb01 f303 	mul.w	r3, r1, r3
 80072be:	4413      	add	r3, r2
 80072c0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da16      	bge.n	80072fa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	211a      	movs	r1, #26
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	211a      	movs	r1, #26
 80072e8:	fb01 f303 	mul.w	r3, r1, r3
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80072f2:	881a      	ldrh	r2, [r3, #0]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	835a      	strh	r2, [r3, #26]
 80072f8:	e015      	b.n	8007326 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	211a      	movs	r1, #26
 8007300:	fb01 f303 	mul.w	r3, r1, r3
 8007304:	4413      	add	r3, r2
 8007306:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	211a      	movs	r1, #26
 8007316:	fb01 f303 	mul.w	r3, r1, r3
 800731a:	4413      	add	r3, r2
 800731c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007320:	881a      	ldrh	r2, [r3, #0]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	7b9b      	ldrb	r3, [r3, #14]
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 ff16 	bl	800915e <USBH_AllocPipe>
 8007332:	4603      	mov	r3, r0
 8007334:	461a      	mov	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	7bdb      	ldrb	r3, [r3, #15]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 ff0c 	bl	800915e <USBH_AllocPipe>
 8007346:	4603      	mov	r3, r0
 8007348:	461a      	mov	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	7b59      	ldrb	r1, [r3, #13]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	7b98      	ldrb	r0, [r3, #14]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	8b12      	ldrh	r2, [r2, #24]
 8007366:	9202      	str	r2, [sp, #8]
 8007368:	2202      	movs	r2, #2
 800736a:	9201      	str	r2, [sp, #4]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	4623      	mov	r3, r4
 8007370:	4602      	mov	r2, r0
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 fec4 	bl	8009100 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	7b19      	ldrb	r1, [r3, #12]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	7bd8      	ldrb	r0, [r3, #15]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	8b52      	ldrh	r2, [r2, #26]
 8007390:	9202      	str	r2, [sp, #8]
 8007392:	2202      	movs	r2, #2
 8007394:	9201      	str	r2, [sp, #4]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	4623      	mov	r3, r4
 800739a:	4602      	mov	r2, r0
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 feaf 	bl	8009100 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	7b5b      	ldrb	r3, [r3, #13]
 80073ae:	2200      	movs	r2, #0
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f002 f9ba 	bl	800972c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	7b1b      	ldrb	r3, [r3, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f002 f9b3 	bl	800972c <USBH_LL_SetToggle>

  return USBH_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd90      	pop	{r4, r7, pc}

080073d0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00e      	beq.n	8007408 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 fea4 	bl	800913e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 fecf 	bl	80091a0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	7b1b      	ldrb	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00e      	beq.n	800742e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	7b1b      	ldrb	r3, [r3, #12]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 fe91 	bl	800913e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	7b1b      	ldrb	r3, [r3, #12]
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 febc 	bl	80091a0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	7b5b      	ldrb	r3, [r3, #13]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00e      	beq.n	8007454 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	7b5b      	ldrb	r3, [r3, #13]
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 fe7e 	bl	800913e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	7b5b      	ldrb	r3, [r3, #13]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 fea9 	bl	80091a0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	4618      	mov	r0, r3
 800746a:	f002 f9ed 	bl	8009848 <free>
    phost->pActiveClass->pData = 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007474:	2200      	movs	r2, #0
 8007476:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3340      	adds	r3, #64	@ 0x40
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f8b1 	bl	8007602 <GetLineCoding>
 80074a0:	4603      	mov	r3, r0
 80074a2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80074a4:	7afb      	ldrb	r3, [r7, #11]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d105      	bne.n	80074b6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074b0:	2102      	movs	r1, #2
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80074b6:	7afb      	ldrb	r3, [r7, #11]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80074c8:	2301      	movs	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d877      	bhi.n	80075d4 <USBH_CDC_Process+0x114>
 80074e4:	a201      	add	r2, pc, #4	@ (adr r2, 80074ec <USBH_CDC_Process+0x2c>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	08007501 	.word	0x08007501
 80074f0:	08007507 	.word	0x08007507
 80074f4:	08007537 	.word	0x08007537
 80074f8:	080075ab 	.word	0x080075ab
 80074fc:	080075b9 	.word	0x080075b9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	73fb      	strb	r3, [r7, #15]
      break;
 8007504:	e06d      	b.n	80075e2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f897 	bl	8007640 <SetLineCoding>
 8007512:	4603      	mov	r3, r0
 8007514:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007524:	e058      	b.n	80075d8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d055      	beq.n	80075d8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2204      	movs	r2, #4
 8007530:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007534:	e050      	b.n	80075d8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	3340      	adds	r3, #64	@ 0x40
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f860 	bl	8007602 <GetLineCoding>
 8007542:	4603      	mov	r3, r0
 8007544:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d126      	bne.n	800759a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800755e:	791b      	ldrb	r3, [r3, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d13b      	bne.n	80075dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800756e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007570:	429a      	cmp	r2, r3
 8007572:	d133      	bne.n	80075dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800757e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007580:	429a      	cmp	r2, r3
 8007582:	d12b      	bne.n	80075dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800758c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800758e:	429a      	cmp	r2, r3
 8007590:	d124      	bne.n	80075dc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f958 	bl	8007848 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007598:	e020      	b.n	80075dc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d01d      	beq.n	80075dc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2204      	movs	r2, #4
 80075a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80075a8:	e018      	b.n	80075dc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f867 	bl	800767e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f8da 	bl	800776a <CDC_ProcessReception>
      break;
 80075b6:	e014      	b.n	80075e2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80075b8:	2100      	movs	r1, #0
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f001 f81a 	bl	80085f4 <USBH_ClrFeature>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80075d2:	e005      	b.n	80075e0 <USBH_CDC_Process+0x120>

    default:
      break;
 80075d4:	bf00      	nop
 80075d6:	e004      	b.n	80075e2 <USBH_CDC_Process+0x122>
      break;
 80075d8:	bf00      	nop
 80075da:	e002      	b.n	80075e2 <USBH_CDC_Process+0x122>
      break;
 80075dc:	bf00      	nop
 80075de:	e000      	b.n	80075e2 <USBH_CDC_Process+0x122>
      break;
 80075e0:	bf00      	nop

  }

  return status;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	22a1      	movs	r2, #161	@ 0xa1
 8007610:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2221      	movs	r2, #33	@ 0x21
 8007616:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2207      	movs	r2, #7
 8007628:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2207      	movs	r2, #7
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 fb14 	bl	8008c5e <USBH_CtlReq>
 8007636:	4603      	mov	r3, r0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2221      	movs	r2, #33	@ 0x21
 800764e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2207      	movs	r2, #7
 8007666:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2207      	movs	r2, #7
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 faf5 	bl	8008c5e <USBH_CtlReq>
 8007674:	4603      	mov	r3, r0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b086      	sub	sp, #24
 8007682:	af02      	add	r7, sp, #8
 8007684:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007690:	2300      	movs	r3, #0
 8007692:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800769a:	2b01      	cmp	r3, #1
 800769c:	d002      	beq.n	80076a4 <CDC_ProcessTransmission+0x26>
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d023      	beq.n	80076ea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80076a2:	e05e      	b.n	8007762 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	8b12      	ldrh	r2, [r2, #24]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d90b      	bls.n	80076c8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	69d9      	ldr	r1, [r3, #28]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8b1a      	ldrh	r2, [r3, #24]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	7b5b      	ldrb	r3, [r3, #13]
 80076bc:	2001      	movs	r0, #1
 80076be:	9000      	str	r0, [sp, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 fcda 	bl	800907a <USBH_BulkSendData>
 80076c6:	e00b      	b.n	80076e0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	7b5b      	ldrb	r3, [r3, #13]
 80076d6:	2001      	movs	r0, #1
 80076d8:	9000      	str	r0, [sp, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fccd 	bl	800907a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80076e8:	e03b      	b.n	8007762 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	7b5b      	ldrb	r3, [r3, #13]
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fff1 	bl	80096d8 <USBH_LL_GetURBState>
 80076f6:	4603      	mov	r3, r0
 80076f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80076fa:	7afb      	ldrb	r3, [r7, #11]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d128      	bne.n	8007752 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	8b12      	ldrh	r2, [r2, #24]
 8007708:	4293      	cmp	r3, r2
 800770a:	d90e      	bls.n	800772a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	8b12      	ldrh	r2, [r2, #24]
 8007714:	1a9a      	subs	r2, r3, r2
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	8b12      	ldrh	r2, [r2, #24]
 8007722:	441a      	add	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	61da      	str	r2, [r3, #28]
 8007728:	e002      	b.n	8007730 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	2b00      	cmp	r3, #0
 8007736:	d004      	beq.n	8007742 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007740:	e00e      	b.n	8007760 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f868 	bl	8007820 <USBH_CDC_TransmitCallback>
      break;
 8007750:	e006      	b.n	8007760 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007752:	7afb      	ldrb	r3, [r7, #11]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d103      	bne.n	8007760 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007760:	bf00      	nop
  }
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b086      	sub	sp, #24
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800777c:	2300      	movs	r3, #0
 800777e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007786:	2b03      	cmp	r3, #3
 8007788:	d002      	beq.n	8007790 <CDC_ProcessReception+0x26>
 800778a:	2b04      	cmp	r3, #4
 800778c:	d00e      	beq.n	80077ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800778e:	e043      	b.n	8007818 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	6a19      	ldr	r1, [r3, #32]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	8b5a      	ldrh	r2, [r3, #26]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	7b1b      	ldrb	r3, [r3, #12]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 fc91 	bl	80090c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2204      	movs	r2, #4
 80077a6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80077aa:	e035      	b.n	8007818 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	7b1b      	ldrb	r3, [r3, #12]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 ff90 	bl	80096d8 <USBH_LL_GetURBState>
 80077b8:	4603      	mov	r3, r0
 80077ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80077bc:	7cfb      	ldrb	r3, [r7, #19]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d129      	bne.n	8007816 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	7b1b      	ldrb	r3, [r3, #12]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 fef3 	bl	80095b4 <USBH_LL_GetLastXferSize>
 80077ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d016      	beq.n	8007808 <CDC_ProcessReception+0x9e>
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	8b5b      	ldrh	r3, [r3, #26]
 80077de:	461a      	mov	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d110      	bne.n	8007808 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	1ad2      	subs	r2, r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6a1a      	ldr	r2, [r3, #32]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	441a      	add	r2, r3
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2203      	movs	r2, #3
 8007802:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007806:	e006      	b.n	8007816 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f80f 	bl	8007834 <USBH_CDC_ReceiveCallback>
      break;
 8007816:	bf00      	nop
  }
}
 8007818:	bf00      	nop
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007870:	2302      	movs	r3, #2
 8007872:	e029      	b.n	80078c8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	79fa      	ldrb	r2, [r7, #7]
 8007878:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f81f 	bl	80078d0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f001 fdc3 	bl	800944c <USBH_LL_Init>

  return USBH_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	e009      	b.n	80078f6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	33e0      	adds	r3, #224	@ 0xe0
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	2200      	movs	r2, #0
 80078ee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b0f      	cmp	r3, #15
 80078fa:	d9f2      	bls.n	80078e2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078fc:	2300      	movs	r3, #0
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	e009      	b.n	8007916 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4413      	add	r3, r2
 8007908:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800790c:	2200      	movs	r2, #0
 800790e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3301      	adds	r3, #1
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800791c:	d3f1      	bcc.n	8007902 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2240      	movs	r2, #64	@ 0x40
 8007942:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	331c      	adds	r3, #28
 800796e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f002 f81d 	bl	80099b4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007984:	2100      	movs	r1, #0
 8007986:	4618      	mov	r0, r3
 8007988:	f002 f814 	bl	80099b4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007992:	2212      	movs	r2, #18
 8007994:	2100      	movs	r1, #0
 8007996:	4618      	mov	r0, r3
 8007998:	f002 f80c 	bl	80099b4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80079a2:	223e      	movs	r2, #62	@ 0x3e
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f002 f804 	bl	80099b4 <memset>

  return USBH_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d016      	beq.n	80079f8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10e      	bne.n	80079f2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80079da:	1c59      	adds	r1, r3, #1
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	33de      	adds	r3, #222	@ 0xde
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]
 80079f0:	e004      	b.n	80079fc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80079f2:	2302      	movs	r3, #2
 80079f4:	73fb      	strb	r3, [r7, #15]
 80079f6:	e001      	b.n	80079fc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80079f8:	2302      	movs	r3, #2
 80079fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007a20:	78fa      	ldrb	r2, [r7, #3]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d204      	bcs.n	8007a30 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	78fa      	ldrb	r2, [r7, #3]
 8007a2a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007a2e:	e001      	b.n	8007a34 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a30:	2302      	movs	r3, #2
 8007a32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b087      	sub	sp, #28
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	4608      	mov	r0, r1
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	461a      	mov	r2, r3
 8007a50:	4603      	mov	r3, r0
 8007a52:	70fb      	strb	r3, [r7, #3]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70bb      	strb	r3, [r7, #2]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007a6a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a6c:	e025      	b.n	8007aba <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	221a      	movs	r2, #26
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
 8007a76:	3308      	adds	r3, #8
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	795b      	ldrb	r3, [r3, #5]
 8007a84:	78fa      	ldrb	r2, [r7, #3]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d002      	beq.n	8007a90 <USBH_FindInterface+0x4e>
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	2bff      	cmp	r3, #255	@ 0xff
 8007a8e:	d111      	bne.n	8007ab4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a94:	78ba      	ldrb	r2, [r7, #2]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d002      	beq.n	8007aa0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a9a:	78bb      	ldrb	r3, [r7, #2]
 8007a9c:	2bff      	cmp	r3, #255	@ 0xff
 8007a9e:	d109      	bne.n	8007ab4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007aa4:	787a      	ldrb	r2, [r7, #1]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d002      	beq.n	8007ab0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007aaa:	787b      	ldrb	r3, [r7, #1]
 8007aac:	2bff      	cmp	r3, #255	@ 0xff
 8007aae:	d101      	bne.n	8007ab4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	e006      	b.n	8007ac2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d9d6      	bls.n	8007a6e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007ac0:	23ff      	movs	r3, #255	@ 0xff
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 fcf4 	bl	80094c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007adc:	2101      	movs	r1, #1
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f001 fe0d 	bl	80096fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af04      	add	r7, sp, #16
 8007af6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007af8:	2302      	movs	r3, #2
 8007afa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d102      	bne.n	8007b12 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2203      	movs	r2, #3
 8007b10:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b0b      	cmp	r3, #11
 8007b1a:	f200 81bb 	bhi.w	8007e94 <USBH_Process+0x3a4>
 8007b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <USBH_Process+0x34>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b55 	.word	0x08007b55
 8007b28:	08007b87 	.word	0x08007b87
 8007b2c:	08007bef 	.word	0x08007bef
 8007b30:	08007e2f 	.word	0x08007e2f
 8007b34:	08007e95 	.word	0x08007e95
 8007b38:	08007c8f 	.word	0x08007c8f
 8007b3c:	08007dd5 	.word	0x08007dd5
 8007b40:	08007cc5 	.word	0x08007cc5
 8007b44:	08007ce5 	.word	0x08007ce5
 8007b48:	08007d03 	.word	0x08007d03
 8007b4c:	08007d47 	.word	0x08007d47
 8007b50:	08007e17 	.word	0x08007e17
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 819b 	beq.w	8007e98 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007b68:	20c8      	movs	r0, #200	@ 0xc8
 8007b6a:	f001 fe12 	bl	8009792 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 fd05 	bl	800957e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b84:	e188      	b.n	8007e98 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d107      	bne.n	8007ba0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b9e:	e18a      	b.n	8007eb6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007ba6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007baa:	d914      	bls.n	8007bd6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d903      	bls.n	8007bce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	220d      	movs	r2, #13
 8007bca:	701a      	strb	r2, [r3, #0]
      break;
 8007bcc:	e173      	b.n	8007eb6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
      break;
 8007bd4:	e16f      	b.n	8007eb6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007bdc:	f103 020a 	add.w	r2, r3, #10
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007be6:	200a      	movs	r0, #10
 8007be8:	f001 fdd3 	bl	8009792 <USBH_Delay>
      break;
 8007bec:	e163      	b.n	8007eb6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d005      	beq.n	8007c04 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007bfe:	2104      	movs	r1, #4
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c04:	2064      	movs	r0, #100	@ 0x64
 8007c06:	f001 fdc4 	bl	8009792 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 fc90 	bl	8009530 <USBH_LL_GetSpeed>
 8007c10:	4603      	mov	r3, r0
 8007c12:	461a      	mov	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2205      	movs	r2, #5
 8007c1e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 fa9b 	bl	800915e <USBH_AllocPipe>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007c30:	2180      	movs	r1, #128	@ 0x80
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fa93 	bl	800915e <USBH_AllocPipe>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7919      	ldrb	r1, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c54:	9202      	str	r2, [sp, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	9201      	str	r2, [sp, #4]
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2280      	movs	r2, #128	@ 0x80
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 fa4d 	bl	8009100 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	7959      	ldrb	r1, [r3, #5]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007c7a:	9202      	str	r2, [sp, #8]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	9201      	str	r2, [sp, #4]
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	4603      	mov	r3, r0
 8007c84:	2200      	movs	r2, #0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fa3a 	bl	8009100 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c8c:	e113      	b.n	8007eb6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f916 	bl	8007ec0 <USBH_HandleEnum>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 80fd 	bne.w	8007e9c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d103      	bne.n	8007cbc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cba:	e0ef      	b.n	8007e9c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2207      	movs	r2, #7
 8007cc0:	701a      	strb	r2, [r3, #0]
      break;
 8007cc2:	e0eb      	b.n	8007e9c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80e8 	beq.w	8007ea0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2208      	movs	r2, #8
 8007ce0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007ce2:	e0dd      	b.n	8007ea0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fc3a 	bl	8008566 <USBH_SetCfg>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f040 80d5 	bne.w	8007ea4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2209      	movs	r2, #9
 8007cfe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d00:	e0d0      	b.n	8007ea4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d016      	beq.n	8007d3e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007d10:	2101      	movs	r1, #1
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fc4a 	bl	80085ac <USBH_SetFeature>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d103      	bne.n	8007d2c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	220a      	movs	r2, #10
 8007d28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d2a:	e0bd      	b.n	8007ea8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	f040 80b9 	bne.w	8007ea8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	220a      	movs	r2, #10
 8007d3a:	701a      	strb	r2, [r3, #0]
      break;
 8007d3c:	e0b4      	b.n	8007ea8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	220a      	movs	r2, #10
 8007d42:	701a      	strb	r2, [r3, #0]
      break;
 8007d44:	e0b0      	b.n	8007ea8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 80ad 	beq.w	8007eac <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
 8007d5e:	e016      	b.n	8007d8e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007d60:	7bfa      	ldrb	r2, [r7, #15]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	32de      	adds	r2, #222	@ 0xde
 8007d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6a:	791a      	ldrb	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d108      	bne.n	8007d88 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007d76:	7bfa      	ldrb	r2, [r7, #15]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	32de      	adds	r2, #222	@ 0xde
 8007d7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007d86:	e005      	b.n	8007d94 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d0e5      	beq.n	8007d60 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d016      	beq.n	8007dcc <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	4798      	blx	r3
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2206      	movs	r2, #6
 8007db4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dbc:	2103      	movs	r1, #3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dc2:	e073      	b.n	8007eac <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	220d      	movs	r2, #13
 8007dc8:	701a      	strb	r2, [r3, #0]
      break;
 8007dca:	e06f      	b.n	8007eac <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	220d      	movs	r2, #13
 8007dd0:	701a      	strb	r2, [r3, #0]
      break;
 8007dd2:	e06b      	b.n	8007eac <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d017      	beq.n	8007e0e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	4798      	blx	r3
 8007dea:	4603      	mov	r3, r0
 8007dec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d103      	bne.n	8007dfe <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	220b      	movs	r2, #11
 8007dfa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dfc:	e058      	b.n	8007eb0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d154      	bne.n	8007eb0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	220d      	movs	r2, #13
 8007e0a:	701a      	strb	r2, [r3, #0]
      break;
 8007e0c:	e050      	b.n	8007eb0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	220d      	movs	r2, #13
 8007e12:	701a      	strb	r2, [r3, #0]
      break;
 8007e14:	e04c      	b.n	8007eb0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d049      	beq.n	8007eb4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
      }
      break;
 8007e2c:	e042      	b.n	8007eb4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff fd4a 	bl	80078d0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e6a:	2105      	movs	r1, #5
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d107      	bne.n	8007e8c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff fe22 	bl	8007ace <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e8a:	e014      	b.n	8007eb6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 fb19 	bl	80094c4 <USBH_LL_Start>
      break;
 8007e92:	e010      	b.n	8007eb6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007e94:	bf00      	nop
 8007e96:	e00e      	b.n	8007eb6 <USBH_Process+0x3c6>
      break;
 8007e98:	bf00      	nop
 8007e9a:	e00c      	b.n	8007eb6 <USBH_Process+0x3c6>
      break;
 8007e9c:	bf00      	nop
 8007e9e:	e00a      	b.n	8007eb6 <USBH_Process+0x3c6>
    break;
 8007ea0:	bf00      	nop
 8007ea2:	e008      	b.n	8007eb6 <USBH_Process+0x3c6>
      break;
 8007ea4:	bf00      	nop
 8007ea6:	e006      	b.n	8007eb6 <USBH_Process+0x3c6>
      break;
 8007ea8:	bf00      	nop
 8007eaa:	e004      	b.n	8007eb6 <USBH_Process+0x3c6>
      break;
 8007eac:	bf00      	nop
 8007eae:	e002      	b.n	8007eb6 <USBH_Process+0x3c6>
      break;
 8007eb0:	bf00      	nop
 8007eb2:	e000      	b.n	8007eb6 <USBH_Process+0x3c6>
      break;
 8007eb4:	bf00      	nop
  }
  return USBH_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af04      	add	r7, sp, #16
 8007ec6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b07      	cmp	r3, #7
 8007ed6:	f200 81bd 	bhi.w	8008254 <USBH_HandleEnum+0x394>
 8007eda:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee0 <USBH_HandleEnum+0x20>)
 8007edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee0:	08007f01 	.word	0x08007f01
 8007ee4:	08007fbb 	.word	0x08007fbb
 8007ee8:	08008025 	.word	0x08008025
 8007eec:	080080af 	.word	0x080080af
 8007ef0:	08008119 	.word	0x08008119
 8007ef4:	08008189 	.word	0x08008189
 8007ef8:	080081cf 	.word	0x080081cf
 8007efc:	08008215 	.word	0x08008215
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f00:	2108      	movs	r1, #8
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa4c 	bl	80083a0 <USBH_Get_DevDesc>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d12e      	bne.n	8007f70 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	7919      	ldrb	r1, [r3, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f36:	9202      	str	r2, [sp, #8]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	9201      	str	r2, [sp, #4]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2280      	movs	r2, #128	@ 0x80
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 f8dc 	bl	8009100 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	7959      	ldrb	r1, [r3, #5]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f5c:	9202      	str	r2, [sp, #8]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	9201      	str	r2, [sp, #4]
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	4603      	mov	r3, r0
 8007f66:	2200      	movs	r2, #0
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 f8c9 	bl	8009100 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f6e:	e173      	b.n	8008258 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	f040 8170 	bne.w	8008258 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f7e:	3301      	adds	r3, #1
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d903      	bls.n	8007f9a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	220d      	movs	r2, #13
 8007f96:	701a      	strb	r2, [r3, #0]
      break;
 8007f98:	e15e      	b.n	8008258 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	795b      	ldrb	r3, [r3, #5]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 f8fd 	bl	80091a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	791b      	ldrb	r3, [r3, #4]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 f8f7 	bl	80091a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	701a      	strb	r2, [r3, #0]
      break;
 8007fb8:	e14e      	b.n	8008258 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007fba:	2112      	movs	r1, #18
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f9ef 	bl	80083a0 <USBH_Get_DevDesc>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d103      	bne.n	8007fd4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007fd2:	e143      	b.n	800825c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	f040 8140 	bne.w	800825c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d903      	bls.n	8007ffe <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	220d      	movs	r2, #13
 8007ffa:	701a      	strb	r2, [r3, #0]
      break;
 8007ffc:	e12e      	b.n	800825c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	795b      	ldrb	r3, [r3, #5]
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 f8cb 	bl	80091a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	791b      	ldrb	r3, [r3, #4]
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 f8c5 	bl	80091a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	701a      	strb	r2, [r3, #0]
      break;
 8008022:	e11b      	b.n	800825c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008024:	2101      	movs	r1, #1
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa79 	bl	800851e <USBH_SetAddress>
 800802c:	4603      	mov	r3, r0
 800802e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d130      	bne.n	8008098 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008036:	2002      	movs	r0, #2
 8008038:	f001 fbab 	bl	8009792 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2203      	movs	r2, #3
 8008048:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	7919      	ldrb	r1, [r3, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800805e:	9202      	str	r2, [sp, #8]
 8008060:	2200      	movs	r2, #0
 8008062:	9201      	str	r2, [sp, #4]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	4603      	mov	r3, r0
 8008068:	2280      	movs	r2, #128	@ 0x80
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 f848 	bl	8009100 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	7959      	ldrb	r1, [r3, #5]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008084:	9202      	str	r2, [sp, #8]
 8008086:	2200      	movs	r2, #0
 8008088:	9201      	str	r2, [sp, #4]
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	4603      	mov	r3, r0
 800808e:	2200      	movs	r2, #0
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 f835 	bl	8009100 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008096:	e0e3      	b.n	8008260 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	2b03      	cmp	r3, #3
 800809c:	f040 80e0 	bne.w	8008260 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	220d      	movs	r2, #13
 80080a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	705a      	strb	r2, [r3, #1]
      break;
 80080ac:	e0d8      	b.n	8008260 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80080ae:	2109      	movs	r1, #9
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f9a1 	bl	80083f8 <USBH_Get_CfgDesc>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d103      	bne.n	80080c8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2204      	movs	r2, #4
 80080c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080c6:	e0cd      	b.n	8008264 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	f040 80ca 	bne.w	8008264 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080d6:	3301      	adds	r3, #1
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d903      	bls.n	80080f2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	220d      	movs	r2, #13
 80080ee:	701a      	strb	r2, [r3, #0]
      break;
 80080f0:	e0b8      	b.n	8008264 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	795b      	ldrb	r3, [r3, #5]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 f851 	bl	80091a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	791b      	ldrb	r3, [r3, #4]
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f84b 	bl	80091a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	701a      	strb	r2, [r3, #0]
      break;
 8008116:	e0a5      	b.n	8008264 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f969 	bl	80083f8 <USBH_Get_CfgDesc>
 8008126:	4603      	mov	r3, r0
 8008128:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d103      	bne.n	8008138 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2205      	movs	r2, #5
 8008134:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008136:	e097      	b.n	8008268 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b03      	cmp	r3, #3
 800813c:	f040 8094 	bne.w	8008268 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008146:	3301      	adds	r3, #1
 8008148:	b2da      	uxtb	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008156:	2b03      	cmp	r3, #3
 8008158:	d903      	bls.n	8008162 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	220d      	movs	r2, #13
 800815e:	701a      	strb	r2, [r3, #0]
      break;
 8008160:	e082      	b.n	8008268 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	795b      	ldrb	r3, [r3, #5]
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 f819 	bl	80091a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	791b      	ldrb	r3, [r3, #4]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 f813 	bl	80091a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
      break;
 8008186:	e06f      	b.n	8008268 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800818e:	2b00      	cmp	r3, #0
 8008190:	d019      	beq.n	80081c6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800819e:	23ff      	movs	r3, #255	@ 0xff
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f953 	bl	800844c <USBH_Get_StringDesc>
 80081a6:	4603      	mov	r3, r0
 80081a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d103      	bne.n	80081b8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2206      	movs	r2, #6
 80081b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081b6:	e059      	b.n	800826c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d156      	bne.n	800826c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2206      	movs	r2, #6
 80081c2:	705a      	strb	r2, [r3, #1]
      break;
 80081c4:	e052      	b.n	800826c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2206      	movs	r2, #6
 80081ca:	705a      	strb	r2, [r3, #1]
      break;
 80081cc:	e04e      	b.n	800826c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d019      	beq.n	800820c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80081e4:	23ff      	movs	r3, #255	@ 0xff
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f930 	bl	800844c <USBH_Get_StringDesc>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2207      	movs	r2, #7
 80081fa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081fc:	e038      	b.n	8008270 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	2b03      	cmp	r3, #3
 8008202:	d135      	bne.n	8008270 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2207      	movs	r2, #7
 8008208:	705a      	strb	r2, [r3, #1]
      break;
 800820a:	e031      	b.n	8008270 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2207      	movs	r2, #7
 8008210:	705a      	strb	r2, [r3, #1]
      break;
 8008212:	e02d      	b.n	8008270 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800821a:	2b00      	cmp	r3, #0
 800821c:	d017      	beq.n	800824e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800822a:	23ff      	movs	r3, #255	@ 0xff
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f90d 	bl	800844c <USBH_Get_StringDesc>
 8008232:	4603      	mov	r3, r0
 8008234:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008240:	e018      	b.n	8008274 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b03      	cmp	r3, #3
 8008246:	d115      	bne.n	8008274 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
      break;
 800824c:	e012      	b.n	8008274 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	73fb      	strb	r3, [r7, #15]
      break;
 8008252:	e00f      	b.n	8008274 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008254:	bf00      	nop
 8008256:	e00e      	b.n	8008276 <USBH_HandleEnum+0x3b6>
      break;
 8008258:	bf00      	nop
 800825a:	e00c      	b.n	8008276 <USBH_HandleEnum+0x3b6>
      break;
 800825c:	bf00      	nop
 800825e:	e00a      	b.n	8008276 <USBH_HandleEnum+0x3b6>
      break;
 8008260:	bf00      	nop
 8008262:	e008      	b.n	8008276 <USBH_HandleEnum+0x3b6>
      break;
 8008264:	bf00      	nop
 8008266:	e006      	b.n	8008276 <USBH_HandleEnum+0x3b6>
      break;
 8008268:	bf00      	nop
 800826a:	e004      	b.n	8008276 <USBH_HandleEnum+0x3b6>
      break;
 800826c:	bf00      	nop
 800826e:	e002      	b.n	8008276 <USBH_HandleEnum+0x3b6>
      break;
 8008270:	bf00      	nop
 8008272:	e000      	b.n	8008276 <USBH_HandleEnum+0x3b6>
      break;
 8008274:	bf00      	nop
  }
  return Status;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008292:	bf00      	nop
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f804 	bl	80082c2 <USBH_HandleSof>
}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b0b      	cmp	r3, #11
 80082d2:	d10a      	bne.n	80082ea <USBH_HandleSof+0x28>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d005      	beq.n	80082ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
  }
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008302:	bf00      	nop
}
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800831e:	bf00      	nop
}
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 f8be 	bl	80094fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 ff0b 	bl	80091a0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	795b      	ldrb	r3, [r3, #5]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 ff05 	bl	80091a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80083ac:	887b      	ldrh	r3, [r7, #2]
 80083ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083b2:	d901      	bls.n	80083b8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e01b      	b.n	80083f0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80083be:	887b      	ldrh	r3, [r7, #2]
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	4613      	mov	r3, r2
 80083c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083c8:	2100      	movs	r1, #0
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f872 	bl	80084b4 <USBH_GetDescriptor>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d109      	bne.n	80083ee <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80083e0:	887a      	ldrh	r2, [r7, #2]
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f929 	bl	800863c <USBH_ParseDevDesc>
 80083ea:	4603      	mov	r3, r0
 80083ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	331c      	adds	r3, #28
 8008408:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800840a:	887b      	ldrh	r3, [r7, #2]
 800840c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008410:	d901      	bls.n	8008416 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008412:	2303      	movs	r3, #3
 8008414:	e016      	b.n	8008444 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008416:	887b      	ldrh	r3, [r7, #2]
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008420:	2100      	movs	r1, #0
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f846 	bl	80084b4 <USBH_GetDescriptor>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d107      	bne.n	8008442 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008432:	887b      	ldrh	r3, [r7, #2]
 8008434:	461a      	mov	r2, r3
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f9af 	bl	800879c <USBH_ParseCfgDesc>
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af02      	add	r7, sp, #8
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	607a      	str	r2, [r7, #4]
 8008456:	461a      	mov	r2, r3
 8008458:	460b      	mov	r3, r1
 800845a:	72fb      	strb	r3, [r7, #11]
 800845c:	4613      	mov	r3, r2
 800845e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008460:	893b      	ldrh	r3, [r7, #8]
 8008462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008466:	d802      	bhi.n	800846e <USBH_Get_StringDesc+0x22>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800846e:	2303      	movs	r3, #3
 8008470:	e01c      	b.n	80084ac <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008472:	7afb      	ldrb	r3, [r7, #11]
 8008474:	b29b      	uxth	r3, r3
 8008476:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800847a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008482:	893b      	ldrh	r3, [r7, #8]
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	460b      	mov	r3, r1
 8008488:	2100      	movs	r1, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f812 	bl	80084b4 <USBH_GetDescriptor>
 8008490:	4603      	mov	r3, r0
 8008492:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d107      	bne.n	80084aa <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80084a0:	893a      	ldrh	r2, [r7, #8]
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 fb8d 	bl	8008bc4 <USBH_ParseStringDesc>
  }

  return status;
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	607b      	str	r3, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	72fb      	strb	r3, [r7, #11]
 80084c2:	4613      	mov	r3, r2
 80084c4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	789b      	ldrb	r3, [r3, #2]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d11c      	bne.n	8008508 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80084ce:	7afb      	ldrb	r3, [r7, #11]
 80084d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2206      	movs	r2, #6
 80084de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	893a      	ldrh	r2, [r7, #8]
 80084e4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80084e6:	893b      	ldrh	r3, [r7, #8]
 80084e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80084ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084f0:	d104      	bne.n	80084fc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f240 4209 	movw	r2, #1033	@ 0x409
 80084f8:	829a      	strh	r2, [r3, #20]
 80084fa:	e002      	b.n	8008502 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8b3a      	ldrh	r2, [r7, #24]
 8008506:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008508:	8b3b      	ldrh	r3, [r7, #24]
 800850a:	461a      	mov	r2, r3
 800850c:	6879      	ldr	r1, [r7, #4]
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fba5 	bl	8008c5e <USBH_CtlReq>
 8008514:	4603      	mov	r3, r0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	789b      	ldrb	r3, [r3, #2]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d10f      	bne.n	8008552 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2205      	movs	r2, #5
 800853c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	b29a      	uxth	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008552:	2200      	movs	r2, #0
 8008554:	2100      	movs	r1, #0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fb81 	bl	8008c5e <USBH_CtlReq>
 800855c:	4603      	mov	r3, r0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	789b      	ldrb	r3, [r3, #2]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d10e      	bne.n	8008598 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2209      	movs	r2, #9
 8008584:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	887a      	ldrh	r2, [r7, #2]
 800858a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008598:	2200      	movs	r2, #0
 800859a:	2100      	movs	r1, #0
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fb5e 	bl	8008c5e <USBH_CtlReq>
 80085a2:	4603      	mov	r3, r0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	789b      	ldrb	r3, [r3, #2]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d10f      	bne.n	80085e0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2203      	movs	r2, #3
 80085ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80085e0:	2200      	movs	r2, #0
 80085e2:	2100      	movs	r1, #0
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fb3a 	bl	8008c5e <USBH_CtlReq>
 80085ea:	4603      	mov	r3, r0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	789b      	ldrb	r3, [r3, #2]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d10f      	bne.n	8008628 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	b29a      	uxth	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008628:	2200      	movs	r2, #0
 800862a:	2100      	movs	r1, #0
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fb16 	bl	8008c5e <USBH_CtlReq>
 8008632:	4603      	mov	r3, r0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	4613      	mov	r3, r2
 8008648:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008650:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800865c:	2302      	movs	r3, #2
 800865e:	e094      	b.n	800878a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	785a      	ldrb	r2, [r3, #1]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	3302      	adds	r3, #2
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	3303      	adds	r3, #3
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	021b      	lsls	r3, r3, #8
 8008680:	b29b      	uxth	r3, r3
 8008682:	4313      	orrs	r3, r2
 8008684:	b29a      	uxth	r2, r3
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	791a      	ldrb	r2, [r3, #4]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	795a      	ldrb	r2, [r3, #5]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	799a      	ldrb	r2, [r3, #6]
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	79da      	ldrb	r2, [r3, #7]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d004      	beq.n	80086be <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d11b      	bne.n	80086f6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	79db      	ldrb	r3, [r3, #7]
 80086c2:	2b20      	cmp	r3, #32
 80086c4:	dc0f      	bgt.n	80086e6 <USBH_ParseDevDesc+0xaa>
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	db0f      	blt.n	80086ea <USBH_ParseDevDesc+0xae>
 80086ca:	3b08      	subs	r3, #8
 80086cc:	4a32      	ldr	r2, [pc, #200]	@ (8008798 <USBH_ParseDevDesc+0x15c>)
 80086ce:	fa22 f303 	lsr.w	r3, r2, r3
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bf14      	ite	ne
 80086da:	2301      	movne	r3, #1
 80086dc:	2300      	moveq	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d106      	bne.n	80086f2 <USBH_ParseDevDesc+0xb6>
 80086e4:	e001      	b.n	80086ea <USBH_ParseDevDesc+0xae>
 80086e6:	2b40      	cmp	r3, #64	@ 0x40
 80086e8:	d003      	beq.n	80086f2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	2208      	movs	r2, #8
 80086ee:	71da      	strb	r2, [r3, #7]
        break;
 80086f0:	e000      	b.n	80086f4 <USBH_ParseDevDesc+0xb8>
        break;
 80086f2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80086f4:	e00e      	b.n	8008714 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d107      	bne.n	8008710 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	79db      	ldrb	r3, [r3, #7]
 8008704:	2b08      	cmp	r3, #8
 8008706:	d005      	beq.n	8008714 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2208      	movs	r2, #8
 800870c:	71da      	strb	r2, [r3, #7]
 800870e:	e001      	b.n	8008714 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008710:	2303      	movs	r3, #3
 8008712:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008714:	88fb      	ldrh	r3, [r7, #6]
 8008716:	2b08      	cmp	r3, #8
 8008718:	d936      	bls.n	8008788 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	3308      	adds	r3, #8
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	461a      	mov	r2, r3
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	3309      	adds	r3, #9
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	021b      	lsls	r3, r3, #8
 800872a:	b29b      	uxth	r3, r3
 800872c:	4313      	orrs	r3, r2
 800872e:	b29a      	uxth	r2, r3
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	330a      	adds	r3, #10
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	330b      	adds	r3, #11
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	b29b      	uxth	r3, r3
 8008746:	4313      	orrs	r3, r2
 8008748:	b29a      	uxth	r2, r3
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	330c      	adds	r3, #12
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	330d      	adds	r3, #13
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	b29b      	uxth	r3, r3
 8008760:	4313      	orrs	r3, r2
 8008762:	b29a      	uxth	r2, r3
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	7b9a      	ldrb	r2, [r3, #14]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	7bda      	ldrb	r2, [r3, #15]
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	7c1a      	ldrb	r2, [r3, #16]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	7c5a      	ldrb	r2, [r3, #17]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008788:	7dfb      	ldrb	r3, [r7, #23]
}
 800878a:	4618      	mov	r0, r3
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	01000101 	.word	0x01000101

0800879c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08c      	sub	sp, #48	@ 0x30
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80087b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80087ca:	2302      	movs	r3, #2
 80087cc:	e0da      	b.n	8008984 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80087d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b09      	cmp	r3, #9
 80087d8:	d002      	beq.n	80087e0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	2209      	movs	r2, #9
 80087de:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	781a      	ldrb	r2, [r3, #0]
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	785a      	ldrb	r2, [r3, #1]
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	3302      	adds	r3, #2
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	3303      	adds	r3, #3
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	b29b      	uxth	r3, r3
 8008802:	4313      	orrs	r3, r2
 8008804:	b29b      	uxth	r3, r3
 8008806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800880a:	bf28      	it	cs
 800880c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008810:	b29a      	uxth	r2, r3
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	791a      	ldrb	r2, [r3, #4]
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	795a      	ldrb	r2, [r3, #5]
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	799a      	ldrb	r2, [r3, #6]
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	79da      	ldrb	r2, [r3, #7]
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	7a1a      	ldrb	r2, [r3, #8]
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800883e:	88fb      	ldrh	r3, [r7, #6]
 8008840:	2b09      	cmp	r3, #9
 8008842:	f240 809d 	bls.w	8008980 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008846:	2309      	movs	r3, #9
 8008848:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800884e:	e081      	b.n	8008954 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008850:	f107 0316 	add.w	r3, r7, #22
 8008854:	4619      	mov	r1, r3
 8008856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008858:	f000 f9e7 	bl	8008c2a <USBH_GetNextDesc>
 800885c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800885e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008860:	785b      	ldrb	r3, [r3, #1]
 8008862:	2b04      	cmp	r3, #4
 8008864:	d176      	bne.n	8008954 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b09      	cmp	r3, #9
 800886c:	d002      	beq.n	8008874 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800886e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008870:	2209      	movs	r2, #9
 8008872:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008878:	221a      	movs	r2, #26
 800887a:	fb02 f303 	mul.w	r3, r2, r3
 800887e:	3308      	adds	r3, #8
 8008880:	6a3a      	ldr	r2, [r7, #32]
 8008882:	4413      	add	r3, r2
 8008884:	3302      	adds	r3, #2
 8008886:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800888a:	69f8      	ldr	r0, [r7, #28]
 800888c:	f000 f87e 	bl	800898c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008896:	2300      	movs	r3, #0
 8008898:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800889a:	e043      	b.n	8008924 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800889c:	f107 0316 	add.w	r3, r7, #22
 80088a0:	4619      	mov	r1, r3
 80088a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088a4:	f000 f9c1 	bl	8008c2a <USBH_GetNextDesc>
 80088a8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ac:	785b      	ldrb	r3, [r3, #1]
 80088ae:	2b05      	cmp	r3, #5
 80088b0:	d138      	bne.n	8008924 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	795b      	ldrb	r3, [r3, #5]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d113      	bne.n	80088e2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d003      	beq.n	80088ca <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	799b      	ldrb	r3, [r3, #6]
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d10b      	bne.n	80088e2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	79db      	ldrb	r3, [r3, #7]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10b      	bne.n	80088ea <USBH_ParseCfgDesc+0x14e>
 80088d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b09      	cmp	r3, #9
 80088d8:	d007      	beq.n	80088ea <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80088da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088dc:	2209      	movs	r2, #9
 80088de:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088e0:	e003      	b.n	80088ea <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80088e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e4:	2207      	movs	r2, #7
 80088e6:	701a      	strb	r2, [r3, #0]
 80088e8:	e000      	b.n	80088ec <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088ea:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80088ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088f0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80088f4:	3201      	adds	r2, #1
 80088f6:	00d2      	lsls	r2, r2, #3
 80088f8:	211a      	movs	r1, #26
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	4413      	add	r3, r2
 8008900:	3308      	adds	r3, #8
 8008902:	6a3a      	ldr	r2, [r7, #32]
 8008904:	4413      	add	r3, r2
 8008906:	3304      	adds	r3, #4
 8008908:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800890a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800890c:	69b9      	ldr	r1, [r7, #24]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 f870 	bl	80089f4 <USBH_ParseEPDesc>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800891a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800891e:	3301      	adds	r3, #1
 8008920:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	791b      	ldrb	r3, [r3, #4]
 8008928:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800892c:	429a      	cmp	r2, r3
 800892e:	d204      	bcs.n	800893a <USBH_ParseCfgDesc+0x19e>
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	885a      	ldrh	r2, [r3, #2]
 8008934:	8afb      	ldrh	r3, [r7, #22]
 8008936:	429a      	cmp	r2, r3
 8008938:	d8b0      	bhi.n	800889c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	791b      	ldrb	r3, [r3, #4]
 800893e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008942:	429a      	cmp	r2, r3
 8008944:	d201      	bcs.n	800894a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008946:	2303      	movs	r3, #3
 8008948:	e01c      	b.n	8008984 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800894a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800894e:	3301      	adds	r3, #1
 8008950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008958:	2b01      	cmp	r3, #1
 800895a:	d805      	bhi.n	8008968 <USBH_ParseCfgDesc+0x1cc>
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	885a      	ldrh	r2, [r3, #2]
 8008960:	8afb      	ldrh	r3, [r7, #22]
 8008962:	429a      	cmp	r2, r3
 8008964:	f63f af74 	bhi.w	8008850 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	791b      	ldrb	r3, [r3, #4]
 800896c:	2b02      	cmp	r3, #2
 800896e:	bf28      	it	cs
 8008970:	2302      	movcs	r3, #2
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008978:	429a      	cmp	r2, r3
 800897a:	d201      	bcs.n	8008980 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800897c:	2303      	movs	r3, #3
 800897e:	e001      	b.n	8008984 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008980:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008984:	4618      	mov	r0, r3
 8008986:	3730      	adds	r7, #48	@ 0x30
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781a      	ldrb	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	785a      	ldrb	r2, [r3, #1]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	789a      	ldrb	r2, [r3, #2]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	78da      	ldrb	r2, [r3, #3]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	3304      	adds	r3, #4
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	bf28      	it	cs
 80089c0:	2302      	movcs	r3, #2
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	795a      	ldrb	r2, [r3, #5]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	799a      	ldrb	r2, [r3, #6]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	79da      	ldrb	r2, [r3, #7]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	7a1a      	ldrb	r2, [r3, #8]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	721a      	strb	r2, [r3, #8]
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	781a      	ldrb	r2, [r3, #0]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	785a      	ldrb	r2, [r3, #1]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	789a      	ldrb	r2, [r3, #2]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	78da      	ldrb	r2, [r3, #3]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3304      	adds	r3, #4
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3305      	adds	r3, #5
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	4313      	orrs	r3, r2
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	799a      	ldrb	r2, [r3, #6]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	889b      	ldrh	r3, [r3, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d009      	beq.n	8008a62 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a56:	d804      	bhi.n	8008a62 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a60:	d901      	bls.n	8008a66 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008a62:	2303      	movs	r3, #3
 8008a64:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d136      	bne.n	8008ade <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	78db      	ldrb	r3, [r3, #3]
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d108      	bne.n	8008a8e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	889b      	ldrh	r3, [r3, #4]
 8008a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a84:	f240 8097 	bls.w	8008bb6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	75fb      	strb	r3, [r7, #23]
 8008a8c:	e093      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	78db      	ldrb	r3, [r3, #3]
 8008a92:	f003 0303 	and.w	r3, r3, #3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d107      	bne.n	8008aaa <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	889b      	ldrh	r3, [r3, #4]
 8008a9e:	2b40      	cmp	r3, #64	@ 0x40
 8008aa0:	f240 8089 	bls.w	8008bb6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	75fb      	strb	r3, [r7, #23]
 8008aa8:	e085      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	78db      	ldrb	r3, [r3, #3]
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d005      	beq.n	8008ac2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	78db      	ldrb	r3, [r3, #3]
 8008aba:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d10a      	bne.n	8008ad8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	799b      	ldrb	r3, [r3, #6]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <USBH_ParseEPDesc+0xde>
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	799b      	ldrb	r3, [r3, #6]
 8008ace:	2b10      	cmp	r3, #16
 8008ad0:	d970      	bls.n	8008bb4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ad6:	e06d      	b.n	8008bb4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	75fb      	strb	r3, [r7, #23]
 8008adc:	e06b      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d13c      	bne.n	8008b62 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	78db      	ldrb	r3, [r3, #3]
 8008aec:	f003 0303 	and.w	r3, r3, #3
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d005      	beq.n	8008b00 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	78db      	ldrb	r3, [r3, #3]
 8008af8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d106      	bne.n	8008b0e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	889b      	ldrh	r3, [r3, #4]
 8008b04:	2b40      	cmp	r3, #64	@ 0x40
 8008b06:	d956      	bls.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b0c:	e053      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	78db      	ldrb	r3, [r3, #3]
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d10e      	bne.n	8008b38 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	799b      	ldrb	r3, [r3, #6]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d007      	beq.n	8008b32 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008b26:	2b10      	cmp	r3, #16
 8008b28:	d803      	bhi.n	8008b32 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008b2e:	2b40      	cmp	r3, #64	@ 0x40
 8008b30:	d941      	bls.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b32:	2303      	movs	r3, #3
 8008b34:	75fb      	strb	r3, [r7, #23]
 8008b36:	e03e      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	78db      	ldrb	r3, [r3, #3]
 8008b3c:	f003 0303 	and.w	r3, r3, #3
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d10b      	bne.n	8008b5c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	799b      	ldrb	r3, [r3, #6]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <USBH_ParseEPDesc+0x162>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	889b      	ldrh	r3, [r3, #4]
 8008b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b54:	d32f      	bcc.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b56:	2303      	movs	r3, #3
 8008b58:	75fb      	strb	r3, [r7, #23]
 8008b5a:	e02c      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	75fb      	strb	r3, [r7, #23]
 8008b60:	e029      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d120      	bne.n	8008bae <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	78db      	ldrb	r3, [r3, #3]
 8008b70:	f003 0303 	and.w	r3, r3, #3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d106      	bne.n	8008b86 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	889b      	ldrh	r3, [r3, #4]
 8008b7c:	2b08      	cmp	r3, #8
 8008b7e:	d01a      	beq.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b80:	2303      	movs	r3, #3
 8008b82:	75fb      	strb	r3, [r7, #23]
 8008b84:	e017      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	78db      	ldrb	r3, [r3, #3]
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d10a      	bne.n	8008ba8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	799b      	ldrb	r3, [r3, #6]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <USBH_ParseEPDesc+0x1ae>
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	889b      	ldrh	r3, [r3, #4]
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	d909      	bls.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	75fb      	strb	r3, [r7, #23]
 8008ba6:	e006      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	75fb      	strb	r3, [r7, #23]
 8008bac:	e003      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	75fb      	strb	r3, [r7, #23]
 8008bb2:	e000      	b.n	8008bb6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008bb4:	bf00      	nop
  }

  return status;
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	371c      	adds	r7, #28
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d120      	bne.n	8008c1e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	1e9a      	subs	r2, r3, #2
 8008be2:	88fb      	ldrh	r3, [r7, #6]
 8008be4:	4293      	cmp	r3, r2
 8008be6:	bf28      	it	cs
 8008be8:	4613      	movcs	r3, r2
 8008bea:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3302      	adds	r3, #2
 8008bf0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	82fb      	strh	r3, [r7, #22]
 8008bf6:	e00b      	b.n	8008c10 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008bf8:	8afb      	ldrh	r3, [r7, #22]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	3301      	adds	r3, #1
 8008c08:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c0a:	8afb      	ldrh	r3, [r7, #22]
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	82fb      	strh	r3, [r7, #22]
 8008c10:	8afa      	ldrh	r2, [r7, #22]
 8008c12:	8abb      	ldrh	r3, [r7, #20]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d3ef      	bcc.n	8008bf8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	701a      	strb	r2, [r3, #0]
  }
}
 8008c1e:	bf00      	nop
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c50:	68fb      	ldr	r3, [r7, #12]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b086      	sub	sp, #24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	789b      	ldrb	r3, [r3, #2]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d002      	beq.n	8008c7e <USBH_CtlReq+0x20>
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d00f      	beq.n	8008c9c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008c7c:	e027      	b.n	8008cce <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2202      	movs	r2, #2
 8008c94:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008c96:	2301      	movs	r3, #1
 8008c98:	75fb      	strb	r3, [r7, #23]
      break;
 8008c9a:	e018      	b.n	8008cce <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f81b 	bl	8008cd8 <USBH_HandleControl>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <USBH_CtlReq+0x54>
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d106      	bne.n	8008cc0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	761a      	strb	r2, [r3, #24]
      break;
 8008cbe:	e005      	b.n	8008ccc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d102      	bne.n	8008ccc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	709a      	strb	r2, [r3, #2]
      break;
 8008ccc:	bf00      	nop
  }
  return status;
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af02      	add	r7, sp, #8
 8008cde:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	7e1b      	ldrb	r3, [r3, #24]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	2b0a      	cmp	r3, #10
 8008cf0:	f200 8156 	bhi.w	8008fa0 <USBH_HandleControl+0x2c8>
 8008cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8008cfc <USBH_HandleControl+0x24>)
 8008cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfa:	bf00      	nop
 8008cfc:	08008d29 	.word	0x08008d29
 8008d00:	08008d43 	.word	0x08008d43
 8008d04:	08008dad 	.word	0x08008dad
 8008d08:	08008dd3 	.word	0x08008dd3
 8008d0c:	08008e0b 	.word	0x08008e0b
 8008d10:	08008e35 	.word	0x08008e35
 8008d14:	08008e87 	.word	0x08008e87
 8008d18:	08008ea9 	.word	0x08008ea9
 8008d1c:	08008ee5 	.word	0x08008ee5
 8008d20:	08008f0b 	.word	0x08008f0b
 8008d24:	08008f49 	.word	0x08008f49
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f103 0110 	add.w	r1, r3, #16
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	795b      	ldrb	r3, [r3, #5]
 8008d32:	461a      	mov	r2, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f943 	bl	8008fc0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	761a      	strb	r2, [r3, #24]
      break;
 8008d40:	e139      	b.n	8008fb6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	795b      	ldrb	r3, [r3, #5]
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fcc5 	bl	80096d8 <USBH_LL_GetURBState>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d11e      	bne.n	8008d96 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	7c1b      	ldrb	r3, [r3, #16]
 8008d5c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d60:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	8adb      	ldrh	r3, [r3, #22]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d6a:	7b7b      	ldrb	r3, [r7, #13]
 8008d6c:	2b80      	cmp	r3, #128	@ 0x80
 8008d6e:	d103      	bne.n	8008d78 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2203      	movs	r2, #3
 8008d74:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d76:	e115      	b.n	8008fa4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2205      	movs	r2, #5
 8008d7c:	761a      	strb	r2, [r3, #24]
      break;
 8008d7e:	e111      	b.n	8008fa4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008d80:	7b7b      	ldrb	r3, [r7, #13]
 8008d82:	2b80      	cmp	r3, #128	@ 0x80
 8008d84:	d103      	bne.n	8008d8e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2209      	movs	r2, #9
 8008d8a:	761a      	strb	r2, [r3, #24]
      break;
 8008d8c:	e10a      	b.n	8008fa4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2207      	movs	r2, #7
 8008d92:	761a      	strb	r2, [r3, #24]
      break;
 8008d94:	e106      	b.n	8008fa4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	d003      	beq.n	8008da4 <USBH_HandleControl+0xcc>
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	f040 8100 	bne.w	8008fa4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	220b      	movs	r2, #11
 8008da8:	761a      	strb	r2, [r3, #24]
      break;
 8008daa:	e0fb      	b.n	8008fa4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6899      	ldr	r1, [r3, #8]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	899a      	ldrh	r2, [r3, #12]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	791b      	ldrb	r3, [r3, #4]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f93a 	bl	800903e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2204      	movs	r2, #4
 8008dce:	761a      	strb	r2, [r3, #24]
      break;
 8008dd0:	e0f1      	b.n	8008fb6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	791b      	ldrb	r3, [r3, #4]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fc7d 	bl	80096d8 <USBH_LL_GetURBState>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d102      	bne.n	8008dee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2209      	movs	r2, #9
 8008dec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b05      	cmp	r3, #5
 8008df2:	d102      	bne.n	8008dfa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008df4:	2303      	movs	r3, #3
 8008df6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008df8:	e0d6      	b.n	8008fa8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	2b04      	cmp	r3, #4
 8008dfe:	f040 80d3 	bne.w	8008fa8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	220b      	movs	r2, #11
 8008e06:	761a      	strb	r2, [r3, #24]
      break;
 8008e08:	e0ce      	b.n	8008fa8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6899      	ldr	r1, [r3, #8]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	899a      	ldrh	r2, [r3, #12]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	795b      	ldrb	r3, [r3, #5]
 8008e16:	2001      	movs	r0, #1
 8008e18:	9000      	str	r0, [sp, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f8ea 	bl	8008ff4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2206      	movs	r2, #6
 8008e30:	761a      	strb	r2, [r3, #24]
      break;
 8008e32:	e0c0      	b.n	8008fb6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	795b      	ldrb	r3, [r3, #5]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fc4c 	bl	80096d8 <USBH_LL_GetURBState>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d103      	bne.n	8008e52 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2207      	movs	r2, #7
 8008e4e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e50:	e0ac      	b.n	8008fac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	2b05      	cmp	r3, #5
 8008e56:	d105      	bne.n	8008e64 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	220c      	movs	r2, #12
 8008e5c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	73fb      	strb	r3, [r7, #15]
      break;
 8008e62:	e0a3      	b.n	8008fac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d103      	bne.n	8008e72 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2205      	movs	r2, #5
 8008e6e:	761a      	strb	r2, [r3, #24]
      break;
 8008e70:	e09c      	b.n	8008fac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	2b04      	cmp	r3, #4
 8008e76:	f040 8099 	bne.w	8008fac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	220b      	movs	r2, #11
 8008e7e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008e80:	2302      	movs	r3, #2
 8008e82:	73fb      	strb	r3, [r7, #15]
      break;
 8008e84:	e092      	b.n	8008fac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	791b      	ldrb	r3, [r3, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f8d5 	bl	800903e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2208      	movs	r2, #8
 8008ea4:	761a      	strb	r2, [r3, #24]

      break;
 8008ea6:	e086      	b.n	8008fb6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	791b      	ldrb	r3, [r3, #4]
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fc12 	bl	80096d8 <USBH_LL_GetURBState>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d105      	bne.n	8008eca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	220d      	movs	r2, #13
 8008ec2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ec8:	e072      	b.n	8008fb0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d103      	bne.n	8008ed8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	220b      	movs	r2, #11
 8008ed4:	761a      	strb	r2, [r3, #24]
      break;
 8008ed6:	e06b      	b.n	8008fb0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b05      	cmp	r3, #5
 8008edc:	d168      	bne.n	8008fb0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee2:	e065      	b.n	8008fb0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	795b      	ldrb	r3, [r3, #5]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	9200      	str	r2, [sp, #0]
 8008eec:	2200      	movs	r2, #0
 8008eee:	2100      	movs	r1, #0
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f87f 	bl	8008ff4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	220a      	movs	r2, #10
 8008f06:	761a      	strb	r2, [r3, #24]
      break;
 8008f08:	e055      	b.n	8008fb6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	795b      	ldrb	r3, [r3, #5]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fbe1 	bl	80096d8 <USBH_LL_GetURBState>
 8008f16:	4603      	mov	r3, r0
 8008f18:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d105      	bne.n	8008f2c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	220d      	movs	r2, #13
 8008f28:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f2a:	e043      	b.n	8008fb4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d103      	bne.n	8008f3a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2209      	movs	r2, #9
 8008f36:	761a      	strb	r2, [r3, #24]
      break;
 8008f38:	e03c      	b.n	8008fb4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d139      	bne.n	8008fb4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	220b      	movs	r2, #11
 8008f44:	761a      	strb	r2, [r3, #24]
      break;
 8008f46:	e035      	b.n	8008fb4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	7e5b      	ldrb	r3, [r3, #25]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	b2da      	uxtb	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	765a      	strb	r2, [r3, #25]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	7e5b      	ldrb	r3, [r3, #25]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d806      	bhi.n	8008f6a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f68:	e025      	b.n	8008fb6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f70:	2106      	movs	r1, #6
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	795b      	ldrb	r3, [r3, #5]
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f90c 	bl	80091a0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	791b      	ldrb	r3, [r3, #4]
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f906 	bl	80091a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f9e:	e00a      	b.n	8008fb6 <USBH_HandleControl+0x2de>

    default:
      break;
 8008fa0:	bf00      	nop
 8008fa2:	e008      	b.n	8008fb6 <USBH_HandleControl+0x2de>
      break;
 8008fa4:	bf00      	nop
 8008fa6:	e006      	b.n	8008fb6 <USBH_HandleControl+0x2de>
      break;
 8008fa8:	bf00      	nop
 8008faa:	e004      	b.n	8008fb6 <USBH_HandleControl+0x2de>
      break;
 8008fac:	bf00      	nop
 8008fae:	e002      	b.n	8008fb6 <USBH_HandleControl+0x2de>
      break;
 8008fb0:	bf00      	nop
 8008fb2:	e000      	b.n	8008fb6 <USBH_HandleControl+0x2de>
      break;
 8008fb4:	bf00      	nop
  }

  return status;
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af04      	add	r7, sp, #16
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fce:	79f9      	ldrb	r1, [r7, #7]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	9303      	str	r3, [sp, #12]
 8008fd4:	2308      	movs	r3, #8
 8008fd6:	9302      	str	r3, [sp, #8]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 fb46 	bl	8009676 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af04      	add	r7, sp, #16
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	4611      	mov	r1, r2
 8009000:	461a      	mov	r2, r3
 8009002:	460b      	mov	r3, r1
 8009004:	80fb      	strh	r3, [r7, #6]
 8009006:	4613      	mov	r3, r2
 8009008:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009018:	7979      	ldrb	r1, [r7, #5]
 800901a:	7e3b      	ldrb	r3, [r7, #24]
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	88fb      	ldrh	r3, [r7, #6]
 8009020:	9302      	str	r3, [sp, #8]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	2301      	movs	r3, #1
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	2300      	movs	r3, #0
 800902c:	2200      	movs	r2, #0
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 fb21 	bl	8009676 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b088      	sub	sp, #32
 8009042:	af04      	add	r7, sp, #16
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	4611      	mov	r1, r2
 800904a:	461a      	mov	r2, r3
 800904c:	460b      	mov	r3, r1
 800904e:	80fb      	strh	r3, [r7, #6]
 8009050:	4613      	mov	r3, r2
 8009052:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009054:	7979      	ldrb	r1, [r7, #5]
 8009056:	2300      	movs	r3, #0
 8009058:	9303      	str	r3, [sp, #12]
 800905a:	88fb      	ldrh	r3, [r7, #6]
 800905c:	9302      	str	r3, [sp, #8]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	2301      	movs	r3, #1
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	2300      	movs	r3, #0
 8009068:	2201      	movs	r2, #1
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 fb03 	bl	8009676 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009070:	2300      	movs	r3, #0

}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b088      	sub	sp, #32
 800907e:	af04      	add	r7, sp, #16
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	4611      	mov	r1, r2
 8009086:	461a      	mov	r2, r3
 8009088:	460b      	mov	r3, r1
 800908a:	80fb      	strh	r3, [r7, #6]
 800908c:	4613      	mov	r3, r2
 800908e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800909e:	7979      	ldrb	r1, [r7, #5]
 80090a0:	7e3b      	ldrb	r3, [r7, #24]
 80090a2:	9303      	str	r3, [sp, #12]
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	9302      	str	r3, [sp, #8]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	2301      	movs	r3, #1
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	2302      	movs	r3, #2
 80090b2:	2200      	movs	r2, #0
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 fade 	bl	8009676 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af04      	add	r7, sp, #16
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4611      	mov	r1, r2
 80090d0:	461a      	mov	r2, r3
 80090d2:	460b      	mov	r3, r1
 80090d4:	80fb      	strh	r3, [r7, #6]
 80090d6:	4613      	mov	r3, r2
 80090d8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090da:	7979      	ldrb	r1, [r7, #5]
 80090dc:	2300      	movs	r3, #0
 80090de:	9303      	str	r3, [sp, #12]
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	9302      	str	r3, [sp, #8]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	2301      	movs	r3, #1
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	2302      	movs	r3, #2
 80090ee:	2201      	movs	r2, #1
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 fac0 	bl	8009676 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af04      	add	r7, sp, #16
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	4608      	mov	r0, r1
 800910a:	4611      	mov	r1, r2
 800910c:	461a      	mov	r2, r3
 800910e:	4603      	mov	r3, r0
 8009110:	70fb      	strb	r3, [r7, #3]
 8009112:	460b      	mov	r3, r1
 8009114:	70bb      	strb	r3, [r7, #2]
 8009116:	4613      	mov	r3, r2
 8009118:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800911a:	7878      	ldrb	r0, [r7, #1]
 800911c:	78ba      	ldrb	r2, [r7, #2]
 800911e:	78f9      	ldrb	r1, [r7, #3]
 8009120:	8b3b      	ldrh	r3, [r7, #24]
 8009122:	9302      	str	r3, [sp, #8]
 8009124:	7d3b      	ldrb	r3, [r7, #20]
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	7c3b      	ldrb	r3, [r7, #16]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	4603      	mov	r3, r0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa53 	bl	80095da <USBH_LL_OpenPipe>

  return USBH_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800914a:	78fb      	ldrb	r3, [r7, #3]
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa72 	bl	8009638 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b084      	sub	sp, #16
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f836 	bl	80091dc <USBH_GetFreePipe>
 8009170:	4603      	mov	r3, r0
 8009172:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009174:	89fb      	ldrh	r3, [r7, #14]
 8009176:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800917a:	4293      	cmp	r3, r2
 800917c:	d00a      	beq.n	8009194 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	89fb      	ldrh	r3, [r7, #14]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	33e0      	adds	r3, #224	@ 0xe0
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009194:	89fb      	ldrh	r3, [r7, #14]
 8009196:	b2db      	uxtb	r3, r3
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	2b0f      	cmp	r3, #15
 80091b0:	d80d      	bhi.n	80091ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80091b2:	78fb      	ldrb	r3, [r7, #3]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	33e0      	adds	r3, #224	@ 0xe0
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	33e0      	adds	r3, #224	@ 0xe0
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	440b      	add	r3, r1
 80091cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
 80091ec:	e00f      	b.n	800920e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	33e0      	adds	r3, #224	@ 0xe0
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d102      	bne.n	8009208 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	b29b      	uxth	r3, r3
 8009206:	e007      	b.n	8009218 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	3301      	adds	r3, #1
 800920c:	73fb      	strb	r3, [r7, #15]
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	2b0f      	cmp	r3, #15
 8009212:	d9ec      	bls.n	80091ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009214:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009228:	2201      	movs	r2, #1
 800922a:	490e      	ldr	r1, [pc, #56]	@ (8009264 <MX_USB_HOST_Init+0x40>)
 800922c:	480e      	ldr	r0, [pc, #56]	@ (8009268 <MX_USB_HOST_Init+0x44>)
 800922e:	f7fe fb15 	bl	800785c <USBH_Init>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009238:	f7f7 fc68 	bl	8000b0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800923c:	490b      	ldr	r1, [pc, #44]	@ (800926c <MX_USB_HOST_Init+0x48>)
 800923e:	480a      	ldr	r0, [pc, #40]	@ (8009268 <MX_USB_HOST_Init+0x44>)
 8009240:	f7fe fbb9 	bl	80079b6 <USBH_RegisterClass>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800924a:	f7f7 fc5f 	bl	8000b0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800924e:	4806      	ldr	r0, [pc, #24]	@ (8009268 <MX_USB_HOST_Init+0x44>)
 8009250:	f7fe fc3d 	bl	8007ace <USBH_Start>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800925a:	f7f7 fc57 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800925e:	bf00      	nop
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	08009285 	.word	0x08009285
 8009268:	200001dc 	.word	0x200001dc
 800926c:	2000000c 	.word	0x2000000c

08009270 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009274:	4802      	ldr	r0, [pc, #8]	@ (8009280 <MX_USB_HOST_Process+0x10>)
 8009276:	f7fe fc3b 	bl	8007af0 <USBH_Process>
}
 800927a:	bf00      	nop
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	200001dc 	.word	0x200001dc

08009284 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	3b01      	subs	r3, #1
 8009294:	2b04      	cmp	r3, #4
 8009296:	d819      	bhi.n	80092cc <USBH_UserProcess+0x48>
 8009298:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <USBH_UserProcess+0x1c>)
 800929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929e:	bf00      	nop
 80092a0:	080092cd 	.word	0x080092cd
 80092a4:	080092bd 	.word	0x080092bd
 80092a8:	080092cd 	.word	0x080092cd
 80092ac:	080092c5 	.word	0x080092c5
 80092b0:	080092b5 	.word	0x080092b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80092b4:	4b09      	ldr	r3, [pc, #36]	@ (80092dc <USBH_UserProcess+0x58>)
 80092b6:	2203      	movs	r2, #3
 80092b8:	701a      	strb	r2, [r3, #0]
  break;
 80092ba:	e008      	b.n	80092ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80092bc:	4b07      	ldr	r3, [pc, #28]	@ (80092dc <USBH_UserProcess+0x58>)
 80092be:	2202      	movs	r2, #2
 80092c0:	701a      	strb	r2, [r3, #0]
  break;
 80092c2:	e004      	b.n	80092ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80092c4:	4b05      	ldr	r3, [pc, #20]	@ (80092dc <USBH_UserProcess+0x58>)
 80092c6:	2201      	movs	r2, #1
 80092c8:	701a      	strb	r2, [r3, #0]
  break;
 80092ca:	e000      	b.n	80092ce <USBH_UserProcess+0x4a>

  default:
  break;
 80092cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80092ce:	bf00      	nop
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	200005b4 	.word	0x200005b4

080092e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08a      	sub	sp, #40	@ 0x28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092e8:	f107 0314 	add.w	r3, r7, #20
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	605a      	str	r2, [r3, #4]
 80092f2:	609a      	str	r2, [r3, #8]
 80092f4:	60da      	str	r2, [r3, #12]
 80092f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009300:	d147      	bne.n	8009392 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009302:	2300      	movs	r3, #0
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	4b25      	ldr	r3, [pc, #148]	@ (800939c <HAL_HCD_MspInit+0xbc>)
 8009308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800930a:	4a24      	ldr	r2, [pc, #144]	@ (800939c <HAL_HCD_MspInit+0xbc>)
 800930c:	f043 0301 	orr.w	r3, r3, #1
 8009310:	6313      	str	r3, [r2, #48]	@ 0x30
 8009312:	4b22      	ldr	r3, [pc, #136]	@ (800939c <HAL_HCD_MspInit+0xbc>)
 8009314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009316:	f003 0301 	and.w	r3, r3, #1
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800931e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009324:	2300      	movs	r3, #0
 8009326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009328:	2300      	movs	r3, #0
 800932a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800932c:	f107 0314 	add.w	r3, r7, #20
 8009330:	4619      	mov	r1, r3
 8009332:	481b      	ldr	r0, [pc, #108]	@ (80093a0 <HAL_HCD_MspInit+0xc0>)
 8009334:	f7f7 ffd8 	bl	80012e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009338:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800933c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800933e:	2302      	movs	r3, #2
 8009340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009342:	2300      	movs	r3, #0
 8009344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009346:	2300      	movs	r3, #0
 8009348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800934a:	230a      	movs	r3, #10
 800934c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800934e:	f107 0314 	add.w	r3, r7, #20
 8009352:	4619      	mov	r1, r3
 8009354:	4812      	ldr	r0, [pc, #72]	@ (80093a0 <HAL_HCD_MspInit+0xc0>)
 8009356:	f7f7 ffc7 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800935a:	4b10      	ldr	r3, [pc, #64]	@ (800939c <HAL_HCD_MspInit+0xbc>)
 800935c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800935e:	4a0f      	ldr	r2, [pc, #60]	@ (800939c <HAL_HCD_MspInit+0xbc>)
 8009360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009364:	6353      	str	r3, [r2, #52]	@ 0x34
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	4b0c      	ldr	r3, [pc, #48]	@ (800939c <HAL_HCD_MspInit+0xbc>)
 800936c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800936e:	4a0b      	ldr	r2, [pc, #44]	@ (800939c <HAL_HCD_MspInit+0xbc>)
 8009370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009374:	6453      	str	r3, [r2, #68]	@ 0x44
 8009376:	4b09      	ldr	r3, [pc, #36]	@ (800939c <HAL_HCD_MspInit+0xbc>)
 8009378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800937a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009382:	2200      	movs	r2, #0
 8009384:	2100      	movs	r1, #0
 8009386:	2043      	movs	r0, #67	@ 0x43
 8009388:	f7f7 ff77 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800938c:	2043      	movs	r0, #67	@ 0x43
 800938e:	f7f7 ff90 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009392:	bf00      	nop
 8009394:	3728      	adds	r7, #40	@ 0x28
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	40023800 	.word	0x40023800
 80093a0:	40020000 	.word	0x40020000

080093a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe ff73 	bl	800829e <USBH_LL_IncTimer>
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe ffab 	bl	800832a <USBH_LL_Connect>
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe ffb4 	bl	8008358 <USBH_LL_Disconnect>
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
 8009404:	4613      	mov	r3, r2
 8009406:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe ff65 	bl	80082f2 <USBH_LL_PortEnabled>
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe ff65 	bl	800830e <USBH_LL_PortDisabled>
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800945a:	2b01      	cmp	r3, #1
 800945c:	d12a      	bne.n	80094b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800945e:	4a18      	ldr	r2, [pc, #96]	@ (80094c0 <USBH_LL_Init+0x74>)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a15      	ldr	r2, [pc, #84]	@ (80094c0 <USBH_LL_Init+0x74>)
 800946a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800946e:	4b14      	ldr	r3, [pc, #80]	@ (80094c0 <USBH_LL_Init+0x74>)
 8009470:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009474:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009476:	4b12      	ldr	r3, [pc, #72]	@ (80094c0 <USBH_LL_Init+0x74>)
 8009478:	2208      	movs	r2, #8
 800947a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800947c:	4b10      	ldr	r3, [pc, #64]	@ (80094c0 <USBH_LL_Init+0x74>)
 800947e:	2201      	movs	r2, #1
 8009480:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009482:	4b0f      	ldr	r3, [pc, #60]	@ (80094c0 <USBH_LL_Init+0x74>)
 8009484:	2200      	movs	r2, #0
 8009486:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009488:	4b0d      	ldr	r3, [pc, #52]	@ (80094c0 <USBH_LL_Init+0x74>)
 800948a:	2202      	movs	r2, #2
 800948c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800948e:	4b0c      	ldr	r3, [pc, #48]	@ (80094c0 <USBH_LL_Init+0x74>)
 8009490:	2200      	movs	r2, #0
 8009492:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009494:	480a      	ldr	r0, [pc, #40]	@ (80094c0 <USBH_LL_Init+0x74>)
 8009496:	f7f8 f8dc 	bl	8001652 <HAL_HCD_Init>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80094a0:	f7f7 fb34 	bl	8000b0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80094a4:	4806      	ldr	r0, [pc, #24]	@ (80094c0 <USBH_LL_Init+0x74>)
 80094a6:	f7f8 fd3d 	bl	8001f24 <HAL_HCD_GetCurrentFrame>
 80094aa:	4603      	mov	r3, r0
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7fe fee6 	bl	8008280 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	200005b8 	.word	0x200005b8

080094c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f8 fcaa 	bl	8001e34 <HAL_HCD_Start>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 f95e 	bl	80097a8 <USBH_Get_USB_Status>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009510:	4618      	mov	r0, r3
 8009512:	f7f8 fcb2 	bl	8001e7a <HAL_HCD_Stop>
 8009516:	4603      	mov	r3, r0
 8009518:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	4618      	mov	r0, r3
 800951e:	f000 f943 	bl	80097a8 <USBH_Get_USB_Status>
 8009522:	4603      	mov	r3, r0
 8009524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009526:	7bbb      	ldrb	r3, [r7, #14]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009538:	2301      	movs	r3, #1
 800953a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009542:	4618      	mov	r0, r3
 8009544:	f7f8 fcfc 	bl	8001f40 <HAL_HCD_GetCurrentSpeed>
 8009548:	4603      	mov	r3, r0
 800954a:	2b02      	cmp	r3, #2
 800954c:	d00c      	beq.n	8009568 <USBH_LL_GetSpeed+0x38>
 800954e:	2b02      	cmp	r3, #2
 8009550:	d80d      	bhi.n	800956e <USBH_LL_GetSpeed+0x3e>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <USBH_LL_GetSpeed+0x2c>
 8009556:	2b01      	cmp	r3, #1
 8009558:	d003      	beq.n	8009562 <USBH_LL_GetSpeed+0x32>
 800955a:	e008      	b.n	800956e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
    break;
 8009560:	e008      	b.n	8009574 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009562:	2301      	movs	r3, #1
 8009564:	73fb      	strb	r3, [r7, #15]
    break;
 8009566:	e005      	b.n	8009574 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009568:	2302      	movs	r3, #2
 800956a:	73fb      	strb	r3, [r7, #15]
    break;
 800956c:	e002      	b.n	8009574 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800956e:	2301      	movs	r3, #1
 8009570:	73fb      	strb	r3, [r7, #15]
    break;
 8009572:	bf00      	nop
  }
  return  speed;
 8009574:	7bfb      	ldrb	r3, [r7, #15]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009594:	4618      	mov	r0, r3
 8009596:	f7f8 fc8d 	bl	8001eb4 <HAL_HCD_ResetPort>
 800959a:	4603      	mov	r3, r0
 800959c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 f901 	bl	80097a8 <USBH_Get_USB_Status>
 80095a6:	4603      	mov	r3, r0
 80095a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7f8 fc95 	bl	8001efa <HAL_HCD_HC_GetXferCount>
 80095d0:	4603      	mov	r3, r0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80095da:	b590      	push	{r4, r7, lr}
 80095dc:	b089      	sub	sp, #36	@ 0x24
 80095de:	af04      	add	r7, sp, #16
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	4608      	mov	r0, r1
 80095e4:	4611      	mov	r1, r2
 80095e6:	461a      	mov	r2, r3
 80095e8:	4603      	mov	r3, r0
 80095ea:	70fb      	strb	r3, [r7, #3]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70bb      	strb	r3, [r7, #2]
 80095f0:	4613      	mov	r3, r2
 80095f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009602:	787c      	ldrb	r4, [r7, #1]
 8009604:	78ba      	ldrb	r2, [r7, #2]
 8009606:	78f9      	ldrb	r1, [r7, #3]
 8009608:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800960a:	9302      	str	r3, [sp, #8]
 800960c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009610:	9301      	str	r3, [sp, #4]
 8009612:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	4623      	mov	r3, r4
 800961a:	f7f8 f881 	bl	8001720 <HAL_HCD_HC_Init>
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	4618      	mov	r0, r3
 8009626:	f000 f8bf 	bl	80097a8 <USBH_Get_USB_Status>
 800962a:	4603      	mov	r3, r0
 800962c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800962e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	bd90      	pop	{r4, r7, pc}

08009638 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009652:	78fa      	ldrb	r2, [r7, #3]
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7f8 f91a 	bl	8001890 <HAL_HCD_HC_Halt>
 800965c:	4603      	mov	r3, r0
 800965e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 f8a0 	bl	80097a8 <USBH_Get_USB_Status>
 8009668:	4603      	mov	r3, r0
 800966a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800966c:	7bbb      	ldrb	r3, [r7, #14]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009676:	b590      	push	{r4, r7, lr}
 8009678:	b089      	sub	sp, #36	@ 0x24
 800967a:	af04      	add	r7, sp, #16
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	4608      	mov	r0, r1
 8009680:	4611      	mov	r1, r2
 8009682:	461a      	mov	r2, r3
 8009684:	4603      	mov	r3, r0
 8009686:	70fb      	strb	r3, [r7, #3]
 8009688:	460b      	mov	r3, r1
 800968a:	70bb      	strb	r3, [r7, #2]
 800968c:	4613      	mov	r3, r2
 800968e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800969e:	787c      	ldrb	r4, [r7, #1]
 80096a0:	78ba      	ldrb	r2, [r7, #2]
 80096a2:	78f9      	ldrb	r1, [r7, #3]
 80096a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80096a8:	9303      	str	r3, [sp, #12]
 80096aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80096ac:	9302      	str	r3, [sp, #8]
 80096ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	4623      	mov	r3, r4
 80096ba:	f7f8 f90d 	bl	80018d8 <HAL_HCD_HC_SubmitRequest>
 80096be:	4603      	mov	r3, r0
 80096c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 f86f 	bl	80097a8 <USBH_Get_USB_Status>
 80096ca:	4603      	mov	r3, r0
 80096cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd90      	pop	{r4, r7, pc}

080096d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096ea:	78fa      	ldrb	r2, [r7, #3]
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7f8 fbee 	bl	8001ed0 <HAL_HCD_HC_GetURBState>
 80096f4:	4603      	mov	r3, r0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009710:	2b01      	cmp	r3, #1
 8009712:	d103      	bne.n	800971c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f872 	bl	8009800 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800971c:	20c8      	movs	r0, #200	@ 0xc8
 800971e:	f7f7 fcad 	bl	800107c <HAL_Delay>
  return USBH_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
 8009738:	4613      	mov	r3, r2
 800973a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009742:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009744:	78fa      	ldrb	r2, [r7, #3]
 8009746:	68f9      	ldr	r1, [r7, #12]
 8009748:	4613      	mov	r3, r2
 800974a:	011b      	lsls	r3, r3, #4
 800974c:	1a9b      	subs	r3, r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	440b      	add	r3, r1
 8009752:	3317      	adds	r3, #23
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800975a:	78fa      	ldrb	r2, [r7, #3]
 800975c:	68f9      	ldr	r1, [r7, #12]
 800975e:	4613      	mov	r3, r2
 8009760:	011b      	lsls	r3, r3, #4
 8009762:	1a9b      	subs	r3, r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	440b      	add	r3, r1
 8009768:	333c      	adds	r3, #60	@ 0x3c
 800976a:	78ba      	ldrb	r2, [r7, #2]
 800976c:	701a      	strb	r2, [r3, #0]
 800976e:	e009      	b.n	8009784 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009770:	78fa      	ldrb	r2, [r7, #3]
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	4613      	mov	r3, r2
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	1a9b      	subs	r3, r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	440b      	add	r3, r1
 800977e:	333d      	adds	r3, #61	@ 0x3d
 8009780:	78ba      	ldrb	r2, [r7, #2]
 8009782:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7f7 fc6e 	bl	800107c <HAL_Delay>
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097b6:	79fb      	ldrb	r3, [r7, #7]
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d817      	bhi.n	80097ec <USBH_Get_USB_Status+0x44>
 80097bc:	a201      	add	r2, pc, #4	@ (adr r2, 80097c4 <USBH_Get_USB_Status+0x1c>)
 80097be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c2:	bf00      	nop
 80097c4:	080097d5 	.word	0x080097d5
 80097c8:	080097db 	.word	0x080097db
 80097cc:	080097e1 	.word	0x080097e1
 80097d0:	080097e7 	.word	0x080097e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]
    break;
 80097d8:	e00b      	b.n	80097f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80097da:	2302      	movs	r3, #2
 80097dc:	73fb      	strb	r3, [r7, #15]
    break;
 80097de:	e008      	b.n	80097f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80097e0:	2301      	movs	r3, #1
 80097e2:	73fb      	strb	r3, [r7, #15]
    break;
 80097e4:	e005      	b.n	80097f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80097e6:	2302      	movs	r3, #2
 80097e8:	73fb      	strb	r3, [r7, #15]
    break;
 80097ea:	e002      	b.n	80097f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80097ec:	2302      	movs	r3, #2
 80097ee:	73fb      	strb	r3, [r7, #15]
    break;
 80097f0:	bf00      	nop
  }
  return usb_status;
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d102      	bne.n	800981a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]
 8009818:	e001      	b.n	800981e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800981a:	2301      	movs	r3, #1
 800981c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	461a      	mov	r2, r3
 8009822:	2101      	movs	r1, #1
 8009824:	4803      	ldr	r0, [pc, #12]	@ (8009834 <MX_DriverVbusFS+0x34>)
 8009826:	f7f7 fefb 	bl	8001620 <HAL_GPIO_WritePin>
}
 800982a:	bf00      	nop
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	40020800 	.word	0x40020800

08009838 <malloc>:
 8009838:	4b02      	ldr	r3, [pc, #8]	@ (8009844 <malloc+0xc>)
 800983a:	4601      	mov	r1, r0
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f000 b82d 	b.w	800989c <_malloc_r>
 8009842:	bf00      	nop
 8009844:	2000002c 	.word	0x2000002c

08009848 <free>:
 8009848:	4b02      	ldr	r3, [pc, #8]	@ (8009854 <free+0xc>)
 800984a:	4601      	mov	r1, r0
 800984c:	6818      	ldr	r0, [r3, #0]
 800984e:	f000 b8f5 	b.w	8009a3c <_free_r>
 8009852:	bf00      	nop
 8009854:	2000002c 	.word	0x2000002c

08009858 <sbrk_aligned>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	4e0f      	ldr	r6, [pc, #60]	@ (8009898 <sbrk_aligned+0x40>)
 800985c:	460c      	mov	r4, r1
 800985e:	6831      	ldr	r1, [r6, #0]
 8009860:	4605      	mov	r5, r0
 8009862:	b911      	cbnz	r1, 800986a <sbrk_aligned+0x12>
 8009864:	f000 f8ae 	bl	80099c4 <_sbrk_r>
 8009868:	6030      	str	r0, [r6, #0]
 800986a:	4621      	mov	r1, r4
 800986c:	4628      	mov	r0, r5
 800986e:	f000 f8a9 	bl	80099c4 <_sbrk_r>
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	d103      	bne.n	800987e <sbrk_aligned+0x26>
 8009876:	f04f 34ff 	mov.w	r4, #4294967295
 800987a:	4620      	mov	r0, r4
 800987c:	bd70      	pop	{r4, r5, r6, pc}
 800987e:	1cc4      	adds	r4, r0, #3
 8009880:	f024 0403 	bic.w	r4, r4, #3
 8009884:	42a0      	cmp	r0, r4
 8009886:	d0f8      	beq.n	800987a <sbrk_aligned+0x22>
 8009888:	1a21      	subs	r1, r4, r0
 800988a:	4628      	mov	r0, r5
 800988c:	f000 f89a 	bl	80099c4 <_sbrk_r>
 8009890:	3001      	adds	r0, #1
 8009892:	d1f2      	bne.n	800987a <sbrk_aligned+0x22>
 8009894:	e7ef      	b.n	8009876 <sbrk_aligned+0x1e>
 8009896:	bf00      	nop
 8009898:	20000998 	.word	0x20000998

0800989c <_malloc_r>:
 800989c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a0:	1ccd      	adds	r5, r1, #3
 80098a2:	f025 0503 	bic.w	r5, r5, #3
 80098a6:	3508      	adds	r5, #8
 80098a8:	2d0c      	cmp	r5, #12
 80098aa:	bf38      	it	cc
 80098ac:	250c      	movcc	r5, #12
 80098ae:	2d00      	cmp	r5, #0
 80098b0:	4606      	mov	r6, r0
 80098b2:	db01      	blt.n	80098b8 <_malloc_r+0x1c>
 80098b4:	42a9      	cmp	r1, r5
 80098b6:	d904      	bls.n	80098c2 <_malloc_r+0x26>
 80098b8:	230c      	movs	r3, #12
 80098ba:	6033      	str	r3, [r6, #0]
 80098bc:	2000      	movs	r0, #0
 80098be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009998 <_malloc_r+0xfc>
 80098c6:	f000 f869 	bl	800999c <__malloc_lock>
 80098ca:	f8d8 3000 	ldr.w	r3, [r8]
 80098ce:	461c      	mov	r4, r3
 80098d0:	bb44      	cbnz	r4, 8009924 <_malloc_r+0x88>
 80098d2:	4629      	mov	r1, r5
 80098d4:	4630      	mov	r0, r6
 80098d6:	f7ff ffbf 	bl	8009858 <sbrk_aligned>
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	4604      	mov	r4, r0
 80098de:	d158      	bne.n	8009992 <_malloc_r+0xf6>
 80098e0:	f8d8 4000 	ldr.w	r4, [r8]
 80098e4:	4627      	mov	r7, r4
 80098e6:	2f00      	cmp	r7, #0
 80098e8:	d143      	bne.n	8009972 <_malloc_r+0xd6>
 80098ea:	2c00      	cmp	r4, #0
 80098ec:	d04b      	beq.n	8009986 <_malloc_r+0xea>
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	4639      	mov	r1, r7
 80098f2:	4630      	mov	r0, r6
 80098f4:	eb04 0903 	add.w	r9, r4, r3
 80098f8:	f000 f864 	bl	80099c4 <_sbrk_r>
 80098fc:	4581      	cmp	r9, r0
 80098fe:	d142      	bne.n	8009986 <_malloc_r+0xea>
 8009900:	6821      	ldr	r1, [r4, #0]
 8009902:	1a6d      	subs	r5, r5, r1
 8009904:	4629      	mov	r1, r5
 8009906:	4630      	mov	r0, r6
 8009908:	f7ff ffa6 	bl	8009858 <sbrk_aligned>
 800990c:	3001      	adds	r0, #1
 800990e:	d03a      	beq.n	8009986 <_malloc_r+0xea>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	442b      	add	r3, r5
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	f8d8 3000 	ldr.w	r3, [r8]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	bb62      	cbnz	r2, 8009978 <_malloc_r+0xdc>
 800991e:	f8c8 7000 	str.w	r7, [r8]
 8009922:	e00f      	b.n	8009944 <_malloc_r+0xa8>
 8009924:	6822      	ldr	r2, [r4, #0]
 8009926:	1b52      	subs	r2, r2, r5
 8009928:	d420      	bmi.n	800996c <_malloc_r+0xd0>
 800992a:	2a0b      	cmp	r2, #11
 800992c:	d917      	bls.n	800995e <_malloc_r+0xc2>
 800992e:	1961      	adds	r1, r4, r5
 8009930:	42a3      	cmp	r3, r4
 8009932:	6025      	str	r5, [r4, #0]
 8009934:	bf18      	it	ne
 8009936:	6059      	strne	r1, [r3, #4]
 8009938:	6863      	ldr	r3, [r4, #4]
 800993a:	bf08      	it	eq
 800993c:	f8c8 1000 	streq.w	r1, [r8]
 8009940:	5162      	str	r2, [r4, r5]
 8009942:	604b      	str	r3, [r1, #4]
 8009944:	4630      	mov	r0, r6
 8009946:	f000 f82f 	bl	80099a8 <__malloc_unlock>
 800994a:	f104 000b 	add.w	r0, r4, #11
 800994e:	1d23      	adds	r3, r4, #4
 8009950:	f020 0007 	bic.w	r0, r0, #7
 8009954:	1ac2      	subs	r2, r0, r3
 8009956:	bf1c      	itt	ne
 8009958:	1a1b      	subne	r3, r3, r0
 800995a:	50a3      	strne	r3, [r4, r2]
 800995c:	e7af      	b.n	80098be <_malloc_r+0x22>
 800995e:	6862      	ldr	r2, [r4, #4]
 8009960:	42a3      	cmp	r3, r4
 8009962:	bf0c      	ite	eq
 8009964:	f8c8 2000 	streq.w	r2, [r8]
 8009968:	605a      	strne	r2, [r3, #4]
 800996a:	e7eb      	b.n	8009944 <_malloc_r+0xa8>
 800996c:	4623      	mov	r3, r4
 800996e:	6864      	ldr	r4, [r4, #4]
 8009970:	e7ae      	b.n	80098d0 <_malloc_r+0x34>
 8009972:	463c      	mov	r4, r7
 8009974:	687f      	ldr	r7, [r7, #4]
 8009976:	e7b6      	b.n	80098e6 <_malloc_r+0x4a>
 8009978:	461a      	mov	r2, r3
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	42a3      	cmp	r3, r4
 800997e:	d1fb      	bne.n	8009978 <_malloc_r+0xdc>
 8009980:	2300      	movs	r3, #0
 8009982:	6053      	str	r3, [r2, #4]
 8009984:	e7de      	b.n	8009944 <_malloc_r+0xa8>
 8009986:	230c      	movs	r3, #12
 8009988:	6033      	str	r3, [r6, #0]
 800998a:	4630      	mov	r0, r6
 800998c:	f000 f80c 	bl	80099a8 <__malloc_unlock>
 8009990:	e794      	b.n	80098bc <_malloc_r+0x20>
 8009992:	6005      	str	r5, [r0, #0]
 8009994:	e7d6      	b.n	8009944 <_malloc_r+0xa8>
 8009996:	bf00      	nop
 8009998:	2000099c 	.word	0x2000099c

0800999c <__malloc_lock>:
 800999c:	4801      	ldr	r0, [pc, #4]	@ (80099a4 <__malloc_lock+0x8>)
 800999e:	f000 b84b 	b.w	8009a38 <__retarget_lock_acquire_recursive>
 80099a2:	bf00      	nop
 80099a4:	20000adc 	.word	0x20000adc

080099a8 <__malloc_unlock>:
 80099a8:	4801      	ldr	r0, [pc, #4]	@ (80099b0 <__malloc_unlock+0x8>)
 80099aa:	f000 b846 	b.w	8009a3a <__retarget_lock_release_recursive>
 80099ae:	bf00      	nop
 80099b0:	20000adc 	.word	0x20000adc

080099b4 <memset>:
 80099b4:	4402      	add	r2, r0
 80099b6:	4603      	mov	r3, r0
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d100      	bne.n	80099be <memset+0xa>
 80099bc:	4770      	bx	lr
 80099be:	f803 1b01 	strb.w	r1, [r3], #1
 80099c2:	e7f9      	b.n	80099b8 <memset+0x4>

080099c4 <_sbrk_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d06      	ldr	r5, [pc, #24]	@ (80099e0 <_sbrk_r+0x1c>)
 80099c8:	2300      	movs	r3, #0
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	602b      	str	r3, [r5, #0]
 80099d0:	f7f7 fa70 	bl	8000eb4 <_sbrk>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_sbrk_r+0x1a>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_sbrk_r+0x1a>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	20000ad8 	.word	0x20000ad8

080099e4 <__errno>:
 80099e4:	4b01      	ldr	r3, [pc, #4]	@ (80099ec <__errno+0x8>)
 80099e6:	6818      	ldr	r0, [r3, #0]
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	2000002c 	.word	0x2000002c

080099f0 <__libc_init_array>:
 80099f0:	b570      	push	{r4, r5, r6, lr}
 80099f2:	4d0d      	ldr	r5, [pc, #52]	@ (8009a28 <__libc_init_array+0x38>)
 80099f4:	4c0d      	ldr	r4, [pc, #52]	@ (8009a2c <__libc_init_array+0x3c>)
 80099f6:	1b64      	subs	r4, r4, r5
 80099f8:	10a4      	asrs	r4, r4, #2
 80099fa:	2600      	movs	r6, #0
 80099fc:	42a6      	cmp	r6, r4
 80099fe:	d109      	bne.n	8009a14 <__libc_init_array+0x24>
 8009a00:	4d0b      	ldr	r5, [pc, #44]	@ (8009a30 <__libc_init_array+0x40>)
 8009a02:	4c0c      	ldr	r4, [pc, #48]	@ (8009a34 <__libc_init_array+0x44>)
 8009a04:	f000 f864 	bl	8009ad0 <_init>
 8009a08:	1b64      	subs	r4, r4, r5
 8009a0a:	10a4      	asrs	r4, r4, #2
 8009a0c:	2600      	movs	r6, #0
 8009a0e:	42a6      	cmp	r6, r4
 8009a10:	d105      	bne.n	8009a1e <__libc_init_array+0x2e>
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a18:	4798      	blx	r3
 8009a1a:	3601      	adds	r6, #1
 8009a1c:	e7ee      	b.n	80099fc <__libc_init_array+0xc>
 8009a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a22:	4798      	blx	r3
 8009a24:	3601      	adds	r6, #1
 8009a26:	e7f2      	b.n	8009a0e <__libc_init_array+0x1e>
 8009a28:	08009b0c 	.word	0x08009b0c
 8009a2c:	08009b0c 	.word	0x08009b0c
 8009a30:	08009b0c 	.word	0x08009b0c
 8009a34:	08009b10 	.word	0x08009b10

08009a38 <__retarget_lock_acquire_recursive>:
 8009a38:	4770      	bx	lr

08009a3a <__retarget_lock_release_recursive>:
 8009a3a:	4770      	bx	lr

08009a3c <_free_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4605      	mov	r5, r0
 8009a40:	2900      	cmp	r1, #0
 8009a42:	d041      	beq.n	8009ac8 <_free_r+0x8c>
 8009a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a48:	1f0c      	subs	r4, r1, #4
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfb8      	it	lt
 8009a4e:	18e4      	addlt	r4, r4, r3
 8009a50:	f7ff ffa4 	bl	800999c <__malloc_lock>
 8009a54:	4a1d      	ldr	r2, [pc, #116]	@ (8009acc <_free_r+0x90>)
 8009a56:	6813      	ldr	r3, [r2, #0]
 8009a58:	b933      	cbnz	r3, 8009a68 <_free_r+0x2c>
 8009a5a:	6063      	str	r3, [r4, #4]
 8009a5c:	6014      	str	r4, [r2, #0]
 8009a5e:	4628      	mov	r0, r5
 8009a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a64:	f7ff bfa0 	b.w	80099a8 <__malloc_unlock>
 8009a68:	42a3      	cmp	r3, r4
 8009a6a:	d908      	bls.n	8009a7e <_free_r+0x42>
 8009a6c:	6820      	ldr	r0, [r4, #0]
 8009a6e:	1821      	adds	r1, r4, r0
 8009a70:	428b      	cmp	r3, r1
 8009a72:	bf01      	itttt	eq
 8009a74:	6819      	ldreq	r1, [r3, #0]
 8009a76:	685b      	ldreq	r3, [r3, #4]
 8009a78:	1809      	addeq	r1, r1, r0
 8009a7a:	6021      	streq	r1, [r4, #0]
 8009a7c:	e7ed      	b.n	8009a5a <_free_r+0x1e>
 8009a7e:	461a      	mov	r2, r3
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	b10b      	cbz	r3, 8009a88 <_free_r+0x4c>
 8009a84:	42a3      	cmp	r3, r4
 8009a86:	d9fa      	bls.n	8009a7e <_free_r+0x42>
 8009a88:	6811      	ldr	r1, [r2, #0]
 8009a8a:	1850      	adds	r0, r2, r1
 8009a8c:	42a0      	cmp	r0, r4
 8009a8e:	d10b      	bne.n	8009aa8 <_free_r+0x6c>
 8009a90:	6820      	ldr	r0, [r4, #0]
 8009a92:	4401      	add	r1, r0
 8009a94:	1850      	adds	r0, r2, r1
 8009a96:	4283      	cmp	r3, r0
 8009a98:	6011      	str	r1, [r2, #0]
 8009a9a:	d1e0      	bne.n	8009a5e <_free_r+0x22>
 8009a9c:	6818      	ldr	r0, [r3, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	6053      	str	r3, [r2, #4]
 8009aa2:	4408      	add	r0, r1
 8009aa4:	6010      	str	r0, [r2, #0]
 8009aa6:	e7da      	b.n	8009a5e <_free_r+0x22>
 8009aa8:	d902      	bls.n	8009ab0 <_free_r+0x74>
 8009aaa:	230c      	movs	r3, #12
 8009aac:	602b      	str	r3, [r5, #0]
 8009aae:	e7d6      	b.n	8009a5e <_free_r+0x22>
 8009ab0:	6820      	ldr	r0, [r4, #0]
 8009ab2:	1821      	adds	r1, r4, r0
 8009ab4:	428b      	cmp	r3, r1
 8009ab6:	bf04      	itt	eq
 8009ab8:	6819      	ldreq	r1, [r3, #0]
 8009aba:	685b      	ldreq	r3, [r3, #4]
 8009abc:	6063      	str	r3, [r4, #4]
 8009abe:	bf04      	itt	eq
 8009ac0:	1809      	addeq	r1, r1, r0
 8009ac2:	6021      	streq	r1, [r4, #0]
 8009ac4:	6054      	str	r4, [r2, #4]
 8009ac6:	e7ca      	b.n	8009a5e <_free_r+0x22>
 8009ac8:	bd38      	pop	{r3, r4, r5, pc}
 8009aca:	bf00      	nop
 8009acc:	2000099c 	.word	0x2000099c

08009ad0 <_init>:
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad2:	bf00      	nop
 8009ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad6:	bc08      	pop	{r3}
 8009ad8:	469e      	mov	lr, r3
 8009ada:	4770      	bx	lr

08009adc <_fini>:
 8009adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ade:	bf00      	nop
 8009ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae2:	bc08      	pop	{r3}
 8009ae4:	469e      	mov	lr, r3
 8009ae6:	4770      	bx	lr
